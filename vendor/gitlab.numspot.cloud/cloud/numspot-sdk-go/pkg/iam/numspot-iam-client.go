// Package iam provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package iam

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes  = "BasicAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ErrorDocumentationUrl.
const (
	HttpsdocsNumspotClouddocsdomainsclouderrorsAmbiguousGranularPermissionElements ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#ambiguous_granular_permission_elements"
	HttpsdocsNumspotClouddocsdomainsclouderrorsAmbiguousPermissionElements         ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#ambiguous_permission_elements"
	HttpsdocsNumspotClouddocsdomainsclouderrorsAmbiguousRoleElements               ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#ambiguous_role_elements"
	HttpsdocsNumspotClouddocsdomainsclouderrorsDuplicateResource                   ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#duplicate_resource"
	HttpsdocsNumspotClouddocsdomainsclouderrorsDuplicateRole                       ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#duplicate_role"
	HttpsdocsNumspotClouddocsdomainsclouderrorsForbidden                           ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#forbidden"
	HttpsdocsNumspotClouddocsdomainsclouderrorsForbiddenAccess                     ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#forbidden_access"
	HttpsdocsNumspotClouddocsdomainsclouderrorsIdentityNotFound                    ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#identity_not_found"
	HttpsdocsNumspotClouddocsdomainsclouderrorsInactiveToken                       ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#inactive_token"
	HttpsdocsNumspotClouddocsdomainsclouderrorsInternalServerError                 ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#internal_server_error"
	HttpsdocsNumspotClouddocsdomainsclouderrorsInvalidParameter                    ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#invalid_parameter"
	HttpsdocsNumspotClouddocsdomainsclouderrorsMethodNotAllowed                    ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#method_not_allowed"
	HttpsdocsNumspotClouddocsdomainsclouderrorsMissingRoles                        ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#missing_roles"
	HttpsdocsNumspotClouddocsdomainsclouderrorsNamespaceNotFound                   ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#namespace_not_found"
	HttpsdocsNumspotClouddocsdomainsclouderrorsNotInTenantRoles                    ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#not_in_tenant_roles"
	HttpsdocsNumspotClouddocsdomainsclouderrorsPermissionNotFound                  ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#permission_not_found"
	HttpsdocsNumspotClouddocsdomainsclouderrorsResourceNotFound                    ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#resource_not_found"
	HttpsdocsNumspotClouddocsdomainsclouderrorsRoleNotFound                        ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#role_not_found"
	HttpsdocsNumspotClouddocsdomainsclouderrorsUnauthenticatedAccess               ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#unauthenticated_access"
	HttpsdocsNumspotClouddocsdomainsclouderrorsUnexpectedTokenUsage                ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#unexpected_token_usage"
	HttpsdocsNumspotClouddocsdomainsclouderrorsUriTooLong                          ErrorDocumentationUrl = "https://docs.numspot.cloud/docs/domains/cloud/errors#uri_too_long"
)

// Defines values for ImmutableSpaceStatus.
const (
	ImmutableSpaceStatusFAILED  ImmutableSpaceStatus = "FAILED"
	ImmutableSpaceStatusQUEUED  ImmutableSpaceStatus = "QUEUED"
	ImmutableSpaceStatusREADY   ImmutableSpaceStatus = "READY"
	ImmutableSpaceStatusRUNNING ImmutableSpaceStatus = "RUNNING"
)

// Defines values for SpaceStatus.
const (
	SpaceStatusFAILED  SpaceStatus = "FAILED"
	SpaceStatusQUEUED  SpaceStatus = "QUEUED"
	SpaceStatusREADY   SpaceStatus = "READY"
	SpaceStatusRUNNING SpaceStatus = "RUNNING"
)

// Defines values for SubjectType.
const (
	ServiceAccounts SubjectType = "serviceAccounts"
	Users           SubjectType = "users"
)

// ACL defines model for ACL.
type ACL struct {
	// PermissionId id of the permission
	PermissionId openapi_types.UUID `json:"permissionId"`

	// Resource Type of the resource being accessed
	Resource string `json:"resource"`

	// ResourceId Unique identifier of a resource
	ResourceId string `json:"resourceId"`

	// Service Name of the service making the call
	Service string `json:"service"`

	// Subresource Specific type of the subresource within the main resource
	Subresource *string `json:"subresource,omitempty"`
}

// ACLList List of ACLs.
type ACLList struct {
	Items *[]ACL `json:"items,omitempty"`
}

// ACLPaginatedList defines model for ACLPaginatedList.
type ACLPaginatedList struct {
	Items []ACL `json:"items"`

	// NextPageToken This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`

	// TotalSize Equivalent to int32
	TotalSize *Int `json:"totalSize,omitempty"`
}

// BadRequestError defines model for BadRequestError.
type BadRequestError struct {
	// Detail Human-readable explanation specific to this occurrence of the problem.
	Detail   *string `json:"detail,omitempty"`
	Instance *Url    `json:"instance,omitempty"`

	// Title Human-readable summary of the problem type.
	Title string `json:"title"`

	// Type Documentation URL for the domain error
	Type ErrorDocumentationUrl `json:"type"`

	// Violations Array of violations to provide a per-field detail.
	Violations *[]Violation `json:"violations,omitempty"`
}

// CreateSpace defines model for CreateSpace.
type CreateSpace struct {
	// Description Space description
	Description string `json:"description"`

	// Name Space name
	Name string `json:"name"`
}

// CreatedServiceAccount defines model for CreatedServiceAccount.
type CreatedServiceAccount struct {
	// Id Service account ID
	Id string `json:"id"`

	// Name Service Accounts name
	Name string `json:"name"`

	// Secret Service account secret.
	Secret string `json:"secret"`
}

// DateTime defines model for DateTime.
type DateTime = time.Time

// Email defines model for Email.
type Email = openapi_types.Email

// Error For HTTP errors, we implement the https://datatracker.ietf.org/doc/html/rfc9457
type Error struct {
	// Detail Human-readable explanation specific to this occurrence of the problem.
	Detail   *string `json:"detail,omitempty"`
	Instance *Url    `json:"instance,omitempty"`

	// Title Human-readable summary of the problem type.
	Title string `json:"title"`

	// Type Documentation URL for the domain error
	Type ErrorDocumentationUrl `json:"type"`
}

// ErrorDocumentationUrl Documentation URL for the domain error
type ErrorDocumentationUrl string

// ErrorOauth2 defines model for ErrorOauth2.
type ErrorOauth2 struct {
	// Error The error type.
	Error string `json:"error"`

	// ErrorDescription A human-readable explanation specific to this occurrence of the problem.
	ErrorDescription *string `json:"error_description,omitempty"`
}

// GranularPermission defines model for GranularPermission.
type GranularPermission struct {
	// Action Type of action (e.g., owners, editors, getters)
	Action string `json:"action"`

	// ObjectId ID of the object
	ObjectId string `json:"objectId"`
}

// GranularPolicyList defines model for GranularPolicyList.
type GranularPolicyList = []GranularPermission

// IAMGranularPolicyList defines model for IAMGranularPolicyList.
type IAMGranularPolicyList struct {
	Items []GranularPermission `json:"items"`

	// NextPageToken This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`

	// TotalSize Equivalent to int32
	TotalSize *Int `json:"totalSize,omitempty"`
}

// IAMPolicy defines model for IAMPolicy.
type IAMPolicy struct {
	// Permissions List of permission UUIDs
	Permissions *[]openapi_types.UUID `json:"permissions,omitempty"`

	// Roles List of role UUIDs
	Roles *[]openapi_types.UUID `json:"roles,omitempty"`
}

// IdentitiesIdsList defines model for IdentitiesIdsList.
type IdentitiesIdsList struct {
	Items []openapi_types.UUID `json:"items"`
}

// ImmutableSpace defines model for ImmutableSpace.
type ImmutableSpace struct {
	CreatedOn DateTime `json:"createdOn"`

	// Id Internal ID
	Id openapi_types.UUID `json:"id"`

	// OrganisationId Organisation_id
	OrganisationId openapi_types.UUID `json:"organisationId"`

	// Status status of the space, the space can only be used when the status is ready.
	Status    ImmutableSpaceStatus `json:"status"`
	UpdatedOn DateTime             `json:"updatedOn"`
}

// ImmutableSpaceStatus status of the space, the space can only be used when the status is ready.
type ImmutableSpaceStatus string

// Int Equivalent to int32
type Int = int32

// IntrospectResp defines model for IntrospectResp.
type IntrospectResp struct {
	// Active A boolean value indicating whether the token is active or not.
	Active bool `json:"active"`

	// Aud The intended audience of the token, specifying who the token is intended for.
	Aud *[]string `json:"aud,omitempty"`

	// ClientId The unique identifier of the client application that requested the token.
	ClientId *string `json:"client_id,omitempty"`

	// Exp The expiration time of the token in seconds since the Unix epoch.
	Exp *int `json:"exp,omitempty"`

	// Iat The issued-at time of the token in seconds since the Unix epoch.
	Iat *int `json:"iat,omitempty"`

	// Iss The issuer of the token, identify the authorization server that issued the token.
	Iss *string `json:"iss,omitempty"`

	// Nbf The not-before time of the token in seconds since the Unix epoch, indicating the earliest time the token can be used.
	Nbf *int `json:"nbf,omitempty"`

	// Scope The scope of the token, defining the permissions it grants.
	Scope *string `json:"scope,omitempty"`

	// Sub The subject of the token, typically the user or resource the token is issued for.
	Sub *string `json:"sub,omitempty"`

	// TokenType Indicate the type of the token, such as "Bearer".
	TokenType *string `json:"token_type,omitempty"`

	// TokenUse Specify the intended use of the token, such as "access" or "refresh".
	TokenUse *string `json:"token_use,omitempty"`
}

// MutableSpace defines model for MutableSpace.
type MutableSpace struct {
	// Description Space description
	Description *string `json:"description,omitempty"`

	// Name Space name
	Name *string `json:"name,omitempty"`
}

// OrganisationSimple defines model for OrganisationSimple.
type OrganisationSimple struct {
	// Id Organisation identifier
	Id openapi_types.UUID `json:"id"`
}

// OrganisationSimplePaginatedList defines model for OrganisationSimplePaginatedList.
type OrganisationSimplePaginatedList struct {
	Items []OrganisationSimple `json:"items"`

	// NextPageToken This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`

	// TotalSize Equivalent to int32
	TotalSize *Int `json:"totalSize,omitempty"`
}

// PaginatedList Represent the common attributes of a paginated list, to be used in an allOf with the specific items attribute of the desired type.
type PaginatedList struct {
	// NextPageToken This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`

	// TotalSize Equivalent to int32
	TotalSize *Int `json:"totalSize,omitempty"`
}

// Permission A permission in the <service>[.<resource>.[<subResource>](0,1)](0,1).<action> form
type Permission struct {
	// Action Allowed operation type
	Action string `json:"action"`

	// Description Human-readable description
	Description string `json:"description"`

	// Name Human-readable name
	Name     string  `json:"name"`
	Resource *string `json:"resource,omitempty"`

	// Service Service name
	Service     string  `json:"service"`
	SubResource *string `json:"subResource,omitempty"`
}

// PermissionsPaginatedList defines model for PermissionsPaginatedList.
type PermissionsPaginatedList struct {
	Items []RegisteredPermission `json:"items"`

	// NextPageToken This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`

	// TotalSize Equivalent to int32
	TotalSize *Int `json:"totalSize,omitempty"`
}

// RecoveryLink defines model for RecoveryLink.
type RecoveryLink struct {
	Expiration DateTime `json:"expiration"`

	// Link Recovery link correctly generated
	Link string `json:"link"`
}

// Registered defines model for Registered.
type Registered struct {
	// CreatedOn creation date
	CreatedOn time.Time `json:"createdOn"`

	// UpdatedOn last update
	UpdatedOn time.Time `json:"updatedOn"`

	// Uuid Internal ID
	Uuid openapi_types.UUID `json:"uuid"`
}

// RegisteredPermission defines model for RegisteredPermission.
type RegisteredPermission struct {
	// Action Allowed operation type
	Action string `json:"action"`

	// CreatedOn creation date
	CreatedOn time.Time `json:"createdOn"`

	// Description Human-readable description
	Description string `json:"description"`

	// Name Human-readable name
	Name     string  `json:"name"`
	Resource *string `json:"resource,omitempty"`

	// Service Service name
	Service     string  `json:"service"`
	SubResource *string `json:"subResource,omitempty"`

	// UpdatedOn last update
	UpdatedOn time.Time `json:"updatedOn"`

	// Uuid Internal ID
	Uuid openapi_types.UUID `json:"uuid"`
}

// RegisteredPermissionList defines model for RegisteredPermissionList.
type RegisteredPermissionList struct {
	Items []RegisteredPermission `json:"items"`

	// NextPageToken This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`

	// TotalSize Equivalent to int32
	TotalSize *Int `json:"totalSize,omitempty"`
}

// RegisteredRole defines model for RegisteredRole.
type RegisteredRole struct {
	// CreatedOn creation date
	CreatedOn time.Time `json:"createdOn"`

	// Description Human-readable description
	Description string `json:"description"`

	// Name Human-readable name
	Name string `json:"name"`

	// UpdatedOn last update
	UpdatedOn time.Time `json:"updatedOn"`

	// Uuid Internal ID
	Uuid openapi_types.UUID `json:"uuid"`
}

// RegisteredRoleList defines model for RegisteredRoleList.
type RegisteredRoleList struct {
	Items []RegisteredRole `json:"items"`

	// NextPageToken This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`

	// TotalSize Equivalent to int32
	TotalSize *Int `json:"totalSize,omitempty"`
}

// Role A role, linked to 1 or more permissions
type Role struct {
	// Description Human-readable description
	Description string `json:"description"`

	// Name Human-readable name
	Name string `json:"name"`
}

// RolePermission defines model for RolePermission.
type RolePermission struct {
	// Permissions List of permissions UUIDs
	Permissions []openapi_types.UUID `json:"permissions"`
}

// RolesPaginatedList defines model for RolesPaginatedList.
type RolesPaginatedList struct {
	Items []RegisteredRole `json:"items"`

	// NextPageToken This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`

	// TotalSize Equivalent to int32
	TotalSize *Int `json:"totalSize,omitempty"`
}

// ServiceAccount defines model for ServiceAccount.
type ServiceAccount struct {
	// Name Service account name
	Name string `json:"name"`
}

// ServiceAccountEdited defines model for ServiceAccountEdited.
type ServiceAccountEdited struct {
	// Id Service account ID
	Id string `json:"id"`

	// Name Service Accounts name
	Name string `json:"name"`
}

// ServiceAccountPaginatedList defines model for ServiceAccountPaginatedList.
type ServiceAccountPaginatedList struct {
	Items []ServiceAccountEdited `json:"items"`

	// NextPageToken This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`

	// TotalSize Equivalent to int32
	TotalSize *Int `json:"totalSize,omitempty"`
}

// Space defines model for Space.
type Space struct {
	CreatedOn DateTime `json:"createdOn"`

	// Description Space description
	Description string `json:"description"`

	// Id Internal ID
	Id openapi_types.UUID `json:"id"`

	// Name Space name
	Name string `json:"name"`

	// OrganisationId Organisation_id
	OrganisationId openapi_types.UUID `json:"organisationId"`

	// Status status of the space, the space can only be used when the status is ready.
	Status    SpaceStatus `json:"status"`
	UpdatedOn DateTime    `json:"updatedOn"`
}

// SpaceStatus status of the space, the space can only be used when the status is ready.
type SpaceStatus string

// SpaceIdsList defines model for SpaceIdsList.
type SpaceIdsList struct {
	Items []openapi_types.UUID `json:"items"`
}

// SpacePaginatedList defines model for SpacePaginatedList.
type SpacePaginatedList struct {
	Items []Space `json:"items"`

	// NextPageToken This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`

	// TotalSize Equivalent to int32
	TotalSize *Int `json:"totalSize,omitempty"`
}

// SpaceSimple defines model for SpaceSimple.
type SpaceSimple struct {
	// Id Space identifier
	Id openapi_types.UUID `json:"id"`
}

// SpaceSimplePaginatedList defines model for SpaceSimplePaginatedList.
type SpaceSimplePaginatedList struct {
	Items []SpaceSimple `json:"items"`

	// NextPageToken This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`

	// TotalSize Equivalent to int32
	TotalSize *Int `json:"totalSize,omitempty"`
}

// SubjectType defines model for SubjectType.
type SubjectType string

// TokenBody defines model for TokenBody.
type TokenBody struct {
	// Token The token to provide.
	Token string `json:"token"`
}

// TokenReq defines model for TokenReq.
type TokenReq struct {
	// ClientId The client id.
	ClientId *openapi_types.UUID `json:"client_id,omitempty"`

	// ClientSecret The client secret.
	ClientSecret *string `json:"client_secret,omitempty"`

	// Code The code authorization.
	Code *string `json:"code,omitempty"`

	// GrantType The grant type.
	GrantType string `json:"grant_type"`

	// RedirectUri The URLs redirection
	RedirectUri *string `json:"redirect_uri,omitempty"`

	// RefreshToken The refresh Token
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// TokenResp defines model for TokenResp.
type TokenResp struct {
	// AccessToken The access token.
	AccessToken string `json:"access_token"`

	// ExpiresIn The lifetime in seconds of the access token.
	ExpiresIn int `json:"expires_in"`

	// IdToken The id token.
	IdToken *string `json:"id_token,omitempty"`

	// RefreshToken The refresh token.
	RefreshToken *string `json:"refresh_token,omitempty"`

	// TokenType The type of the token issued.
	TokenType string `json:"token_type"`
}

// Url defines model for Url.
type Url = string

// User defines model for User.
type User struct {
	Email Email `json:"email"`

	// Firstname Firstname
	Firstname string `json:"firstname"`

	// Lastname Lastname
	Lastname string `json:"lastname"`
}

// UserCreated defines model for UserCreated.
type UserCreated struct {
	// Active Account activation/deactivation state
	Active    bool     `json:"active"`
	CreatedOn DateTime `json:"createdOn"`
	Email     Email    `json:"email"`

	// Firstname Firstname
	Firstname string `json:"firstname"`

	// Id User ID
	Id openapi_types.UUID `json:"id"`

	// Lastname Lastname
	Lastname string `json:"lastname"`
}

// UserCreation defines model for UserCreation.
type UserCreation struct {
	// Active Account activation/deactivation state
	Active    bool     `json:"active"`
	CreatedOn DateTime `json:"createdOn"`

	// Id User ID
	Id openapi_types.UUID `json:"id"`
}

// UserEdited defines model for UserEdited.
type UserEdited struct {
	// Active Account activation/deactivation state
	Active    bool     `json:"active"`
	CreatedOn DateTime `json:"createdOn"`

	// Id User ID
	Id        openapi_types.UUID `json:"id"`
	UpdatedOn DateTime           `json:"updatedOn"`
}

// UserModified defines model for UserModified.
type UserModified struct {
	// Active Account activation/deactivation state
	Active    bool     `json:"active"`
	CreatedOn DateTime `json:"createdOn"`
	Email     Email    `json:"email"`

	// Firstname Firstname
	Firstname string `json:"firstname"`

	// Id User ID
	Id openapi_types.UUID `json:"id"`

	// Lastname Lastname
	Lastname  string   `json:"lastname"`
	UpdatedOn DateTime `json:"updatedOn"`
}

// UserPaginatedList defines model for UserPaginatedList.
type UserPaginatedList struct {
	Items []UserModified `json:"items"`

	// NextPageToken This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`

	// TotalSize Equivalent to int32
	TotalSize *Int `json:"totalSize,omitempty"`
}

// UserState defines model for UserState.
type UserState struct {
	// Active Account activation/deactivation state
	Active bool `json:"active"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	// Active Account activation/deactivation state
	Active bool  `json:"active"`
	Email  Email `json:"email"`

	// Firstname Firstname
	Firstname string `json:"firstname"`

	// Lastname Lastname
	Lastname string `json:"lastname"`
}

// Violation defines model for Violation.
type Violation struct {
	// Description A description of why the field is violated.
	Description string `json:"description"`

	// Field The field impacted by the violation.
	Field string `json:"field"`
}

// Action defines model for Action.
type Action = string

// Authorization defines model for Authorization.
type Authorization = string

// ListPermissionsPage defines model for ListPermissionsPage.
type ListPermissionsPage struct {
	// NextToken A page token received from a previous call. Provide this to retrieve the subsequent page.
	NextToken *string `json:"nextToken"`

	// Size The maximum number of items to return. The service may return fewer than this value.
	Size *int32 `json:"size"`
}

// ListRolesPage defines model for ListRolesPage.
type ListRolesPage struct {
	// NextToken A page token received from a previous call. Provide this to retrieve the subsequent page.
	NextToken *string `json:"nextToken"`

	// Size The maximum number of items to return. The service may return fewer than this value.
	Size *int32 `json:"size"`
}

// ListServiceAccounts defines model for ListServiceAccounts.
type ListServiceAccounts struct {
	// NextToken A page token received from a previous call. Provide this to retrieve the subsequent page.
	NextToken *string `json:"nextToken,omitempty"`

	// Size The maximum number of items to return. The service may return fewer than this value.
	Size *int32 `json:"size,omitempty"`
}

// ListSpacesIdentity defines model for ListSpacesIdentity.
type ListSpacesIdentity struct {
	// NextToken A page token received from a previous call. Provide this to retrieve the subsequent page.
	NextToken *string `json:"nextToken,omitempty"`

	// Size The maximum number of items to return. The service may return fewer than this value.
	Size *int32 `json:"size,omitempty"`
}

// ListSpacesOfServiceAccount defines model for ListSpacesOfServiceAccount.
type ListSpacesOfServiceAccount struct {
	// NextToken A page token received from a previous call. Provide this to retrieve the subsequent page.
	NextToken *string `json:"nextToken,omitempty"`

	// Size The maximum number of items to return. The service may return fewer than this value.
	Size *int32 `json:"size,omitempty"`
}

// ListSpacesOfUser defines model for ListSpacesOfUser.
type ListSpacesOfUser struct {
	// NextToken A page token received from a previous call. Provide this to retrieve the subsequent page.
	NextToken *string `json:"nextToken,omitempty"`

	// Size The maximum number of items to return. The service may return fewer than this value.
	Size *int32 `json:"size,omitempty"`
}

// ListSpacesPage defines model for ListSpacesPage.
type ListSpacesPage struct {
	// NextToken A page token received from a previous call. Provide this to retrieve the subsequent page.
	NextToken *string `json:"nextToken,omitempty"`

	// Size The maximum number of items to return. The service may return fewer than this value.
	Size *int32 `json:"size,omitempty"`
}

// ListUser defines model for ListUser.
type ListUser struct {
	// NextToken A page token received from a previous call. Provide this to retrieve the subsequent page.
	NextToken *string `json:"nextToken,omitempty"`

	// Size The maximum number of items to return. The service may return fewer than this value.
	Size *int32 `json:"size,omitempty"`
}

// ListUserOrganisations defines model for ListUserOrganisations.
type ListUserOrganisations struct {
	// NextToken A page token received from a previous call. Provide this to retrieve the subsequent page.
	NextToken *string `json:"nextToken,omitempty"`

	// Size The maximum number of items to return. The service may return fewer than this value.
	Size *int32 `json:"size,omitempty"`
}

// ObjectType defines model for ObjectType.
type ObjectType = string

// OrganisationId defines model for OrganisationId.
type OrganisationId = openapi_types.UUID

// PermissionUuid defines model for PermissionUuid.
type PermissionUuid = openapi_types.UUID

// Resource defines model for Resource.
type Resource = string

// RoleName defines model for RoleName.
type RoleName = string

// RoleUuid defines model for RoleUuid.
type RoleUuid = openapi_types.UUID

// Service defines model for Service.
type Service = string

// ServiceAccountId defines model for ServiceAccountId.
type ServiceAccountId = openapi_types.UUID

// SpaceId defines model for SpaceId.
type SpaceId = openapi_types.UUID

// SubResource defines model for SubResource.
type SubResource = string

// SubjectId defines model for SubjectId.
type SubjectId = openapi_types.UUID

// SubjectTypeParam defines model for SubjectTypeParam.
type SubjectTypeParam = SubjectType

// UserEmail defines model for UserEmail.
type UserEmail = openapi_types.Email

// UserId defines model for UserId.
type UserId = openapi_types.UUID

// CreateRole200ResponseSchema defines model for CreateRole200Response.
type CreateRole200ResponseSchema = RegisteredRole

// CreateServiceAccount201ResponseSchema defines model for CreateServiceAccount201Response.
type CreateServiceAccount201ResponseSchema = CreatedServiceAccount

// CreateSpace200ResponseSchema defines model for CreateSpace200Response.
type CreateSpace200ResponseSchema = Space

// CreateUser201ResponseSchema defines model for CreateUser201Response.
type CreateUser201ResponseSchema = UserCreated

// GetACL200ResponseSchema defines model for GetACL200Response.
type GetACL200ResponseSchema = ACLPaginatedList

// GetIAMGranularPolicy200ResponseSchema defines model for GetIAMGranularPolicy200Response.
type GetIAMGranularPolicy200ResponseSchema = IAMGranularPolicyList

// GetIAMPolicy200ResponseSchema defines model for GetIAMPolicy200Response.
type GetIAMPolicy200ResponseSchema = IAMPolicy

// GetPermission200ResponseSchema defines model for GetPermission200Response.
type GetPermission200ResponseSchema = RegisteredPermission

// GetRole200ResponseSchema defines model for GetRole200Response.
type GetRole200ResponseSchema = RegisteredRole

// GetRolePermissions200ResponseSchema defines model for GetRolePermissions200Response.
type GetRolePermissions200ResponseSchema = PermissionsPaginatedList

// GetServiceAccount200ResponseSchema defines model for GetServiceAccount200Response.
type GetServiceAccount200ResponseSchema = ServiceAccountEdited

// GetSpaceById200ResponseSchema defines model for GetSpaceById200Response.
type GetSpaceById200ResponseSchema = Space

// GetUser200ResponseSchema defines model for GetUser200Response.
type GetUser200ResponseSchema = UserModified

// IntrospectResponseSchema defines model for IntrospectResponse.
type IntrospectResponseSchema = IntrospectResp

// ListPermissions200ResponseSchema defines model for ListPermissions200Response.
type ListPermissions200ResponseSchema = PermissionsPaginatedList

// ListRoles200ResponseSchema defines model for ListRoles200Response.
type ListRoles200ResponseSchema = RolesPaginatedList

// ListServiceAccount200ResponseSchema defines model for ListServiceAccount200Response.
type ListServiceAccount200ResponseSchema = ServiceAccountPaginatedList

// ListSpaces200ResponseSchema defines model for ListSpaces200Response.
type ListSpaces200ResponseSchema = SpacePaginatedList

// ListSpacesIdentity200ResponseSchema defines model for ListSpacesIdentity200Response.
type ListSpacesIdentity200ResponseSchema = SpaceSimplePaginatedList

// ListSpacesServiceAccount200ResponseSchema defines model for ListSpacesServiceAccount200Response.
type ListSpacesServiceAccount200ResponseSchema = SpaceSimplePaginatedList

// ListSpacesUser200ResponseSchema defines model for ListSpacesUser200Response.
type ListSpacesUser200ResponseSchema = SpaceSimplePaginatedList

// ListUser200ResponseSchema defines model for ListUser200Response.
type ListUser200ResponseSchema = UserPaginatedList

// ListUserOrganisations200ResponseSchema defines model for ListUserOrganisations200Response.
type ListUserOrganisations200ResponseSchema = OrganisationSimplePaginatedList

// PatchUserState200ResponseSchema defines model for PatchUserState200Response.
type PatchUserState200ResponseSchema = UserEdited

// PermissionCreated200ResponseSchema defines model for PermissionCreated200Response.
type PermissionCreated200ResponseSchema = RegisteredPermission

// Permissions200ResponseSchema defines model for Permissions200Response.
type Permissions200ResponseSchema = RegisteredPermissionList

// RecoverUser200ResponseSchema defines model for RecoverUser200Response.
type RecoverUser200ResponseSchema = RecoveryLink

// RoleCreated200ResponseSchema defines model for RoleCreated200Response.
type RoleCreated200ResponseSchema = RegisteredRole

// RoleList200ResponseSchema defines model for RoleList200Response.
type RoleList200ResponseSchema = RegisteredRoleList

// TokenResponseSchema defines model for TokenResponse.
type TokenResponseSchema = TokenResp

// UpdateServiceAccount200ResponseSchema defines model for UpdateServiceAccount200Response.
type UpdateServiceAccount200ResponseSchema = ServiceAccountEdited

// UpdateUser200ResponseSchema defines model for UpdateUser200Response.
type UpdateUser200ResponseSchema = UserModified

// AddGlobalRolePermissionsRequest defines model for AddGlobalRolePermissionsRequest.
type AddGlobalRolePermissionsRequest struct {
	// Permissions List of permissions UUIDs to add
	Permissions []openapi_types.UUID `json:"permissions"`
}

// AddRolePermissionsRequest defines model for AddRolePermissionsRequest.
type AddRolePermissionsRequest = RolePermission

// CreateRoleRequest A role, linked to 1 or more permissions
type CreateRoleRequest = Role

// CreateServiceAccountRequest defines model for CreateServiceAccountRequest.
type CreateServiceAccountRequest = ServiceAccount

// CreateSpaceRequest defines model for CreateSpaceRequest.
type CreateSpaceRequest = CreateSpace

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest = User

// DeleteACLRequest List of ACLs.
type DeleteACLRequest = ACLList

// ListIdentitiesByAccessRequest defines model for ListIdentitiesByAccessRequest.
type ListIdentitiesByAccessRequest = IdentitiesIdsList

// ListSpaceIdsRequest defines model for ListSpaceIdsRequest.
type ListSpaceIdsRequest = SpaceIdsList

// PatchPermissionRequest defines model for PatchPermissionRequest.
type PatchPermissionRequest struct {
	// Action Allowed operation type
	Action *string `json:"action,omitempty"`

	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name     *string `json:"name,omitempty"`
	Resource *string `json:"resource,omitempty"`

	// Service Service name
	Service     *string `json:"service,omitempty"`
	SubResource *string `json:"subResource,omitempty"`
}

// PatchRoleRequest defines model for PatchRoleRequest.
type PatchRoleRequest struct {
	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name *string `json:"name,omitempty"`
}

// PatchUserStateRequest defines model for PatchUserStateRequest.
type PatchUserStateRequest = UserState

// PermissionRequest A permission in the <service>[.<resource>.[<subResource>](0,1)](0,1).<action> form
type PermissionRequest = Permission

// RemoveGlobalRolePermissionsRequest defines model for RemoveGlobalRolePermissionsRequest.
type RemoveGlobalRolePermissionsRequest struct {
	// Permissions List of permissions UUIDs to remove
	Permissions []openapi_types.UUID `json:"permissions"`
}

// RemoveRolePermissionsRequest defines model for RemoveRolePermissionsRequest.
type RemoveRolePermissionsRequest = RolePermission

// RoleRequest A role, linked to 1 or more permissions
type RoleRequest = Role

// SetACLRequest List of ACLs.
type SetACLRequest = ACLList

// SetIAMGranularPolicyRequest Defines the structure for modification instructions for roles and permissions
type SetIAMGranularPolicyRequest struct {
	Add    *GranularPolicyList `json:"add,omitempty"`
	Delete *GranularPolicyList `json:"delete,omitempty"`
}

// SetIAMPolicyRequest Defines the structure for modification instructions for roles and permissions
type SetIAMPolicyRequest struct {
	Add    *IAMPolicy `json:"add,omitempty"`
	Delete *IAMPolicy `json:"delete,omitempty"`
}

// UpdateRoleRequest defines model for UpdateRoleRequest.
type UpdateRoleRequest struct {
	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name *string `json:"name,omitempty"`
}

// UpdateServiceAccountRequest defines model for UpdateServiceAccountRequest.
type UpdateServiceAccountRequest = ServiceAccount

// UpdateSpaceRequest defines model for UpdateSpaceRequest.
type UpdateSpaceRequest = MutableSpace

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest = UserUpdate

// ListPermissionsParams defines parameters for ListPermissions.
type ListPermissionsParams struct {
	// Page Paginated request
	Page *ListPermissionsPage `json:"page,omitempty"`
}

// UpdatePermissionJSONBody defines parameters for UpdatePermission.
type UpdatePermissionJSONBody struct {
	// Action Allowed operation type
	Action *string `json:"action,omitempty"`

	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name     *string `json:"name,omitempty"`
	Resource *string `json:"resource,omitempty"`

	// Service Service name
	Service     *string `json:"service,omitempty"`
	SubResource *string `json:"subResource,omitempty"`
}

// ListRolesParams defines parameters for ListRoles.
type ListRolesParams struct {
	// Page Paginated request
	Page *ListRolesPage `json:"page,omitempty"`
}

// UpdateRoleJSONBody defines parameters for UpdateRole.
type UpdateRoleJSONBody struct {
	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name *string `json:"name,omitempty"`
}

// RemoveRolePermissionsJSONBody defines parameters for RemoveRolePermissions.
type RemoveRolePermissionsJSONBody struct {
	// Permissions List of permissions UUIDs to remove
	Permissions []openapi_types.UUID `json:"permissions"`
}

// AddRolePermissionsJSONBody defines parameters for AddRolePermissions.
type AddRolePermissionsJSONBody struct {
	// Permissions List of permissions UUIDs to add
	Permissions []openapi_types.UUID `json:"permissions"`
}

// ListOrganisationsIdentityParams defines parameters for ListOrganisationsIdentity.
type ListOrganisationsIdentityParams struct {
	// Page Paginated request
	Page *ListUserOrganisations `json:"page,omitempty"`
}

// SetIAMGranularPolicyOrganisationJSONBody defines parameters for SetIAMGranularPolicyOrganisation.
type SetIAMGranularPolicyOrganisationJSONBody struct {
	Add    *GranularPolicyList `json:"add,omitempty"`
	Delete *GranularPolicyList `json:"delete,omitempty"`
}

// SetIAMPolicyOrganisationJSONBody defines parameters for SetIAMPolicyOrganisation.
type SetIAMPolicyOrganisationJSONBody struct {
	Add    *IAMPolicy `json:"add,omitempty"`
	Delete *IAMPolicy `json:"delete,omitempty"`
}

// ListPermissionsOrganisationParams defines parameters for ListPermissionsOrganisation.
type ListPermissionsOrganisationParams struct {
	// Service service the permission is related to
	Service *Service `form:"service,omitempty" json:"service,omitempty"`

	// Resource resource the permission is related to
	Resource *Resource `form:"resource,omitempty" json:"resource,omitempty"`

	// Subresource subresource the permission is related to
	Subresource *SubResource `form:"subresource,omitempty" json:"subresource,omitempty"`

	// Action action the permission allows to perform
	Action *Action `form:"action,omitempty" json:"action,omitempty"`

	// Page Paginated request
	Page *ListPermissionsPage `json:"page,omitempty"`
}

// ListRolesOrganisationParams defines parameters for ListRolesOrganisation.
type ListRolesOrganisationParams struct {
	// Name Role name
	Name *RoleName `form:"name,omitempty" json:"name,omitempty"`

	// Page Paginated request
	Page *ListRolesPage `json:"page,omitempty"`
}

// UpdateRoleOrganisationJSONBody defines parameters for UpdateRoleOrganisation.
type UpdateRoleOrganisationJSONBody struct {
	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name *string `json:"name,omitempty"`
}

// ListServiceAccountOrganisationParams defines parameters for ListServiceAccountOrganisation.
type ListServiceAccountOrganisationParams struct {
	// Page Paginated request
	Page *ListServiceAccounts `json:"page,omitempty"`
}

// ListSpacesOfServiceAccountParams defines parameters for ListSpacesOfServiceAccount.
type ListSpacesOfServiceAccountParams struct {
	// Page Paginated request
	Page *ListSpacesOfServiceAccount `json:"page,omitempty"`
}

// ListSpacesIdentityParams defines parameters for ListSpacesIdentity.
type ListSpacesIdentityParams struct {
	// Page Paginated request
	Page *ListSpacesIdentity `json:"page,omitempty"`
}

// ListUserOrganisationParams defines parameters for ListUserOrganisation.
type ListUserOrganisationParams struct {
	// Email User email
	Email *UserEmail `form:"email,omitempty" json:"email,omitempty"`

	// Page Paginated request
	Page *ListUser `json:"page,omitempty"`
}

// ListSpacesOfUserParams defines parameters for ListSpacesOfUser.
type ListSpacesOfUserParams struct {
	// Page Paginated request
	Page *ListSpacesOfUser `json:"page,omitempty"`
}

// GetACLOrganisationParams defines parameters for GetACLOrganisation.
type GetACLOrganisationParams struct {
	Service     string  `form:"service" json:"service"`
	Resource    string  `form:"resource" json:"resource"`
	Subresource *string `form:"subresource,omitempty" json:"subresource,omitempty"`
}

// RevokeParams defines parameters for Revoke.
type RevokeParams struct {
	// Authorization The client identifier.
	Authorization *Authorization `json:"Authorization,omitempty"`
}

// SetIAMGranularPolicySpaceJSONBody defines parameters for SetIAMGranularPolicySpace.
type SetIAMGranularPolicySpaceJSONBody struct {
	Add    *GranularPolicyList `json:"add,omitempty"`
	Delete *GranularPolicyList `json:"delete,omitempty"`
}

// SetIAMPolicySpaceJSONBody defines parameters for SetIAMPolicySpace.
type SetIAMPolicySpaceJSONBody struct {
	Add    *IAMPolicy `json:"add,omitempty"`
	Delete *IAMPolicy `json:"delete,omitempty"`
}

// ListPermissionsSpaceParams defines parameters for ListPermissionsSpace.
type ListPermissionsSpaceParams struct {
	// Service service the permission is related to
	Service *Service `form:"service,omitempty" json:"service,omitempty"`

	// Resource resource the permission is related to
	Resource *Resource `form:"resource,omitempty" json:"resource,omitempty"`

	// Subresource subresource the permission is related to
	Subresource *SubResource `form:"subresource,omitempty" json:"subresource,omitempty"`

	// Action action the permission allows to perform
	Action *Action `form:"action,omitempty" json:"action,omitempty"`

	// Page Paginated request
	Page *ListPermissionsPage `json:"page,omitempty"`
}

// ListRolesSpaceParams defines parameters for ListRolesSpace.
type ListRolesSpaceParams struct {
	// Name Role name
	Name *RoleName `form:"name,omitempty" json:"name,omitempty"`

	// Page Paginated request
	Page *ListRolesPage `json:"page,omitempty"`
}

// UpdateRoleSpaceJSONBody defines parameters for UpdateRoleSpace.
type UpdateRoleSpaceJSONBody struct {
	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name *string `json:"name,omitempty"`
}

// ListServiceAccountSpaceParams defines parameters for ListServiceAccountSpace.
type ListServiceAccountSpaceParams struct {
	// Page Paginated request
	Page *ListServiceAccounts `json:"page,omitempty"`
}

// ListUserSpaceParams defines parameters for ListUserSpace.
type ListUserSpaceParams struct {
	// Email User email
	Email *UserEmail `form:"email,omitempty" json:"email,omitempty"`

	// Page Paginated request
	Page *ListUser `json:"page,omitempty"`
}

// GetACLSpaceParams defines parameters for GetACLSpace.
type GetACLSpaceParams struct {
	Service     string  `form:"service" json:"service"`
	Resource    string  `form:"resource" json:"resource"`
	Subresource *string `form:"subresource,omitempty" json:"subresource,omitempty"`
}

// TokenParams defines parameters for Token.
type TokenParams struct {
	// Authorization The client identifier.
	Authorization *Authorization `json:"Authorization,omitempty"`
}

// ListSpacesParams defines parameters for ListSpaces.
type ListSpacesParams struct {
	// Page list spaces paginated request
	Page *ListSpacesPage `json:"page,omitempty"`
}

// CreateAdminServiceAccountSpaceJSONRequestBody defines body for CreateAdminServiceAccountSpace for application/json ContentType.
type CreateAdminServiceAccountSpaceJSONRequestBody = ServiceAccount

// CreatePermissionJSONRequestBody defines body for CreatePermission for application/json ContentType.
type CreatePermissionJSONRequestBody = Permission

// UpdatePermissionJSONRequestBody defines body for UpdatePermission for application/json ContentType.
type UpdatePermissionJSONRequestBody UpdatePermissionJSONBody

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody = Role

// UpdateRoleJSONRequestBody defines body for UpdateRole for application/json ContentType.
type UpdateRoleJSONRequestBody UpdateRoleJSONBody

// RemoveRolePermissionsJSONRequestBody defines body for RemoveRolePermissions for application/json ContentType.
type RemoveRolePermissionsJSONRequestBody RemoveRolePermissionsJSONBody

// AddRolePermissionsJSONRequestBody defines body for AddRolePermissions for application/json ContentType.
type AddRolePermissionsJSONRequestBody AddRolePermissionsJSONBody

// IntrospectFormdataRequestBody defines body for Introspect for application/x-www-form-urlencoded ContentType.
type IntrospectFormdataRequestBody = TokenBody

// SetIAMGranularPolicyOrganisationJSONRequestBody defines body for SetIAMGranularPolicyOrganisation for application/json ContentType.
type SetIAMGranularPolicyOrganisationJSONRequestBody SetIAMGranularPolicyOrganisationJSONBody

// SetIAMPolicyOrganisationJSONRequestBody defines body for SetIAMPolicyOrganisation for application/json ContentType.
type SetIAMPolicyOrganisationJSONRequestBody SetIAMPolicyOrganisationJSONBody

// CreateRoleOrganisationJSONRequestBody defines body for CreateRoleOrganisation for application/json ContentType.
type CreateRoleOrganisationJSONRequestBody = Role

// UpdateRoleOrganisationJSONRequestBody defines body for UpdateRoleOrganisation for application/json ContentType.
type UpdateRoleOrganisationJSONRequestBody UpdateRoleOrganisationJSONBody

// RemoveRolePermissionsOrganisationJSONRequestBody defines body for RemoveRolePermissionsOrganisation for application/json ContentType.
type RemoveRolePermissionsOrganisationJSONRequestBody = RolePermission

// AddRolePermissionsOrganisationJSONRequestBody defines body for AddRolePermissionsOrganisation for application/json ContentType.
type AddRolePermissionsOrganisationJSONRequestBody = RolePermission

// ListServiceAccountOrganisationJSONRequestBody defines body for ListServiceAccountOrganisation for application/json ContentType.
type ListServiceAccountOrganisationJSONRequestBody = IdentitiesIdsList

// CreateServiceAccountOrganisationJSONRequestBody defines body for CreateServiceAccountOrganisation for application/json ContentType.
type CreateServiceAccountOrganisationJSONRequestBody = ServiceAccount

// UpdateServiceAccountOrganisationJSONRequestBody defines body for UpdateServiceAccountOrganisation for application/json ContentType.
type UpdateServiceAccountOrganisationJSONRequestBody = ServiceAccount

// ListUserOrganisationJSONRequestBody defines body for ListUserOrganisation for application/json ContentType.
type ListUserOrganisationJSONRequestBody = IdentitiesIdsList

// CreateUserOrganisationJSONRequestBody defines body for CreateUserOrganisation for application/json ContentType.
type CreateUserOrganisationJSONRequestBody = User

// PatchUserStateOrganisationJSONRequestBody defines body for PatchUserStateOrganisation for application/json ContentType.
type PatchUserStateOrganisationJSONRequestBody = UserState

// UpdateUserOrganisationJSONRequestBody defines body for UpdateUserOrganisation for application/json ContentType.
type UpdateUserOrganisationJSONRequestBody = UserUpdate

// DeleteACLOrganisationBulkJSONRequestBody defines body for DeleteACLOrganisationBulk for application/json ContentType.
type DeleteACLOrganisationBulkJSONRequestBody = ACLList

// CreateACLOrganisationBulkJSONRequestBody defines body for CreateACLOrganisationBulk for application/json ContentType.
type CreateACLOrganisationBulkJSONRequestBody = ACLList

// RevokeFormdataRequestBody defines body for Revoke for application/x-www-form-urlencoded ContentType.
type RevokeFormdataRequestBody = TokenBody

// SetIAMGranularPolicySpaceJSONRequestBody defines body for SetIAMGranularPolicySpace for application/json ContentType.
type SetIAMGranularPolicySpaceJSONRequestBody SetIAMGranularPolicySpaceJSONBody

// SetIAMPolicySpaceJSONRequestBody defines body for SetIAMPolicySpace for application/json ContentType.
type SetIAMPolicySpaceJSONRequestBody SetIAMPolicySpaceJSONBody

// CreateRoleSpaceJSONRequestBody defines body for CreateRoleSpace for application/json ContentType.
type CreateRoleSpaceJSONRequestBody = Role

// UpdateRoleSpaceJSONRequestBody defines body for UpdateRoleSpace for application/json ContentType.
type UpdateRoleSpaceJSONRequestBody UpdateRoleSpaceJSONBody

// RemoveRolePermissionsSpaceJSONRequestBody defines body for RemoveRolePermissionsSpace for application/json ContentType.
type RemoveRolePermissionsSpaceJSONRequestBody = RolePermission

// AddRolePermissionsSpaceJSONRequestBody defines body for AddRolePermissionsSpace for application/json ContentType.
type AddRolePermissionsSpaceJSONRequestBody = RolePermission

// ListServiceAccountSpaceJSONRequestBody defines body for ListServiceAccountSpace for application/json ContentType.
type ListServiceAccountSpaceJSONRequestBody = IdentitiesIdsList

// CreateServiceAccountSpaceJSONRequestBody defines body for CreateServiceAccountSpace for application/json ContentType.
type CreateServiceAccountSpaceJSONRequestBody = ServiceAccount

// UpdateServiceAccountSpaceJSONRequestBody defines body for UpdateServiceAccountSpace for application/json ContentType.
type UpdateServiceAccountSpaceJSONRequestBody = ServiceAccount

// ListUserSpaceJSONRequestBody defines body for ListUserSpace for application/json ContentType.
type ListUserSpaceJSONRequestBody = IdentitiesIdsList

// CreateUserSpaceJSONRequestBody defines body for CreateUserSpace for application/json ContentType.
type CreateUserSpaceJSONRequestBody = User

// PatchUserStateSpaceJSONRequestBody defines body for PatchUserStateSpace for application/json ContentType.
type PatchUserStateSpaceJSONRequestBody = UserState

// UpdateUserSpaceJSONRequestBody defines body for UpdateUserSpace for application/json ContentType.
type UpdateUserSpaceJSONRequestBody = UserUpdate

// DeleteACLSpaceBulkJSONRequestBody defines body for DeleteACLSpaceBulk for application/json ContentType.
type DeleteACLSpaceBulkJSONRequestBody = ACLList

// CreateACLSpaceBulkJSONRequestBody defines body for CreateACLSpaceBulk for application/json ContentType.
type CreateACLSpaceBulkJSONRequestBody = ACLList

// TokenFormdataRequestBody defines body for Token for application/x-www-form-urlencoded ContentType.
type TokenFormdataRequestBody = TokenReq

// UpdateSpaceJSONRequestBody defines body for UpdateSpace for application/json ContentType.
type UpdateSpaceJSONRequestBody = MutableSpace

// ListSpacesJSONRequestBody defines body for ListSpaces for application/json ContentType.
type ListSpacesJSONRequestBody = SpaceIdsList

// CreateSpaceJSONRequestBody defines body for CreateSpace for application/json ContentType.
type CreateSpaceJSONRequestBody = CreateSpace

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateAdminServiceAccountSpaceWithBody request with any body
	CreateAdminServiceAccountSpaceWithBody(ctx context.Context, organisationId OrganisationId, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAdminServiceAccountSpace(ctx context.Context, organisationId OrganisationId, spaceId SpaceId, body CreateAdminServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPermissions request
	ListPermissions(ctx context.Context, params *ListPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePermissionWithBody request with any body
	CreatePermissionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePermission(ctx context.Context, body CreatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePermission request
	DeletePermission(ctx context.Context, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermission request
	GetPermission(ctx context.Context, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePermissionWithBody request with any body
	UpdatePermissionWithBody(ctx context.Context, permissionUuid PermissionUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePermission(ctx context.Context, permissionUuid PermissionUuid, body UpdatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoles request
	ListRoles(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRoleWithBody request with any body
	CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRole(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRole request
	DeleteRole(ctx context.Context, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRole request
	GetRole(ctx context.Context, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRoleWithBody request with any body
	UpdateRoleWithBody(ctx context.Context, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRole(ctx context.Context, roleUuid RoleUuid, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveRolePermissionsWithBody request with any body
	RemoveRolePermissionsWithBody(ctx context.Context, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveRolePermissions(ctx context.Context, roleUuid RoleUuid, body RemoveRolePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRolePermissions request
	GetRolePermissions(ctx context.Context, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddRolePermissionsWithBody request with any body
	AddRolePermissionsWithBody(ctx context.Context, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddRolePermissions(ctx context.Context, roleUuid RoleUuid, body AddRolePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntrospectWithBody request with any body
	IntrospectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IntrospectWithFormdataBody(ctx context.Context, body IntrospectFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganisationsIdentity request
	ListOrganisationsIdentity(ctx context.Context, params *ListOrganisationsIdentityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIAMGranularPolicyOrganisation request
	GetIAMGranularPolicyOrganisation(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetIAMGranularPolicyOrganisationWithBody request with any body
	SetIAMGranularPolicyOrganisationWithBody(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetIAMGranularPolicyOrganisation(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, body SetIAMGranularPolicyOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIAMPolicyOrganisation request
	GetIAMPolicyOrganisation(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetIAMPolicyOrganisationWithBody request with any body
	SetIAMPolicyOrganisationWithBody(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetIAMPolicyOrganisation(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, body SetIAMPolicyOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPermissionsOrganisation request
	ListPermissionsOrganisation(ctx context.Context, organisationId OrganisationId, params *ListPermissionsOrganisationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionOrganisation request
	GetPermissionOrganisation(ctx context.Context, organisationId OrganisationId, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRolesOrganisation request
	ListRolesOrganisation(ctx context.Context, organisationId OrganisationId, params *ListRolesOrganisationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRoleOrganisationWithBody request with any body
	CreateRoleOrganisationWithBody(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRoleOrganisation(ctx context.Context, organisationId OrganisationId, body CreateRoleOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRoleOrganisation request
	DeleteRoleOrganisation(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoleOrganisation request
	GetRoleOrganisation(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRoleOrganisationWithBody request with any body
	UpdateRoleOrganisationWithBody(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRoleOrganisation(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, body UpdateRoleOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveRolePermissionsOrganisationWithBody request with any body
	RemoveRolePermissionsOrganisationWithBody(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveRolePermissionsOrganisation(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, body RemoveRolePermissionsOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRolePermissionsOrganisation request
	GetRolePermissionsOrganisation(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddRolePermissionsOrganisationWithBody request with any body
	AddRolePermissionsOrganisationWithBody(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddRolePermissionsOrganisation(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, body AddRolePermissionsOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServiceAccountOrganisationWithBody request with any body
	ListServiceAccountOrganisationWithBody(ctx context.Context, organisationId OrganisationId, params *ListServiceAccountOrganisationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListServiceAccountOrganisation(ctx context.Context, organisationId OrganisationId, params *ListServiceAccountOrganisationParams, body ListServiceAccountOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServiceAccountOrganisationWithBody request with any body
	CreateServiceAccountOrganisationWithBody(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServiceAccountOrganisation(ctx context.Context, organisationId OrganisationId, body CreateServiceAccountOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceAccountOrganisation request
	DeleteServiceAccountOrganisation(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAccountOrganisation request
	GetServiceAccountOrganisation(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateServiceAccountOrganisationWithBody request with any body
	UpdateServiceAccountOrganisationWithBody(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateServiceAccountOrganisation(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, body UpdateServiceAccountOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSpacesOfServiceAccount request
	ListSpacesOfServiceAccount(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, params *ListSpacesOfServiceAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSpacesIdentity request
	ListSpacesIdentity(ctx context.Context, organisationId OrganisationId, params *ListSpacesIdentityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserOrganisationWithBody request with any body
	ListUserOrganisationWithBody(ctx context.Context, organisationId OrganisationId, params *ListUserOrganisationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListUserOrganisation(ctx context.Context, organisationId OrganisationId, params *ListUserOrganisationParams, body ListUserOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserOrganisationWithBody request with any body
	CreateUserOrganisationWithBody(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserOrganisation(ctx context.Context, organisationId OrganisationId, body CreateUserOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserOrganisation request
	DeleteUserOrganisation(ctx context.Context, organisationId OrganisationId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserOrganisation request
	GetUserOrganisation(ctx context.Context, organisationId OrganisationId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUserStateOrganisationWithBody request with any body
	PatchUserStateOrganisationWithBody(ctx context.Context, organisationId OrganisationId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUserStateOrganisation(ctx context.Context, organisationId OrganisationId, userId UserId, body PatchUserStateOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserOrganisationWithBody request with any body
	UpdateUserOrganisationWithBody(ctx context.Context, organisationId OrganisationId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserOrganisation(ctx context.Context, organisationId OrganisationId, userId UserId, body UpdateUserOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RecoverUserOrganisation request
	RecoverUserOrganisation(ctx context.Context, organisationId OrganisationId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSpacesOfUser request
	ListSpacesOfUser(ctx context.Context, organisationId OrganisationId, userId UserId, params *ListSpacesOfUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetACLOrganisation request
	GetACLOrganisation(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, params *GetACLOrganisationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteACLOrganisationBulkWithBody request with any body
	DeleteACLOrganisationBulkWithBody(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteACLOrganisationBulk(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, body DeleteACLOrganisationBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateACLOrganisationBulkWithBody request with any body
	CreateACLOrganisationBulkWithBody(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateACLOrganisationBulk(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, body CreateACLOrganisationBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevokeWithBody request with any body
	RevokeWithBody(ctx context.Context, params *RevokeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RevokeWithFormdataBody(ctx context.Context, params *RevokeParams, body RevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIAMGranularPolicySpace request
	GetIAMGranularPolicySpace(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetIAMGranularPolicySpaceWithBody request with any body
	SetIAMGranularPolicySpaceWithBody(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetIAMGranularPolicySpace(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, body SetIAMGranularPolicySpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIAMPolicySpace request
	GetIAMPolicySpace(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetIAMPolicySpaceWithBody request with any body
	SetIAMPolicySpaceWithBody(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetIAMPolicySpace(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, body SetIAMPolicySpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPermissionsSpace request
	ListPermissionsSpace(ctx context.Context, spaceId SpaceId, params *ListPermissionsSpaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionSpace request
	GetPermissionSpace(ctx context.Context, spaceId SpaceId, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRolesSpace request
	ListRolesSpace(ctx context.Context, spaceId SpaceId, params *ListRolesSpaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRoleSpaceWithBody request with any body
	CreateRoleSpaceWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRoleSpace(ctx context.Context, spaceId SpaceId, body CreateRoleSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRoleSpace request
	DeleteRoleSpace(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoleSpace request
	GetRoleSpace(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRoleSpaceWithBody request with any body
	UpdateRoleSpaceWithBody(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRoleSpace(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, body UpdateRoleSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveRolePermissionsSpaceWithBody request with any body
	RemoveRolePermissionsSpaceWithBody(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveRolePermissionsSpace(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, body RemoveRolePermissionsSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRolePermissionsSpace request
	GetRolePermissionsSpace(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddRolePermissionsSpaceWithBody request with any body
	AddRolePermissionsSpaceWithBody(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddRolePermissionsSpace(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, body AddRolePermissionsSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServiceAccountSpaceWithBody request with any body
	ListServiceAccountSpaceWithBody(ctx context.Context, spaceId SpaceId, params *ListServiceAccountSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListServiceAccountSpace(ctx context.Context, spaceId SpaceId, params *ListServiceAccountSpaceParams, body ListServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServiceAccountSpaceWithBody request with any body
	CreateServiceAccountSpaceWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServiceAccountSpace(ctx context.Context, spaceId SpaceId, body CreateServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceAccountSpace request
	DeleteServiceAccountSpace(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAccountSpace request
	GetServiceAccountSpace(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignServiceAccountToSpace request
	AssignServiceAccountToSpace(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateServiceAccountSpaceWithBody request with any body
	UpdateServiceAccountSpaceWithBody(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateServiceAccountSpace(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, body UpdateServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserSpaceWithBody request with any body
	ListUserSpaceWithBody(ctx context.Context, spaceId SpaceId, params *ListUserSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListUserSpace(ctx context.Context, spaceId SpaceId, params *ListUserSpaceParams, body ListUserSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserSpaceWithBody request with any body
	CreateUserSpaceWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserSpace(ctx context.Context, spaceId SpaceId, body CreateUserSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserSpace request
	DeleteUserSpace(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserSpace request
	GetUserSpace(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUserStateSpaceWithBody request with any body
	PatchUserStateSpaceWithBody(ctx context.Context, spaceId SpaceId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUserStateSpace(ctx context.Context, spaceId SpaceId, userId UserId, body PatchUserStateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignUserToSpace request
	AssignUserToSpace(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserSpaceWithBody request with any body
	UpdateUserSpaceWithBody(ctx context.Context, spaceId SpaceId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserSpace(ctx context.Context, spaceId SpaceId, userId UserId, body UpdateUserSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RecoverUserSpace request
	RecoverUserSpace(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetACLSpace request
	GetACLSpace(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, params *GetACLSpaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteACLSpaceBulkWithBody request with any body
	DeleteACLSpaceBulkWithBody(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteACLSpaceBulk(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, body DeleteACLSpaceBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateACLSpaceBulkWithBody request with any body
	CreateACLSpaceBulkWithBody(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateACLSpaceBulk(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, body CreateACLSpaceBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TokenWithBody request with any body
	TokenWithBody(ctx context.Context, params *TokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TokenWithFormdataBody(ctx context.Context, params *TokenParams, body TokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSpace request
	DeleteSpace(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpaceById request
	GetSpaceById(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSpaceWithBody request with any body
	UpdateSpaceWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSpace(ctx context.Context, spaceId SpaceId, body UpdateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSpacesWithBody request with any body
	ListSpacesWithBody(ctx context.Context, organisationId OrganisationId, params *ListSpacesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListSpaces(ctx context.Context, organisationId OrganisationId, params *ListSpacesParams, body ListSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSpaceWithBody request with any body
	CreateSpaceWithBody(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSpace(ctx context.Context, organisationId OrganisationId, body CreateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateAdminServiceAccountSpaceWithBody(ctx context.Context, organisationId OrganisationId, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAdminServiceAccountSpaceRequestWithBody(c.Server, organisationId, spaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAdminServiceAccountSpace(ctx context.Context, organisationId OrganisationId, spaceId SpaceId, body CreateAdminServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAdminServiceAccountSpaceRequest(c.Server, organisationId, spaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPermissions(ctx context.Context, params *ListPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPermissionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePermissionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePermissionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePermission(ctx context.Context, body CreatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePermissionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePermission(ctx context.Context, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePermissionRequest(c.Server, permissionUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermission(ctx context.Context, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionRequest(c.Server, permissionUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePermissionWithBody(ctx context.Context, permissionUuid PermissionUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePermissionRequestWithBody(c.Server, permissionUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePermission(ctx context.Context, permissionUuid PermissionUuid, body UpdatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePermissionRequest(c.Server, permissionUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoles(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRole(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRole(ctx context.Context, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleRequest(c.Server, roleUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRole(ctx context.Context, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleRequest(c.Server, roleUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoleWithBody(ctx context.Context, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleRequestWithBody(c.Server, roleUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRole(ctx context.Context, roleUuid RoleUuid, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleRequest(c.Server, roleUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveRolePermissionsWithBody(ctx context.Context, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveRolePermissionsRequestWithBody(c.Server, roleUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveRolePermissions(ctx context.Context, roleUuid RoleUuid, body RemoveRolePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveRolePermissionsRequest(c.Server, roleUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRolePermissions(ctx context.Context, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolePermissionsRequest(c.Server, roleUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRolePermissionsWithBody(ctx context.Context, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRolePermissionsRequestWithBody(c.Server, roleUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRolePermissions(ctx context.Context, roleUuid RoleUuid, body AddRolePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRolePermissionsRequest(c.Server, roleUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntrospectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntrospectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntrospectWithFormdataBody(ctx context.Context, body IntrospectFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntrospectRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganisationsIdentity(ctx context.Context, params *ListOrganisationsIdentityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganisationsIdentityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIAMGranularPolicyOrganisation(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIAMGranularPolicyOrganisationRequest(c.Server, organisationId, subjectType, subjectId, objectType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetIAMGranularPolicyOrganisationWithBody(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetIAMGranularPolicyOrganisationRequestWithBody(c.Server, organisationId, subjectType, subjectId, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetIAMGranularPolicyOrganisation(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, body SetIAMGranularPolicyOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetIAMGranularPolicyOrganisationRequest(c.Server, organisationId, subjectType, subjectId, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIAMPolicyOrganisation(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIAMPolicyOrganisationRequest(c.Server, organisationId, subjectType, subjectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetIAMPolicyOrganisationWithBody(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetIAMPolicyOrganisationRequestWithBody(c.Server, organisationId, subjectType, subjectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetIAMPolicyOrganisation(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, body SetIAMPolicyOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetIAMPolicyOrganisationRequest(c.Server, organisationId, subjectType, subjectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPermissionsOrganisation(ctx context.Context, organisationId OrganisationId, params *ListPermissionsOrganisationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPermissionsOrganisationRequest(c.Server, organisationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionOrganisation(ctx context.Context, organisationId OrganisationId, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionOrganisationRequest(c.Server, organisationId, permissionUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRolesOrganisation(ctx context.Context, organisationId OrganisationId, params *ListRolesOrganisationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRolesOrganisationRequest(c.Server, organisationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleOrganisationWithBody(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleOrganisationRequestWithBody(c.Server, organisationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleOrganisation(ctx context.Context, organisationId OrganisationId, body CreateRoleOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleOrganisationRequest(c.Server, organisationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRoleOrganisation(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleOrganisationRequest(c.Server, organisationId, roleUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoleOrganisation(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleOrganisationRequest(c.Server, organisationId, roleUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoleOrganisationWithBody(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleOrganisationRequestWithBody(c.Server, organisationId, roleUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoleOrganisation(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, body UpdateRoleOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleOrganisationRequest(c.Server, organisationId, roleUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveRolePermissionsOrganisationWithBody(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveRolePermissionsOrganisationRequestWithBody(c.Server, organisationId, roleUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveRolePermissionsOrganisation(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, body RemoveRolePermissionsOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveRolePermissionsOrganisationRequest(c.Server, organisationId, roleUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRolePermissionsOrganisation(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolePermissionsOrganisationRequest(c.Server, organisationId, roleUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRolePermissionsOrganisationWithBody(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRolePermissionsOrganisationRequestWithBody(c.Server, organisationId, roleUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRolePermissionsOrganisation(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, body AddRolePermissionsOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRolePermissionsOrganisationRequest(c.Server, organisationId, roleUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServiceAccountOrganisationWithBody(ctx context.Context, organisationId OrganisationId, params *ListServiceAccountOrganisationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServiceAccountOrganisationRequestWithBody(c.Server, organisationId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServiceAccountOrganisation(ctx context.Context, organisationId OrganisationId, params *ListServiceAccountOrganisationParams, body ListServiceAccountOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServiceAccountOrganisationRequest(c.Server, organisationId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceAccountOrganisationWithBody(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceAccountOrganisationRequestWithBody(c.Server, organisationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceAccountOrganisation(ctx context.Context, organisationId OrganisationId, body CreateServiceAccountOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceAccountOrganisationRequest(c.Server, organisationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceAccountOrganisation(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceAccountOrganisationRequest(c.Server, organisationId, serviceAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAccountOrganisation(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAccountOrganisationRequest(c.Server, organisationId, serviceAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceAccountOrganisationWithBody(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceAccountOrganisationRequestWithBody(c.Server, organisationId, serviceAccountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceAccountOrganisation(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, body UpdateServiceAccountOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceAccountOrganisationRequest(c.Server, organisationId, serviceAccountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSpacesOfServiceAccount(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, params *ListSpacesOfServiceAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSpacesOfServiceAccountRequest(c.Server, organisationId, serviceAccountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSpacesIdentity(ctx context.Context, organisationId OrganisationId, params *ListSpacesIdentityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSpacesIdentityRequest(c.Server, organisationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserOrganisationWithBody(ctx context.Context, organisationId OrganisationId, params *ListUserOrganisationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserOrganisationRequestWithBody(c.Server, organisationId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserOrganisation(ctx context.Context, organisationId OrganisationId, params *ListUserOrganisationParams, body ListUserOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserOrganisationRequest(c.Server, organisationId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserOrganisationWithBody(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserOrganisationRequestWithBody(c.Server, organisationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserOrganisation(ctx context.Context, organisationId OrganisationId, body CreateUserOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserOrganisationRequest(c.Server, organisationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserOrganisation(ctx context.Context, organisationId OrganisationId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserOrganisationRequest(c.Server, organisationId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserOrganisation(ctx context.Context, organisationId OrganisationId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserOrganisationRequest(c.Server, organisationId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserStateOrganisationWithBody(ctx context.Context, organisationId OrganisationId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserStateOrganisationRequestWithBody(c.Server, organisationId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserStateOrganisation(ctx context.Context, organisationId OrganisationId, userId UserId, body PatchUserStateOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserStateOrganisationRequest(c.Server, organisationId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserOrganisationWithBody(ctx context.Context, organisationId OrganisationId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserOrganisationRequestWithBody(c.Server, organisationId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserOrganisation(ctx context.Context, organisationId OrganisationId, userId UserId, body UpdateUserOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserOrganisationRequest(c.Server, organisationId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecoverUserOrganisation(ctx context.Context, organisationId OrganisationId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecoverUserOrganisationRequest(c.Server, organisationId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSpacesOfUser(ctx context.Context, organisationId OrganisationId, userId UserId, params *ListSpacesOfUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSpacesOfUserRequest(c.Server, organisationId, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetACLOrganisation(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, params *GetACLOrganisationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetACLOrganisationRequest(c.Server, organisationId, subjectType, subjectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteACLOrganisationBulkWithBody(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteACLOrganisationBulkRequestWithBody(c.Server, organisationId, subjectType, subjectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteACLOrganisationBulk(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, body DeleteACLOrganisationBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteACLOrganisationBulkRequest(c.Server, organisationId, subjectType, subjectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateACLOrganisationBulkWithBody(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateACLOrganisationBulkRequestWithBody(c.Server, organisationId, subjectType, subjectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateACLOrganisationBulk(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, body CreateACLOrganisationBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateACLOrganisationBulkRequest(c.Server, organisationId, subjectType, subjectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevokeWithBody(ctx context.Context, params *RevokeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevokeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevokeWithFormdataBody(ctx context.Context, params *RevokeParams, body RevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevokeRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIAMGranularPolicySpace(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIAMGranularPolicySpaceRequest(c.Server, spaceId, subjectType, subjectId, objectType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetIAMGranularPolicySpaceWithBody(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetIAMGranularPolicySpaceRequestWithBody(c.Server, spaceId, subjectType, subjectId, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetIAMGranularPolicySpace(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, body SetIAMGranularPolicySpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetIAMGranularPolicySpaceRequest(c.Server, spaceId, subjectType, subjectId, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIAMPolicySpace(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIAMPolicySpaceRequest(c.Server, spaceId, subjectType, subjectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetIAMPolicySpaceWithBody(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetIAMPolicySpaceRequestWithBody(c.Server, spaceId, subjectType, subjectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetIAMPolicySpace(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, body SetIAMPolicySpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetIAMPolicySpaceRequest(c.Server, spaceId, subjectType, subjectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPermissionsSpace(ctx context.Context, spaceId SpaceId, params *ListPermissionsSpaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPermissionsSpaceRequest(c.Server, spaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionSpace(ctx context.Context, spaceId SpaceId, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionSpaceRequest(c.Server, spaceId, permissionUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRolesSpace(ctx context.Context, spaceId SpaceId, params *ListRolesSpaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRolesSpaceRequest(c.Server, spaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleSpaceWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleSpaceRequestWithBody(c.Server, spaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleSpace(ctx context.Context, spaceId SpaceId, body CreateRoleSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleSpaceRequest(c.Server, spaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRoleSpace(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleSpaceRequest(c.Server, spaceId, roleUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoleSpace(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleSpaceRequest(c.Server, spaceId, roleUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoleSpaceWithBody(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleSpaceRequestWithBody(c.Server, spaceId, roleUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoleSpace(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, body UpdateRoleSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleSpaceRequest(c.Server, spaceId, roleUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveRolePermissionsSpaceWithBody(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveRolePermissionsSpaceRequestWithBody(c.Server, spaceId, roleUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveRolePermissionsSpace(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, body RemoveRolePermissionsSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveRolePermissionsSpaceRequest(c.Server, spaceId, roleUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRolePermissionsSpace(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolePermissionsSpaceRequest(c.Server, spaceId, roleUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRolePermissionsSpaceWithBody(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRolePermissionsSpaceRequestWithBody(c.Server, spaceId, roleUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRolePermissionsSpace(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, body AddRolePermissionsSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRolePermissionsSpaceRequest(c.Server, spaceId, roleUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServiceAccountSpaceWithBody(ctx context.Context, spaceId SpaceId, params *ListServiceAccountSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServiceAccountSpaceRequestWithBody(c.Server, spaceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServiceAccountSpace(ctx context.Context, spaceId SpaceId, params *ListServiceAccountSpaceParams, body ListServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServiceAccountSpaceRequest(c.Server, spaceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceAccountSpaceWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceAccountSpaceRequestWithBody(c.Server, spaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceAccountSpace(ctx context.Context, spaceId SpaceId, body CreateServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceAccountSpaceRequest(c.Server, spaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceAccountSpace(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceAccountSpaceRequest(c.Server, spaceId, serviceAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAccountSpace(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAccountSpaceRequest(c.Server, spaceId, serviceAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignServiceAccountToSpace(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignServiceAccountToSpaceRequest(c.Server, spaceId, serviceAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceAccountSpaceWithBody(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceAccountSpaceRequestWithBody(c.Server, spaceId, serviceAccountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceAccountSpace(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, body UpdateServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceAccountSpaceRequest(c.Server, spaceId, serviceAccountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserSpaceWithBody(ctx context.Context, spaceId SpaceId, params *ListUserSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserSpaceRequestWithBody(c.Server, spaceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserSpace(ctx context.Context, spaceId SpaceId, params *ListUserSpaceParams, body ListUserSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserSpaceRequest(c.Server, spaceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserSpaceWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserSpaceRequestWithBody(c.Server, spaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserSpace(ctx context.Context, spaceId SpaceId, body CreateUserSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserSpaceRequest(c.Server, spaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserSpace(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserSpaceRequest(c.Server, spaceId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserSpace(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserSpaceRequest(c.Server, spaceId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserStateSpaceWithBody(ctx context.Context, spaceId SpaceId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserStateSpaceRequestWithBody(c.Server, spaceId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserStateSpace(ctx context.Context, spaceId SpaceId, userId UserId, body PatchUserStateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserStateSpaceRequest(c.Server, spaceId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignUserToSpace(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignUserToSpaceRequest(c.Server, spaceId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserSpaceWithBody(ctx context.Context, spaceId SpaceId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserSpaceRequestWithBody(c.Server, spaceId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserSpace(ctx context.Context, spaceId SpaceId, userId UserId, body UpdateUserSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserSpaceRequest(c.Server, spaceId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecoverUserSpace(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecoverUserSpaceRequest(c.Server, spaceId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetACLSpace(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, params *GetACLSpaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetACLSpaceRequest(c.Server, spaceId, subjectType, subjectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteACLSpaceBulkWithBody(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteACLSpaceBulkRequestWithBody(c.Server, spaceId, subjectType, subjectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteACLSpaceBulk(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, body DeleteACLSpaceBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteACLSpaceBulkRequest(c.Server, spaceId, subjectType, subjectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateACLSpaceBulkWithBody(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateACLSpaceBulkRequestWithBody(c.Server, spaceId, subjectType, subjectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateACLSpaceBulk(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, body CreateACLSpaceBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateACLSpaceBulkRequest(c.Server, spaceId, subjectType, subjectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenWithBody(ctx context.Context, params *TokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenWithFormdataBody(ctx context.Context, params *TokenParams, body TokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSpace(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSpaceRequest(c.Server, spaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpaceById(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpaceByIdRequest(c.Server, spaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSpaceWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSpaceRequestWithBody(c.Server, spaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSpace(ctx context.Context, spaceId SpaceId, body UpdateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSpaceRequest(c.Server, spaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSpacesWithBody(ctx context.Context, organisationId OrganisationId, params *ListSpacesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSpacesRequestWithBody(c.Server, organisationId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSpaces(ctx context.Context, organisationId OrganisationId, params *ListSpacesParams, body ListSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSpacesRequest(c.Server, organisationId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpaceWithBody(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpaceRequestWithBody(c.Server, organisationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpace(ctx context.Context, organisationId OrganisationId, body CreateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpaceRequest(c.Server, organisationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateAdminServiceAccountSpaceRequest calls the generic CreateAdminServiceAccountSpace builder with application/json body
func NewCreateAdminServiceAccountSpaceRequest(server string, organisationId OrganisationId, spaceId SpaceId, body CreateAdminServiceAccountSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAdminServiceAccountSpaceRequestWithBody(server, organisationId, spaceId, "application/json", bodyReader)
}

// NewCreateAdminServiceAccountSpaceRequestWithBody generates requests for CreateAdminServiceAccountSpace with any type of body
func NewCreateAdminServiceAccountSpaceRequestWithBody(server string, organisationId OrganisationId, spaceId SpaceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/admin/organisations/%s/spaces/%s/serviceAccounts", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPermissionsRequest generates requests for ListPermissions
func NewListPermissionsRequest(server string, params *ListPermissionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/internal/admin/permissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePermissionRequest calls the generic CreatePermission builder with application/json body
func NewCreatePermissionRequest(server string, body CreatePermissionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePermissionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePermissionRequestWithBody generates requests for CreatePermission with any type of body
func NewCreatePermissionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/internal/admin/permissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePermissionRequest generates requests for DeletePermission
func NewDeletePermissionRequest(server string, permissionUuid PermissionUuid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permissionUuid", runtime.ParamLocationPath, permissionUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/internal/admin/permissions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPermissionRequest generates requests for GetPermission
func NewGetPermissionRequest(server string, permissionUuid PermissionUuid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permissionUuid", runtime.ParamLocationPath, permissionUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/internal/admin/permissions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePermissionRequest calls the generic UpdatePermission builder with application/json body
func NewUpdatePermissionRequest(server string, permissionUuid PermissionUuid, body UpdatePermissionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePermissionRequestWithBody(server, permissionUuid, "application/json", bodyReader)
}

// NewUpdatePermissionRequestWithBody generates requests for UpdatePermission with any type of body
func NewUpdatePermissionRequestWithBody(server string, permissionUuid PermissionUuid, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permissionUuid", runtime.ParamLocationPath, permissionUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/internal/admin/permissions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRolesRequest generates requests for ListRoles
func NewListRolesRequest(server string, params *ListRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/internal/admin/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRoleRequest calls the generic CreateRole builder with application/json body
func NewCreateRoleRequest(server string, body CreateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRoleRequestWithBody generates requests for CreateRole with any type of body
func NewCreateRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/internal/admin/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleRequest generates requests for DeleteRole
func NewDeleteRoleRequest(server string, roleUuid RoleUuid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/internal/admin/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoleRequest generates requests for GetRole
func NewGetRoleRequest(server string, roleUuid RoleUuid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/internal/admin/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRoleRequest calls the generic UpdateRole builder with application/json body
func NewUpdateRoleRequest(server string, roleUuid RoleUuid, body UpdateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRoleRequestWithBody(server, roleUuid, "application/json", bodyReader)
}

// NewUpdateRoleRequestWithBody generates requests for UpdateRole with any type of body
func NewUpdateRoleRequestWithBody(server string, roleUuid RoleUuid, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/internal/admin/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveRolePermissionsRequest calls the generic RemoveRolePermissions builder with application/json body
func NewRemoveRolePermissionsRequest(server string, roleUuid RoleUuid, body RemoveRolePermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveRolePermissionsRequestWithBody(server, roleUuid, "application/json", bodyReader)
}

// NewRemoveRolePermissionsRequestWithBody generates requests for RemoveRolePermissions with any type of body
func NewRemoveRolePermissionsRequestWithBody(server string, roleUuid RoleUuid, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/internal/admin/roles/%s/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRolePermissionsRequest generates requests for GetRolePermissions
func NewGetRolePermissionsRequest(server string, roleUuid RoleUuid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/internal/admin/roles/%s/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddRolePermissionsRequest calls the generic AddRolePermissions builder with application/json body
func NewAddRolePermissionsRequest(server string, roleUuid RoleUuid, body AddRolePermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddRolePermissionsRequestWithBody(server, roleUuid, "application/json", bodyReader)
}

// NewAddRolePermissionsRequestWithBody generates requests for AddRolePermissions with any type of body
func NewAddRolePermissionsRequestWithBody(server string, roleUuid RoleUuid, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/internal/admin/roles/%s/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIntrospectRequestWithFormdataBody calls the generic Introspect builder with application/x-www-form-urlencoded body
func NewIntrospectRequestWithFormdataBody(server string, body IntrospectFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewIntrospectRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewIntrospectRequestWithBody generates requests for Introspect with any type of body
func NewIntrospectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/introspect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOrganisationsIdentityRequest generates requests for ListOrganisationsIdentity
func NewListOrganisationsIdentityRequest(server string, params *ListOrganisationsIdentityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIAMGranularPolicyOrganisationRequest generates requests for GetIAMGranularPolicyOrganisation
func NewGetIAMGranularPolicyOrganisationRequest(server string, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subjectType", runtime.ParamLocationPath, subjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "subjectId", runtime.ParamLocationPath, subjectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/iamgranularPolicy/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetIAMGranularPolicyOrganisationRequest calls the generic SetIAMGranularPolicyOrganisation builder with application/json body
func NewSetIAMGranularPolicyOrganisationRequest(server string, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, body SetIAMGranularPolicyOrganisationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetIAMGranularPolicyOrganisationRequestWithBody(server, organisationId, subjectType, subjectId, objectType, "application/json", bodyReader)
}

// NewSetIAMGranularPolicyOrganisationRequestWithBody generates requests for SetIAMGranularPolicyOrganisation with any type of body
func NewSetIAMGranularPolicyOrganisationRequestWithBody(server string, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subjectType", runtime.ParamLocationPath, subjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "subjectId", runtime.ParamLocationPath, subjectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/iamgranularPolicy/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIAMPolicyOrganisationRequest generates requests for GetIAMPolicyOrganisation
func NewGetIAMPolicyOrganisationRequest(server string, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subjectType", runtime.ParamLocationPath, subjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "subjectId", runtime.ParamLocationPath, subjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/iampolicy/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetIAMPolicyOrganisationRequest calls the generic SetIAMPolicyOrganisation builder with application/json body
func NewSetIAMPolicyOrganisationRequest(server string, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, body SetIAMPolicyOrganisationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetIAMPolicyOrganisationRequestWithBody(server, organisationId, subjectType, subjectId, "application/json", bodyReader)
}

// NewSetIAMPolicyOrganisationRequestWithBody generates requests for SetIAMPolicyOrganisation with any type of body
func NewSetIAMPolicyOrganisationRequestWithBody(server string, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subjectType", runtime.ParamLocationPath, subjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "subjectId", runtime.ParamLocationPath, subjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/iampolicy/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPermissionsOrganisationRequest generates requests for ListPermissionsOrganisation
func NewListPermissionsOrganisationRequest(server string, organisationId OrganisationId, params *ListPermissionsOrganisationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Service != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, *params.Service); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Resource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource", runtime.ParamLocationQuery, *params.Resource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Subresource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subresource", runtime.ParamLocationQuery, *params.Subresource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Action != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, *params.Action); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPermissionOrganisationRequest generates requests for GetPermissionOrganisation
func NewGetPermissionOrganisationRequest(server string, organisationId OrganisationId, permissionUuid PermissionUuid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "permissionUuid", runtime.ParamLocationPath, permissionUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/permissions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRolesOrganisationRequest generates requests for ListRolesOrganisation
func NewListRolesOrganisationRequest(server string, organisationId OrganisationId, params *ListRolesOrganisationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRoleOrganisationRequest calls the generic CreateRoleOrganisation builder with application/json body
func NewCreateRoleOrganisationRequest(server string, organisationId OrganisationId, body CreateRoleOrganisationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleOrganisationRequestWithBody(server, organisationId, "application/json", bodyReader)
}

// NewCreateRoleOrganisationRequestWithBody generates requests for CreateRoleOrganisation with any type of body
func NewCreateRoleOrganisationRequestWithBody(server string, organisationId OrganisationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleOrganisationRequest generates requests for DeleteRoleOrganisation
func NewDeleteRoleOrganisationRequest(server string, organisationId OrganisationId, roleUuid RoleUuid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoleOrganisationRequest generates requests for GetRoleOrganisation
func NewGetRoleOrganisationRequest(server string, organisationId OrganisationId, roleUuid RoleUuid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRoleOrganisationRequest calls the generic UpdateRoleOrganisation builder with application/json body
func NewUpdateRoleOrganisationRequest(server string, organisationId OrganisationId, roleUuid RoleUuid, body UpdateRoleOrganisationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRoleOrganisationRequestWithBody(server, organisationId, roleUuid, "application/json", bodyReader)
}

// NewUpdateRoleOrganisationRequestWithBody generates requests for UpdateRoleOrganisation with any type of body
func NewUpdateRoleOrganisationRequestWithBody(server string, organisationId OrganisationId, roleUuid RoleUuid, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveRolePermissionsOrganisationRequest calls the generic RemoveRolePermissionsOrganisation builder with application/json body
func NewRemoveRolePermissionsOrganisationRequest(server string, organisationId OrganisationId, roleUuid RoleUuid, body RemoveRolePermissionsOrganisationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveRolePermissionsOrganisationRequestWithBody(server, organisationId, roleUuid, "application/json", bodyReader)
}

// NewRemoveRolePermissionsOrganisationRequestWithBody generates requests for RemoveRolePermissionsOrganisation with any type of body
func NewRemoveRolePermissionsOrganisationRequestWithBody(server string, organisationId OrganisationId, roleUuid RoleUuid, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/roles/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRolePermissionsOrganisationRequest generates requests for GetRolePermissionsOrganisation
func NewGetRolePermissionsOrganisationRequest(server string, organisationId OrganisationId, roleUuid RoleUuid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/roles/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddRolePermissionsOrganisationRequest calls the generic AddRolePermissionsOrganisation builder with application/json body
func NewAddRolePermissionsOrganisationRequest(server string, organisationId OrganisationId, roleUuid RoleUuid, body AddRolePermissionsOrganisationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddRolePermissionsOrganisationRequestWithBody(server, organisationId, roleUuid, "application/json", bodyReader)
}

// NewAddRolePermissionsOrganisationRequestWithBody generates requests for AddRolePermissionsOrganisation with any type of body
func NewAddRolePermissionsOrganisationRequestWithBody(server string, organisationId OrganisationId, roleUuid RoleUuid, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/roles/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListServiceAccountOrganisationRequest calls the generic ListServiceAccountOrganisation builder with application/json body
func NewListServiceAccountOrganisationRequest(server string, organisationId OrganisationId, params *ListServiceAccountOrganisationParams, body ListServiceAccountOrganisationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListServiceAccountOrganisationRequestWithBody(server, organisationId, params, "application/json", bodyReader)
}

// NewListServiceAccountOrganisationRequestWithBody generates requests for ListServiceAccountOrganisation with any type of body
func NewListServiceAccountOrganisationRequestWithBody(server string, organisationId OrganisationId, params *ListServiceAccountOrganisationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/serviceAccounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateServiceAccountOrganisationRequest calls the generic CreateServiceAccountOrganisation builder with application/json body
func NewCreateServiceAccountOrganisationRequest(server string, organisationId OrganisationId, body CreateServiceAccountOrganisationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServiceAccountOrganisationRequestWithBody(server, organisationId, "application/json", bodyReader)
}

// NewCreateServiceAccountOrganisationRequestWithBody generates requests for CreateServiceAccountOrganisation with any type of body
func NewCreateServiceAccountOrganisationRequestWithBody(server string, organisationId OrganisationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/serviceAccounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceAccountOrganisationRequest generates requests for DeleteServiceAccountOrganisation
func NewDeleteServiceAccountOrganisationRequest(server string, organisationId OrganisationId, serviceAccountId ServiceAccountId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceAccountId", runtime.ParamLocationPath, serviceAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/serviceAccounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAccountOrganisationRequest generates requests for GetServiceAccountOrganisation
func NewGetServiceAccountOrganisationRequest(server string, organisationId OrganisationId, serviceAccountId ServiceAccountId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceAccountId", runtime.ParamLocationPath, serviceAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/serviceAccounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceAccountOrganisationRequest calls the generic UpdateServiceAccountOrganisation builder with application/json body
func NewUpdateServiceAccountOrganisationRequest(server string, organisationId OrganisationId, serviceAccountId ServiceAccountId, body UpdateServiceAccountOrganisationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateServiceAccountOrganisationRequestWithBody(server, organisationId, serviceAccountId, "application/json", bodyReader)
}

// NewUpdateServiceAccountOrganisationRequestWithBody generates requests for UpdateServiceAccountOrganisation with any type of body
func NewUpdateServiceAccountOrganisationRequestWithBody(server string, organisationId OrganisationId, serviceAccountId ServiceAccountId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceAccountId", runtime.ParamLocationPath, serviceAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/serviceAccounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSpacesOfServiceAccountRequest generates requests for ListSpacesOfServiceAccount
func NewListSpacesOfServiceAccountRequest(server string, organisationId OrganisationId, serviceAccountId ServiceAccountId, params *ListSpacesOfServiceAccountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceAccountId", runtime.ParamLocationPath, serviceAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/serviceAccounts/%s/spaces", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSpacesIdentityRequest generates requests for ListSpacesIdentity
func NewListSpacesIdentityRequest(server string, organisationId OrganisationId, params *ListSpacesIdentityParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/spaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUserOrganisationRequest calls the generic ListUserOrganisation builder with application/json body
func NewListUserOrganisationRequest(server string, organisationId OrganisationId, params *ListUserOrganisationParams, body ListUserOrganisationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListUserOrganisationRequestWithBody(server, organisationId, params, "application/json", bodyReader)
}

// NewListUserOrganisationRequestWithBody generates requests for ListUserOrganisation with any type of body
func NewListUserOrganisationRequestWithBody(server string, organisationId OrganisationId, params *ListUserOrganisationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateUserOrganisationRequest calls the generic CreateUserOrganisation builder with application/json body
func NewCreateUserOrganisationRequest(server string, organisationId OrganisationId, body CreateUserOrganisationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserOrganisationRequestWithBody(server, organisationId, "application/json", bodyReader)
}

// NewCreateUserOrganisationRequestWithBody generates requests for CreateUserOrganisation with any type of body
func NewCreateUserOrganisationRequestWithBody(server string, organisationId OrganisationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserOrganisationRequest generates requests for DeleteUserOrganisation
func NewDeleteUserOrganisationRequest(server string, organisationId OrganisationId, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserOrganisationRequest generates requests for GetUserOrganisation
func NewGetUserOrganisationRequest(server string, organisationId OrganisationId, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUserStateOrganisationRequest calls the generic PatchUserStateOrganisation builder with application/json body
func NewPatchUserStateOrganisationRequest(server string, organisationId OrganisationId, userId UserId, body PatchUserStateOrganisationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUserStateOrganisationRequestWithBody(server, organisationId, userId, "application/json", bodyReader)
}

// NewPatchUserStateOrganisationRequestWithBody generates requests for PatchUserStateOrganisation with any type of body
func NewPatchUserStateOrganisationRequestWithBody(server string, organisationId OrganisationId, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateUserOrganisationRequest calls the generic UpdateUserOrganisation builder with application/json body
func NewUpdateUserOrganisationRequest(server string, organisationId OrganisationId, userId UserId, body UpdateUserOrganisationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserOrganisationRequestWithBody(server, organisationId, userId, "application/json", bodyReader)
}

// NewUpdateUserOrganisationRequestWithBody generates requests for UpdateUserOrganisation with any type of body
func NewUpdateUserOrganisationRequestWithBody(server string, organisationId OrganisationId, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRecoverUserOrganisationRequest generates requests for RecoverUserOrganisation
func NewRecoverUserOrganisationRequest(server string, organisationId OrganisationId, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/users/%s/recover", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSpacesOfUserRequest generates requests for ListSpacesOfUser
func NewListSpacesOfUserRequest(server string, organisationId OrganisationId, userId UserId, params *ListSpacesOfUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/users/%s/spaces", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetACLOrganisationRequest generates requests for GetACLOrganisation
func NewGetACLOrganisationRequest(server string, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, params *GetACLOrganisationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subjectType", runtime.ParamLocationPath, subjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "subjectId", runtime.ParamLocationPath, subjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/%s/%s/acl", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, params.Service); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource", runtime.ParamLocationQuery, params.Resource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Subresource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subresource", runtime.ParamLocationQuery, *params.Subresource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteACLOrganisationBulkRequest calls the generic DeleteACLOrganisationBulk builder with application/json body
func NewDeleteACLOrganisationBulkRequest(server string, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, body DeleteACLOrganisationBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteACLOrganisationBulkRequestWithBody(server, organisationId, subjectType, subjectId, "application/json", bodyReader)
}

// NewDeleteACLOrganisationBulkRequestWithBody generates requests for DeleteACLOrganisationBulk with any type of body
func NewDeleteACLOrganisationBulkRequestWithBody(server string, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subjectType", runtime.ParamLocationPath, subjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "subjectId", runtime.ParamLocationPath, subjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/%s/%s/bulk/acl", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateACLOrganisationBulkRequest calls the generic CreateACLOrganisationBulk builder with application/json body
func NewCreateACLOrganisationBulkRequest(server string, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, body CreateACLOrganisationBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateACLOrganisationBulkRequestWithBody(server, organisationId, subjectType, subjectId, "application/json", bodyReader)
}

// NewCreateACLOrganisationBulkRequestWithBody generates requests for CreateACLOrganisationBulk with any type of body
func NewCreateACLOrganisationBulkRequestWithBody(server string, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subjectType", runtime.ParamLocationPath, subjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "subjectId", runtime.ParamLocationPath, subjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/organisations/%s/%s/%s/bulk/acl", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRevokeRequestWithFormdataBody calls the generic Revoke builder with application/x-www-form-urlencoded body
func NewRevokeRequestWithFormdataBody(server string, params *RevokeParams, body RevokeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRevokeRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewRevokeRequestWithBody generates requests for Revoke with any type of body
func NewRevokeRequestWithBody(server string, params *RevokeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/revoke")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Authorization != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Authorization", headerParam0)
		}

	}

	return req, nil
}

// NewGetIAMGranularPolicySpaceRequest generates requests for GetIAMGranularPolicySpace
func NewGetIAMGranularPolicySpaceRequest(server string, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subjectType", runtime.ParamLocationPath, subjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "subjectId", runtime.ParamLocationPath, subjectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/iamgranularPolicy/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetIAMGranularPolicySpaceRequest calls the generic SetIAMGranularPolicySpace builder with application/json body
func NewSetIAMGranularPolicySpaceRequest(server string, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, body SetIAMGranularPolicySpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetIAMGranularPolicySpaceRequestWithBody(server, spaceId, subjectType, subjectId, objectType, "application/json", bodyReader)
}

// NewSetIAMGranularPolicySpaceRequestWithBody generates requests for SetIAMGranularPolicySpace with any type of body
func NewSetIAMGranularPolicySpaceRequestWithBody(server string, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subjectType", runtime.ParamLocationPath, subjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "subjectId", runtime.ParamLocationPath, subjectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/iamgranularPolicy/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIAMPolicySpaceRequest generates requests for GetIAMPolicySpace
func NewGetIAMPolicySpaceRequest(server string, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subjectType", runtime.ParamLocationPath, subjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "subjectId", runtime.ParamLocationPath, subjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/iampolicy/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetIAMPolicySpaceRequest calls the generic SetIAMPolicySpace builder with application/json body
func NewSetIAMPolicySpaceRequest(server string, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, body SetIAMPolicySpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetIAMPolicySpaceRequestWithBody(server, spaceId, subjectType, subjectId, "application/json", bodyReader)
}

// NewSetIAMPolicySpaceRequestWithBody generates requests for SetIAMPolicySpace with any type of body
func NewSetIAMPolicySpaceRequestWithBody(server string, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subjectType", runtime.ParamLocationPath, subjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "subjectId", runtime.ParamLocationPath, subjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/iampolicy/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPermissionsSpaceRequest generates requests for ListPermissionsSpace
func NewListPermissionsSpaceRequest(server string, spaceId SpaceId, params *ListPermissionsSpaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Service != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, *params.Service); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Resource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource", runtime.ParamLocationQuery, *params.Resource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Subresource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subresource", runtime.ParamLocationQuery, *params.Subresource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Action != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, *params.Action); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPermissionSpaceRequest generates requests for GetPermissionSpace
func NewGetPermissionSpaceRequest(server string, spaceId SpaceId, permissionUuid PermissionUuid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "permissionUuid", runtime.ParamLocationPath, permissionUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/permissions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRolesSpaceRequest generates requests for ListRolesSpace
func NewListRolesSpaceRequest(server string, spaceId SpaceId, params *ListRolesSpaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRoleSpaceRequest calls the generic CreateRoleSpace builder with application/json body
func NewCreateRoleSpaceRequest(server string, spaceId SpaceId, body CreateRoleSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleSpaceRequestWithBody(server, spaceId, "application/json", bodyReader)
}

// NewCreateRoleSpaceRequestWithBody generates requests for CreateRoleSpace with any type of body
func NewCreateRoleSpaceRequestWithBody(server string, spaceId SpaceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleSpaceRequest generates requests for DeleteRoleSpace
func NewDeleteRoleSpaceRequest(server string, spaceId SpaceId, roleUuid RoleUuid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoleSpaceRequest generates requests for GetRoleSpace
func NewGetRoleSpaceRequest(server string, spaceId SpaceId, roleUuid RoleUuid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRoleSpaceRequest calls the generic UpdateRoleSpace builder with application/json body
func NewUpdateRoleSpaceRequest(server string, spaceId SpaceId, roleUuid RoleUuid, body UpdateRoleSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRoleSpaceRequestWithBody(server, spaceId, roleUuid, "application/json", bodyReader)
}

// NewUpdateRoleSpaceRequestWithBody generates requests for UpdateRoleSpace with any type of body
func NewUpdateRoleSpaceRequestWithBody(server string, spaceId SpaceId, roleUuid RoleUuid, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveRolePermissionsSpaceRequest calls the generic RemoveRolePermissionsSpace builder with application/json body
func NewRemoveRolePermissionsSpaceRequest(server string, spaceId SpaceId, roleUuid RoleUuid, body RemoveRolePermissionsSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveRolePermissionsSpaceRequestWithBody(server, spaceId, roleUuid, "application/json", bodyReader)
}

// NewRemoveRolePermissionsSpaceRequestWithBody generates requests for RemoveRolePermissionsSpace with any type of body
func NewRemoveRolePermissionsSpaceRequestWithBody(server string, spaceId SpaceId, roleUuid RoleUuid, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/roles/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRolePermissionsSpaceRequest generates requests for GetRolePermissionsSpace
func NewGetRolePermissionsSpaceRequest(server string, spaceId SpaceId, roleUuid RoleUuid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/roles/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddRolePermissionsSpaceRequest calls the generic AddRolePermissionsSpace builder with application/json body
func NewAddRolePermissionsSpaceRequest(server string, spaceId SpaceId, roleUuid RoleUuid, body AddRolePermissionsSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddRolePermissionsSpaceRequestWithBody(server, spaceId, roleUuid, "application/json", bodyReader)
}

// NewAddRolePermissionsSpaceRequestWithBody generates requests for AddRolePermissionsSpace with any type of body
func NewAddRolePermissionsSpaceRequestWithBody(server string, spaceId SpaceId, roleUuid RoleUuid, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUuid", runtime.ParamLocationPath, roleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/roles/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListServiceAccountSpaceRequest calls the generic ListServiceAccountSpace builder with application/json body
func NewListServiceAccountSpaceRequest(server string, spaceId SpaceId, params *ListServiceAccountSpaceParams, body ListServiceAccountSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListServiceAccountSpaceRequestWithBody(server, spaceId, params, "application/json", bodyReader)
}

// NewListServiceAccountSpaceRequestWithBody generates requests for ListServiceAccountSpace with any type of body
func NewListServiceAccountSpaceRequestWithBody(server string, spaceId SpaceId, params *ListServiceAccountSpaceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/serviceAccounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateServiceAccountSpaceRequest calls the generic CreateServiceAccountSpace builder with application/json body
func NewCreateServiceAccountSpaceRequest(server string, spaceId SpaceId, body CreateServiceAccountSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServiceAccountSpaceRequestWithBody(server, spaceId, "application/json", bodyReader)
}

// NewCreateServiceAccountSpaceRequestWithBody generates requests for CreateServiceAccountSpace with any type of body
func NewCreateServiceAccountSpaceRequestWithBody(server string, spaceId SpaceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/serviceAccounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceAccountSpaceRequest generates requests for DeleteServiceAccountSpace
func NewDeleteServiceAccountSpaceRequest(server string, spaceId SpaceId, serviceAccountId ServiceAccountId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceAccountId", runtime.ParamLocationPath, serviceAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/serviceAccounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceAccountSpaceRequest generates requests for GetServiceAccountSpace
func NewGetServiceAccountSpaceRequest(server string, spaceId SpaceId, serviceAccountId ServiceAccountId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceAccountId", runtime.ParamLocationPath, serviceAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/serviceAccounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssignServiceAccountToSpaceRequest generates requests for AssignServiceAccountToSpace
func NewAssignServiceAccountToSpaceRequest(server string, spaceId SpaceId, serviceAccountId ServiceAccountId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceAccountId", runtime.ParamLocationPath, serviceAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/serviceAccounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceAccountSpaceRequest calls the generic UpdateServiceAccountSpace builder with application/json body
func NewUpdateServiceAccountSpaceRequest(server string, spaceId SpaceId, serviceAccountId ServiceAccountId, body UpdateServiceAccountSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateServiceAccountSpaceRequestWithBody(server, spaceId, serviceAccountId, "application/json", bodyReader)
}

// NewUpdateServiceAccountSpaceRequestWithBody generates requests for UpdateServiceAccountSpace with any type of body
func NewUpdateServiceAccountSpaceRequestWithBody(server string, spaceId SpaceId, serviceAccountId ServiceAccountId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceAccountId", runtime.ParamLocationPath, serviceAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/serviceAccounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUserSpaceRequest calls the generic ListUserSpace builder with application/json body
func NewListUserSpaceRequest(server string, spaceId SpaceId, params *ListUserSpaceParams, body ListUserSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListUserSpaceRequestWithBody(server, spaceId, params, "application/json", bodyReader)
}

// NewListUserSpaceRequestWithBody generates requests for ListUserSpace with any type of body
func NewListUserSpaceRequestWithBody(server string, spaceId SpaceId, params *ListUserSpaceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateUserSpaceRequest calls the generic CreateUserSpace builder with application/json body
func NewCreateUserSpaceRequest(server string, spaceId SpaceId, body CreateUserSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserSpaceRequestWithBody(server, spaceId, "application/json", bodyReader)
}

// NewCreateUserSpaceRequestWithBody generates requests for CreateUserSpace with any type of body
func NewCreateUserSpaceRequestWithBody(server string, spaceId SpaceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserSpaceRequest generates requests for DeleteUserSpace
func NewDeleteUserSpaceRequest(server string, spaceId SpaceId, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserSpaceRequest generates requests for GetUserSpace
func NewGetUserSpaceRequest(server string, spaceId SpaceId, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUserStateSpaceRequest calls the generic PatchUserStateSpace builder with application/json body
func NewPatchUserStateSpaceRequest(server string, spaceId SpaceId, userId UserId, body PatchUserStateSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUserStateSpaceRequestWithBody(server, spaceId, userId, "application/json", bodyReader)
}

// NewPatchUserStateSpaceRequestWithBody generates requests for PatchUserStateSpace with any type of body
func NewPatchUserStateSpaceRequestWithBody(server string, spaceId SpaceId, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAssignUserToSpaceRequest generates requests for AssignUserToSpace
func NewAssignUserToSpaceRequest(server string, spaceId SpaceId, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserSpaceRequest calls the generic UpdateUserSpace builder with application/json body
func NewUpdateUserSpaceRequest(server string, spaceId SpaceId, userId UserId, body UpdateUserSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserSpaceRequestWithBody(server, spaceId, userId, "application/json", bodyReader)
}

// NewUpdateUserSpaceRequestWithBody generates requests for UpdateUserSpace with any type of body
func NewUpdateUserSpaceRequestWithBody(server string, spaceId SpaceId, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRecoverUserSpaceRequest generates requests for RecoverUserSpace
func NewRecoverUserSpaceRequest(server string, spaceId SpaceId, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/users/%s/recover", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetACLSpaceRequest generates requests for GetACLSpace
func NewGetACLSpaceRequest(server string, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, params *GetACLSpaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subjectType", runtime.ParamLocationPath, subjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "subjectId", runtime.ParamLocationPath, subjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/%s/%s/acl", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, params.Service); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource", runtime.ParamLocationQuery, params.Resource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Subresource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subresource", runtime.ParamLocationQuery, *params.Subresource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteACLSpaceBulkRequest calls the generic DeleteACLSpaceBulk builder with application/json body
func NewDeleteACLSpaceBulkRequest(server string, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, body DeleteACLSpaceBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteACLSpaceBulkRequestWithBody(server, spaceId, subjectType, subjectId, "application/json", bodyReader)
}

// NewDeleteACLSpaceBulkRequestWithBody generates requests for DeleteACLSpaceBulk with any type of body
func NewDeleteACLSpaceBulkRequestWithBody(server string, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subjectType", runtime.ParamLocationPath, subjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "subjectId", runtime.ParamLocationPath, subjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/%s/%s/bulk/acl", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateACLSpaceBulkRequest calls the generic CreateACLSpaceBulk builder with application/json body
func NewCreateACLSpaceBulkRequest(server string, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, body CreateACLSpaceBulkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateACLSpaceBulkRequestWithBody(server, spaceId, subjectType, subjectId, "application/json", bodyReader)
}

// NewCreateACLSpaceBulkRequestWithBody generates requests for CreateACLSpaceBulk with any type of body
func NewCreateACLSpaceBulkRequestWithBody(server string, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subjectType", runtime.ParamLocationPath, subjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "subjectId", runtime.ParamLocationPath, subjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/spaces/%s/%s/%s/bulk/acl", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTokenRequestWithFormdataBody calls the generic Token builder with application/x-www-form-urlencoded body
func NewTokenRequestWithFormdataBody(server string, params *TokenParams, body TokenFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTokenRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewTokenRequestWithBody generates requests for Token with any type of body
func NewTokenRequestWithBody(server string, params *TokenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Authorization != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Authorization", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteSpaceRequest generates requests for DeleteSpace
func NewDeleteSpaceRequest(server string, spaceId SpaceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organisations/spaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpaceByIdRequest generates requests for GetSpaceById
func NewGetSpaceByIdRequest(server string, spaceId SpaceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organisations/spaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSpaceRequest calls the generic UpdateSpace builder with application/json body
func NewUpdateSpaceRequest(server string, spaceId SpaceId, body UpdateSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSpaceRequestWithBody(server, spaceId, "application/json", bodyReader)
}

// NewUpdateSpaceRequestWithBody generates requests for UpdateSpace with any type of body
func NewUpdateSpaceRequestWithBody(server string, spaceId SpaceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organisations/spaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSpacesRequest calls the generic ListSpaces builder with application/json body
func NewListSpacesRequest(server string, organisationId OrganisationId, params *ListSpacesParams, body ListSpacesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSpacesRequestWithBody(server, organisationId, params, "application/json", bodyReader)
}

// NewListSpacesRequestWithBody generates requests for ListSpaces with any type of body
func NewListSpacesRequestWithBody(server string, organisationId OrganisationId, params *ListSpacesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organisations/%s/spaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSpaceRequest calls the generic CreateSpace builder with application/json body
func NewCreateSpaceRequest(server string, organisationId OrganisationId, body CreateSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSpaceRequestWithBody(server, organisationId, "application/json", bodyReader)
}

// NewCreateSpaceRequestWithBody generates requests for CreateSpace with any type of body
func NewCreateSpaceRequestWithBody(server string, organisationId OrganisationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisationId", runtime.ParamLocationPath, organisationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organisations/%s/spaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateAdminServiceAccountSpaceWithBodyWithResponse request with any body
	CreateAdminServiceAccountSpaceWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAdminServiceAccountSpaceResponse, error)

	CreateAdminServiceAccountSpaceWithResponse(ctx context.Context, organisationId OrganisationId, spaceId SpaceId, body CreateAdminServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAdminServiceAccountSpaceResponse, error)

	// ListPermissionsWithResponse request
	ListPermissionsWithResponse(ctx context.Context, params *ListPermissionsParams, reqEditors ...RequestEditorFn) (*ListPermissionsResponse, error)

	// CreatePermissionWithBodyWithResponse request with any body
	CreatePermissionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePermissionResponse, error)

	CreatePermissionWithResponse(ctx context.Context, body CreatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePermissionResponse, error)

	// DeletePermissionWithResponse request
	DeletePermissionWithResponse(ctx context.Context, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*DeletePermissionResponse, error)

	// GetPermissionWithResponse request
	GetPermissionWithResponse(ctx context.Context, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*GetPermissionResponse, error)

	// UpdatePermissionWithBodyWithResponse request with any body
	UpdatePermissionWithBodyWithResponse(ctx context.Context, permissionUuid PermissionUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePermissionResponse, error)

	UpdatePermissionWithResponse(ctx context.Context, permissionUuid PermissionUuid, body UpdatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePermissionResponse, error)

	// ListRolesWithResponse request
	ListRolesWithResponse(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*ListRolesResponse, error)

	// CreateRoleWithBodyWithResponse request with any body
	CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	CreateRoleWithResponse(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	// DeleteRoleWithResponse request
	DeleteRoleWithResponse(ctx context.Context, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error)

	// GetRoleWithResponse request
	GetRoleWithResponse(ctx context.Context, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*GetRoleResponse, error)

	// UpdateRoleWithBodyWithResponse request with any body
	UpdateRoleWithBodyWithResponse(ctx context.Context, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error)

	UpdateRoleWithResponse(ctx context.Context, roleUuid RoleUuid, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error)

	// RemoveRolePermissionsWithBodyWithResponse request with any body
	RemoveRolePermissionsWithBodyWithResponse(ctx context.Context, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveRolePermissionsResponse, error)

	RemoveRolePermissionsWithResponse(ctx context.Context, roleUuid RoleUuid, body RemoveRolePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveRolePermissionsResponse, error)

	// GetRolePermissionsWithResponse request
	GetRolePermissionsWithResponse(ctx context.Context, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*GetRolePermissionsResponse, error)

	// AddRolePermissionsWithBodyWithResponse request with any body
	AddRolePermissionsWithBodyWithResponse(ctx context.Context, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRolePermissionsResponse, error)

	AddRolePermissionsWithResponse(ctx context.Context, roleUuid RoleUuid, body AddRolePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRolePermissionsResponse, error)

	// IntrospectWithBodyWithResponse request with any body
	IntrospectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntrospectResponse, error)

	IntrospectWithFormdataBodyWithResponse(ctx context.Context, body IntrospectFormdataRequestBody, reqEditors ...RequestEditorFn) (*IntrospectResponse, error)

	// ListOrganisationsIdentityWithResponse request
	ListOrganisationsIdentityWithResponse(ctx context.Context, params *ListOrganisationsIdentityParams, reqEditors ...RequestEditorFn) (*ListOrganisationsIdentityResponse, error)

	// GetIAMGranularPolicyOrganisationWithResponse request
	GetIAMGranularPolicyOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, reqEditors ...RequestEditorFn) (*GetIAMGranularPolicyOrganisationResponse, error)

	// SetIAMGranularPolicyOrganisationWithBodyWithResponse request with any body
	SetIAMGranularPolicyOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetIAMGranularPolicyOrganisationResponse, error)

	SetIAMGranularPolicyOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, body SetIAMGranularPolicyOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*SetIAMGranularPolicyOrganisationResponse, error)

	// GetIAMPolicyOrganisationWithResponse request
	GetIAMPolicyOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, reqEditors ...RequestEditorFn) (*GetIAMPolicyOrganisationResponse, error)

	// SetIAMPolicyOrganisationWithBodyWithResponse request with any body
	SetIAMPolicyOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetIAMPolicyOrganisationResponse, error)

	SetIAMPolicyOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, body SetIAMPolicyOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*SetIAMPolicyOrganisationResponse, error)

	// ListPermissionsOrganisationWithResponse request
	ListPermissionsOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, params *ListPermissionsOrganisationParams, reqEditors ...RequestEditorFn) (*ListPermissionsOrganisationResponse, error)

	// GetPermissionOrganisationWithResponse request
	GetPermissionOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*GetPermissionOrganisationResponse, error)

	// ListRolesOrganisationWithResponse request
	ListRolesOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, params *ListRolesOrganisationParams, reqEditors ...RequestEditorFn) (*ListRolesOrganisationResponse, error)

	// CreateRoleOrganisationWithBodyWithResponse request with any body
	CreateRoleOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleOrganisationResponse, error)

	CreateRoleOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, body CreateRoleOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleOrganisationResponse, error)

	// DeleteRoleOrganisationWithResponse request
	DeleteRoleOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*DeleteRoleOrganisationResponse, error)

	// GetRoleOrganisationWithResponse request
	GetRoleOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*GetRoleOrganisationResponse, error)

	// UpdateRoleOrganisationWithBodyWithResponse request with any body
	UpdateRoleOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleOrganisationResponse, error)

	UpdateRoleOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, body UpdateRoleOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleOrganisationResponse, error)

	// RemoveRolePermissionsOrganisationWithBodyWithResponse request with any body
	RemoveRolePermissionsOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveRolePermissionsOrganisationResponse, error)

	RemoveRolePermissionsOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, body RemoveRolePermissionsOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveRolePermissionsOrganisationResponse, error)

	// GetRolePermissionsOrganisationWithResponse request
	GetRolePermissionsOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*GetRolePermissionsOrganisationResponse, error)

	// AddRolePermissionsOrganisationWithBodyWithResponse request with any body
	AddRolePermissionsOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRolePermissionsOrganisationResponse, error)

	AddRolePermissionsOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, body AddRolePermissionsOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRolePermissionsOrganisationResponse, error)

	// ListServiceAccountOrganisationWithBodyWithResponse request with any body
	ListServiceAccountOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, params *ListServiceAccountOrganisationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListServiceAccountOrganisationResponse, error)

	ListServiceAccountOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, params *ListServiceAccountOrganisationParams, body ListServiceAccountOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*ListServiceAccountOrganisationResponse, error)

	// CreateServiceAccountOrganisationWithBodyWithResponse request with any body
	CreateServiceAccountOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceAccountOrganisationResponse, error)

	CreateServiceAccountOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, body CreateServiceAccountOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceAccountOrganisationResponse, error)

	// DeleteServiceAccountOrganisationWithResponse request
	DeleteServiceAccountOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*DeleteServiceAccountOrganisationResponse, error)

	// GetServiceAccountOrganisationWithResponse request
	GetServiceAccountOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*GetServiceAccountOrganisationResponse, error)

	// UpdateServiceAccountOrganisationWithBodyWithResponse request with any body
	UpdateServiceAccountOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceAccountOrganisationResponse, error)

	UpdateServiceAccountOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, body UpdateServiceAccountOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceAccountOrganisationResponse, error)

	// ListSpacesOfServiceAccountWithResponse request
	ListSpacesOfServiceAccountWithResponse(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, params *ListSpacesOfServiceAccountParams, reqEditors ...RequestEditorFn) (*ListSpacesOfServiceAccountResponse, error)

	// ListSpacesIdentityWithResponse request
	ListSpacesIdentityWithResponse(ctx context.Context, organisationId OrganisationId, params *ListSpacesIdentityParams, reqEditors ...RequestEditorFn) (*ListSpacesIdentityResponse, error)

	// ListUserOrganisationWithBodyWithResponse request with any body
	ListUserOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, params *ListUserOrganisationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListUserOrganisationResponse, error)

	ListUserOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, params *ListUserOrganisationParams, body ListUserOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*ListUserOrganisationResponse, error)

	// CreateUserOrganisationWithBodyWithResponse request with any body
	CreateUserOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserOrganisationResponse, error)

	CreateUserOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, body CreateUserOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserOrganisationResponse, error)

	// DeleteUserOrganisationWithResponse request
	DeleteUserOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, reqEditors ...RequestEditorFn) (*DeleteUserOrganisationResponse, error)

	// GetUserOrganisationWithResponse request
	GetUserOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, reqEditors ...RequestEditorFn) (*GetUserOrganisationResponse, error)

	// PatchUserStateOrganisationWithBodyWithResponse request with any body
	PatchUserStateOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserStateOrganisationResponse, error)

	PatchUserStateOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, body PatchUserStateOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserStateOrganisationResponse, error)

	// UpdateUserOrganisationWithBodyWithResponse request with any body
	UpdateUserOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserOrganisationResponse, error)

	UpdateUserOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, body UpdateUserOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserOrganisationResponse, error)

	// RecoverUserOrganisationWithResponse request
	RecoverUserOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, reqEditors ...RequestEditorFn) (*RecoverUserOrganisationResponse, error)

	// ListSpacesOfUserWithResponse request
	ListSpacesOfUserWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, params *ListSpacesOfUserParams, reqEditors ...RequestEditorFn) (*ListSpacesOfUserResponse, error)

	// GetACLOrganisationWithResponse request
	GetACLOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, params *GetACLOrganisationParams, reqEditors ...RequestEditorFn) (*GetACLOrganisationResponse, error)

	// DeleteACLOrganisationBulkWithBodyWithResponse request with any body
	DeleteACLOrganisationBulkWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteACLOrganisationBulkResponse, error)

	DeleteACLOrganisationBulkWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, body DeleteACLOrganisationBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteACLOrganisationBulkResponse, error)

	// CreateACLOrganisationBulkWithBodyWithResponse request with any body
	CreateACLOrganisationBulkWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateACLOrganisationBulkResponse, error)

	CreateACLOrganisationBulkWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, body CreateACLOrganisationBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateACLOrganisationBulkResponse, error)

	// RevokeWithBodyWithResponse request with any body
	RevokeWithBodyWithResponse(ctx context.Context, params *RevokeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RevokeResponse, error)

	RevokeWithFormdataBodyWithResponse(ctx context.Context, params *RevokeParams, body RevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*RevokeResponse, error)

	// GetIAMGranularPolicySpaceWithResponse request
	GetIAMGranularPolicySpaceWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, reqEditors ...RequestEditorFn) (*GetIAMGranularPolicySpaceResponse, error)

	// SetIAMGranularPolicySpaceWithBodyWithResponse request with any body
	SetIAMGranularPolicySpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetIAMGranularPolicySpaceResponse, error)

	SetIAMGranularPolicySpaceWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, body SetIAMGranularPolicySpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*SetIAMGranularPolicySpaceResponse, error)

	// GetIAMPolicySpaceWithResponse request
	GetIAMPolicySpaceWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, reqEditors ...RequestEditorFn) (*GetIAMPolicySpaceResponse, error)

	// SetIAMPolicySpaceWithBodyWithResponse request with any body
	SetIAMPolicySpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetIAMPolicySpaceResponse, error)

	SetIAMPolicySpaceWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, body SetIAMPolicySpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*SetIAMPolicySpaceResponse, error)

	// ListPermissionsSpaceWithResponse request
	ListPermissionsSpaceWithResponse(ctx context.Context, spaceId SpaceId, params *ListPermissionsSpaceParams, reqEditors ...RequestEditorFn) (*ListPermissionsSpaceResponse, error)

	// GetPermissionSpaceWithResponse request
	GetPermissionSpaceWithResponse(ctx context.Context, spaceId SpaceId, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*GetPermissionSpaceResponse, error)

	// ListRolesSpaceWithResponse request
	ListRolesSpaceWithResponse(ctx context.Context, spaceId SpaceId, params *ListRolesSpaceParams, reqEditors ...RequestEditorFn) (*ListRolesSpaceResponse, error)

	// CreateRoleSpaceWithBodyWithResponse request with any body
	CreateRoleSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleSpaceResponse, error)

	CreateRoleSpaceWithResponse(ctx context.Context, spaceId SpaceId, body CreateRoleSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleSpaceResponse, error)

	// DeleteRoleSpaceWithResponse request
	DeleteRoleSpaceWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*DeleteRoleSpaceResponse, error)

	// GetRoleSpaceWithResponse request
	GetRoleSpaceWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*GetRoleSpaceResponse, error)

	// UpdateRoleSpaceWithBodyWithResponse request with any body
	UpdateRoleSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleSpaceResponse, error)

	UpdateRoleSpaceWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, body UpdateRoleSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleSpaceResponse, error)

	// RemoveRolePermissionsSpaceWithBodyWithResponse request with any body
	RemoveRolePermissionsSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveRolePermissionsSpaceResponse, error)

	RemoveRolePermissionsSpaceWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, body RemoveRolePermissionsSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveRolePermissionsSpaceResponse, error)

	// GetRolePermissionsSpaceWithResponse request
	GetRolePermissionsSpaceWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*GetRolePermissionsSpaceResponse, error)

	// AddRolePermissionsSpaceWithBodyWithResponse request with any body
	AddRolePermissionsSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRolePermissionsSpaceResponse, error)

	AddRolePermissionsSpaceWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, body AddRolePermissionsSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRolePermissionsSpaceResponse, error)

	// ListServiceAccountSpaceWithBodyWithResponse request with any body
	ListServiceAccountSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, params *ListServiceAccountSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListServiceAccountSpaceResponse, error)

	ListServiceAccountSpaceWithResponse(ctx context.Context, spaceId SpaceId, params *ListServiceAccountSpaceParams, body ListServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListServiceAccountSpaceResponse, error)

	// CreateServiceAccountSpaceWithBodyWithResponse request with any body
	CreateServiceAccountSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceAccountSpaceResponse, error)

	CreateServiceAccountSpaceWithResponse(ctx context.Context, spaceId SpaceId, body CreateServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceAccountSpaceResponse, error)

	// DeleteServiceAccountSpaceWithResponse request
	DeleteServiceAccountSpaceWithResponse(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*DeleteServiceAccountSpaceResponse, error)

	// GetServiceAccountSpaceWithResponse request
	GetServiceAccountSpaceWithResponse(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*GetServiceAccountSpaceResponse, error)

	// AssignServiceAccountToSpaceWithResponse request
	AssignServiceAccountToSpaceWithResponse(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*AssignServiceAccountToSpaceResponse, error)

	// UpdateServiceAccountSpaceWithBodyWithResponse request with any body
	UpdateServiceAccountSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceAccountSpaceResponse, error)

	UpdateServiceAccountSpaceWithResponse(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, body UpdateServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceAccountSpaceResponse, error)

	// ListUserSpaceWithBodyWithResponse request with any body
	ListUserSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, params *ListUserSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListUserSpaceResponse, error)

	ListUserSpaceWithResponse(ctx context.Context, spaceId SpaceId, params *ListUserSpaceParams, body ListUserSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListUserSpaceResponse, error)

	// CreateUserSpaceWithBodyWithResponse request with any body
	CreateUserSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserSpaceResponse, error)

	CreateUserSpaceWithResponse(ctx context.Context, spaceId SpaceId, body CreateUserSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserSpaceResponse, error)

	// DeleteUserSpaceWithResponse request
	DeleteUserSpaceWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*DeleteUserSpaceResponse, error)

	// GetUserSpaceWithResponse request
	GetUserSpaceWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*GetUserSpaceResponse, error)

	// PatchUserStateSpaceWithBodyWithResponse request with any body
	PatchUserStateSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserStateSpaceResponse, error)

	PatchUserStateSpaceWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, body PatchUserStateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserStateSpaceResponse, error)

	// AssignUserToSpaceWithResponse request
	AssignUserToSpaceWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*AssignUserToSpaceResponse, error)

	// UpdateUserSpaceWithBodyWithResponse request with any body
	UpdateUserSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserSpaceResponse, error)

	UpdateUserSpaceWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, body UpdateUserSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserSpaceResponse, error)

	// RecoverUserSpaceWithResponse request
	RecoverUserSpaceWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*RecoverUserSpaceResponse, error)

	// GetACLSpaceWithResponse request
	GetACLSpaceWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, params *GetACLSpaceParams, reqEditors ...RequestEditorFn) (*GetACLSpaceResponse, error)

	// DeleteACLSpaceBulkWithBodyWithResponse request with any body
	DeleteACLSpaceBulkWithBodyWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteACLSpaceBulkResponse, error)

	DeleteACLSpaceBulkWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, body DeleteACLSpaceBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteACLSpaceBulkResponse, error)

	// CreateACLSpaceBulkWithBodyWithResponse request with any body
	CreateACLSpaceBulkWithBodyWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateACLSpaceBulkResponse, error)

	CreateACLSpaceBulkWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, body CreateACLSpaceBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateACLSpaceBulkResponse, error)

	// TokenWithBodyWithResponse request with any body
	TokenWithBodyWithResponse(ctx context.Context, params *TokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenResponse, error)

	TokenWithFormdataBodyWithResponse(ctx context.Context, params *TokenParams, body TokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*TokenResponse, error)

	// DeleteSpaceWithResponse request
	DeleteSpaceWithResponse(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*DeleteSpaceResponse, error)

	// GetSpaceByIdWithResponse request
	GetSpaceByIdWithResponse(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*GetSpaceByIdResponse, error)

	// UpdateSpaceWithBodyWithResponse request with any body
	UpdateSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSpaceResponse, error)

	UpdateSpaceWithResponse(ctx context.Context, spaceId SpaceId, body UpdateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSpaceResponse, error)

	// ListSpacesWithBodyWithResponse request with any body
	ListSpacesWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, params *ListSpacesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListSpacesResponse, error)

	ListSpacesWithResponse(ctx context.Context, organisationId OrganisationId, params *ListSpacesParams, body ListSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*ListSpacesResponse, error)

	// CreateSpaceWithBodyWithResponse request with any body
	CreateSpaceWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpaceResponse, error)

	CreateSpaceWithResponse(ctx context.Context, organisationId OrganisationId, body CreateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpaceResponse, error)
}

type CreateAdminServiceAccountSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *CreateServiceAccount201ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON409 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r CreateAdminServiceAccountSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAdminServiceAccountSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPermissionsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Permissions200ResponseSchema
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePermissionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PermissionCreated200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r CreatePermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePermissionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r DeletePermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PermissionCreated200ResponseSchema
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePermissionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRolesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *RoleList200ResponseSchema
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *RoleCreated200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r CreateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *RoleCreated200ResponseSchema
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRoleResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveRolePermissionsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r RemoveRolePermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveRolePermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolePermissionsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Permissions200ResponseSchema
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetRolePermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolePermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRolePermissionsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r AddRolePermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRolePermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntrospectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntrospectResponseSchema
	JSON500      *ErrorOauth2
}

// Status returns HTTPResponse.Status
func (r IntrospectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntrospectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganisationsIdentityResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListUserOrganisations200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListOrganisationsIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganisationsIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIAMGranularPolicyOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetIAMGranularPolicy200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetIAMGranularPolicyOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIAMGranularPolicyOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetIAMGranularPolicyOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r SetIAMGranularPolicyOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetIAMGranularPolicyOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIAMPolicyOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetIAMPolicy200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetIAMPolicyOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIAMPolicyOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetIAMPolicyOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r SetIAMPolicyOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetIAMPolicyOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPermissionsOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListPermissions200ResponseSchema
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListPermissionsOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPermissionsOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetPermission200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetPermissionOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRolesOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListRoles200ResponseSchema
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListRolesOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRolesOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *CreateRole200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r CreateRoleOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRoleOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetRole200ResponseSchema
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetRoleOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRoleOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateRoleOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRoleOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveRolePermissionsOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r RemoveRolePermissionsOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveRolePermissionsOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolePermissionsOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetRolePermissions200ResponseSchema
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetRolePermissionsOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolePermissionsOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRolePermissionsOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r AddRolePermissionsOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRolePermissionsOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServiceAccountOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListServiceAccount200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListServiceAccountOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServiceAccountOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceAccountOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *CreateServiceAccount201ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON409 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r CreateServiceAccountOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceAccountOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceAccountOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteServiceAccountOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceAccountOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAccountOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetServiceAccount200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetServiceAccountOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAccountOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceAccountOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *UpdateServiceAccount200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON409 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateServiceAccountOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceAccountOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSpacesOfServiceAccountResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListSpacesServiceAccount200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListSpacesOfServiceAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSpacesOfServiceAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSpacesIdentityResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListSpacesIdentity200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListSpacesIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSpacesIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListUser200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListUserOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *CreateUser201ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON409 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r CreateUserOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteUserOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetUser200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetUserOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUserStateOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PatchUserState200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON409 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r PatchUserStateOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUserStateOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *UpdateUser200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON409 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateUserOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RecoverUserOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *RecoverUser200ResponseSchema
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r RecoverUserOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RecoverUserOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSpacesOfUserResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListSpacesUser200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListSpacesOfUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSpacesOfUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetACLOrganisationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetACL200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetACLOrganisationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetACLOrganisationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteACLOrganisationBulkResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteACLOrganisationBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteACLOrganisationBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateACLOrganisationBulkResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r CreateACLOrganisationBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateACLOrganisationBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorOauth2
	JSON401      *ErrorOauth2
}

// Status returns HTTPResponse.Status
func (r RevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIAMGranularPolicySpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetIAMGranularPolicy200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetIAMGranularPolicySpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIAMGranularPolicySpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetIAMGranularPolicySpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r SetIAMGranularPolicySpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetIAMGranularPolicySpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIAMPolicySpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetIAMPolicy200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetIAMPolicySpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIAMPolicySpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetIAMPolicySpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r SetIAMPolicySpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetIAMPolicySpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPermissionsSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListPermissions200ResponseSchema
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListPermissionsSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPermissionsSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetPermission200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetPermissionSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRolesSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListRoles200ResponseSchema
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListRolesSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRolesSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *CreateRole200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r CreateRoleSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRoleSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetRole200ResponseSchema
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetRoleSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRoleSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateRoleSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRoleSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveRolePermissionsSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r RemoveRolePermissionsSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveRolePermissionsSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolePermissionsSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetRolePermissions200ResponseSchema
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetRolePermissionsSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolePermissionsSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRolePermissionsSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r AddRolePermissionsSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRolePermissionsSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServiceAccountSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListServiceAccount200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListServiceAccountSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServiceAccountSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceAccountSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *CreateServiceAccount201ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON409 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r CreateServiceAccountSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceAccountSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceAccountSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteServiceAccountSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceAccountSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAccountSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetServiceAccount200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetServiceAccountSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAccountSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignServiceAccountToSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r AssignServiceAccountToSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignServiceAccountToSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceAccountSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *UpdateServiceAccount200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON409 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateServiceAccountSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceAccountSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListUser200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListUserSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *CreateUser201ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON409 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r CreateUserSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteUserSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetUser200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetUserSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUserStateSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PatchUserState200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON409 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r PatchUserStateSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUserStateSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignUserToSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r AssignUserToSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignUserToSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *UpdateUser200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON409 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateUserSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RecoverUserSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *RecoverUser200ResponseSchema
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r RecoverUserSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RecoverUserSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetACLSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetACL200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetACLSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetACLSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteACLSpaceBulkResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteACLSpaceBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteACLSpaceBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateACLSpaceBulkResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r CreateACLSpaceBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateACLSpaceBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponseSchema
	JSON400      *ErrorOauth2
	JSON401      *ErrorOauth2
	JSON500      *ErrorOauth2
}

// Status returns HTTPResponse.Status
func (r TokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r DeleteSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpaceByIdResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *GetSpaceById200ResponseSchema
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetSpaceByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpaceByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSpacesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListSpaces200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON404 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r ListSpacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSpacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSpaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *CreateSpace200ResponseSchema
	ApplicationproblemJSON400 *BadRequestError
	ApplicationproblemJSON401 *Error
	ApplicationproblemJSON403 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r CreateSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateAdminServiceAccountSpaceWithBodyWithResponse request with arbitrary body returning *CreateAdminServiceAccountSpaceResponse
func (c *ClientWithResponses) CreateAdminServiceAccountSpaceWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAdminServiceAccountSpaceResponse, error) {
	rsp, err := c.CreateAdminServiceAccountSpaceWithBody(ctx, organisationId, spaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAdminServiceAccountSpaceResponse(rsp)
}

func (c *ClientWithResponses) CreateAdminServiceAccountSpaceWithResponse(ctx context.Context, organisationId OrganisationId, spaceId SpaceId, body CreateAdminServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAdminServiceAccountSpaceResponse, error) {
	rsp, err := c.CreateAdminServiceAccountSpace(ctx, organisationId, spaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAdminServiceAccountSpaceResponse(rsp)
}

// ListPermissionsWithResponse request returning *ListPermissionsResponse
func (c *ClientWithResponses) ListPermissionsWithResponse(ctx context.Context, params *ListPermissionsParams, reqEditors ...RequestEditorFn) (*ListPermissionsResponse, error) {
	rsp, err := c.ListPermissions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPermissionsResponse(rsp)
}

// CreatePermissionWithBodyWithResponse request with arbitrary body returning *CreatePermissionResponse
func (c *ClientWithResponses) CreatePermissionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePermissionResponse, error) {
	rsp, err := c.CreatePermissionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePermissionResponse(rsp)
}

func (c *ClientWithResponses) CreatePermissionWithResponse(ctx context.Context, body CreatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePermissionResponse, error) {
	rsp, err := c.CreatePermission(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePermissionResponse(rsp)
}

// DeletePermissionWithResponse request returning *DeletePermissionResponse
func (c *ClientWithResponses) DeletePermissionWithResponse(ctx context.Context, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*DeletePermissionResponse, error) {
	rsp, err := c.DeletePermission(ctx, permissionUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePermissionResponse(rsp)
}

// GetPermissionWithResponse request returning *GetPermissionResponse
func (c *ClientWithResponses) GetPermissionWithResponse(ctx context.Context, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*GetPermissionResponse, error) {
	rsp, err := c.GetPermission(ctx, permissionUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionResponse(rsp)
}

// UpdatePermissionWithBodyWithResponse request with arbitrary body returning *UpdatePermissionResponse
func (c *ClientWithResponses) UpdatePermissionWithBodyWithResponse(ctx context.Context, permissionUuid PermissionUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePermissionResponse, error) {
	rsp, err := c.UpdatePermissionWithBody(ctx, permissionUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePermissionResponse(rsp)
}

func (c *ClientWithResponses) UpdatePermissionWithResponse(ctx context.Context, permissionUuid PermissionUuid, body UpdatePermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePermissionResponse, error) {
	rsp, err := c.UpdatePermission(ctx, permissionUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePermissionResponse(rsp)
}

// ListRolesWithResponse request returning *ListRolesResponse
func (c *ClientWithResponses) ListRolesWithResponse(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*ListRolesResponse, error) {
	rsp, err := c.ListRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRolesResponse(rsp)
}

// CreateRoleWithBodyWithResponse request with arbitrary body returning *CreateRoleResponse
func (c *ClientWithResponses) CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

func (c *ClientWithResponses) CreateRoleWithResponse(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

// DeleteRoleWithResponse request returning *DeleteRoleResponse
func (c *ClientWithResponses) DeleteRoleWithResponse(ctx context.Context, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error) {
	rsp, err := c.DeleteRole(ctx, roleUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleResponse(rsp)
}

// GetRoleWithResponse request returning *GetRoleResponse
func (c *ClientWithResponses) GetRoleWithResponse(ctx context.Context, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*GetRoleResponse, error) {
	rsp, err := c.GetRole(ctx, roleUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleResponse(rsp)
}

// UpdateRoleWithBodyWithResponse request with arbitrary body returning *UpdateRoleResponse
func (c *ClientWithResponses) UpdateRoleWithBodyWithResponse(ctx context.Context, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error) {
	rsp, err := c.UpdateRoleWithBody(ctx, roleUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleResponse(rsp)
}

func (c *ClientWithResponses) UpdateRoleWithResponse(ctx context.Context, roleUuid RoleUuid, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error) {
	rsp, err := c.UpdateRole(ctx, roleUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleResponse(rsp)
}

// RemoveRolePermissionsWithBodyWithResponse request with arbitrary body returning *RemoveRolePermissionsResponse
func (c *ClientWithResponses) RemoveRolePermissionsWithBodyWithResponse(ctx context.Context, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveRolePermissionsResponse, error) {
	rsp, err := c.RemoveRolePermissionsWithBody(ctx, roleUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveRolePermissionsResponse(rsp)
}

func (c *ClientWithResponses) RemoveRolePermissionsWithResponse(ctx context.Context, roleUuid RoleUuid, body RemoveRolePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveRolePermissionsResponse, error) {
	rsp, err := c.RemoveRolePermissions(ctx, roleUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveRolePermissionsResponse(rsp)
}

// GetRolePermissionsWithResponse request returning *GetRolePermissionsResponse
func (c *ClientWithResponses) GetRolePermissionsWithResponse(ctx context.Context, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*GetRolePermissionsResponse, error) {
	rsp, err := c.GetRolePermissions(ctx, roleUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolePermissionsResponse(rsp)
}

// AddRolePermissionsWithBodyWithResponse request with arbitrary body returning *AddRolePermissionsResponse
func (c *ClientWithResponses) AddRolePermissionsWithBodyWithResponse(ctx context.Context, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRolePermissionsResponse, error) {
	rsp, err := c.AddRolePermissionsWithBody(ctx, roleUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRolePermissionsResponse(rsp)
}

func (c *ClientWithResponses) AddRolePermissionsWithResponse(ctx context.Context, roleUuid RoleUuid, body AddRolePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRolePermissionsResponse, error) {
	rsp, err := c.AddRolePermissions(ctx, roleUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRolePermissionsResponse(rsp)
}

// IntrospectWithBodyWithResponse request with arbitrary body returning *IntrospectResponse
func (c *ClientWithResponses) IntrospectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntrospectResponse, error) {
	rsp, err := c.IntrospectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntrospectResponse(rsp)
}

func (c *ClientWithResponses) IntrospectWithFormdataBodyWithResponse(ctx context.Context, body IntrospectFormdataRequestBody, reqEditors ...RequestEditorFn) (*IntrospectResponse, error) {
	rsp, err := c.IntrospectWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntrospectResponse(rsp)
}

// ListOrganisationsIdentityWithResponse request returning *ListOrganisationsIdentityResponse
func (c *ClientWithResponses) ListOrganisationsIdentityWithResponse(ctx context.Context, params *ListOrganisationsIdentityParams, reqEditors ...RequestEditorFn) (*ListOrganisationsIdentityResponse, error) {
	rsp, err := c.ListOrganisationsIdentity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganisationsIdentityResponse(rsp)
}

// GetIAMGranularPolicyOrganisationWithResponse request returning *GetIAMGranularPolicyOrganisationResponse
func (c *ClientWithResponses) GetIAMGranularPolicyOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, reqEditors ...RequestEditorFn) (*GetIAMGranularPolicyOrganisationResponse, error) {
	rsp, err := c.GetIAMGranularPolicyOrganisation(ctx, organisationId, subjectType, subjectId, objectType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIAMGranularPolicyOrganisationResponse(rsp)
}

// SetIAMGranularPolicyOrganisationWithBodyWithResponse request with arbitrary body returning *SetIAMGranularPolicyOrganisationResponse
func (c *ClientWithResponses) SetIAMGranularPolicyOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetIAMGranularPolicyOrganisationResponse, error) {
	rsp, err := c.SetIAMGranularPolicyOrganisationWithBody(ctx, organisationId, subjectType, subjectId, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetIAMGranularPolicyOrganisationResponse(rsp)
}

func (c *ClientWithResponses) SetIAMGranularPolicyOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, body SetIAMGranularPolicyOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*SetIAMGranularPolicyOrganisationResponse, error) {
	rsp, err := c.SetIAMGranularPolicyOrganisation(ctx, organisationId, subjectType, subjectId, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetIAMGranularPolicyOrganisationResponse(rsp)
}

// GetIAMPolicyOrganisationWithResponse request returning *GetIAMPolicyOrganisationResponse
func (c *ClientWithResponses) GetIAMPolicyOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, reqEditors ...RequestEditorFn) (*GetIAMPolicyOrganisationResponse, error) {
	rsp, err := c.GetIAMPolicyOrganisation(ctx, organisationId, subjectType, subjectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIAMPolicyOrganisationResponse(rsp)
}

// SetIAMPolicyOrganisationWithBodyWithResponse request with arbitrary body returning *SetIAMPolicyOrganisationResponse
func (c *ClientWithResponses) SetIAMPolicyOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetIAMPolicyOrganisationResponse, error) {
	rsp, err := c.SetIAMPolicyOrganisationWithBody(ctx, organisationId, subjectType, subjectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetIAMPolicyOrganisationResponse(rsp)
}

func (c *ClientWithResponses) SetIAMPolicyOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, body SetIAMPolicyOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*SetIAMPolicyOrganisationResponse, error) {
	rsp, err := c.SetIAMPolicyOrganisation(ctx, organisationId, subjectType, subjectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetIAMPolicyOrganisationResponse(rsp)
}

// ListPermissionsOrganisationWithResponse request returning *ListPermissionsOrganisationResponse
func (c *ClientWithResponses) ListPermissionsOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, params *ListPermissionsOrganisationParams, reqEditors ...RequestEditorFn) (*ListPermissionsOrganisationResponse, error) {
	rsp, err := c.ListPermissionsOrganisation(ctx, organisationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPermissionsOrganisationResponse(rsp)
}

// GetPermissionOrganisationWithResponse request returning *GetPermissionOrganisationResponse
func (c *ClientWithResponses) GetPermissionOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*GetPermissionOrganisationResponse, error) {
	rsp, err := c.GetPermissionOrganisation(ctx, organisationId, permissionUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionOrganisationResponse(rsp)
}

// ListRolesOrganisationWithResponse request returning *ListRolesOrganisationResponse
func (c *ClientWithResponses) ListRolesOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, params *ListRolesOrganisationParams, reqEditors ...RequestEditorFn) (*ListRolesOrganisationResponse, error) {
	rsp, err := c.ListRolesOrganisation(ctx, organisationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRolesOrganisationResponse(rsp)
}

// CreateRoleOrganisationWithBodyWithResponse request with arbitrary body returning *CreateRoleOrganisationResponse
func (c *ClientWithResponses) CreateRoleOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleOrganisationResponse, error) {
	rsp, err := c.CreateRoleOrganisationWithBody(ctx, organisationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleOrganisationResponse(rsp)
}

func (c *ClientWithResponses) CreateRoleOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, body CreateRoleOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleOrganisationResponse, error) {
	rsp, err := c.CreateRoleOrganisation(ctx, organisationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleOrganisationResponse(rsp)
}

// DeleteRoleOrganisationWithResponse request returning *DeleteRoleOrganisationResponse
func (c *ClientWithResponses) DeleteRoleOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*DeleteRoleOrganisationResponse, error) {
	rsp, err := c.DeleteRoleOrganisation(ctx, organisationId, roleUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleOrganisationResponse(rsp)
}

// GetRoleOrganisationWithResponse request returning *GetRoleOrganisationResponse
func (c *ClientWithResponses) GetRoleOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*GetRoleOrganisationResponse, error) {
	rsp, err := c.GetRoleOrganisation(ctx, organisationId, roleUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleOrganisationResponse(rsp)
}

// UpdateRoleOrganisationWithBodyWithResponse request with arbitrary body returning *UpdateRoleOrganisationResponse
func (c *ClientWithResponses) UpdateRoleOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleOrganisationResponse, error) {
	rsp, err := c.UpdateRoleOrganisationWithBody(ctx, organisationId, roleUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleOrganisationResponse(rsp)
}

func (c *ClientWithResponses) UpdateRoleOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, body UpdateRoleOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleOrganisationResponse, error) {
	rsp, err := c.UpdateRoleOrganisation(ctx, organisationId, roleUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleOrganisationResponse(rsp)
}

// RemoveRolePermissionsOrganisationWithBodyWithResponse request with arbitrary body returning *RemoveRolePermissionsOrganisationResponse
func (c *ClientWithResponses) RemoveRolePermissionsOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveRolePermissionsOrganisationResponse, error) {
	rsp, err := c.RemoveRolePermissionsOrganisationWithBody(ctx, organisationId, roleUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveRolePermissionsOrganisationResponse(rsp)
}

func (c *ClientWithResponses) RemoveRolePermissionsOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, body RemoveRolePermissionsOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveRolePermissionsOrganisationResponse, error) {
	rsp, err := c.RemoveRolePermissionsOrganisation(ctx, organisationId, roleUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveRolePermissionsOrganisationResponse(rsp)
}

// GetRolePermissionsOrganisationWithResponse request returning *GetRolePermissionsOrganisationResponse
func (c *ClientWithResponses) GetRolePermissionsOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*GetRolePermissionsOrganisationResponse, error) {
	rsp, err := c.GetRolePermissionsOrganisation(ctx, organisationId, roleUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolePermissionsOrganisationResponse(rsp)
}

// AddRolePermissionsOrganisationWithBodyWithResponse request with arbitrary body returning *AddRolePermissionsOrganisationResponse
func (c *ClientWithResponses) AddRolePermissionsOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRolePermissionsOrganisationResponse, error) {
	rsp, err := c.AddRolePermissionsOrganisationWithBody(ctx, organisationId, roleUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRolePermissionsOrganisationResponse(rsp)
}

func (c *ClientWithResponses) AddRolePermissionsOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, roleUuid RoleUuid, body AddRolePermissionsOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRolePermissionsOrganisationResponse, error) {
	rsp, err := c.AddRolePermissionsOrganisation(ctx, organisationId, roleUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRolePermissionsOrganisationResponse(rsp)
}

// ListServiceAccountOrganisationWithBodyWithResponse request with arbitrary body returning *ListServiceAccountOrganisationResponse
func (c *ClientWithResponses) ListServiceAccountOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, params *ListServiceAccountOrganisationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListServiceAccountOrganisationResponse, error) {
	rsp, err := c.ListServiceAccountOrganisationWithBody(ctx, organisationId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServiceAccountOrganisationResponse(rsp)
}

func (c *ClientWithResponses) ListServiceAccountOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, params *ListServiceAccountOrganisationParams, body ListServiceAccountOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*ListServiceAccountOrganisationResponse, error) {
	rsp, err := c.ListServiceAccountOrganisation(ctx, organisationId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServiceAccountOrganisationResponse(rsp)
}

// CreateServiceAccountOrganisationWithBodyWithResponse request with arbitrary body returning *CreateServiceAccountOrganisationResponse
func (c *ClientWithResponses) CreateServiceAccountOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceAccountOrganisationResponse, error) {
	rsp, err := c.CreateServiceAccountOrganisationWithBody(ctx, organisationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceAccountOrganisationResponse(rsp)
}

func (c *ClientWithResponses) CreateServiceAccountOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, body CreateServiceAccountOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceAccountOrganisationResponse, error) {
	rsp, err := c.CreateServiceAccountOrganisation(ctx, organisationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceAccountOrganisationResponse(rsp)
}

// DeleteServiceAccountOrganisationWithResponse request returning *DeleteServiceAccountOrganisationResponse
func (c *ClientWithResponses) DeleteServiceAccountOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*DeleteServiceAccountOrganisationResponse, error) {
	rsp, err := c.DeleteServiceAccountOrganisation(ctx, organisationId, serviceAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceAccountOrganisationResponse(rsp)
}

// GetServiceAccountOrganisationWithResponse request returning *GetServiceAccountOrganisationResponse
func (c *ClientWithResponses) GetServiceAccountOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*GetServiceAccountOrganisationResponse, error) {
	rsp, err := c.GetServiceAccountOrganisation(ctx, organisationId, serviceAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAccountOrganisationResponse(rsp)
}

// UpdateServiceAccountOrganisationWithBodyWithResponse request with arbitrary body returning *UpdateServiceAccountOrganisationResponse
func (c *ClientWithResponses) UpdateServiceAccountOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceAccountOrganisationResponse, error) {
	rsp, err := c.UpdateServiceAccountOrganisationWithBody(ctx, organisationId, serviceAccountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceAccountOrganisationResponse(rsp)
}

func (c *ClientWithResponses) UpdateServiceAccountOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, body UpdateServiceAccountOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceAccountOrganisationResponse, error) {
	rsp, err := c.UpdateServiceAccountOrganisation(ctx, organisationId, serviceAccountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceAccountOrganisationResponse(rsp)
}

// ListSpacesOfServiceAccountWithResponse request returning *ListSpacesOfServiceAccountResponse
func (c *ClientWithResponses) ListSpacesOfServiceAccountWithResponse(ctx context.Context, organisationId OrganisationId, serviceAccountId ServiceAccountId, params *ListSpacesOfServiceAccountParams, reqEditors ...RequestEditorFn) (*ListSpacesOfServiceAccountResponse, error) {
	rsp, err := c.ListSpacesOfServiceAccount(ctx, organisationId, serviceAccountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSpacesOfServiceAccountResponse(rsp)
}

// ListSpacesIdentityWithResponse request returning *ListSpacesIdentityResponse
func (c *ClientWithResponses) ListSpacesIdentityWithResponse(ctx context.Context, organisationId OrganisationId, params *ListSpacesIdentityParams, reqEditors ...RequestEditorFn) (*ListSpacesIdentityResponse, error) {
	rsp, err := c.ListSpacesIdentity(ctx, organisationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSpacesIdentityResponse(rsp)
}

// ListUserOrganisationWithBodyWithResponse request with arbitrary body returning *ListUserOrganisationResponse
func (c *ClientWithResponses) ListUserOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, params *ListUserOrganisationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListUserOrganisationResponse, error) {
	rsp, err := c.ListUserOrganisationWithBody(ctx, organisationId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserOrganisationResponse(rsp)
}

func (c *ClientWithResponses) ListUserOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, params *ListUserOrganisationParams, body ListUserOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*ListUserOrganisationResponse, error) {
	rsp, err := c.ListUserOrganisation(ctx, organisationId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserOrganisationResponse(rsp)
}

// CreateUserOrganisationWithBodyWithResponse request with arbitrary body returning *CreateUserOrganisationResponse
func (c *ClientWithResponses) CreateUserOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserOrganisationResponse, error) {
	rsp, err := c.CreateUserOrganisationWithBody(ctx, organisationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserOrganisationResponse(rsp)
}

func (c *ClientWithResponses) CreateUserOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, body CreateUserOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserOrganisationResponse, error) {
	rsp, err := c.CreateUserOrganisation(ctx, organisationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserOrganisationResponse(rsp)
}

// DeleteUserOrganisationWithResponse request returning *DeleteUserOrganisationResponse
func (c *ClientWithResponses) DeleteUserOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, reqEditors ...RequestEditorFn) (*DeleteUserOrganisationResponse, error) {
	rsp, err := c.DeleteUserOrganisation(ctx, organisationId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserOrganisationResponse(rsp)
}

// GetUserOrganisationWithResponse request returning *GetUserOrganisationResponse
func (c *ClientWithResponses) GetUserOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, reqEditors ...RequestEditorFn) (*GetUserOrganisationResponse, error) {
	rsp, err := c.GetUserOrganisation(ctx, organisationId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserOrganisationResponse(rsp)
}

// PatchUserStateOrganisationWithBodyWithResponse request with arbitrary body returning *PatchUserStateOrganisationResponse
func (c *ClientWithResponses) PatchUserStateOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserStateOrganisationResponse, error) {
	rsp, err := c.PatchUserStateOrganisationWithBody(ctx, organisationId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserStateOrganisationResponse(rsp)
}

func (c *ClientWithResponses) PatchUserStateOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, body PatchUserStateOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserStateOrganisationResponse, error) {
	rsp, err := c.PatchUserStateOrganisation(ctx, organisationId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserStateOrganisationResponse(rsp)
}

// UpdateUserOrganisationWithBodyWithResponse request with arbitrary body returning *UpdateUserOrganisationResponse
func (c *ClientWithResponses) UpdateUserOrganisationWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserOrganisationResponse, error) {
	rsp, err := c.UpdateUserOrganisationWithBody(ctx, organisationId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserOrganisationResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, body UpdateUserOrganisationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserOrganisationResponse, error) {
	rsp, err := c.UpdateUserOrganisation(ctx, organisationId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserOrganisationResponse(rsp)
}

// RecoverUserOrganisationWithResponse request returning *RecoverUserOrganisationResponse
func (c *ClientWithResponses) RecoverUserOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, reqEditors ...RequestEditorFn) (*RecoverUserOrganisationResponse, error) {
	rsp, err := c.RecoverUserOrganisation(ctx, organisationId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecoverUserOrganisationResponse(rsp)
}

// ListSpacesOfUserWithResponse request returning *ListSpacesOfUserResponse
func (c *ClientWithResponses) ListSpacesOfUserWithResponse(ctx context.Context, organisationId OrganisationId, userId UserId, params *ListSpacesOfUserParams, reqEditors ...RequestEditorFn) (*ListSpacesOfUserResponse, error) {
	rsp, err := c.ListSpacesOfUser(ctx, organisationId, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSpacesOfUserResponse(rsp)
}

// GetACLOrganisationWithResponse request returning *GetACLOrganisationResponse
func (c *ClientWithResponses) GetACLOrganisationWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, params *GetACLOrganisationParams, reqEditors ...RequestEditorFn) (*GetACLOrganisationResponse, error) {
	rsp, err := c.GetACLOrganisation(ctx, organisationId, subjectType, subjectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetACLOrganisationResponse(rsp)
}

// DeleteACLOrganisationBulkWithBodyWithResponse request with arbitrary body returning *DeleteACLOrganisationBulkResponse
func (c *ClientWithResponses) DeleteACLOrganisationBulkWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteACLOrganisationBulkResponse, error) {
	rsp, err := c.DeleteACLOrganisationBulkWithBody(ctx, organisationId, subjectType, subjectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteACLOrganisationBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteACLOrganisationBulkWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, body DeleteACLOrganisationBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteACLOrganisationBulkResponse, error) {
	rsp, err := c.DeleteACLOrganisationBulk(ctx, organisationId, subjectType, subjectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteACLOrganisationBulkResponse(rsp)
}

// CreateACLOrganisationBulkWithBodyWithResponse request with arbitrary body returning *CreateACLOrganisationBulkResponse
func (c *ClientWithResponses) CreateACLOrganisationBulkWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateACLOrganisationBulkResponse, error) {
	rsp, err := c.CreateACLOrganisationBulkWithBody(ctx, organisationId, subjectType, subjectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateACLOrganisationBulkResponse(rsp)
}

func (c *ClientWithResponses) CreateACLOrganisationBulkWithResponse(ctx context.Context, organisationId OrganisationId, subjectType SubjectTypeParam, subjectId SubjectId, body CreateACLOrganisationBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateACLOrganisationBulkResponse, error) {
	rsp, err := c.CreateACLOrganisationBulk(ctx, organisationId, subjectType, subjectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateACLOrganisationBulkResponse(rsp)
}

// RevokeWithBodyWithResponse request with arbitrary body returning *RevokeResponse
func (c *ClientWithResponses) RevokeWithBodyWithResponse(ctx context.Context, params *RevokeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RevokeResponse, error) {
	rsp, err := c.RevokeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevokeResponse(rsp)
}

func (c *ClientWithResponses) RevokeWithFormdataBodyWithResponse(ctx context.Context, params *RevokeParams, body RevokeFormdataRequestBody, reqEditors ...RequestEditorFn) (*RevokeResponse, error) {
	rsp, err := c.RevokeWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevokeResponse(rsp)
}

// GetIAMGranularPolicySpaceWithResponse request returning *GetIAMGranularPolicySpaceResponse
func (c *ClientWithResponses) GetIAMGranularPolicySpaceWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, reqEditors ...RequestEditorFn) (*GetIAMGranularPolicySpaceResponse, error) {
	rsp, err := c.GetIAMGranularPolicySpace(ctx, spaceId, subjectType, subjectId, objectType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIAMGranularPolicySpaceResponse(rsp)
}

// SetIAMGranularPolicySpaceWithBodyWithResponse request with arbitrary body returning *SetIAMGranularPolicySpaceResponse
func (c *ClientWithResponses) SetIAMGranularPolicySpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetIAMGranularPolicySpaceResponse, error) {
	rsp, err := c.SetIAMGranularPolicySpaceWithBody(ctx, spaceId, subjectType, subjectId, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetIAMGranularPolicySpaceResponse(rsp)
}

func (c *ClientWithResponses) SetIAMGranularPolicySpaceWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, objectType ObjectType, body SetIAMGranularPolicySpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*SetIAMGranularPolicySpaceResponse, error) {
	rsp, err := c.SetIAMGranularPolicySpace(ctx, spaceId, subjectType, subjectId, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetIAMGranularPolicySpaceResponse(rsp)
}

// GetIAMPolicySpaceWithResponse request returning *GetIAMPolicySpaceResponse
func (c *ClientWithResponses) GetIAMPolicySpaceWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, reqEditors ...RequestEditorFn) (*GetIAMPolicySpaceResponse, error) {
	rsp, err := c.GetIAMPolicySpace(ctx, spaceId, subjectType, subjectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIAMPolicySpaceResponse(rsp)
}

// SetIAMPolicySpaceWithBodyWithResponse request with arbitrary body returning *SetIAMPolicySpaceResponse
func (c *ClientWithResponses) SetIAMPolicySpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetIAMPolicySpaceResponse, error) {
	rsp, err := c.SetIAMPolicySpaceWithBody(ctx, spaceId, subjectType, subjectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetIAMPolicySpaceResponse(rsp)
}

func (c *ClientWithResponses) SetIAMPolicySpaceWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, body SetIAMPolicySpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*SetIAMPolicySpaceResponse, error) {
	rsp, err := c.SetIAMPolicySpace(ctx, spaceId, subjectType, subjectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetIAMPolicySpaceResponse(rsp)
}

// ListPermissionsSpaceWithResponse request returning *ListPermissionsSpaceResponse
func (c *ClientWithResponses) ListPermissionsSpaceWithResponse(ctx context.Context, spaceId SpaceId, params *ListPermissionsSpaceParams, reqEditors ...RequestEditorFn) (*ListPermissionsSpaceResponse, error) {
	rsp, err := c.ListPermissionsSpace(ctx, spaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPermissionsSpaceResponse(rsp)
}

// GetPermissionSpaceWithResponse request returning *GetPermissionSpaceResponse
func (c *ClientWithResponses) GetPermissionSpaceWithResponse(ctx context.Context, spaceId SpaceId, permissionUuid PermissionUuid, reqEditors ...RequestEditorFn) (*GetPermissionSpaceResponse, error) {
	rsp, err := c.GetPermissionSpace(ctx, spaceId, permissionUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionSpaceResponse(rsp)
}

// ListRolesSpaceWithResponse request returning *ListRolesSpaceResponse
func (c *ClientWithResponses) ListRolesSpaceWithResponse(ctx context.Context, spaceId SpaceId, params *ListRolesSpaceParams, reqEditors ...RequestEditorFn) (*ListRolesSpaceResponse, error) {
	rsp, err := c.ListRolesSpace(ctx, spaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRolesSpaceResponse(rsp)
}

// CreateRoleSpaceWithBodyWithResponse request with arbitrary body returning *CreateRoleSpaceResponse
func (c *ClientWithResponses) CreateRoleSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleSpaceResponse, error) {
	rsp, err := c.CreateRoleSpaceWithBody(ctx, spaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleSpaceResponse(rsp)
}

func (c *ClientWithResponses) CreateRoleSpaceWithResponse(ctx context.Context, spaceId SpaceId, body CreateRoleSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleSpaceResponse, error) {
	rsp, err := c.CreateRoleSpace(ctx, spaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleSpaceResponse(rsp)
}

// DeleteRoleSpaceWithResponse request returning *DeleteRoleSpaceResponse
func (c *ClientWithResponses) DeleteRoleSpaceWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*DeleteRoleSpaceResponse, error) {
	rsp, err := c.DeleteRoleSpace(ctx, spaceId, roleUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleSpaceResponse(rsp)
}

// GetRoleSpaceWithResponse request returning *GetRoleSpaceResponse
func (c *ClientWithResponses) GetRoleSpaceWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*GetRoleSpaceResponse, error) {
	rsp, err := c.GetRoleSpace(ctx, spaceId, roleUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleSpaceResponse(rsp)
}

// UpdateRoleSpaceWithBodyWithResponse request with arbitrary body returning *UpdateRoleSpaceResponse
func (c *ClientWithResponses) UpdateRoleSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleSpaceResponse, error) {
	rsp, err := c.UpdateRoleSpaceWithBody(ctx, spaceId, roleUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleSpaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateRoleSpaceWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, body UpdateRoleSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleSpaceResponse, error) {
	rsp, err := c.UpdateRoleSpace(ctx, spaceId, roleUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleSpaceResponse(rsp)
}

// RemoveRolePermissionsSpaceWithBodyWithResponse request with arbitrary body returning *RemoveRolePermissionsSpaceResponse
func (c *ClientWithResponses) RemoveRolePermissionsSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveRolePermissionsSpaceResponse, error) {
	rsp, err := c.RemoveRolePermissionsSpaceWithBody(ctx, spaceId, roleUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveRolePermissionsSpaceResponse(rsp)
}

func (c *ClientWithResponses) RemoveRolePermissionsSpaceWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, body RemoveRolePermissionsSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveRolePermissionsSpaceResponse, error) {
	rsp, err := c.RemoveRolePermissionsSpace(ctx, spaceId, roleUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveRolePermissionsSpaceResponse(rsp)
}

// GetRolePermissionsSpaceWithResponse request returning *GetRolePermissionsSpaceResponse
func (c *ClientWithResponses) GetRolePermissionsSpaceWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, reqEditors ...RequestEditorFn) (*GetRolePermissionsSpaceResponse, error) {
	rsp, err := c.GetRolePermissionsSpace(ctx, spaceId, roleUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolePermissionsSpaceResponse(rsp)
}

// AddRolePermissionsSpaceWithBodyWithResponse request with arbitrary body returning *AddRolePermissionsSpaceResponse
func (c *ClientWithResponses) AddRolePermissionsSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRolePermissionsSpaceResponse, error) {
	rsp, err := c.AddRolePermissionsSpaceWithBody(ctx, spaceId, roleUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRolePermissionsSpaceResponse(rsp)
}

func (c *ClientWithResponses) AddRolePermissionsSpaceWithResponse(ctx context.Context, spaceId SpaceId, roleUuid RoleUuid, body AddRolePermissionsSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRolePermissionsSpaceResponse, error) {
	rsp, err := c.AddRolePermissionsSpace(ctx, spaceId, roleUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRolePermissionsSpaceResponse(rsp)
}

// ListServiceAccountSpaceWithBodyWithResponse request with arbitrary body returning *ListServiceAccountSpaceResponse
func (c *ClientWithResponses) ListServiceAccountSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, params *ListServiceAccountSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListServiceAccountSpaceResponse, error) {
	rsp, err := c.ListServiceAccountSpaceWithBody(ctx, spaceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServiceAccountSpaceResponse(rsp)
}

func (c *ClientWithResponses) ListServiceAccountSpaceWithResponse(ctx context.Context, spaceId SpaceId, params *ListServiceAccountSpaceParams, body ListServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListServiceAccountSpaceResponse, error) {
	rsp, err := c.ListServiceAccountSpace(ctx, spaceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServiceAccountSpaceResponse(rsp)
}

// CreateServiceAccountSpaceWithBodyWithResponse request with arbitrary body returning *CreateServiceAccountSpaceResponse
func (c *ClientWithResponses) CreateServiceAccountSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceAccountSpaceResponse, error) {
	rsp, err := c.CreateServiceAccountSpaceWithBody(ctx, spaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceAccountSpaceResponse(rsp)
}

func (c *ClientWithResponses) CreateServiceAccountSpaceWithResponse(ctx context.Context, spaceId SpaceId, body CreateServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceAccountSpaceResponse, error) {
	rsp, err := c.CreateServiceAccountSpace(ctx, spaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceAccountSpaceResponse(rsp)
}

// DeleteServiceAccountSpaceWithResponse request returning *DeleteServiceAccountSpaceResponse
func (c *ClientWithResponses) DeleteServiceAccountSpaceWithResponse(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*DeleteServiceAccountSpaceResponse, error) {
	rsp, err := c.DeleteServiceAccountSpace(ctx, spaceId, serviceAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceAccountSpaceResponse(rsp)
}

// GetServiceAccountSpaceWithResponse request returning *GetServiceAccountSpaceResponse
func (c *ClientWithResponses) GetServiceAccountSpaceWithResponse(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*GetServiceAccountSpaceResponse, error) {
	rsp, err := c.GetServiceAccountSpace(ctx, spaceId, serviceAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAccountSpaceResponse(rsp)
}

// AssignServiceAccountToSpaceWithResponse request returning *AssignServiceAccountToSpaceResponse
func (c *ClientWithResponses) AssignServiceAccountToSpaceWithResponse(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, reqEditors ...RequestEditorFn) (*AssignServiceAccountToSpaceResponse, error) {
	rsp, err := c.AssignServiceAccountToSpace(ctx, spaceId, serviceAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignServiceAccountToSpaceResponse(rsp)
}

// UpdateServiceAccountSpaceWithBodyWithResponse request with arbitrary body returning *UpdateServiceAccountSpaceResponse
func (c *ClientWithResponses) UpdateServiceAccountSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceAccountSpaceResponse, error) {
	rsp, err := c.UpdateServiceAccountSpaceWithBody(ctx, spaceId, serviceAccountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceAccountSpaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateServiceAccountSpaceWithResponse(ctx context.Context, spaceId SpaceId, serviceAccountId ServiceAccountId, body UpdateServiceAccountSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceAccountSpaceResponse, error) {
	rsp, err := c.UpdateServiceAccountSpace(ctx, spaceId, serviceAccountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceAccountSpaceResponse(rsp)
}

// ListUserSpaceWithBodyWithResponse request with arbitrary body returning *ListUserSpaceResponse
func (c *ClientWithResponses) ListUserSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, params *ListUserSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListUserSpaceResponse, error) {
	rsp, err := c.ListUserSpaceWithBody(ctx, spaceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserSpaceResponse(rsp)
}

func (c *ClientWithResponses) ListUserSpaceWithResponse(ctx context.Context, spaceId SpaceId, params *ListUserSpaceParams, body ListUserSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListUserSpaceResponse, error) {
	rsp, err := c.ListUserSpace(ctx, spaceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserSpaceResponse(rsp)
}

// CreateUserSpaceWithBodyWithResponse request with arbitrary body returning *CreateUserSpaceResponse
func (c *ClientWithResponses) CreateUserSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserSpaceResponse, error) {
	rsp, err := c.CreateUserSpaceWithBody(ctx, spaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserSpaceResponse(rsp)
}

func (c *ClientWithResponses) CreateUserSpaceWithResponse(ctx context.Context, spaceId SpaceId, body CreateUserSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserSpaceResponse, error) {
	rsp, err := c.CreateUserSpace(ctx, spaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserSpaceResponse(rsp)
}

// DeleteUserSpaceWithResponse request returning *DeleteUserSpaceResponse
func (c *ClientWithResponses) DeleteUserSpaceWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*DeleteUserSpaceResponse, error) {
	rsp, err := c.DeleteUserSpace(ctx, spaceId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserSpaceResponse(rsp)
}

// GetUserSpaceWithResponse request returning *GetUserSpaceResponse
func (c *ClientWithResponses) GetUserSpaceWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*GetUserSpaceResponse, error) {
	rsp, err := c.GetUserSpace(ctx, spaceId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserSpaceResponse(rsp)
}

// PatchUserStateSpaceWithBodyWithResponse request with arbitrary body returning *PatchUserStateSpaceResponse
func (c *ClientWithResponses) PatchUserStateSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserStateSpaceResponse, error) {
	rsp, err := c.PatchUserStateSpaceWithBody(ctx, spaceId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserStateSpaceResponse(rsp)
}

func (c *ClientWithResponses) PatchUserStateSpaceWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, body PatchUserStateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserStateSpaceResponse, error) {
	rsp, err := c.PatchUserStateSpace(ctx, spaceId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserStateSpaceResponse(rsp)
}

// AssignUserToSpaceWithResponse request returning *AssignUserToSpaceResponse
func (c *ClientWithResponses) AssignUserToSpaceWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*AssignUserToSpaceResponse, error) {
	rsp, err := c.AssignUserToSpace(ctx, spaceId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignUserToSpaceResponse(rsp)
}

// UpdateUserSpaceWithBodyWithResponse request with arbitrary body returning *UpdateUserSpaceResponse
func (c *ClientWithResponses) UpdateUserSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserSpaceResponse, error) {
	rsp, err := c.UpdateUserSpaceWithBody(ctx, spaceId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserSpaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserSpaceWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, body UpdateUserSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserSpaceResponse, error) {
	rsp, err := c.UpdateUserSpace(ctx, spaceId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserSpaceResponse(rsp)
}

// RecoverUserSpaceWithResponse request returning *RecoverUserSpaceResponse
func (c *ClientWithResponses) RecoverUserSpaceWithResponse(ctx context.Context, spaceId SpaceId, userId UserId, reqEditors ...RequestEditorFn) (*RecoverUserSpaceResponse, error) {
	rsp, err := c.RecoverUserSpace(ctx, spaceId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecoverUserSpaceResponse(rsp)
}

// GetACLSpaceWithResponse request returning *GetACLSpaceResponse
func (c *ClientWithResponses) GetACLSpaceWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, params *GetACLSpaceParams, reqEditors ...RequestEditorFn) (*GetACLSpaceResponse, error) {
	rsp, err := c.GetACLSpace(ctx, spaceId, subjectType, subjectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetACLSpaceResponse(rsp)
}

// DeleteACLSpaceBulkWithBodyWithResponse request with arbitrary body returning *DeleteACLSpaceBulkResponse
func (c *ClientWithResponses) DeleteACLSpaceBulkWithBodyWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteACLSpaceBulkResponse, error) {
	rsp, err := c.DeleteACLSpaceBulkWithBody(ctx, spaceId, subjectType, subjectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteACLSpaceBulkResponse(rsp)
}

func (c *ClientWithResponses) DeleteACLSpaceBulkWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, body DeleteACLSpaceBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteACLSpaceBulkResponse, error) {
	rsp, err := c.DeleteACLSpaceBulk(ctx, spaceId, subjectType, subjectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteACLSpaceBulkResponse(rsp)
}

// CreateACLSpaceBulkWithBodyWithResponse request with arbitrary body returning *CreateACLSpaceBulkResponse
func (c *ClientWithResponses) CreateACLSpaceBulkWithBodyWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateACLSpaceBulkResponse, error) {
	rsp, err := c.CreateACLSpaceBulkWithBody(ctx, spaceId, subjectType, subjectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateACLSpaceBulkResponse(rsp)
}

func (c *ClientWithResponses) CreateACLSpaceBulkWithResponse(ctx context.Context, spaceId SpaceId, subjectType SubjectTypeParam, subjectId SubjectId, body CreateACLSpaceBulkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateACLSpaceBulkResponse, error) {
	rsp, err := c.CreateACLSpaceBulk(ctx, spaceId, subjectType, subjectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateACLSpaceBulkResponse(rsp)
}

// TokenWithBodyWithResponse request with arbitrary body returning *TokenResponse
func (c *ClientWithResponses) TokenWithBodyWithResponse(ctx context.Context, params *TokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenResponse, error) {
	rsp, err := c.TokenWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenResponse(rsp)
}

func (c *ClientWithResponses) TokenWithFormdataBodyWithResponse(ctx context.Context, params *TokenParams, body TokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*TokenResponse, error) {
	rsp, err := c.TokenWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenResponse(rsp)
}

// DeleteSpaceWithResponse request returning *DeleteSpaceResponse
func (c *ClientWithResponses) DeleteSpaceWithResponse(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*DeleteSpaceResponse, error) {
	rsp, err := c.DeleteSpace(ctx, spaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSpaceResponse(rsp)
}

// GetSpaceByIdWithResponse request returning *GetSpaceByIdResponse
func (c *ClientWithResponses) GetSpaceByIdWithResponse(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*GetSpaceByIdResponse, error) {
	rsp, err := c.GetSpaceById(ctx, spaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpaceByIdResponse(rsp)
}

// UpdateSpaceWithBodyWithResponse request with arbitrary body returning *UpdateSpaceResponse
func (c *ClientWithResponses) UpdateSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSpaceResponse, error) {
	rsp, err := c.UpdateSpaceWithBody(ctx, spaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSpaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateSpaceWithResponse(ctx context.Context, spaceId SpaceId, body UpdateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSpaceResponse, error) {
	rsp, err := c.UpdateSpace(ctx, spaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSpaceResponse(rsp)
}

// ListSpacesWithBodyWithResponse request with arbitrary body returning *ListSpacesResponse
func (c *ClientWithResponses) ListSpacesWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, params *ListSpacesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListSpacesResponse, error) {
	rsp, err := c.ListSpacesWithBody(ctx, organisationId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSpacesResponse(rsp)
}

func (c *ClientWithResponses) ListSpacesWithResponse(ctx context.Context, organisationId OrganisationId, params *ListSpacesParams, body ListSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*ListSpacesResponse, error) {
	rsp, err := c.ListSpaces(ctx, organisationId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSpacesResponse(rsp)
}

// CreateSpaceWithBodyWithResponse request with arbitrary body returning *CreateSpaceResponse
func (c *ClientWithResponses) CreateSpaceWithBodyWithResponse(ctx context.Context, organisationId OrganisationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpaceResponse, error) {
	rsp, err := c.CreateSpaceWithBody(ctx, organisationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSpaceResponse(rsp)
}

func (c *ClientWithResponses) CreateSpaceWithResponse(ctx context.Context, organisationId OrganisationId, body CreateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpaceResponse, error) {
	rsp, err := c.CreateSpace(ctx, organisationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSpaceResponse(rsp)
}

// ParseCreateAdminServiceAccountSpaceResponse parses an HTTP response from a CreateAdminServiceAccountSpaceWithResponse call
func ParseCreateAdminServiceAccountSpaceResponse(rsp *http.Response) (*CreateAdminServiceAccountSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAdminServiceAccountSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateServiceAccount201ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListPermissionsResponse parses an HTTP response from a ListPermissionsWithResponse call
func ParseListPermissionsResponse(rsp *http.Response) (*ListPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Permissions200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreatePermissionResponse parses an HTTP response from a CreatePermissionWithResponse call
func ParseCreatePermissionResponse(rsp *http.Response) (*CreatePermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionCreated200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeletePermissionResponse parses an HTTP response from a DeletePermissionWithResponse call
func ParseDeletePermissionResponse(rsp *http.Response) (*DeletePermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetPermissionResponse parses an HTTP response from a GetPermissionWithResponse call
func ParseGetPermissionResponse(rsp *http.Response) (*GetPermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionCreated200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePermissionResponse parses an HTTP response from a UpdatePermissionWithResponse call
func ParseUpdatePermissionResponse(rsp *http.Response) (*UpdatePermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListRolesResponse parses an HTTP response from a ListRolesWithResponse call
func ParseListRolesResponse(rsp *http.Response) (*ListRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleList200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateRoleResponse parses an HTTP response from a CreateRoleWithResponse call
func ParseCreateRoleResponse(rsp *http.Response) (*CreateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleCreated200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteRoleResponse parses an HTTP response from a DeleteRoleWithResponse call
func ParseDeleteRoleResponse(rsp *http.Response) (*DeleteRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetRoleResponse parses an HTTP response from a GetRoleWithResponse call
func ParseGetRoleResponse(rsp *http.Response) (*GetRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleCreated200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateRoleResponse parses an HTTP response from a UpdateRoleWithResponse call
func ParseUpdateRoleResponse(rsp *http.Response) (*UpdateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseRemoveRolePermissionsResponse parses an HTTP response from a RemoveRolePermissionsWithResponse call
func ParseRemoveRolePermissionsResponse(rsp *http.Response) (*RemoveRolePermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveRolePermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetRolePermissionsResponse parses an HTTP response from a GetRolePermissionsWithResponse call
func ParseGetRolePermissionsResponse(rsp *http.Response) (*GetRolePermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolePermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Permissions200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseAddRolePermissionsResponse parses an HTTP response from a AddRolePermissionsWithResponse call
func ParseAddRolePermissionsResponse(rsp *http.Response) (*AddRolePermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRolePermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseIntrospectResponse parses an HTTP response from a IntrospectWithResponse call
func ParseIntrospectResponse(rsp *http.Response) (*IntrospectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntrospectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntrospectResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorOauth2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListOrganisationsIdentityResponse parses an HTTP response from a ListOrganisationsIdentityWithResponse call
func ParseListOrganisationsIdentityResponse(rsp *http.Response) (*ListOrganisationsIdentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganisationsIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListUserOrganisations200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetIAMGranularPolicyOrganisationResponse parses an HTTP response from a GetIAMGranularPolicyOrganisationWithResponse call
func ParseGetIAMGranularPolicyOrganisationResponse(rsp *http.Response) (*GetIAMGranularPolicyOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIAMGranularPolicyOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetIAMGranularPolicy200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseSetIAMGranularPolicyOrganisationResponse parses an HTTP response from a SetIAMGranularPolicyOrganisationWithResponse call
func ParseSetIAMGranularPolicyOrganisationResponse(rsp *http.Response) (*SetIAMGranularPolicyOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetIAMGranularPolicyOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetIAMPolicyOrganisationResponse parses an HTTP response from a GetIAMPolicyOrganisationWithResponse call
func ParseGetIAMPolicyOrganisationResponse(rsp *http.Response) (*GetIAMPolicyOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIAMPolicyOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetIAMPolicy200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseSetIAMPolicyOrganisationResponse parses an HTTP response from a SetIAMPolicyOrganisationWithResponse call
func ParseSetIAMPolicyOrganisationResponse(rsp *http.Response) (*SetIAMPolicyOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetIAMPolicyOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListPermissionsOrganisationResponse parses an HTTP response from a ListPermissionsOrganisationWithResponse call
func ParseListPermissionsOrganisationResponse(rsp *http.Response) (*ListPermissionsOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPermissionsOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPermissions200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetPermissionOrganisationResponse parses an HTTP response from a GetPermissionOrganisationWithResponse call
func ParseGetPermissionOrganisationResponse(rsp *http.Response) (*GetPermissionOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPermission200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListRolesOrganisationResponse parses an HTTP response from a ListRolesOrganisationWithResponse call
func ParseListRolesOrganisationResponse(rsp *http.Response) (*ListRolesOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRolesOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRoles200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateRoleOrganisationResponse parses an HTTP response from a CreateRoleOrganisationWithResponse call
func ParseCreateRoleOrganisationResponse(rsp *http.Response) (*CreateRoleOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateRole200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteRoleOrganisationResponse parses an HTTP response from a DeleteRoleOrganisationWithResponse call
func ParseDeleteRoleOrganisationResponse(rsp *http.Response) (*DeleteRoleOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetRoleOrganisationResponse parses an HTTP response from a GetRoleOrganisationWithResponse call
func ParseGetRoleOrganisationResponse(rsp *http.Response) (*GetRoleOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRole200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateRoleOrganisationResponse parses an HTTP response from a UpdateRoleOrganisationWithResponse call
func ParseUpdateRoleOrganisationResponse(rsp *http.Response) (*UpdateRoleOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRoleOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseRemoveRolePermissionsOrganisationResponse parses an HTTP response from a RemoveRolePermissionsOrganisationWithResponse call
func ParseRemoveRolePermissionsOrganisationResponse(rsp *http.Response) (*RemoveRolePermissionsOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveRolePermissionsOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetRolePermissionsOrganisationResponse parses an HTTP response from a GetRolePermissionsOrganisationWithResponse call
func ParseGetRolePermissionsOrganisationResponse(rsp *http.Response) (*GetRolePermissionsOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolePermissionsOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRolePermissions200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseAddRolePermissionsOrganisationResponse parses an HTTP response from a AddRolePermissionsOrganisationWithResponse call
func ParseAddRolePermissionsOrganisationResponse(rsp *http.Response) (*AddRolePermissionsOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRolePermissionsOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListServiceAccountOrganisationResponse parses an HTTP response from a ListServiceAccountOrganisationWithResponse call
func ParseListServiceAccountOrganisationResponse(rsp *http.Response) (*ListServiceAccountOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServiceAccountOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListServiceAccount200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateServiceAccountOrganisationResponse parses an HTTP response from a CreateServiceAccountOrganisationWithResponse call
func ParseCreateServiceAccountOrganisationResponse(rsp *http.Response) (*CreateServiceAccountOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceAccountOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateServiceAccount201ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteServiceAccountOrganisationResponse parses an HTTP response from a DeleteServiceAccountOrganisationWithResponse call
func ParseDeleteServiceAccountOrganisationResponse(rsp *http.Response) (*DeleteServiceAccountOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceAccountOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetServiceAccountOrganisationResponse parses an HTTP response from a GetServiceAccountOrganisationWithResponse call
func ParseGetServiceAccountOrganisationResponse(rsp *http.Response) (*GetServiceAccountOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAccountOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetServiceAccount200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateServiceAccountOrganisationResponse parses an HTTP response from a UpdateServiceAccountOrganisationWithResponse call
func ParseUpdateServiceAccountOrganisationResponse(rsp *http.Response) (*UpdateServiceAccountOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceAccountOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateServiceAccount200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListSpacesOfServiceAccountResponse parses an HTTP response from a ListSpacesOfServiceAccountWithResponse call
func ParseListSpacesOfServiceAccountResponse(rsp *http.Response) (*ListSpacesOfServiceAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSpacesOfServiceAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSpacesServiceAccount200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListSpacesIdentityResponse parses an HTTP response from a ListSpacesIdentityWithResponse call
func ParseListSpacesIdentityResponse(rsp *http.Response) (*ListSpacesIdentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSpacesIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSpacesIdentity200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListUserOrganisationResponse parses an HTTP response from a ListUserOrganisationWithResponse call
func ParseListUserOrganisationResponse(rsp *http.Response) (*ListUserOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListUser200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateUserOrganisationResponse parses an HTTP response from a CreateUserOrganisationWithResponse call
func ParseCreateUserOrganisationResponse(rsp *http.Response) (*CreateUserOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateUser201ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserOrganisationResponse parses an HTTP response from a DeleteUserOrganisationWithResponse call
func ParseDeleteUserOrganisationResponse(rsp *http.Response) (*DeleteUserOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserOrganisationResponse parses an HTTP response from a GetUserOrganisationWithResponse call
func ParseGetUserOrganisationResponse(rsp *http.Response) (*GetUserOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUser200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePatchUserStateOrganisationResponse parses an HTTP response from a PatchUserStateOrganisationWithResponse call
func ParsePatchUserStateOrganisationResponse(rsp *http.Response) (*PatchUserStateOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUserStateOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchUserState200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateUserOrganisationResponse parses an HTTP response from a UpdateUserOrganisationWithResponse call
func ParseUpdateUserOrganisationResponse(rsp *http.Response) (*UpdateUserOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateUser200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseRecoverUserOrganisationResponse parses an HTTP response from a RecoverUserOrganisationWithResponse call
func ParseRecoverUserOrganisationResponse(rsp *http.Response) (*RecoverUserOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RecoverUserOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecoverUser200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListSpacesOfUserResponse parses an HTTP response from a ListSpacesOfUserWithResponse call
func ParseListSpacesOfUserResponse(rsp *http.Response) (*ListSpacesOfUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSpacesOfUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSpacesUser200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetACLOrganisationResponse parses an HTTP response from a GetACLOrganisationWithResponse call
func ParseGetACLOrganisationResponse(rsp *http.Response) (*GetACLOrganisationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetACLOrganisationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetACL200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteACLOrganisationBulkResponse parses an HTTP response from a DeleteACLOrganisationBulkWithResponse call
func ParseDeleteACLOrganisationBulkResponse(rsp *http.Response) (*DeleteACLOrganisationBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteACLOrganisationBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateACLOrganisationBulkResponse parses an HTTP response from a CreateACLOrganisationBulkWithResponse call
func ParseCreateACLOrganisationBulkResponse(rsp *http.Response) (*CreateACLOrganisationBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateACLOrganisationBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseRevokeResponse parses an HTTP response from a RevokeWithResponse call
func ParseRevokeResponse(rsp *http.Response) (*RevokeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorOauth2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorOauth2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetIAMGranularPolicySpaceResponse parses an HTTP response from a GetIAMGranularPolicySpaceWithResponse call
func ParseGetIAMGranularPolicySpaceResponse(rsp *http.Response) (*GetIAMGranularPolicySpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIAMGranularPolicySpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetIAMGranularPolicy200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseSetIAMGranularPolicySpaceResponse parses an HTTP response from a SetIAMGranularPolicySpaceWithResponse call
func ParseSetIAMGranularPolicySpaceResponse(rsp *http.Response) (*SetIAMGranularPolicySpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetIAMGranularPolicySpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetIAMPolicySpaceResponse parses an HTTP response from a GetIAMPolicySpaceWithResponse call
func ParseGetIAMPolicySpaceResponse(rsp *http.Response) (*GetIAMPolicySpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIAMPolicySpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetIAMPolicy200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseSetIAMPolicySpaceResponse parses an HTTP response from a SetIAMPolicySpaceWithResponse call
func ParseSetIAMPolicySpaceResponse(rsp *http.Response) (*SetIAMPolicySpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetIAMPolicySpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListPermissionsSpaceResponse parses an HTTP response from a ListPermissionsSpaceWithResponse call
func ParseListPermissionsSpaceResponse(rsp *http.Response) (*ListPermissionsSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPermissionsSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPermissions200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetPermissionSpaceResponse parses an HTTP response from a GetPermissionSpaceWithResponse call
func ParseGetPermissionSpaceResponse(rsp *http.Response) (*GetPermissionSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPermission200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListRolesSpaceResponse parses an HTTP response from a ListRolesSpaceWithResponse call
func ParseListRolesSpaceResponse(rsp *http.Response) (*ListRolesSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRolesSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRoles200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateRoleSpaceResponse parses an HTTP response from a CreateRoleSpaceWithResponse call
func ParseCreateRoleSpaceResponse(rsp *http.Response) (*CreateRoleSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateRole200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteRoleSpaceResponse parses an HTTP response from a DeleteRoleSpaceWithResponse call
func ParseDeleteRoleSpaceResponse(rsp *http.Response) (*DeleteRoleSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetRoleSpaceResponse parses an HTTP response from a GetRoleSpaceWithResponse call
func ParseGetRoleSpaceResponse(rsp *http.Response) (*GetRoleSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRole200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateRoleSpaceResponse parses an HTTP response from a UpdateRoleSpaceWithResponse call
func ParseUpdateRoleSpaceResponse(rsp *http.Response) (*UpdateRoleSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRoleSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseRemoveRolePermissionsSpaceResponse parses an HTTP response from a RemoveRolePermissionsSpaceWithResponse call
func ParseRemoveRolePermissionsSpaceResponse(rsp *http.Response) (*RemoveRolePermissionsSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveRolePermissionsSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetRolePermissionsSpaceResponse parses an HTTP response from a GetRolePermissionsSpaceWithResponse call
func ParseGetRolePermissionsSpaceResponse(rsp *http.Response) (*GetRolePermissionsSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolePermissionsSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRolePermissions200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseAddRolePermissionsSpaceResponse parses an HTTP response from a AddRolePermissionsSpaceWithResponse call
func ParseAddRolePermissionsSpaceResponse(rsp *http.Response) (*AddRolePermissionsSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRolePermissionsSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListServiceAccountSpaceResponse parses an HTTP response from a ListServiceAccountSpaceWithResponse call
func ParseListServiceAccountSpaceResponse(rsp *http.Response) (*ListServiceAccountSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServiceAccountSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListServiceAccount200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateServiceAccountSpaceResponse parses an HTTP response from a CreateServiceAccountSpaceWithResponse call
func ParseCreateServiceAccountSpaceResponse(rsp *http.Response) (*CreateServiceAccountSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceAccountSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateServiceAccount201ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteServiceAccountSpaceResponse parses an HTTP response from a DeleteServiceAccountSpaceWithResponse call
func ParseDeleteServiceAccountSpaceResponse(rsp *http.Response) (*DeleteServiceAccountSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceAccountSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetServiceAccountSpaceResponse parses an HTTP response from a GetServiceAccountSpaceWithResponse call
func ParseGetServiceAccountSpaceResponse(rsp *http.Response) (*GetServiceAccountSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAccountSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetServiceAccount200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseAssignServiceAccountToSpaceResponse parses an HTTP response from a AssignServiceAccountToSpaceWithResponse call
func ParseAssignServiceAccountToSpaceResponse(rsp *http.Response) (*AssignServiceAccountToSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignServiceAccountToSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateServiceAccountSpaceResponse parses an HTTP response from a UpdateServiceAccountSpaceWithResponse call
func ParseUpdateServiceAccountSpaceResponse(rsp *http.Response) (*UpdateServiceAccountSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceAccountSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateServiceAccount200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListUserSpaceResponse parses an HTTP response from a ListUserSpaceWithResponse call
func ParseListUserSpaceResponse(rsp *http.Response) (*ListUserSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListUser200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateUserSpaceResponse parses an HTTP response from a CreateUserSpaceWithResponse call
func ParseCreateUserSpaceResponse(rsp *http.Response) (*CreateUserSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateUser201ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserSpaceResponse parses an HTTP response from a DeleteUserSpaceWithResponse call
func ParseDeleteUserSpaceResponse(rsp *http.Response) (*DeleteUserSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetUserSpaceResponse parses an HTTP response from a GetUserSpaceWithResponse call
func ParseGetUserSpaceResponse(rsp *http.Response) (*GetUserSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUser200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePatchUserStateSpaceResponse parses an HTTP response from a PatchUserStateSpaceWithResponse call
func ParsePatchUserStateSpaceResponse(rsp *http.Response) (*PatchUserStateSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUserStateSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchUserState200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseAssignUserToSpaceResponse parses an HTTP response from a AssignUserToSpaceWithResponse call
func ParseAssignUserToSpaceResponse(rsp *http.Response) (*AssignUserToSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignUserToSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateUserSpaceResponse parses an HTTP response from a UpdateUserSpaceWithResponse call
func ParseUpdateUserSpaceResponse(rsp *http.Response) (*UpdateUserSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateUser200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseRecoverUserSpaceResponse parses an HTTP response from a RecoverUserSpaceWithResponse call
func ParseRecoverUserSpaceResponse(rsp *http.Response) (*RecoverUserSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RecoverUserSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecoverUser200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetACLSpaceResponse parses an HTTP response from a GetACLSpaceWithResponse call
func ParseGetACLSpaceResponse(rsp *http.Response) (*GetACLSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetACLSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetACL200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteACLSpaceBulkResponse parses an HTTP response from a DeleteACLSpaceBulkWithResponse call
func ParseDeleteACLSpaceBulkResponse(rsp *http.Response) (*DeleteACLSpaceBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteACLSpaceBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateACLSpaceBulkResponse parses an HTTP response from a CreateACLSpaceBulkWithResponse call
func ParseCreateACLSpaceBulkResponse(rsp *http.Response) (*CreateACLSpaceBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateACLSpaceBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseTokenResponse parses an HTTP response from a TokenWithResponse call
func ParseTokenResponse(rsp *http.Response) (*TokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorOauth2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorOauth2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorOauth2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSpaceResponse parses an HTTP response from a DeleteSpaceWithResponse call
func ParseDeleteSpaceResponse(rsp *http.Response) (*DeleteSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetSpaceByIdResponse parses an HTTP response from a GetSpaceByIdWithResponse call
func ParseGetSpaceByIdResponse(rsp *http.Response) (*GetSpaceByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpaceByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSpaceById200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSpaceResponse parses an HTTP response from a UpdateSpaceWithResponse call
func ParseUpdateSpaceResponse(rsp *http.Response) (*UpdateSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListSpacesResponse parses an HTTP response from a ListSpacesWithResponse call
func ParseListSpacesResponse(rsp *http.Response) (*ListSpacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSpacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSpaces200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateSpaceResponse parses an HTTP response from a CreateSpaceWithResponse call
func ParseCreateSpaceResponse(rsp *http.Response) (*CreateSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateSpace200ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}
