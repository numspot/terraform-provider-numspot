openapi: 3.1.0
info:
    title: Identity and access management
    version: 1.0.0
servers:
    - url: https://cloud-iam-gateway.{env}.{region}.numspot.internal
      variables:
        env:
            default: zex-dev
            description: Environment
            enum:
                - zex-dev
                - zex-integ
                - zex-preprod
                - zex-prod
        region:
            default: cloudgouv-eu-west-1
            description: Region
            enum:
                - eu-west-2
                - cloudgouv-eu-west-1
paths:
    /iam/.well-known/jwks.json:
        get:
            description: This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens.
            operationId: JsonWebKeys
            responses:
                "200":
                    $ref: '#/components/responses/JsonWebKeysResponse'
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorOauth2'
                    description: Bad Request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorOauth2'
                    description: Unauthorized
            servers:
                - url: http://authentication-manager:8000
                - url: /
            tags:
                - Jwk
    /iam/.well-known/openid-configuration:
        get:
            description: A mechanism for an OpenID Connect Relying Party to discover the End-User's OpenID Provider and obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.
            operationId: DiscoverOidcConfiguration
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OidcConfiguration'
                    description: oidcConfiguration
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorOauth2'
                    description: ErrorOauth2
            servers:
                - url: http://authentication-manager:8000
                - url: /
            tags:
                - Oidc
    /iam/.well-known/webauthn.js:
        get:
            description: This endpoint provides JavaScript which is needed in order to perform WebAuthn login and registration.
            operationId: GetWebAuthnJavaScript
            responses:
                "200":
                    $ref: '#/components/responses/WebAuthnJavaScriptResponse'
            servers:
                - url: http://authentication-manager:8000
                - url: /
            tags:
                - Frontend
    /iam/admin/organisations/{organisationId}/spaces/{spaceId}/serviceAccounts:
        post:
            description: Create a new administrator service account.
            operationId: CreateAdminServiceAccountSpace
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/SpaceId'
            requestBody:
                $ref: '#/components/requestBodies/CreateServiceAccountRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateServiceAccount201Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    iam.space.createAdmin:
                        cardinality: SINGLE
                        location: spaceId
                        locationType: PATH
                tenant-path-name: organisationId
    /iam/authorize:
        get:
            description: The endpoint is used to process user authorization requests.
            operationId: Authorize
            parameters:
                - $ref: '#/components/parameters/ClientId'
                - $ref: '#/components/parameters/RedirectUri'
                - $ref: '#/components/parameters/ResponseType'
                - $ref: '#/components/parameters/Scope'
                - $ref: '#/components/parameters/State'
            responses:
                "302":
                    description: Redirection to the redirect URI with the authorization code.
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorOauth2'
                    description: Malformed request.
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorOauth2'
                    description: Unauthorized client
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorOauth2'
                    description: Forbidden
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorOauth2'
                    description: Internal Server error
            servers:
                - url: http://authentication-manager:8000
                - url: /
            tags:
                - Oidc
            x-numspot-redirect-passthrough: true
    /iam/bootstrap:
        post:
            description: Bootstrap system
            operationId: Bootstrap
            responses:
                "200":
                    $ref: '#/components/responses/Bootstrap200Response'
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: already exists
            security: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - Bootstrap
            x-numspot-internal: true
    /iam/bulk/notify:
        post:
            description: Bulk Notify the creation or deletion of a list of objects based on provided context attributes
            operationId: BulkNotifyObjectLifecycleChange
            requestBody:
                $ref: '#/components/requestBodies/BulkNotifyRequest'
            responses:
                "201":
                    description: Access is allowed based on the provided context
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Notify
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: CREATE
                path-with-tenant: false
    /iam/consent:
        get:
            description: The endpoint is used to process consent for authentication flow.
            operationId: Consent
            parameters:
                - $ref: '#/components/parameters/ConsentChallenge'
            responses:
                "302":
                    description: Redirection to the redirect URI with the consent_verifier.
                "500":
                    description: Internal server error
            servers:
                - url: http://authentication-manager:8000
                - url: /
            tags:
                - Consent
            x-numspot-redirect-passthrough: true
    /iam/frontend/self-service/errors:
        get:
            description: This endpoint returns the error associated with a user-facing self service errors.
            operationId: GetFlowError
            parameters:
                - description: Error is the error's ID
                  in: query
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/FlowError'
                    description: flowError
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Get User-Flow Errors
            tags:
                - Frontend
    /iam/frontend/self-service/login:
        post:
            description: |-
                Use this endpoint to complete a login flow. This endpoint
                behaves differently for API and browser flows.

                API flows expect `application/json` to be sent in the body and responds with
                HTTP 200 and a application/json body with the session token on success;
                HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body;
                HTTP 400 on form validation errors.

                Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with
                a HTTP 303 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded;
                a HTTP 303 redirect to the login UI URL with the flow ID containing the validation errors otherwise.

                Browser flows with an accept header of `application/json` will not redirect but instead respond with
                HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success;
                HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set;
                HTTP 400 on form validation errors.

                If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the
                case of an error, the `error.id` of the JSON response body can be one of:

                `session_already_available`: The user is already signed in.
                `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
                `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!
                `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL.
                Most likely used in Social Sign In flows.
            operationId: UpdateLoginFlow
            parameters:
                - description: |-
                    The Login Flow ID
                    The value for this parameter comes from `flow` URL Query parameter sent to your application (`/login?flow=abcde`).
                  in: query
                  name: flow
                  required: true
                  schema:
                    type: string
                - description: The Session Token of the Identity performing the settings flow.
                  in: header
                  name: X-Session-Token
                  schema:
                    type: string
                - description: |-
                    HTTP Cookies
                    When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
                    sent by the client to your server here. This ensures that CSRF and session cookies are respected.
                  in: header
                  name: Cookie
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateLoginFlowBody'
                    application/x-www-form-urlencoded:
                        schema:
                            $ref: '#/components/schemas/UpdateLoginFlowBody'
                required: true
                x-originalParamName: Body
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SuccessfulNativeLogin'
                    description: successfulNativeLogin
                "303":
                    $ref: '#/components/responses/EmptyResponse'
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LoginFlow'
                    description: LoginFlow
                "410":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "422":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorBrowserLocationChangeRequired'
                    description: errorBrowserLocationChangeRequired
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Submit a Login Flow
            tags:
                - Frontend
            x-numspot-redirect-passthrough: true
    /iam/frontend/self-service/login/api:
        get:
            description: |-
                This endpoint initiates a login flow for native apps that do not use a browser, such as mobile devices, smart TVs, and so on.
                If a valid provided session cookie or session token is provided, a 400 Bad Request error
                will be returned unless the URL query parameter `?refresh=true` is set.
                To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.
                You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server
                Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make
                you vulnerable to a variety of CSRF attacks, including CSRF login attacks.
                In the case of an error, the `error.id` of the JSON response body can be one of:
                `session_already_available`: The user is already signed in.
                `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet.
                `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
                This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).
            operationId: CreateNativeLoginFlow
            parameters:
                - description: |-
                    Refresh a login session

                    If set to true, this will refresh an existing login session by
                    asking the user to sign in again. This will reset the
                    authenticated_at time of the session.
                  in: query
                  name: refresh
                  schema:
                    type: boolean
                - description: |-
                    Request a Specific AuthenticationMethod Assurance Level
                    Use this parameter to upgrade an existing session's authenticator assurance level (AAL). This
                    allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password,
                    the AAL is 1. If you wish to "upgrade" the session's security by asking the user to perform TOTP / WebAuth, you would set this to "aal2".
                  in: query
                  name: aal
                  schema:
                    type: string
                - description: The Session Token of the Identity performing the settings flow.
                  in: header
                  name: X-Session-Token
                  schema:
                    type: string
                - description: |-
                    EnableSessionTokenExchangeCode requests the login flow to include a code that can be used to retrieve the session token
                    after the login flow has been completed.
                  in: query
                  name: return_session_token_exchange_code
                  schema:
                    type: boolean
                - description: The URL to return the browser to after the flow was completed.
                  in: query
                  name: return_to
                  schema:
                    type: string
                - description: Via should contain the identity's credential the code should be sent to. Only relevant in aal2 flows.
                  in: query
                  name: via
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LoginFlow'
                    description: LoginFlow
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Create Login Flow for Native Apps
            tags:
                - Frontend
    /iam/frontend/self-service/login/browser:
        get:
            description: |-
                This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate
                cookies and anti-CSRF measures required for browser-based flows.
                If this endpoint is opened as a link in the browser, it will be redirected to
                `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session
                exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter
                `?refresh=true` was set.
                If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the
                case of an error, the `error.id` of the JSON response body can be one of:
                `session_already_available`: The user is already signed in.
                `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet.
                `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
                `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!
                This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.
            operationId: CreateBrowserLoginFlow
            parameters:
                - description: |-
                    Refresh a login session

                    If set to true, this will refresh an existing login session by
                    asking the user to sign in again. This will reset the
                    authenticated_at time of the session.
                  in: query
                  name: refresh
                  schema:
                    type: boolean
                - description: |-
                    Request a Specific AuthenticationMethod Assurance Level

                    Use this parameter to upgrade an existing session's authenticator assurance level (AAL). This
                    allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password,
                    the AAL is 1. If you wish to "upgrade" the session's security by asking the user to perform TOTP / WebAuth/ ...
                    you would set this to "aal2".
                  in: query
                  name: aal
                  schema:
                    type: string
                - description: The URL to return the browser to after the flow was completed.
                  in: query
                  name: return_to
                  schema:
                    type: string
                - description: |-
                    HTTP Cookies

                    When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
                    sent by the client to your server here. This ensures that CSRF and session cookies are respected.
                  in: header
                  name: Cookie
                  schema:
                    type: string
                - description: The value for this parameter comes from `login_challenge` URL Query parameter sent to your application.
                  in: query
                  name: login_challenge
                  schema:
                    type: string
                - description: |-
                    An optional organization ID that should be used for logging this user in.
                    This parameter is only effective in the  Network.
                  in: query
                  name: organization
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LoginFlow'
                    description: LoginFlow
                "303":
                    $ref: '#/components/responses/EmptyResponse'
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Create Login Flow for Browsers
            tags:
                - Frontend
            x-numspot-redirect-passthrough: true
    /iam/frontend/self-service/login/flows:
        get:
            description: |-
                This endpoint returns a login flow's context with, for example, error details and other information.
                Browser flows expect the anti-CSRF cookie to be included in the request's HTTP Cookie Header.
                For AJAX requests you must ensure that cookies are included in the request or requests will fail.
                If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain
                and you need to forward the incoming HTTP Cookie header to this endpoint:

                ```js
                pseudo-code example
                router.get('/login', async function (req, res) {
                const flow = await client.getLoginFlow(req.header('cookie'), req.query['flow'])

                res.render('login', flow)
                })
                ```

                This request may fail due to several reasons. The `error.id` can be one of:

                `session_already_available`: The user is already signed in.
                `self_service_flow_expired`: The flow is expired and you should request a new one.
            operationId: GetLoginFlow
            parameters:
                - description: |-
                    The Login Flow ID

                    The value for this parameter comes from `flow` URL Query parameter sent to your
                    application (e.g. `/login?flow=abcde`).
                  in: query
                  name: id
                  required: true
                  schema:
                    type: string
                - description: |-
                    HTTP Cookies
                    When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
                    sent by the client to your server here. This ensures that CSRF and session cookies are respected.
                  in: header
                  name: Cookie
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LoginFlow'
                    description: LoginFlow
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "410":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Get Login Flow
            tags:
                - Frontend
    /iam/frontend/self-service/logout:
        get:
            description: |-
                This endpoint logs out an identity in a self-service manner.

                If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 303 See Other)
                to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.

                If the `Accept` HTTP header is set to `application/json`, a 204 No Content response
                will be sent on successful logout instead.

                This endpoint is NOT INTENDED for API clients and only works
                with browsers (Chrome, Firefox, ...). For API clients you can
                call the `/self-service/logout/api` URL directly with the  Session Token.
            operationId: UpdateLogoutFlow
            parameters:
                - description: |-
                    A Valid Logout Token
                    If you do not have a logout token because you only have a session cookie,
                    call `/self-service/logout/browser` to generate a URL for this endpoint.
                  in: query
                  name: token
                  schema:
                    type: string
                - description: The URL to return to after the logout was completed.
                  in: query
                  name: return_to
                  schema:
                    type: string
                - description: |-
                    HTTP Cookies

                    When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
                    sent by the client to your server here. This ensures that CSRF and session cookies are respected.
                  in: header
                  name: Cookie
                  schema:
                    type: string
            responses:
                "204":
                    $ref: '#/components/responses/EmptyResponse'
                "303":
                    $ref: '#/components/responses/EmptyResponse'
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Update Logout Flow
            tags:
                - Frontend
            x-numspot-redirect-passthrough: true
    /iam/frontend/self-service/logout/api:
        delete:
            description: |-
                Use this endpoint to log out an identity using an  Session Token. If the  Session Token was successfully
                revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when
                the  Session Token has been revoked already before.
                If the  Session Token is malformed or does not exist a 403 Forbidden response will be returned.
                This endpoint does not remove any HTTP
                Cookies - use the Browser-Based Self-Service Logout Flow instead.
            operationId: PerformNativeLogout
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PerformNativeLogoutBody'
                required: true
                x-originalParamName: Body
            responses:
                "204":
                    $ref: '#/components/responses/EmptyResponse'
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Perform Logout for Native Apps
            tags:
                - Frontend
    /iam/frontend/self-service/logout/browser:
        get:
            description: |-
                This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.
                This endpoint is NOT INTENDED for API clients and only works
                with browsers (Chrome, Firefox, ...). For API clients you can
                call the `/self-service/logout/api` URL directly with the  Session Token.
                The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns
                a 401 error.
                When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
            operationId: CreateBrowserLogoutFlow
            parameters:
                - description: |-
                    HTTP Cookies

                    If you call this endpoint from a backend, please include the
                    original Cookie header in the request.
                  in: header
                  name: cookie
                  schema:
                    type: string
                - description: |-
                    Return to URL

                    The URL to which the browser should be redirected to after the logout
                    has been performed.
                  in: query
                  name: return_to
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LogoutFlow'
                    description: LogoutFlow
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Create a Logout URL for Browsers
            tags:
                - Frontend
    /iam/frontend/self-service/recovery:
        get:
            description: Init recovery flow
            operationId: InitRecoveryFlow
            parameters:
                - description: recovery flowId
                  in: query
                  name: flow
                  required: true
                  schema:
                    type: string
                - description: |-
                    Recovery Token
                    The recovery token which completes the recovery request. If the token
                    is invalid (e.g. expired) an error will be shown to the end-user.
                    This parameter is usually set in a link and not used by any direct API call.
                  in: query
                  name: token
                  schema:
                    type: string
                - description: |-
                    HTTP Cookies
                    When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
                    sent by the client to your server here. This ensures that CSRF and session cookies are respected.
                  in: header
                  name: Cookie
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RecoveryFlow'
                    description: RecoveryFlow
                "302":
                    $ref: '#/components/responses/EmptyResponse'
                "303":
                    $ref: '#/components/responses/EmptyResponse'
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RecoveryFlow'
                    description: RecoveryFlow
                "410":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "422":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorBrowserLocationChangeRequired'
                    description: errorBrowserLocationChangeRequired
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Update Recovery Flow
            tags:
                - Frontend
            x-numspot-redirect-passthrough: true
        post:
            description: |-
                Use this endpoint to update a recovery flow. This endpoint
                behaves differently for API and browser flows and has several states:
                `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent
                and works with API- and Browser-initiated flows.
                For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid.
                and a HTTP 303 See Other redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired).
                For Browser clients without HTTP Header `Accept` or with `Accept: text/*` it returns a HTTP 303 See Other redirect to the Recovery UI URL with the Recovery Flow ID appended.
                `sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It
                works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state.
                `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow ("sending a recovery link")
                does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL
                (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with
                a new Recovery Flow ID which contains an error message that the recovery link was invalid.
            operationId: UpdateRecoveryFlow
            parameters:
                - description: |-
                    The Recovery Flow ID

                    The value for this parameter comes from `flow` URL Query parameter sent to your
                    application (e.g. `/recovery?flow=abcde`).
                  in: query
                  name: flow
                  required: true
                  schema:
                    type: string
                - description: |-
                    Recovery Token
                    The recovery token which completes the recovery request. If the token
                    is invalid (e.g. expired) an error will be shown to the end-user.
                    This parameter is usually set in a link and not used by any direct API call.
                  in: query
                  name: token
                  schema:
                    type: string
                - description: |-
                    HTTP Cookies
                    When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
                    sent by the client to your server here. This ensures that CSRF and session cookies are respected.
                  in: header
                  name: Cookie
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateRecoveryFlowBody'
                    application/x-www-form-urlencoded:
                        schema:
                            $ref: '#/components/schemas/UpdateRecoveryFlowBody'
                required: true
                x-originalParamName: Body
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RecoveryFlow'
                    description: RecoveryFlow
                "303":
                    $ref: '#/components/responses/EmptyResponse'
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RecoveryFlow'
                    description: RecoveryFlow
                "410":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "422":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorBrowserLocationChangeRequired'
                    description: errorBrowserLocationChangeRequired
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Update Recovery Flow
            tags:
                - Frontend
            x-numspot-redirect-passthrough: true
    /iam/frontend/self-service/recovery/api:
        get:
            description: |-
                This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.
                If a valid provided session cookie or session token is provided, a 400 Bad Request error.
                On an existing recovery flow, use the `getRecoveryFlow` API endpoint.
                You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server
                Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make
                you vulnerable to a variety of CSRF attacks.
                This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).
            operationId: CreateNativeRecoveryFlow
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RecoveryFlow'
                    description: RecoveryFlow
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Create Recovery Flow for Native Apps
            tags:
                - Frontend
    /iam/frontend/self-service/recovery/browser:
        get:
            description: |-
                This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to
                `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session
                exists, the browser is returned to the configured return URL.
                If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects
                or a 400 bad request error if the user is already authenticated.
                This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.
            operationId: CreateBrowserRecoveryFlow
            parameters:
                - description: The URL to return the browser to after the flow was completed.
                  in: query
                  name: return_to
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RecoveryFlow'
                    description: RecoveryFlow
                "303":
                    $ref: '#/components/responses/EmptyResponse'
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Create Recovery Flow for Browsers
            tags:
                - Frontend
            x-numspot-redirect-passthrough: true
    /iam/frontend/self-service/recovery/flows:
        get:
            description: |-
                This endpoint returns a recovery flow's context with, for example, error details and other information.
                Browser flows expect the anti-CSRF cookie to be included in the request's HTTP Cookie Header.
                For AJAX requests you must ensure that cookies are included in the request or requests will fail.
                If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain
                and you need to forward the incoming HTTP Cookie header to this endpoint:
                ```js
                pseudo-code example
                router.get('/recovery', async function (req, res) {
                const flow = await client.getRecoveryFlow(req.header('Cookie'), req.query['flow'])

                res.render('recovery', flow)
                })
                ```
            operationId: GetRecoveryFlow
            parameters:
                - description: |-
                    The Flow ID
                    The value for this parameter comes from `request` URL Query parameter sent to your application (`/recovery?flow=abcde`).
                  in: query
                  name: id
                  required: true
                  schema:
                    type: string
                - description: |-
                    HTTP Cookies

                    When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
                    sent by the client to your server here. This ensures that CSRF and session cookies are respected.
                  in: header
                  name: Cookie
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RecoveryFlow'
                    description: RecoveryFlow
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "410":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Get Recovery Flow
            tags:
                - Frontend
    /iam/frontend/self-service/registration:
        post:
            description: |-
                Use this endpoint to complete a registration flow by sending an identity's traits and password. This endpoint
                behaves differently for API and browser flows.
                API flows expect `application/json` to be sent in the body and respond with
                HTTP 200 and a application/json body with the created identity success - if the session hook is configured the
                `session` and `session_token` will also be included;
                HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body;
                HTTP 400 on form validation errors.

                Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with
                a HTTP 303 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded;
                a HTTP 303 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.

                Browser flows with an accept header of `application/json` will not redirect but instead respond with
                HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success;
                HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set;
                HTTP 400 on form validation errors.

                If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the
                case of an error, the `error.id` of the JSON response body can be one of:

                `session_already_available`: The user is already signed in.
                `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
                `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!
                `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL.
                Most likely used in Social Sign In flows.
            operationId: UpdateRegistrationFlow
            parameters:
                - description: |-
                    The Registration Flow ID
                    The value for this parameter comes from `flow` URL Query parameter sent to your application.
                  in: query
                  name: flow
                  required: true
                  schema:
                    type: string
                - description: |-
                    HTTP Cookies

                    When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
                    sent by the client to your server here. This ensures that CSRF and session cookies are respected.
                  in: header
                  name: Cookie
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateRegistrationFlowBody'
                    application/x-www-form-urlencoded:
                        schema:
                            $ref: '#/components/schemas/UpdateRegistrationFlowBody'
                required: true
                x-originalParamName: Body
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SuccessfulNativeRegistration'
                    description: successfulNativeRegistration
                "303":
                    $ref: '#/components/responses/EmptyResponse'
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RegistrationFlow'
                    description: registrationFlow
                "410":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "422":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorBrowserLocationChangeRequired'
                    description: errorBrowserLocationChangeRequired
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Update Registration Flow
            tags:
                - Frontend
            x-numspot-redirect-passthrough: true
    /iam/frontend/self-service/registration/api:
        get:
            description: |-
                This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.
                If a valid provided session cookie or session token is provided, a 400 Bad Request error
                will be returned unless the URL query parameter `?refresh=true` is set.
                To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.
                You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server
                Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make
                you vulnerable to a variety of CSRF attacks.
                In the case of an error, the `error.id` of the JSON response body can be one of:
                `session_already_available`: The user is already signed in.
                `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
                This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).
            operationId: CreateNativeRegistrationFlow
            parameters:
                - description: EnableSessionTokenExchangeCode requests the login flow to include a code that can be used to retrieve the session token the login flow has been completed.
                  in: query
                  name: return_session_token_exchange_code
                  schema:
                    type: boolean
                - description: The URL to return the browser to after the flow was completed.
                  in: query
                  name: return_to
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RegistrationFlow'
                    description: registrationFlow
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Create Registration Flow for Native Apps
            tags:
                - Frontend
    /iam/frontend/self-service/registration/browser:
        get:
            description: |-
                This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate
                cookies and anti-CSRF measures required for browser-based flows.

                If this endpoint is opened as a link in the browser, it will be redirected to
                `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session
                exists already, the browser will be redirected to `urls.default_redirect_url`.

                If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the
                case of an error, the `error.id` of the JSON response body can be one of:

                `session_already_available`: The user is already signed in.
                `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
                `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!

                If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.

                This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.
            operationId: CreateBrowserRegistrationFlow
            parameters:
                - in: query
                  name: return_to
                  schema:
                    type: string
                - in: query
                  name: login_challenge
                  schema:
                    type: string
                - in: query
                  name: after_verification_return_to
                  schema:
                    type: string
                - in: query
                  name: organization
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RegistrationFlow'
                    description: registrationFlow
                "303":
                    $ref: '#/components/responses/EmptyResponse'
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Create Registration Flow for Browsers
            tags:
                - Frontend
            x-numspot-redirect-passthrough: true
    /iam/frontend/self-service/registration/flows:
        get:
            description: |-
                This endpoint returns a registration flow's context with, for example, error details and other information.

                Browser flows expect the anti-CSRF cookie to be included in the request's HTTP Cookie Header.
                For AJAX requests you must ensure that cookies are included in the request or requests will fail.

                If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain
                and you need to forward the incoming HTTP Cookie header to this endpoint:

                ```js
                pseudo-code example
                router.get('/registration', async function (req, res) {
                const flow = await client.getRegistrationFlow(req.header('cookie'), req.query['flow'])

                res.render('registration', flow)
                })
                ```

                This request may fail due to several reasons. The `error.id` can be one of:

                `session_already_available`: The user is already signed in.
                `self_service_flow_expired`: The flow is expired and you should request a new one.
            operationId: GetRegistrationFlow
            parameters:
                - description: |-
                    The Registration Flow ID

                    The value for this parameter comes from `flow` URL Query parameter sent to your
                    application (e.g. `/registration?flow=abcde`).
                  in: query
                  name: id
                  required: true
                  schema:
                    type: string
                - description: |-
                    HTTP Cookies

                    When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
                    sent by the client to your server here. This ensures that CSRF and session cookies are respected.
                  in: header
                  name: Cookie
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RegistrationFlow'
                    description: registrationFlow
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "410":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Get Registration Flow
            tags:
                - Frontend
    /iam/frontend/self-service/settings:
        post:
            description: |-
                Use this endpoint to complete a settings flow by sending an identity's updated password.This endpoint behaves differently for API and browser flows.
                API-initiated flows expect `application/json` to be sent in the body and respond with
                HTTP 200 and an application/json body with the session token on success;
                HTTP 303 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set;
                HTTP 400 on form validation errors.
                HTTP 401 when the endpoint is called without a valid session token.
                HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached or the session's AAL is too low.
                Implies that the user needs to re-authenticate.
                Browser flows without HTTP Header `Accept` or with `Accept: text/*` respond with
                a HTTP 303 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded;
                a HTTP 303 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise.
                a HTTP 303 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached or the session's AAL is too low.
                Browser flows with HTTP Header `Accept: application/json` respond with
                HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success;
                HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set;
                HTTP 401 when the endpoint is called without a valid session cookie.
                HTTP 403 when the page is accessed without a session cookie or the session's AAL is too low.
                HTTP 400 on form validation errors.
                Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator
                Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn
                credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user
                to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.
                If this endpoint is called with a `Accept: application/json` HTTP header, the response contains the flow without a redirect. In the
                case of an error, the `error.id` of the JSON response body can be one of:
                `session_refresh_required`: The identity requested to change something that needs a privileged session. Redirect
                the identity to the login init endpoint with query parameters `?refresh=true&return_to=<the-current-browser-url>`,
                or initiate a refresh login flow otherwise.
                `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
                `session_inactive`: No  Session was found - sign in a user first.
                `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other
                identity logged in instead.
                `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!
                `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL.
                Most likely used in Social Sign In flows.
            operationId: UpdateSettingsFlo
            parameters:
                - description: |-
                    The Settings Flow ID
                    The value for this parameter comes from `flow` URL Query parameter sent to your application (e.g. `/settings?flow=abcde`).
                  in: query
                  name: flow
                  required: true
                  schema:
                    type: string
                - description: The Session Token of the Identity performing the settings flow.
                  in: header
                  name: X-Session-Token
                  schema:
                    type: string
                - description: |-
                    HTTP Cookies

                    When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
                    sent by the client to your server here. This ensures that CSRF and session cookies are respected.
                  in: header
                  name: Cookie
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateSettingsFlowBody'
                    application/x-www-form-urlencoded:
                        schema:
                            $ref: '#/components/schemas/UpdateSettingsFlowBody'
                required: true
                x-originalParamName: Body
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SettingsFlow'
                    description: settingsFlow
                "303":
                    $ref: '#/components/responses/EmptyResponse'
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SettingsFlow'
                    description: settingsFlow
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "410":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "422":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorBrowserLocationChangeRequired'
                    description: errorBrowserLocationChangeRequired
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            security: []
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Complete Settings Flow
            tags:
                - Frontend
            x-numspot-redirect-passthrough: true
    /iam/frontend/self-service/settings/api:
        get:
            description: |-
                This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on.
                You must provide a valid Session Token for this endpoint to respond with HTTP 200 OK.
                To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.
                You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server
                Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make
                you vulnerable to a variety of CSRF attacks.

                Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator
                Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn
                credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user
                to sign in with the second factor or change the configuration.

                In the case of an error, the `error.id` of the JSON response body can be one of:

                `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
                `session_inactive`: No  Session was found - sign in a user first.

                This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).
            operationId: CreateNativeSettingsFlow
            parameters:
                - description: The Session Token of the Identity performing the settings flow.
                  in: header
                  name: X-Session-Token
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SettingsFlow'
                    description: settingsFlow
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Create Settings Flow for Native Apps
            tags:
                - Frontend
    /iam/frontend/self-service/settings/browser:
        get:
            description: |-
                This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to
                `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid
                Session Cookie is included in the request, a login flow will be initialized.
                If this endpoint is opened as a link in the browser, it will be redirected to
                `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session was set, the browser will be redirected to the login endpoint.
                If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 401 forbidden error if no valid session was set.
                Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator
                Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn
                credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user
                to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.

                If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the
                case of an error, the `error.id` of the JSON response body can be one of:
                `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
                `session_inactive`: No  Session was found - sign in a user first.
                `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!
                This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.
            operationId: CreateBrowserSettingsFlow
            parameters:
                - description: The URL to return the browser to after the flow was completed.
                  in: query
                  name: return_to
                  schema:
                    type: string
                - description: |-
                    HTTP Cookies
                    When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
                    sent by the client to your server here. This ensures that CSRF and session cookies are respected.
                  in: header
                  name: Cookie
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SettingsFlow'
                    description: settingsFlow
                "303":
                    $ref: '#/components/responses/EmptyResponse'
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Create Settings Flow for Browsers
            tags:
                - Frontend
            x-numspot-redirect-passthrough: true
    /iam/frontend/self-service/settings/flows:
        get:
            description: |-
                When accessing this endpoint, you must ensure that either the Session Cookie or the Session Token are set.
                Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator
                Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn
                credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user
                to sign in with the second factor or change the configuration.
                If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:
                `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.
                `session_inactive`: No  Session was found - sign in a user first.
                `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead.
            operationId: GetSettingsFlow
            parameters:
                - description: |-
                    ID is the Settings Flow ID

                    The value for this parameter comes from `flow` URL Query parameter sent to your
                    application (e.g. `/settings?flow=abcde`).
                  in: query
                  name: id
                  required: true
                  schema:
                    type: string
                - description: |-
                    The Session Token

                    When using the SDK in an app without a browser, please include the
                    session token here.
                  in: header
                  name: X-Session-Token
                  schema:
                    type: string
                - description: |-
                    HTTP Cookies

                    When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
                    sent by the client to your server here. This ensures that CSRF and session cookies are respected.
                  in: header
                  name: Cookie
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SettingsFlow'
                    description: settingsFlow
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "410":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Get Settings Flow
            tags:
                - Frontend
    /iam/frontend/self-service/verification:
        post:
            description: |-
                Use this endpoint to complete a verification flow. This endpoint
                behaves differently for API and browser flows and has several states:

                `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent
                and works with API- and Browser-initiated flows.
                For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid
                and a HTTP 303 See Other redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired).
                For Browser clients without HTTP Header `Accept` or with `Accept: text/*` it returns a HTTP 303 See Other redirect to the Verification UI URL with the Verification Flow ID appended.
                `sent_email` is the success state after `choose_method` when using the `link` method and allows the user to request another verification email. It
                works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state.
                `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow ("sending a verification link")
                does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL
                (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.
            operationId: UpdateVerificationFlow
            parameters:
                - description: |-
                    The Verification Flow ID

                    The value for this parameter comes from `flow` URL Query parameter sent to your
                    application (e.g. `/verification?flow=abcde`).
                  in: query
                  name: flow
                  required: true
                  schema:
                    type: string
                - description: |-
                    Verification Token

                    The verification token which completes the verification request. If the token
                    is invalid (e.g. expired) an error will be shown to the end-user.

                    This parameter is usually set in a link and not used by any direct API call.
                  in: query
                  name: token
                  schema:
                    type: string
                - description: |-
                    HTTP Cookies

                    When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
                    sent by the client to your server here. This ensures that CSRF and session cookies are respected.
                  in: header
                  name: Cookie
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateVerificationFlowBody'
                    application/x-www-form-urlencoded:
                        schema:
                            $ref: '#/components/schemas/UpdateVerificationFlowBody'
                required: true
                x-originalParamName: Body
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VerificationFlow'
                    description: verificationFlow
                "303":
                    $ref: '#/components/responses/EmptyResponse'
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VerificationFlow'
                    description: verificationFlow
                "410":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Complete Verification Flow
            tags:
                - Frontend
            x-numspot-redirect-passthrough: true
    /iam/frontend/self-service/verification/api:
        get:
            description: |-
                This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.

                To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.

                You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server
                Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make
                you vulnerable to a variety of CSRF attacks.

                This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).
            operationId: CreateNativeVerificationFlow
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VerificationFlow'
                    description: verificationFlow
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Create Verification Flow for Native Apps
            tags:
                - Frontend
    /iam/frontend/self-service/verification/browser:
        get:
            description: |-
                This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to
                `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.

                If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.

                This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).
            operationId: CreateBrowserVerificationFlow
            parameters:
                - description: The URL to return the browser to after the flow was completed.
                  in: query
                  name: return_to
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VerificationFlow'
                    description: verificationFlow
                "303":
                    $ref: '#/components/responses/EmptyResponse'
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Create Verification Flow for Browser Clients
            tags:
                - Frontend
            x-numspot-redirect-passthrough: true
    /iam/frontend/self-service/verification/flows:
        get:
            description: |-
                This endpoint returns a verification flow's context with, for example, error details and other information.

                Browser flows expect the anti-CSRF cookie to be included in the request's HTTP Cookie Header.
                For AJAX requests you must ensure that cookies are included in the request or requests will fail.

                If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain
                and you need to forward the incoming HTTP Cookie header to this endpoint:

                ```js
                pseudo-code example
                router.get('/recovery', async function (req, res) {
                const flow = await client.getVerificationFlow(req.header('cookie'), req.query['flow'])

                res.render('verification', flow)
                })
                ```
            operationId: GetVerificationFlow
            parameters:
                - description: |-
                    The Flow ID

                    The value for this parameter comes from `request` URL Query parameter sent to your
                    application (e.g. `/verification?flow=abcde`).
                  in: query
                  name: id
                  required: true
                  schema:
                    type: string
                - description: |-
                    HTTP Cookies

                    When using the SDK on the server side you must include the HTTP Cookie Header
                    originally sent to your HTTP handler here.
                  in: header
                  name: cookie
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VerificationFlow'
                    description: verificationFlow
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Get Verification Flow
            tags:
                - Frontend
    /iam/frontend/sessions:
        delete:
            description: |-
                Calling this endpoint invalidates all except the current session that belong to the logged-in user.
                Session data are not deleted.
            operationId: DisableMyOtherSessions
            parameters:
                - description: Set the Session Token when calling from non-browser clients. A session token has a format of `MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj`.
                  in: header
                  name: X-Session-Token
                  schema:
                    type: string
                - description: |-
                    Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that
                    scenario you must include the HTTP Cookie Header which originally was included in the request to your server.
                    It is ok if more than one cookie are included here as all other cookies will be ignored.
                  in: header
                  name: Cookie
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteMySessionsCount'
                    description: deleteMySessionsCount
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Disable my other sessions
            tags:
                - Frontend
        get:
            description: |-
                This endpoints returns all other active sessions that belong to the logged-in user.
                The current session can be retrieved by calling the `/sessions/whoami` endpoint.
            operationId: ListMySessions
            parameters:
                - description: |-
                    Deprecated Items per Page

                    DEPRECATED: Please use `page_token` instead. This parameter will be removed in the future.

                    This is the number of items per page.
                  in: query
                  name: per_page
                  schema:
                    default: 250
                    format: int64
                    maximum: 1000
                    minimum: 1
                    type: integer
                - description: |-
                    Deprecated Pagination Page

                    DEPRECATED: Please use `page_token` instead. This parameter will be removed in the future.

                    This value is currently an integer, but it is not sequential. The value is not the page number, but a
                    reference. The next page can be any number and some numbers might return an empty list.

                    For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
                    The first page can be retrieved by omitting this parameter. Following page pointers will be returned in the
                    `Link` header.
                  in: query
                  name: page
                  schema:
                    format: int64
                    type: integer
                - description: |-
                    Page Size
                    This is the number of items per page to return.
                  in: query
                  name: page_size
                  schema:
                    default: 250
                    format: int64
                    maximum: 500
                    minimum: 1
                    type: integer
                - description: Next Page Token
                  in: query
                  name: page_token
                  schema:
                    default: "1"
                    minimum: 1
                    type: string
                - description: Set the Session Token when calling from non-browser clients. A session token has a format of `MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj`.
                  in: header
                  name: X-Session-Token
                  schema:
                    type: string
                - description: |-
                    Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that
                    scenario you must include the HTTP Cookie Header which originally was included in the request to your server.
                    It is ok if more than one cookie are included here as all other cookies will be ignored.
                  in: header
                  name: Cookie
                  schema:
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ListMySessionsResponse'
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Get My Active Sessions
            tags:
                - Frontend
    /iam/frontend/sessions/token-exchange:
        get:
            description: Exchange Session Token.
            operationId: ExchangeSessionToken
            parameters:
                - description: The part of the code return when initializing the flow.
                  in: query
                  name: init_code
                  required: true
                  schema:
                    type: string
                - description: The part of the code returned by the return_to URL.
                  in: query
                  name: return_to_code
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SuccessfulNativeLogin'
                    description: successfulNativeLogin
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "410":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Exchange Session Token
            tags:
                - Frontend
    /iam/frontend/sessions/whoami:
        get:
            description: |-
                Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated.
                Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent.
                If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:

                ```js
                pseudo-code example
                router.get('/protected-endpoint', async function (req, res) {
                const session = await client.toSession(undefined, req.header('cookie'))

                console.log(session)
                })
                ```

                When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:

                ```js
                pseudo-code example
                ...
                const session = await client.toSession("the-session-token")

                console.log(session)
                ```

                When using a token template, the token is included in the `tokenized` field of the session.

                ```js
                pseudo-code example
                ...
                const session = await client.toSession("the-session-token", { tokenize_as: "example-jwt-template" })

                console.log(session.tokenized) // The JWT
                ```

                Depending on your configuration this endpoint might return a 403 status code if the session has a lower Authenticator
                Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn
                credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user
                to sign in with the second factor or change the configuration.

                This endpoint is useful for:

                AJAX calls. Remember to send credentials and set up CORS correctly!
                Reverse proxies and API Gateways
                Server-side calls - use the `X-Session-Token` header!

                This endpoint authenticates users by checking:

                if the `Cookie` HTTP header was set containing a Session Cookie;
                if the `Authorization: bearer <session-token>` HTTP header was set with a valid Session Token;
                if the `X-Session-Token` HTTP header was set with a valid Session Token.

                If none of these headers are set or the cookie or token are invalid, the endpoint returns a HTTP 401 status code.

                As explained above, this request may fail due to several reasons. The `error.id` can be one of:

                `session_inactive`: No active session was found in the request (no
                 Session Cookie /  Session Token).

                `session_aal2_required`: An active session was found but it does not fulfil the Authenticator Assurance Level, implying that the session must authenticate the second factor.
            operationId: ToSession
            parameters:
                - description: Set the Session Token when calling from non-browser clients.
                  in: header
                  name: X-Session-Token
                  schema:
                    type: string
                - description: |-
                    Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that
                    scenario you must include the HTTP Cookie Header which originally was included in the request to your server.
                    It is ok if more than one cookie are included here as all other cookies will be ignored.
                  in: header
                  name: Cookie
                  schema:
                    type: string
                - description: Returns the session additionally as a token (such as a JWT). The value of this parameter has to be a valid, configured Session token template.
                  in: query
                  name: tokenize_as
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Session'
                    description: session
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorGeneric'
                    description: errorGeneric
            servers:
                - url: http://authentication-manager:8000
                - url: /
            summary: Check Who the Current HTTP Session Belongs To
            tags:
                - Frontend
    /iam/gateway/introspect:
        post:
            description: |-
                The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token
                is neither expired nor revoked. If a token is active, additional information on the token will be included. You can
                set additional data for a token by setting `session.access_token` during the consent flow. It will also say is service account is SAN or not.
            operationId: GatewayIntrospect
            requestBody:
                $ref: '#/components/requestBodies/GatewayIntrospectRequest'
            responses:
                "200":
                    $ref: '#/components/responses/GatewayIntrospect200Response'
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorOauth2'
                    description: Internal Server error
            security: []
            servers:
                - url: http://authentication-manager:8000
                - url: /
            tags:
                - Internal
            x-numspot-internal: true
    /iam/internal/admin/permissions:
        get:
            description: List permissions
            operationId: ListPermissions
            parameters:
                - $ref: '#/components/parameters/ListPermissionsPage'
            responses:
                "200":
                    $ref: '#/components/responses/Permissions200Response'
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
                scopes-details:
                    iam.admin.get: null
        post:
            description: Create permission
            operationId: CreatePermission
            requestBody:
                $ref: '#/components/requestBodies/PermissionRequest'
            responses:
                "200":
                    $ref: '#/components/responses/PermissionCreated200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid permission
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: CREATE
                path-with-tenant: false
                scopes-details:
                    iam.admin.create: null
    /iam/internal/admin/permissions/{permissionUuid}:
        delete:
            description: Delete permission
            operationId: DeletePermission
            parameters:
                - $ref: '#/components/parameters/PermissionUuid'
            responses:
                "204":
                    description: Permission deleted
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: DELETE
                path-with-tenant: false
                scopes-details:
                    iam.admin.delete: null
        get:
            description: Get permission
            operationId: GetPermission
            parameters:
                - $ref: '#/components/parameters/PermissionUuid'
            responses:
                "200":
                    $ref: '#/components/responses/PermissionCreated200Response'
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Permission not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
                scopes-details:
                    iam.admin.get: null
        patch:
            description: Update permission. To set resource or subResource as NULL, send an empty string.
            operationId: UpdatePermission
            parameters:
                - $ref: '#/components/parameters/PermissionUuid'
            requestBody:
                $ref: '#/components/requestBodies/PatchPermissionRequest'
            responses:
                "204":
                    description: Permission update
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid permission
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Permission not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
                path-with-tenant: false
                scopes-details:
                    iam.admin.update: null
    /iam/internal/admin/replicate/{tenantUuid}:
        post:
            description: Replicate Roles and Permissions for Tenant ID
            operationId: ReplicateRolesPermissions
            parameters:
                - $ref: '#/components/parameters/TenantUuid'
            responses:
                "201":
                    description: Replication started
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Tenant ID
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Tenant not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Replication
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: CREATE
                path-with-tenant: false
                scopes-details:
                    iam.admin.create: null
    /iam/internal/admin/roles:
        get:
            description: List roles
            operationId: ListRoles
            parameters:
                - $ref: '#/components/parameters/ListRolesPage'
            responses:
                "200":
                    $ref: '#/components/responses/RoleList200Response'
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: LIST
                path-with-tenant: false
                scopes-details:
                    iam.admin.get: null
        post:
            description: Create role
            operationId: CreateRole
            requestBody:
                $ref: '#/components/requestBodies/RoleRequest'
            responses:
                "200":
                    $ref: '#/components/responses/RoleCreated200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: CREATE
                path-with-tenant: false
                scopes-details:
                    iam.admin.create: null
    /iam/internal/admin/roles/{roleUuid}:
        delete:
            description: Delete role
            operationId: DeleteRole
            parameters:
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "204":
                    description: Role deleted
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: DELETE
                path-with-tenant: false
                scopes-details:
                    iam.admin.delete: null
        get:
            description: Get role
            operationId: GetRole
            parameters:
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "200":
                    $ref: '#/components/responses/RoleCreated200Response'
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
                scopes-details:
                    iam.admin.get: null
        patch:
            description: Update role
            operationId: UpdateRole
            parameters:
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/PatchRoleRequest'
            responses:
                "204":
                    description: Role updated
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
                path-with-tenant: false
                scopes-details:
                    iam.admin.update: null
    /iam/internal/admin/roles/{roleUuid}/permissions:
        delete:
            description: Remove permissions from a role
            operationId: RemoveRolePermissions
            parameters:
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/RemoveGlobalRolePermissionsRequest'
            responses:
                "204":
                    description: Permission removed
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: DELETE
                path-with-tenant: false
                scopes-details:
                    iam.admin.delete: null
        get:
            description: Get a role's permissions
            operationId: GetRolePermissions
            parameters:
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "200":
                    $ref: '#/components/responses/Permissions200Response'
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
                scopes-details:
                    iam.admin.get: null
        patch:
            description: Add permissions to a role
            operationId: AddRolePermissions
            parameters:
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/AddGlobalRolePermissionsRequest'
            responses:
                "204":
                    description: Permission added
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
                path-with-tenant: false
                scopes-details:
                    iam.admin.update: null
    /iam/introspect:
        post:
            description: The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked.
            operationId: Introspect
            requestBody:
                $ref: '#/components/requestBodies/IntrospectRequest'
            responses:
                "200":
                    $ref: '#/components/responses/IntrospectResponse'
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorOauth2'
                    description: Internal Server error
            servers:
                - url: http://authentication-manager:8000
                - url: /
            tags:
                - Oauth2
    /iam/listbyaccess:
        post:
            description: Returns a list of items, of the specified type, that the identity is authorized to access
            operationId: ListObjectsByAccess
            parameters:
                - $ref: '#/components/parameters/ListByAccessPage'
            requestBody:
                $ref: '#/components/requestBodies/ListObjectsByAccessRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ListObjectsByAccess200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ListByAccess
            x-numspot-internal: true
    /iam/notify:
        post:
            description: Notify the creation or deletion of an object based on provided context attributes
            operationId: NotifyObjectLifecycleChange
            requestBody:
                $ref: '#/components/requestBodies/NotifyRequest'
            responses:
                "201":
                    description: Access is allowed based on the provided context
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Notify
            x-numspot-internal: true
    /iam/notify/tenant:
        post:
            description: Notify the creation or deletion of a tenant based on provided context attributes
            operationId: NotifyTenantLifecycleChange
            requestBody:
                $ref: '#/components/requestBodies/NotifyTenantLifecycleChangeRequest'
            responses:
                "200":
                    description: Access is allowed based on the provided context
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://tenant-manager:8000
                - url: /
            tags:
                - TenantNotify
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
    /iam/notify/user:
        post:
            description: Notify the creation or deletion of a user based on provided context attributes
            operationId: NotifyUserLifecycleChange
            requestBody:
                $ref: '#/components/requestBodies/NotifyUserLifecycleChangeRequest'
            responses:
                "200":
                    description: Access is allowed based on the provided context
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://tenant-manager:8000
                - url: /
            tags:
                - TenantNotify
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
    /iam/openIdIdentity:
        get:
            description: get identities list
            operationId: OpenIdIdentityList
            parameters:
                - in: query
                  name: clientName
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/OpenIdIdentityList200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Identity not found.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - AuthIdentities
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
                scopes-details:
                    identity.openId.get: null
        post:
            description: create a new openId identity
            operationId: OpenIdIdentityCreate
            requestBody:
                $ref: '#/components/requestBodies/OpenIdIdentityCreateRequest'
            responses:
                "200":
                    $ref: '#/components/responses/OpenIdIdentityCreate200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - AuthIdentities
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: CREATE
                path-with-tenant: false
                scopes-details:
                    identity.openId.create: null
    /iam/openIdIdentity/{id}:
        delete:
            description: delete an identity
            operationId: OpenIdIdentityDelete
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    format: uuid
                    type: string
            responses:
                "204":
                    description: Identity updated.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Identity not found.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - AuthIdentities
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: DELETE
                path-with-tenant: false
                scopes-details:
                    identity.openId.delete: null
        get:
            description: get a new identity
            operationId: OpenIdIdentityGet
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    format: uuid
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/OpenIdIdentityGet200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Identity not found.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - AuthIdentities
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
                scopes-details:
                    identity.openId.get: null
        patch:
            description: patch an identity
            operationId: OpenIdIdentityPatch
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    format: uuid
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/OpenIdIdentityCreateRequest'
            responses:
                "200":
                    $ref: '#/components/responses/OpenIdIdentityPatch200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Identity not found.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - AuthIdentities
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
                path-with-tenant: false
                scopes-details:
                    identity.openId.patch: null
    /iam/organisations:
        get:
            description: Get a list of organisations assigned to an identity.
            operationId: ListOrganisationsIdentity
            parameters:
                - $ref: '#/components/parameters/ListUserOrganisations'
            responses:
                "200":
                    $ref: '#/components/responses/ListUserOrganisations200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: UUID in parameters are malformed. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: User or organisation not found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Identity
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
    /iam/organisations/{organisationId}/iamgranularPolicy/{subjectType}/{subjectId}/{objectType}:
        get:
            deprecated: true
            description: Retrieve the granular policy assigned to a specific subject for a specific object type.
            operationId: GetIAMGranularPolicyOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
                - $ref: '#/components/parameters/ObjectType'
            responses:
                "200":
                    $ref: '#/components/responses/GetIAMGranularPolicy200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: READ
                tenant-path-name: organisationId
        patch:
            deprecated: true
            description: Modify the IAM policy by adding or removing granular permissions for a specific object type. If the policy does not exist, it will be implicitly created
            operationId: SetIAMGranularPolicyOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
                - $ref: '#/components/parameters/ObjectType'
            requestBody:
                $ref: '#/components/requestBodies/SetIAMGranularPolicyRequest'
            responses:
                "204":
                    description: policy set
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Subject not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: UPDATE
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/iampolicy/{subjectType}/{subjectId}:
        get:
            description: Retrieve the policy assigned to a specific subject
            operationId: GetIAMPolicyOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
            responses:
                "200":
                    $ref: '#/components/responses/GetIAMPolicy200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.getPolicy: null
                tenant-path-name: organisationId
        patch:
            description: Modify the IAM policy by adding or removing roles and permissions. If the policy does not exist, it will be implicitly created
            operationId: SetIAMPolicyOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
            requestBody:
                $ref: '#/components/requestBodies/SetIAMPolicyRequest'
            responses:
                "204":
                    description: policy set
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Subject not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.createPolicy: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/permissions:
        get:
            description: List permissions
            operationId: ListPermissionsOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/Service'
                - $ref: '#/components/parameters/Resource'
                - $ref: '#/components/parameters/SubResource'
                - $ref: '#/components/parameters/Action'
                - $ref: '#/components/parameters/ListPermissionsPage'
            responses:
                "200":
                    $ref: '#/components/responses/ListPermissions200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.permission.get: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/permissions/{permissionUuid}:
        get:
            description: Get permission
            operationId: GetPermissionOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/PermissionUuid'
            responses:
                "200":
                    $ref: '#/components/responses/GetPermission200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Permission not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.permission.get: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/roles:
        get:
            description: List roles
            operationId: ListRolesOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/RoleName'
                - $ref: '#/components/parameters/ListRolesPage'
            responses:
                "200":
                    $ref: '#/components/responses/ListRoles200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No such role
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.role.get: null
                tenant-path-name: organisationId
        post:
            description: Create role
            operationId: CreateRoleOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            requestBody:
                $ref: '#/components/requestBodies/CreateRoleRequest'
            responses:
                "200":
                    $ref: '#/components/responses/CreateRole200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: uuid
                    locationType: BODY_JSON
                    type: iam.role
                scopes-details:
                    iam.role.create: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/roles/{roleUuid}:
        delete:
            description: Delete role
            operationId: DeleteRoleOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "204":
                    description: Role deleted
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: DELETE
                operation-output:
                    cardinality: SINGLE
                    location: iam.role.delete
                    locationType: SCOPE
                    type: iam.role
                scopes-details:
                    iam.role.delete: null
                tenant-path-name: organisationId
        get:
            description: Get role
            operationId: GetRoleOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "200":
                    $ref: '#/components/responses/GetRole200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.role.get: null
                tenant-path-name: organisationId
        patch:
            description: Update role
            operationId: UpdateRoleOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/UpdateRoleRequest'
            responses:
                "204":
                    description: Role updated
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.role.update: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/roles/{roleUuid}/permissions:
        delete:
            description: Remove permissions from a role
            operationId: RemoveRolePermissionsOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/RemoveRolePermissionsRequest'
            responses:
                "204":
                    description: Permission removed
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.role.delete: null
                tenant-path-name: organisationId
        get:
            description: Get a role's permissions
            operationId: GetRolePermissionsOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "200":
                    $ref: '#/components/responses/GetRolePermissions200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.role.get: null
                tenant-path-name: organisationId
        patch:
            description: Add permissions to a role
            operationId: AddRolePermissionsOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/AddRolePermissionsRequest'
            responses:
                "204":
                    description: Permission added
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role(s) and/or permission(s)
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.role.get: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/serviceAccounts:
        get:
            description: List an existing service account.
            operationId: ListServiceAccountOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/ListServiceAccounts'
            requestBody:
                $ref: '#/components/requestBodies/ListIdentitiesByAccessRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ListServiceAccount200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                list-propagation:
                    location: items
                    locationType: BODY_JSON
                    resourceType: identity.serviceAccount
                operation-action: LIST
                tenant-path-name: organisationId
        post:
            description: Create a new service account.
            operationId: CreateServiceAccountOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            requestBody:
                $ref: '#/components/requestBodies/CreateServiceAccountRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateServiceAccount201Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.serviceAccount.create: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/serviceAccounts/{serviceAccountId}:
        delete:
            description: Delete an existing service account
            operationId: DeleteServiceAccountOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/ServiceAccountId'
            responses:
                "204":
                    description: Service account deleted
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    identity.serviceAccount.delete:
                        cardinality: SINGLE
                        location: serviceAccountId
                        locationType: PATH
                tenant-path-name: organisationId
        get:
            description: Retrieve an existing service account.
            operationId: GetServiceAccountOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/ServiceAccountId'
            responses:
                "200":
                    $ref: '#/components/responses/GetServiceAccount200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    identity.serviceAccount.get:
                        cardinality: SINGLE
                        location: serviceAccountId
                        locationType: PATH
                tenant-path-name: organisationId
        put:
            description: Update an existing service account.
            operationId: UpdateServiceAccountOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/ServiceAccountId'
            requestBody:
                $ref: '#/components/requestBodies/UpdateServiceAccountRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateServiceAccount200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    identity.serviceAccount.update:
                        cardinality: SINGLE
                        location: serviceAccountId
                        locationType: PATH
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/serviceAccounts/{serviceAccountId}/acl:
        get:
            description: Retrieve the ACLs assigned to a specific subject for a specific object type.
            operationId: GetACLServiceAccountOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/ServiceAccountId'
                - in: query
                  name: service
                  required: true
                  schema:
                    type: string
                - in: query
                  name: resource
                  required: true
                  schema:
                    type: string
                - in: query
                  name: subresource
                  required: false
                  schema:
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/GetACL200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: READ
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/serviceAccounts/{serviceAccountId}/bulk/acl:
        delete:
            description: delete an ACLs between a subject and a resource.
            operationId: DeleteACLServiceAccountOrganisationBulk
            requestBody:
                $ref: '#/components/requestBodies/DeleteACLRequest'
            responses:
                "204":
                    description: acl deleted.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: DELETE
                tenant-path-name: organisationId
        parameters:
            - $ref: '#/components/parameters/OrganisationId'
            - $ref: '#/components/parameters/ServiceAccountId'
        post:
            description: Create an ACLs between a subject and a resource.
            operationId: CreateACLServiceAccountOrganisationBulk
            requestBody:
                $ref: '#/components/requestBodies/SetACLRequest'
            responses:
                "201":
                    description: acl created.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: CREATE
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/serviceAccounts/{serviceAccountId}/spaces:
        get:
            description: Get a list of spaces assigned to a service account within an organisation.
            operationId: ListSpacesOfServiceAccount
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/ServiceAccountId'
                - $ref: '#/components/parameters/ListSpacesOfServiceAccount'
            responses:
                "200":
                    $ref: '#/components/responses/ListSpacesServiceAccount200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: UUID in parameters are malformed. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: User or organisation not found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: LIST
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/spaces:
        get:
            description: Get a list of spaces assigned to an identity within an organisation.
            operationId: ListSpacesIdentity
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/ListSpacesIdentity'
            responses:
                "200":
                    $ref: '#/components/responses/ListSpacesIdentity200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: UUID in parameters are malformed. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: User or organisation not found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Identity
            x-numspot-permissions:
                operation-action: LIST
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/users:
        get:
            description: List users or get an existing user by email.
            operationId: ListUserOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/UserEmail'
                - $ref: '#/components/parameters/ListUser'
            requestBody:
                $ref: '#/components/requestBodies/ListIdentitiesByAccessRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ListUser200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                list-propagation:
                    location: items
                    locationType: BODY_JSON
                    resourceType: identity.user
                operation-action: LIST
                tenant-path-name: organisationId
        post:
            description: Create a new user.
            operationId: CreateUserOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            requestBody:
                $ref: '#/components/requestBodies/CreateUserRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateUser201Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.user.create: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/users/{userId}:
        delete:
            description: Delete an existing user
            operationId: DeleteUserOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/UserId'
            responses:
                "204":
                    description: User deleted
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    identity.user.delete:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
                tenant-path-name: organisationId
        get:
            description: Retrieve an existing user
            operationId: GetUserOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/UserId'
            responses:
                "200":
                    $ref: '#/components/responses/GetUser200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    identity.user.get:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
                tenant-path-name: organisationId
        patch:
            description: Patch user state within an space.
            operationId: PatchUserStateOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/UserId'
            requestBody:
                $ref: '#/components/requestBodies/PatchUserStateRequest'
            responses:
                "200":
                    $ref: '#/components/responses/PatchUserState200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    identity.user.update:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
                tenant-path-name: organisationId
        put:
            description: Update an existing user
            operationId: UpdateUserOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/UserId'
            requestBody:
                $ref: '#/components/requestBodies/UpdateUserRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateUser200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    identity.user.update:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/users/{userId}/acl:
        get:
            description: Retrieve the ACLs assigned to a specific user for a specific object type.
            operationId: GetACLUserOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/UserId'
                - in: query
                  name: service
                  required: true
                  schema:
                    type: string
                - in: query
                  name: resource
                  required: true
                  schema:
                    type: string
                - in: query
                  name: subresource
                  required: false
                  schema:
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/GetACL200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: READ
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/users/{userId}/bulk/acl:
        delete:
            description: delete an ACLs between a subject and a resource.
            operationId: DeleteACLUserOrganisationBulk
            requestBody:
                $ref: '#/components/requestBodies/DeleteACLRequest'
            responses:
                "204":
                    description: acl deleted.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: DELETE
                tenant-path-name: organisationId
        parameters:
            - $ref: '#/components/parameters/OrganisationId'
            - $ref: '#/components/parameters/UserId'
        post:
            description: Create an ACLs between a subject and a resource.
            operationId: CreateACLUserOrganisationBulk
            requestBody:
                $ref: '#/components/requestBodies/SetACLRequest'
            responses:
                "201":
                    description: acl created.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: CREATE
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/users/{userId}/recover:
        post:
            description: Generate a recovery link to let the user set his password / totp
            operationId: RecoverUserOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/UserId'
            responses:
                "200":
                    $ref: '#/components/responses/RecoverUser200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.user.recover: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/users/{userId}/spaces:
        get:
            description: Get a list of spaces assigned to a user within an organisation.
            operationId: ListSpacesOfUser
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/UserId'
                - $ref: '#/components/parameters/ListSpacesOfUser'
            responses:
                "200":
                    $ref: '#/components/responses/ListSpacesUser200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: UUID in parameters are malformed. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: User or organisation not found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: LIST
                tenant-path-name: organisationId
    /iam/revoke:
        post:
            description: Revoking an access token means that the tokens will be invalid. A revoked access token can n longer be used to make access requests.
            operationId: Revoke
            parameters:
                - $ref: '#/components/parameters/Authorization'
            requestBody:
                $ref: '#/components/requestBodies/RevokeRequest'
            responses:
                "200":
                    description: Token revoked successfully
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorOauth2'
                    description: Bad Request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorOauth2'
                    description: Unauthorized
            security:
                - BasicAuth: []
            servers:
                - url: http://authentication-manager:8000
                - url: /
            tags:
                - Oauth2
    /iam/root/verify:
        post:
            description: todo
            operationId: VerifyRootAccess
            requestBody:
                $ref: '#/components/requestBodies/VerifyRootAccessRequest'
            responses:
                "200":
                    description: Access is allowed based on the provided context
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - Verify Root
            x-numspot-internal: true
    /iam/serviceAccountNS:
        post:
            description: ServiceAccountNS create
            operationId: CreateServiceAccountNS
            requestBody:
                $ref: '#/components/requestBodies/CreateServiceAccountNSRequest'
            responses:
                "200":
                    $ref: '#/components/responses/CreateServiceAccountNS200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - ServiceAccountNS
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: CREATE
                path-with-tenant: false
                scopes-details:
                    identity.san.create: null
    /iam/serviceAccountNS/{sanId}/iampolicy:
        get:
            description: ServiceAccountNS IAMPolicy
            operationId: GetRootIAMPolicy
            parameters:
                - in: path
                  name: sanId
                  required: true
                  schema:
                    format: uuid
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/GetRootIAMPolicy200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - ServiceAccountNS
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
                scopes-details:
                    identity.san.getIAMPolicy: null
    /iam/serviceAccountNS/iampolicy:
        patch:
            description: ServiceAccountNS IAMPolicy
            operationId: PatchRootIAMPolicy
            requestBody:
                $ref: '#/components/requestBodies/PatchRootIAMPolicyRequest'
            responses:
                "204":
                    description: Identity updated.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - ServiceAccountNS
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
                path-with-tenant: false
                scopes-details:
                    identity.san.setIAMPolicy: null
    /iam/spaces/{spaceId}/iamgranularPolicy/{subjectType}/{subjectId}/{objectType}:
        get:
            deprecated: true
            description: Retrieve the granular policy assigned to a specific subject for a specific object type.
            operationId: GetIAMGranularPolicySpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
                - $ref: '#/components/parameters/ObjectType'
            responses:
                "200":
                    $ref: '#/components/responses/GetIAMGranularPolicy200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: READ
        patch:
            deprecated: true
            description: Modify the IAM policy by adding or removing granular permissions for a specific object type. If the policy does not exist, it will be implicitly created
            operationId: SetIAMGranularPolicySpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
                - $ref: '#/components/parameters/ObjectType'
            requestBody:
                $ref: '#/components/requestBodies/SetIAMGranularPolicyRequest'
            responses:
                "204":
                    description: policy set
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Subject not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: UPDATE
    /iam/spaces/{spaceId}/iampolicy/{subjectType}/{subjectId}:
        get:
            description: Retrieve the policy assigned to a specific subject
            operationId: GetIAMPolicySpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
            responses:
                "200":
                    $ref: '#/components/responses/GetIAMPolicy200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.getPolicy: null
        patch:
            description: Modify the IAM policy by adding or removing roles and permissions. If the policy does not exist, it will be implicitly created
            operationId: SetIAMPolicySpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
            requestBody:
                $ref: '#/components/requestBodies/SetIAMPolicyRequest'
            responses:
                "204":
                    description: policy set
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Subject not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.createPolicy: null
    /iam/spaces/{spaceId}/permissions:
        get:
            description: List permissions
            operationId: ListPermissionsSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/Service'
                - $ref: '#/components/parameters/Resource'
                - $ref: '#/components/parameters/SubResource'
                - $ref: '#/components/parameters/Action'
                - $ref: '#/components/parameters/ListPermissionsPage'
            responses:
                "200":
                    $ref: '#/components/responses/ListPermissions200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.permission.get: null
    /iam/spaces/{spaceId}/permissions/{permissionUuid}:
        get:
            description: Get permission
            operationId: GetPermissionSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/PermissionUuid'
            responses:
                "200":
                    $ref: '#/components/responses/GetPermission200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Permission not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.permission.get: null
    /iam/spaces/{spaceId}/roles:
        get:
            description: List roles
            operationId: ListRolesSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/RoleName'
                - $ref: '#/components/parameters/ListRolesPage'
            responses:
                "200":
                    $ref: '#/components/responses/ListRoles200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No such role
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.role.get: null
        post:
            description: Create role
            operationId: CreateRoleSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
            requestBody:
                $ref: '#/components/requestBodies/CreateRoleRequest'
            responses:
                "200":
                    $ref: '#/components/responses/CreateRole200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: uuid
                    locationType: BODY_JSON
                    type: iam.role
                scopes-details:
                    iam.role.create: null
    /iam/spaces/{spaceId}/roles/{roleUuid}:
        delete:
            description: Delete role
            operationId: DeleteRoleSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "204":
                    description: Role deleted
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: DELETE
                operation-output:
                    cardinality: SINGLE
                    location: iam.role.delete
                    locationType: SCOPE
                    type: iam.role
                scopes-details:
                    iam.role.delete: null
        get:
            description: Get role
            operationId: GetRoleSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "200":
                    $ref: '#/components/responses/GetRole200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.role.get: null
        patch:
            description: Update role
            operationId: UpdateRoleSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/UpdateRoleRequest'
            responses:
                "204":
                    description: Role updated
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.role.update: null
    /iam/spaces/{spaceId}/roles/{roleUuid}/permissions:
        delete:
            description: Remove permissions from a role
            operationId: RemoveRolePermissionsSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/RemoveRolePermissionsRequest'
            responses:
                "204":
                    description: Permission removed
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.role.update: null
        get:
            description: Get a role's permissions
            operationId: GetRolePermissionsSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "200":
                    $ref: '#/components/responses/GetRolePermissions200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.role.get: null
        patch:
            description: Add permissions to a role
            operationId: AddRolePermissionsSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/AddRolePermissionsRequest'
            responses:
                "204":
                    description: Permission added
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role(s) and/or permission(s)
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.role.update: null
    /iam/spaces/{spaceId}/serviceAccounts:
        get:
            description: List an existing service account.
            operationId: ListServiceAccountSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/ListServiceAccounts'
            requestBody:
                $ref: '#/components/requestBodies/ListIdentitiesByAccessRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ListServiceAccount200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                list-propagation:
                    location: items
                    locationType: BODY_JSON
                    resourceType: identity.serviceAccount
                operation-action: LIST
        post:
            description: Create a new service account.
            operationId: CreateServiceAccountSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
            requestBody:
                $ref: '#/components/requestBodies/CreateServiceAccountRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateServiceAccount201Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.serviceAccount.create: null
    /iam/spaces/{spaceId}/serviceAccounts/{serviceAccountId}:
        delete:
            description: Delete an existing service account
            operationId: DeleteServiceAccountSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/ServiceAccountId'
            responses:
                "204":
                    description: Service account deleted
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    identity.serviceAccount.delete:
                        cardinality: SINGLE
                        location: serviceAccountId
                        locationType: PATH
        get:
            description: Retrieve an existing service account.
            operationId: GetServiceAccountSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/ServiceAccountId'
            responses:
                "200":
                    $ref: '#/components/responses/GetServiceAccount200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    identity.serviceAccount.get:
                        cardinality: SINGLE
                        location: serviceAccountId
                        locationType: PATH
        post:
            description: Assign a service account to a space within an organisation.
            operationId: AssignServiceAccountToSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/ServiceAccountId'
            responses:
                "200":
                    description: Successfully assigned service account to space
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.serviceAccount.create: null
        put:
            description: Update an existing service account.
            operationId: UpdateServiceAccountSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/ServiceAccountId'
            requestBody:
                $ref: '#/components/requestBodies/UpdateServiceAccountRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateServiceAccount200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    identity.serviceAccount.update:
                        cardinality: SINGLE
                        location: serviceAccountId
                        locationType: PATH
    /iam/spaces/{spaceId}/serviceAccounts/{serviceAccountId}/acl:
        get:
            description: Retrieve the ACLs assigned to a specific subject for a specific object type.
            operationId: GetACLServiceAccountSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/ServiceAccountId'
                - in: query
                  name: service
                  required: true
                  schema:
                    type: string
                - in: query
                  name: resource
                  required: true
                  schema:
                    type: string
                - in: query
                  name: subresource
                  required: false
                  schema:
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/GetACL200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: READ
    /iam/spaces/{spaceId}/serviceAccounts/{serviceAccountId}/bulk/acl:
        delete:
            description: delete an ACLs between a subject and a resource.
            operationId: DeleteACLServiceAccountSpaceBulk
            requestBody:
                $ref: '#/components/requestBodies/DeleteACLRequest'
            responses:
                "204":
                    description: acl deleted.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: DELETE
        parameters:
            - $ref: '#/components/parameters/SpaceId'
            - $ref: '#/components/parameters/ServiceAccountId'
        post:
            description: Create an ACLs between a subject and a resource.
            operationId: CreateACLServiceAccountSpaceBulk
            requestBody:
                $ref: '#/components/requestBodies/SetACLRequest'
            responses:
                "201":
                    description: acl created.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: CREATE
    /iam/spaces/{spaceId}/users:
        get:
            description: List users or get an existing user by email.
            operationId: ListUserSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/UserEmail'
                - $ref: '#/components/parameters/ListUser'
            requestBody:
                $ref: '#/components/requestBodies/ListIdentitiesByAccessRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ListUser200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                list-propagation:
                    location: items
                    locationType: BODY_JSON
                    resourceType: identity.user
                operation-action: LIST
        post:
            description: Create a new user.
            operationId: CreateUserSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
            requestBody:
                $ref: '#/components/requestBodies/CreateUserRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateUser201Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.user.create: null
    /iam/spaces/{spaceId}/users/{userId}:
        delete:
            description: Delete an existing user
            operationId: DeleteUserSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/UserId'
            responses:
                "204":
                    description: User deleted
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    identity.user.delete:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
        get:
            description: Retrieve an existing user
            operationId: GetUserSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/UserId'
            responses:
                "200":
                    $ref: '#/components/responses/GetUser200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    identity.user.get:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
        patch:
            description: Patch user state within space.
            operationId: PatchUserStateSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/UserId'
            requestBody:
                $ref: '#/components/requestBodies/PatchUserStateRequest'
            responses:
                "200":
                    $ref: '#/components/responses/PatchUserState200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    identity.user.update:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
        post:
            description: Assign a user to a space within an organisation.
            operationId: AssignUserToSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/UserId'
            responses:
                "200":
                    description: Successfully assigned user to space
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.user.create: null
        put:
            description: Update an existing user
            operationId: UpdateUserSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/UserId'
            requestBody:
                $ref: '#/components/requestBodies/UpdateUserRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateUser200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    identity.user.update:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
    /iam/spaces/{spaceId}/users/{userId}/acl:
        get:
            description: Retrieve the ACLs assigned to a specific subject for a specific object type.
            operationId: GetACLUserSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/UserId'
                - in: query
                  name: service
                  required: true
                  schema:
                    type: string
                - in: query
                  name: resource
                  required: true
                  schema:
                    type: string
                - in: query
                  name: subresource
                  required: false
                  schema:
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/GetACL200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: READ
    /iam/spaces/{spaceId}/users/{userId}/bulk/acl:
        delete:
            description: delete an ACLs between a subject and a resource.
            operationId: DeleteACLUserSpaceBulk
            requestBody:
                $ref: '#/components/requestBodies/DeleteACLRequest'
            responses:
                "204":
                    description: acl deleted.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: DELETE
        parameters:
            - $ref: '#/components/parameters/SpaceId'
            - $ref: '#/components/parameters/UserId'
        post:
            description: Create an ACLs between a subject and a resource.
            operationId: CreateACLUserSpaceBulk
            requestBody:
                $ref: '#/components/requestBodies/SetACLRequest'
            responses:
                "201":
                    description: acl created.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: CREATE
    /iam/spaces/{spaceId}/users/{userId}/recover:
        post:
            description: Generate a recovery link to let the user set his password / totp
            operationId: RecoverUserSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/UserId'
            responses:
                "200":
                    $ref: '#/components/responses/RecoverUser200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.user.create: null
    /iam/tenants/{tenantId}/users/{userId}:
        get:
            description: Get a user instance id from a user id
            operationId: UserPtrIdFromUserId
            parameters:
                - $ref: '#/components/parameters/TenantId'
                - in: path
                  name: userId
                  required: true
                  schema:
                    format: uuid
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/UserPtrIdFromUserId200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. One of the UUIDs is malformed.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://tenant-manager:8000
                - url: /
            tags:
                - Objects
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
    /iam/token:
        post:
            description: Generate an access token
            operationId: Token
            parameters:
                - $ref: '#/components/parameters/Authorization'
            requestBody:
                $ref: '#/components/requestBodies/TokenRequest'
            responses:
                "200":
                    $ref: '#/components/responses/TokenResponse'
                "400":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorOauth2'
                    description: Bad Request
                "401":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorOauth2'
                    description: Unauthorized
                "500":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorOauth2'
                    description: Internal Server error
            security:
                - BasicAuth: []
            servers:
                - url: http://authentication-manager:8000
                - url: /
            tags:
                - Oauth2
    /iam/userinfo:
        get:
            description: get user info
            operationId: GetUserInfo
            parameters:
                - $ref: '#/components/parameters/Authorization'
            responses:
                "200":
                    $ref: '#/components/responses/GetUserInfo200Response'
                default:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorOauth2'
                    description: default oidc error response
            servers:
                - url: http://authentication-manager:8000
                - url: /
            tags:
                - Oidc
    /iam/verify:
        post:
            description: Verify if a subject is allowed to access a resource based on the provided context attributes
            operationId: VerifyAccess
            requestBody:
                $ref: '#/components/requestBodies/VerifyRequest'
            responses:
                "201":
                    description: Access is allowed based on the provided context
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: inactive token
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Access is forbidden based on the provided context
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: permission not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Verify
            x-numspot-internal: true
    /organisations:
        get:
            description: List Organisations
            operationId: ListOrganisations
            parameters:
                - $ref: '#/components/parameters/ListOrganisationsPage'
            requestBody:
                $ref: '#/components/requestBodies/ListOrganisationIdsRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ListOrganisations200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Space
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://organisation-manager:8000
                - url: /
            tags:
                - Organisations
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
        post:
            description: Create Organisation
            operationId: CreateOrganisation
            requestBody:
                $ref: '#/components/requestBodies/CreateOrganisationRequest'
            responses:
                "200":
                    $ref: '#/components/responses/CreateOrganisation200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Mail already in use.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://organisation-manager:8000
                - url: /
            tags:
                - Organisations
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: CREATE
                path-with-tenant: false
    /organisations/{organisationId}:
        delete:
            description: Delete Organisation
            operationId: DeleteOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            responses:
                "204":
                    description: Organisation deleted
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Space
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No such organisation
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://organisation-manager:8000
                - url: /
            tags:
                - Organisations
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: DELETE
                tenant-path-name: organisationId
        get:
            description: Get Organisation
            operationId: GetOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            responses:
                "200":
                    $ref: '#/components/responses/GetOrganisation200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Space
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No such organisation
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://organisation-manager:8000
                - url: /
            tags:
                - Organisations
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                tenant-path-name: organisationId
        patch:
            description: Update Organisation
            operationId: UpdateOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            requestBody:
                $ref: '#/components/requestBodies/UpdateOrganisationRequest'
            responses:
                "204":
                    description: Organisation updated
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Space
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No such organisation
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://organisation-manager:8000
                - url: /
            tags:
                - Organisations
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
                tenant-path-name: organisationId
    /organisations/{organisationId}/spaces:
        get:
            description: List spaces
            operationId: ListSpaces
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/ListSpacesPage'
            requestBody:
                $ref: '#/components/requestBodies/ListSpaceIdsRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ListSpaces200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No such Space
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://space-manager:8000
                - url: https://space-manager.zex-{env}.cloudgouv-eu-west-1.numspot.internal
                  variables:
                    env:
                        default: dev
                        enum:
                            - dev
                            - integ
                - url: http://localhost:8000
                - url: /
            tags:
                - Spaces
            x-numspot-permissions:
                list-propagation:
                    location: items
                    locationType: BODY_JSON
                    resourceType: iam.space
                operation-action: LIST
                tenant-path-name: organisationId
        post:
            description: Create Space
            operationId: CreateSpace
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            requestBody:
                $ref: '#/components/requestBodies/CreateSpaceRequest'
            responses:
                "200":
                    $ref: '#/components/responses/CreateSpace200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Space
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://space-manager:8000
                - url: https://space-manager.zex-{env}.cloudgouv-eu-west-1.numspot.internal
                  variables:
                    env:
                        default: dev
                        enum:
                            - dev
                            - integ
                - url: http://localhost:8000
                - url: /
            tags:
                - Spaces
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    iam.space.create: null
                tenant-path-name: organisationId
    /organisations/{organisationId}/status:
        get:
            description: Get Organisation creation status
            operationId: GetOrganisationStatus
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            responses:
                "200":
                    $ref: '#/components/responses/GetOrganisationStatus200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Space
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No such organisation
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://organisation-manager:8000
                - url: /
            tags:
                - Organisations
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                tenant-path-name: organisationId
    /organisations/spaces/{spaceId}:
        delete:
            description: Delete Space
            operationId: DeleteSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
            responses:
                "204":
                    description: Space deleted
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Space not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://space-manager:8000
                - url: https://space-manager.zex-{env}.cloudgouv-eu-west-1.numspot.internal
                  variables:
                    env:
                        default: dev
                        enum:
                            - dev
                            - integ
                - url: http://localhost:8000
                - url: /
            tags:
                - Spaces
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    iam.space.get:
                        cardinality: SINGLE
                        location: spaceId
                        locationType: PATH
        get:
            description: Get Space
            operationId: GetSpaceById
            parameters:
                - $ref: '#/components/parameters/SpaceId'
            responses:
                "200":
                    $ref: '#/components/responses/GetSpaceById200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Space not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://space-manager:8000
                - url: https://space-manager.zex-{env}.cloudgouv-eu-west-1.numspot.internal
                  variables:
                    env:
                        default: dev
                        enum:
                            - dev
                            - integ
                - url: http://localhost:8000
                - url: /
            tags:
                - Spaces
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.space.get:
                        cardinality: SINGLE
                        location: spaceId
                        locationType: PATH
        patch:
            description: Partially update a space
            operationId: UpdateSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
            requestBody:
                $ref: '#/components/requestBodies/UpdateSpaceRequest'
            responses:
                "204":
                    description: Space updated
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Space
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Space not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://space-manager:8000
                - url: https://space-manager.zex-{env}.cloudgouv-eu-west-1.numspot.internal
                  variables:
                    env:
                        default: dev
                        enum:
                            - dev
                            - integ
                - url: http://localhost:8000
                - url: /
            tags:
                - Spaces
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.space.update:
                        cardinality: SINGLE
                        location: spaceId
                        locationType: PATH
components:
    parameters:
        Action:
            description: action the permission allows to perform
            in: query
            name: action
            required: false
            schema:
                example: get
                type: string
        Authorization:
            description: The client identifier.
            in: header
            name: Authorization
            required: false
            schema:
                type: string
        ClientId:
            description: The client identifier.
            in: query
            name: client_id
            required: false
            schema:
                format: uuid
                type: string
        ConsentChallenge:
            description: token consent challenge
            in: query
            name: consent_challenge
            required: true
            schema:
                type: string
        ListByAccessPage:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        nullable: true
                        type: string
                    size:
                        default: 15
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 0
                        nullable: true
                        type: integer
                type: object
            style: deepObject
        ListOrganisationsPage:
            description: list Organisations paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 30
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ListPermissionsPage:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        nullable: true
                        type: string
                    size:
                        default: 15
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 0
                        nullable: true
                        type: integer
                type: object
            style: deepObject
        ListRolesPage:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        nullable: true
                        type: string
                    size:
                        default: 15
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 0
                        nullable: true
                        type: integer
                type: object
            style: deepObject
        ListServiceAccounts:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 20
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ListSpacesIdentity:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 20
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ListSpacesOfServiceAccount:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 20
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ListSpacesOfUser:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 20
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ListSpacesPage:
            description: list spaces paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 30
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ListUser:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 20
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ListUserOrganisations:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 20
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ObjectType:
            description: Object Type
            in: path
            name: objectType
            required: true
            schema:
                type: string
        OrganisationId:
            description: Identifier of the Organisation
            in: path
            name: organisationId
            required: true
            schema:
                format: uuid
                type: string
        PermissionUuid:
            description: Permission ID
            in: path
            name: permissionUuid
            required: true
            schema:
                format: uuid
                type: string
        RedirectUri:
            description: The client's redirect URI.
            in: query
            name: redirect_uri
            required: false
            schema:
                type: string
        Resource:
            description: resource the permission is related to
            in: query
            name: resource
            required: false
            schema:
                example: bucket
                type: string
        ResponseType:
            description: The expected response type.
            in: query
            name: response_type
            required: true
            schema:
                type: string
        RoleName:
            description: Role name
            in: query
            name: name
            schema:
                format: string
                type: string
        RoleUuid:
            description: Role ID
            in: path
            name: roleUuid
            required: true
            schema:
                format: uuid
                type: string
        Scope:
            description: The requested scopes.
            in: query
            name: scope
            required: false
            schema:
                type: string
        Service:
            description: service the permission is related to
            in: query
            name: service
            required: false
            schema:
                example: storageblock
                type: string
        ServiceAccountId:
            description: Service account ID
            in: path
            name: serviceAccountId
            required: true
            schema:
                format: uuid
                type: string
        SpaceId:
            description: Identifier of the Space
            in: path
            name: spaceId
            required: true
            schema:
                format: uuid
                type: string
        State:
            description: An opaque value passed to the application after authentication.
            in: query
            name: state
            required: false
            schema:
                type: string
        SubResource:
            description: subresource the permission is related to
            in: query
            name: subresource
            required: false
            schema:
                example: object
                type: string
        SubjectId:
            description: Identifier of the subject of the operation.
            in: path
            name: subjectId
            required: true
            schema:
                format: uuid
                type: string
        SubjectTypeParam:
            description: The Type of the Object holding or destined to hold an IAMPolicy
            in: path
            name: subjectType
            required: true
            schema:
                $ref: '#/components/schemas/SubjectType'
        TenantId:
            description: Tenant ID
            in: path
            name: tenantId
            required: true
            schema:
                format: uuid
                type: string
        TenantUuid:
            description: tenant ID
            in: path
            name: tenantUuid
            required: true
            schema:
                format: uuid
                type: string
        UserEmail:
            description: User email
            in: query
            name: email
            schema:
                format: email
                type: string
        UserId:
            description: User account ID
            in: path
            name: userId
            required: true
            schema:
                format: uuid
                type: string
    requestBodies:
        AddGlobalRolePermissionsRequest:
            content:
                application/json:
                    schema:
                        properties:
                            permissions:
                                description: List of permissions UUIDs to add
                                items:
                                    description: permission ID
                                    format: uuid
                                    type: string
                                maxItems: 1000
                                minItems: 1
                                type: array
                        required:
                            - permissions
                        type: object
            description: add role permission request
            required: true
        AddRolePermissionsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RolePermission'
            description: add role permission request
            required: true
        BulkNotifyRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/BulkNotify'
            description: Contains the creation context of a list of objects
            required: true
        CreateOrganisationRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateOrganisation'
            description: Organisation
            required: true
        CreateRoleRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Role'
            description: Role
            required: true
        CreateServiceAccountNSRequest:
            content:
                application/json:
                    schema:
                        description: Defines the structure for adding a ServiceAccountNS
                        properties:
                            name:
                                type: string
                        required:
                            - name
                        type: object
            required: true
        CreateServiceAccountRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ServiceAccount'
            description: Create a new service account
            required: true
        CreateSpaceRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateSpace'
            description: Space
            required: true
        CreateUserRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/User'
            description: Create a user
        DeleteACLRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ACLList'
            description: Contains ACLs to be removed.
            required: true
        GatewayIntrospectRequest:
            content:
                application/x-www-form-urlencoded:
                    schema:
                        $ref: '#/components/schemas/TokenBody'
            description: OAuth2 introspect gateway request
        IntrospectRequest:
            content:
                application/x-www-form-urlencoded:
                    schema:
                        $ref: '#/components/schemas/TokenBody'
            description: OAuth2 introspect request
        ListIdentitiesByAccessRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/IdentitiesIdsList'
            description: A list of Identities Ids
        ListObjectsByAccessRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ListByAccess'
            description: Contains the context of the service's call to determine access rights
            required: true
        ListOrganisationIdsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/OrganisationIdsList'
            description: A list of organisations ids
        ListSpaceIdsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/SpaceIdsList'
            description: A list of Spaces Ids
        NotifyRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Notify'
            description: Contains the creation context of an object
            required: true
        NotifyTenantLifecycleChangeRequest:
            content:
                application/json:
                    schema:
                        properties:
                            context:
                                description: Object describing the context of the service's call
                                properties:
                                    action:
                                        description: Action describing the operation being performed on the resource
                                        enum:
                                            - CREATE
                                            - DELETE
                                        type: string
                                    identity:
                                        description: Unique identifier of a specific subject
                                        type: string
                                    identityType:
                                        description: Type of the subject
                                        type: string
                                    object:
                                        description: Unique identifier of a specific object being accessed
                                        type: string
                                    parentId:
                                        description: Unique identifier of the parent resource (e.g. bucketId for an object). Optional parameter
                                        type: string
                                    tenantId:
                                        description: Unique identifier for a specific tenant or subtenant
                                        format: uuid
                                        type: string
                                required:
                                    - tenantId
                                    - identity
                                    - identityType
                                    - action
                                    - object
                                type: object
                        type: object
            description: Contains the lifecycle context of a tenant
            required: true
        NotifyUserLifecycleChangeRequest:
            content:
                application/json:
                    schema:
                        properties:
                            context:
                                description: Object describing the context of the service's call
                                properties:
                                    action:
                                        description: Action describing the operation being performed on the resource
                                        enum:
                                            - CREATE
                                            - DELETE
                                        type: string
                                    identity:
                                        description: Unique identifier of a specific subject
                                        type: string
                                    identityType:
                                        description: Type of the subject
                                        type: string
                                    object:
                                        description: Unique identifier of a specific object being accessed
                                        format: uuid
                                        type: string
                                    parentId:
                                        description: Unique identifier of the parent resource (e.g. bucketId for an object). Optional parameter
                                        type: string
                                    tenantId:
                                        description: Unique identifier for a specific tenant or subtenant
                                        format: uuid
                                        type: string
                                required:
                                    - tenantId
                                    - identity
                                    - identityType
                                    - action
                                    - object
                                type: object
                        type: object
            description: Contains the lifecycle context of a tenant
            required: true
        OpenIdIdentityCreateRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/OpenIdIdentity'
            description: contains the details about a new identity.
            required: true
        PatchPermissionRequest:
            content:
                application/json:
                    schema:
                        properties:
                            action:
                                description: Allowed operation type
                                example: delete
                                pattern: ^[a-zA-Z]+$
                                type: string
                            description:
                                description: Human-readable description
                                type: string
                            name:
                                description: Human-readable name
                                type: string
                            resource:
                                example: storage
                                pattern: ^[a-zA-Z]+$
                                type: string
                            service:
                                description: Service name
                                example: resourcemanager
                                pattern: ^[a-z]+$
                                type: string
                            subResource:
                                example: buckets
                                pattern: ^[a-zA-Z]+$
                                type: string
                        type: object
            description: patch permission
        PatchRoleRequest:
            content:
                application/json:
                    schema:
                        properties:
                            description:
                                description: Human-readable description
                                example: Manage the resourcemanager.storage domain
                                type: string
                            name:
                                description: Human-readable name
                                example: Storage Object Admin
                                type: string
                        type: object
            description: patch role
        PatchRootIAMPolicyRequest:
            content:
                application/json:
                    schema:
                        description: Defines the structure for modification instructions for roles and permissions
                        properties:
                            add:
                                $ref: '#/components/schemas/RootPolicies'
                            delete:
                                $ref: '#/components/schemas/RootPolicies'
                        type: object
            description: Contains details of roles and permissions to be added or deleted from the IAM policy
            required: true
        PatchUserStateRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserState'
            description: Patch user state
        PermissionRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Permission'
            description: Permission
            required: true
        RemoveGlobalRolePermissionsRequest:
            content:
                application/json:
                    schema:
                        properties:
                            permissions:
                                description: List of permissions UUIDs to remove
                                items:
                                    description: permission ID
                                    format: uuid
                                    type: string
                                maxItems: 1000
                                minItems: 1
                                type: array
                        required:
                            - permissions
                        type: object
            description: remove role permission request
            required: true
        RemoveRolePermissionsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RolePermission'
            description: remove role permission request
            required: true
        RevokeRequest:
            content:
                application/x-www-form-urlencoded:
                    schema:
                        $ref: '#/components/schemas/TokenBody'
            description: OAuth2 revoke request
        RoleRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Role'
            description: Role
            required: true
        SetACLRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ACLList'
            description: Contains ACLs to be added.
            required: true
        SetIAMGranularPolicyRequest:
            content:
                application/json:
                    schema:
                        description: Defines the structure for modification instructions for roles and permissions
                        properties:
                            add:
                                $ref: '#/components/schemas/GranularPolicyList'
                            delete:
                                $ref: '#/components/schemas/GranularPolicyList'
                        type: object
            description: Contains details of roles and permissions to be added or deleted from the IAM policy
            required: true
        SetIAMPolicyRequest:
            content:
                application/json:
                    schema:
                        description: Defines the structure for modification instructions for roles and permissions
                        properties:
                            add:
                                $ref: '#/components/schemas/IAMPolicy'
                            delete:
                                $ref: '#/components/schemas/IAMPolicy'
                        type: object
            description: Contains details of roles and permissions to be added or deleted from the IAM policy
            required: true
        TokenRequest:
            content:
                application/x-www-form-urlencoded:
                    schema:
                        $ref: '#/components/schemas/TokenReq'
            description: OAuth2 token request
        UpdateOrganisationRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateOrganisation'
            description: Organisation
            required: true
        UpdateRoleRequest:
            content:
                application/json:
                    schema:
                        properties:
                            description:
                                description: Human-readable description
                                example: Manage the resourcemanager.storage domain
                                type: string
                            name:
                                description: Human-readable name
                                example: Storage Object Admin
                                type: string
                        type: object
            description: patch role
        UpdateServiceAccountRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ServiceAccount'
            description: Update a service account
        UpdateSpaceRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/MutableSpace'
            description: Space
            required: true
        UpdateUserRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserUpdate'
            description: Update a user
        VerifyRequest:
            content:
                application/json:
                    schema:
                        properties:
                            action:
                                description: Action describing the operation being performed on the resource
                                type: string
                            identityToken:
                                description: JWT
                                type: string
                            object:
                                description: Unique identifier of a specific object being accessed. Optional parameter
                                type: string
                            resource:
                                description: Type of the resource being accessed. Optional parameter
                                type: string
                            service:
                                description: Name of the service making the call.
                                type: string
                            subresource:
                                description: Specific type of the subresource within the main resource. Optional parameter
                                type: string
                            tenantId:
                                description: Unique identifier for a specific tenant or subtenant.
                                format: uuid
                                type: string
                        required:
                            - tenantId
                            - identityToken
                            - service
                            - action
                        type: object
            description: Contains the context of the service's call to determine access rights
            required: true
        VerifyRootAccessRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/VerifyRoot'
            description: Contains the context of the service's call to determine access rights
            required: true
    responses:
        Bootstrap200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/BootstrapSuccess'
            description: Created
            x-go-name: Bootstrap200ResponseSchema
        CreateOrganisation200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Organisation'
            description: A Organisation
            x-go-name: CreateOrganisation200ResponseSchema
        CreateRole200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RegisteredRole'
            description: A role
            links:
                DeleteRole:
                    description: The returned uuid field can be reused to do further operations on the role
                    operationId: DeleteRole
                    parameters:
                        uuid: $response.body#/uuid
                GetRole:
                    description: The returned uuid field can be reused to do further operations on the role
                    operationId: GetRole
                    parameters:
                        uuid: $response.body#/uuid
                UpdateRole:
                    description: The returned uuid field can be reused to do further operations on the role
                    operationId: UpdateRole
                    parameters:
                        uuid: $response.body#/uuid
            x-go-name: CreateRole200ResponseSchema
        CreateServiceAccount201Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreatedServiceAccount'
            description: Create a new service account.
            x-go-name: CreateServiceAccount201ResponseSchema
        CreateServiceAccountNS200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ServiceAccountNS'
            description: SAN created successfully
            x-go-name: CreateServiceAccountNS200ResponseSchema
        CreateSpace200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Space'
            description: a Space
            x-go-name: CreateSpace200ResponseSchema
        CreateUser201Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserCreated'
            description: New user creation.
            x-go-name: CreateUser201ResponseSchema
        EmptyResponse:
            description: Empty responses are sent when, for example, resources are deleted.
            x-go-name: EmptyResponseSchema
        GatewayIntrospect200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/GatewayIntrospectResp'
            description: OAuth2 introspect response
            x-go-name: GatewayIntrospect200ResponseSchema
        GetACL200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ACLPaginatedList'
            description: a list of acl.
            x-go-name: GetACL200ResponseSchema
        GetIAMGranularPolicy200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/IAMGranularPolicyList'
            description: The IAMPolicy currently associated with the object
            x-go-name: GetIAMGranularPolicy200ResponseSchema
        GetIAMPolicy200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/IAMPolicy'
            description: The IAMPolicy currently associated with the object
            x-go-name: GetIAMPolicy200ResponseSchema
        GetOrganisation200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Organisation'
            description: A Organisation
            links:
                DeleteOrganisation:
                    description: delete a specific Organisation by its id
                    operationId: DeleteOrganisation
                    parameters:
                        uuid: $response.body#/uuid
                GetOrganisation:
                    description: Get a specific Organisation by its id
                    operationId: GetOrganisation
                    parameters:
                        uuid: $response.body#/uuid
                UpdateOrganisation:
                    description: Update the information of a specific Organisation by its id
                    operationId: UpdateOrganisation
                    parameters:
                        uuid: $response.body#/uuid
            x-go-name: GetOrganisation200ResponseSchema
        GetOrganisationStatus200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/PendingOrganisation'
            description: A Organisation
            x-go-name: GetOrganisationStatus200ResponseSchema
        GetPermission200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RegisteredPermission'
            description: A permission
            links:
                DeletePermission:
                    description: The returned uuid field can be reused to do further operations on the permission
                    operationId: DeletePermission
                    parameters:
                        uuid: $response.body#/uuid
                GetPermission:
                    description: The returned uuid field can be reused to do further operations on the permission
                    operationId: GetPermission
                    parameters:
                        uuid: $response.body#/uuid
                UpdatePermission:
                    description: The returned uuid field can be reused to do further operations on the permission
                    operationId: UpdatePermission
                    parameters:
                        uuid: $response.body#/uuid
            x-go-name: GetPermission200ResponseSchema
        GetRole200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RegisteredRole'
            description: A role
            x-go-name: GetRole200ResponseSchema
        GetRolePermissions200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/PermissionsPaginatedList'
            description: A list of permissions assigned to a role
            x-go-name: GetRolePermissions200ResponseSchema
        GetRootIAMPolicy200Response:
            content:
                application/json:
                    schema:
                        properties:
                            policies:
                                items:
                                    $ref: '#/components/schemas/RootPolicy'
                                type: array
                        required:
                            - policies
                        type: object
            description: created
            x-go-name: GetRootIAMPolicy200ResponseSchema
        GetServiceAccount200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ServiceAccountEdited'
            description: Get a service account.
            x-go-name: GetServiceAccount200ResponseSchema
        GetSpaceById200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Space'
            description: a Space
            x-go-name: GetSpaceById200ResponseSchema
        GetUser200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserModified'
            description: Retrieve a user.
            x-go-name: GetUser200ResponseSchema
        GetUserInfo200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserInfo'
            description: get user info 200 response
            x-go-name: GetUserInfo200ResponseSchema
        IntrospectResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/IntrospectResp'
            description: OAuth2 introspect response
            x-go-name: IntrospectResponseSchema
        JsonWebKeysResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/JsonWebKeySet'
            description: JsonWebKeySet
            x-go-name: JsonWebKeysResponseSchema
        ListMySessionsResponse:
            content:
                application/json:
                    schema:
                        items:
                            $ref: '#/components/schemas/Session'
                        type: array
            description: List My Session Response
            x-go-name: ListMySessionsResponseSchema
        ListObjectsByAccess200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ItemsPaginatedList'
            description: A list of items
            x-go-name: ListObjectsByAccess200ResponseSchema
        ListOrganisations200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ListOrganisations'
            description: A list of Organisations
            x-go-name: ListOrganisations200ResponseSchema
        ListPermissions200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/PermissionsPaginatedList'
            description: A list of permissions
            x-go-name: ListPermissions200ResponseSchema
        ListRoles200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RolesPaginatedList'
            description: A list of roles
            x-go-name: ListRoles200ResponseSchema
        ListServiceAccount200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ServiceAccountPaginatedList'
            description: A list of services accounts.
            x-go-name: ListServiceAccount200ResponseSchema
        ListSpaces200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/SpacePaginatedList'
            description: A list of Spaces
            x-go-name: ListSpaces200ResponseSchema
        ListSpacesIdentity200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/SpaceSimplePaginatedList'
            description: A list of spaces
            x-go-name: ListSpacesIdentity200ResponseSchema
        ListSpacesServiceAccount200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/SpaceSimplePaginatedList'
            description: A list of spaces
            x-go-name: ListSpacesServiceAccount200ResponseSchema
        ListSpacesUser200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/SpaceSimplePaginatedList'
            description: A list of spaces
            x-go-name: ListSpacesUser200ResponseSchema
        ListUser200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserPaginatedList'
            description: A list of users.
            x-go-name: ListUser200ResponseSchema
        ListUserOrganisations200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/OrganisationSimplePaginatedList'
            description: A list of organisation
            x-go-name: ListUserOrganisations200ResponseSchema
        OpenIdIdentityCreate200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreatedOpenIdIdentity'
            description: SAN created successfully
            x-go-name: OpenIdIdentityCreate200ResponseSchema
        OpenIdIdentityGet200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/GetOpenIdIdentity'
            description: Get single SAN
            x-go-name: OpenIdIdentityGet200ResponseSchema
        OpenIdIdentityList200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/GetOpenIdIdentityList'
            description: Get SAN list
            x-go-name: OpenIdIdentityList200ResponseSchema
        OpenIdIdentityPatch200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/PatchOpenIdIdentity'
            description: Patch single SAN
            x-go-name: OpenIdIdentityPatch200ResponseSchema
        PatchUserState200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserEdited'
            description: Update user state
            x-go-name: PatchUserState200ResponseSchema
        PermissionCreated200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RegisteredPermission'
            description: A permission
            links:
                DeletePermission:
                    description: The returned uuid field can be reused to do further operations on the permission
                    operationId: DeletePermission
                    parameters:
                        uuid: $response.body#/uuid
                GetPermission:
                    description: The returned uuid field can be reused to do further operations on the permission
                    operationId: GetPermission
                    parameters:
                        uuid: $response.body#/uuid
                UpdatePermission:
                    description: The returned uuid field can be reused to do further operations on the permission
                    operationId: UpdatePermission
                    parameters:
                        uuid: $response.body#/uuid
            x-go-name: PermissionCreated200ResponseSchema
        Permissions200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RegisteredPermissionList'
            description: A list of permissions
            x-go-name: Permissions200ResponseSchema
        RecoverUser200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RecoveryLink'
            description: Generate recovery link
            x-go-name: RecoverUser200ResponseSchema
        RoleCreated200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RegisteredRole'
            description: A role
            links:
                DeleteRole:
                    description: The returned uuid field can be reused to do further operations on the role
                    operationId: DeleteRole
                    parameters:
                        uuid: $response.body#/uuid
                GetRole:
                    description: The returned uuid field can be reused to do further operations on the role
                    operationId: GetRole
                    parameters:
                        uuid: $response.body#/uuid
                UpdateRole:
                    description: The returned uuid field can be reused to do further operations on the role
                    operationId: UpdateRole
                    parameters:
                        uuid: $response.body#/uuid
            x-go-name: RoleCreated200ResponseSchema
        RoleList200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RegisteredRoleList'
            description: A list of roles
            x-go-name: RoleList200ResponseSchema
        TokenResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/TokenResp'
            description: OAuth2 token response
            x-go-name: TokenResponseSchema
        UpdateServiceAccount200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ServiceAccountEdited'
            description: Update a service account.
            x-go-name: UpdateServiceAccount200ResponseSchema
        UpdateUser200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserModified'
            description: Update a user.
            x-go-name: UpdateUser200ResponseSchema
        UserPtrIdFromUserId200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserInstance'
            description: UUID of a user on a specific tenant
            x-go-name: UserPtrIdFromUserId200ResponseSchema
        WebAuthnJavaScriptResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/WebAuthnJavaScript'
            description: Web authn javascript
            x-go-name: WebAuthnJavaScriptResponseSchema
    schemas:
        ACL:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                permissionId:
                    description: id of the permission
                    format: uuid
                    type: string
                resource:
                    description: Type of the resource being accessed
                    type: string
                resourceId:
                    description: Unique identifier of a resource
                    type: string
                service:
                    description: Name of the service making the call
                    type: string
                subresource:
                    description: Specific type of the subresource within the main resource
                    type: string
            required:
                - permissionId
                - service
                - resource
                - resourceId
            title: ACLPaginatedList
            type: object
        ACLList:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: List of ACLs.
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/ACL'
                    maxItems: 100
                    minItems: 1
                    type: array
            required:
                - items
            title: ACLList
            type: object
        ACLPaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/ACL'
                        type: array
                  required:
                    - items
                  type: object
            title: ACLPaginatedList
            type: object
        AuthenticatorAssuranceLevel:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: |-
                The authenticator assurance level can be one of "aal1", "aal2", or "aal3". A higher number means that it is harder
                for an attacker to compromise the account.
                Generally, "aal1" implies that one authentication factor was used while AAL2 implies that two factors (password + TOTP) have been used.
            enum:
                - aal0
                - aal1
                - aal2
                - aal3
            title: Authenticator Assurance Level (AAL)
            type: string
        BadRequestError:
            $schema: https://json-schema.org/draft/2020-12/schema
            additionalProperties: false
            allOf:
                - $ref: '#/components/schemas/Error'
                - properties:
                    violations:
                        description: Array of violations to provide a per-field detail.
                        items:
                            $ref: '#/components/schemas/Violation'
                        type: array
                  type: object
            description: For HTTP 400 bad request errors, we implement the https://datatracker.ietf.org/doc/html/rfc9457
            title: BadRequestError
            type: object
        BootstrapSuccess:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                identityId:
                    type: string
                identitySecret:
                    type: string
            required:
                - identityId
                - identitySecret
            title: BootstrapSuccess
            type: object
        BulkNotify:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                action:
                    description: Action describing the operation being performed on the resource
                    enum:
                        - create
                        - delete
                    type: string
                identity:
                    description: Unique identifier of a specific subject
                    format: uuid
                    type: string
                identityType:
                    $ref: '#/components/schemas/IamIdentityType'
                objects:
                    description: List of object being accessed
                    items:
                        description: Unique identifier for the object being accessed
                        format: string
                        type: string
                    type: array
                resource:
                    description: Type of the resource being accessed. Optional parameter
                    type: string
                service:
                    description: Name of the service making the call
                    type: string
                subresource:
                    description: Specific type of the subresource within the main resource. Optional parameter
                    type: string
                tenantId:
                    description: Unique identifier for a specific tenant or subtenant
                    format: uuid
                    type: string
            required:
                - tenantId
                - identity
                - identityType
                - service
                - objects
                - action
            title: BulkNotify
            type: object
        ContinueWith:
            $schema: https://json-schema.org/draft/2020-12/schema
            discriminator:
                mapping:
                    set_session_token: '#/components/schemas/ContinueWithSetSessionToken'
                    show_recovery_ui: '#/components/schemas/ContinueWithRecoveryUi'
                    show_settings_ui: '#/components/schemas/ContinueWithSettingsUi'
                    show_verification_ui: '#/components/schemas/ContinueWithVerificationUi'
                propertyName: action
            oneOf:
                - $ref: '#/components/schemas/ContinueWithVerificationUi'
                - $ref: '#/components/schemas/ContinueWithSetSessionToken'
                - $ref: '#/components/schemas/ContinueWithSettingsUi'
                - $ref: '#/components/schemas/ContinueWithRecoveryUi'
            title: Continue With
        ContinueWithRecoveryUi:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Indicates, that the UI flow could be continued by showing a recovery ui
            properties:
                action:
                    description: |-
                        Action will always be `show_recovery_ui`
                        show_recovery_ui ContinueWithActionShowRecoveryUIString
                    enum:
                        - show_recovery_ui
                    type: string
                    x-go-enum-desc: show_recovery_ui ContinueWithActionShowRecoveryUIString
                flow:
                    $ref: '#/components/schemas/ContinueWithRecoveryUiFlow'
            required:
                - action
                - flow
            title: Continue With Recovery Ui
            type: object
        ContinueWithRecoveryUiFlow:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                id:
                    description: The ID of the recovery flow
                    format: uuid
                    type: string
                url:
                    description: The URL of the recovery flow
                    type: string
            required:
                - id
            title: Continue With Recovery Ui Flow
            type: object
        ContinueWithSetSessionToken:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Indicates that a session was issued, and the application should use this token for authenticated requests
            properties:
                action:
                    description: |-
                        Action will always be `set_session_token`
                        set_session_token ContinueWithActionSetSessionTokenString
                    enum:
                        - set_session_token
                    type: string
                    x-go-enum-desc: set_session_token ContinueWithActionSetSessionTokenString
                session_token:
                    description: Token is the token of the session
                    type: string
            required:
                - action
                - session_token
            title: Continue With Set Session Token
            type: object
        ContinueWithSettingsUi:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Indicates, that the UI flow could be continued by showing a settings ui
            properties:
                action:
                    description: |-
                        Action will always be `show_settings_ui`
                        show_settings_ui ContinueWithActionShowSettingsUIString
                    enum:
                        - show_settings_ui
                    type: string
                    x-go-enum-desc: show_settings_ui ContinueWithActionShowSettingsUIString
                flow:
                    $ref: '#/components/schemas/ContinueWithSettingsUiFlow'
            required:
                - action
                - flow
            title: Continue With Settings Ui
            type: object
        ContinueWithSettingsUiFlow:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                id:
                    description: The ID of the settings flow
                    format: uuid
                    type: string
            required:
                - id
            title: Continue With Settings Ui Flow
            type: object
        ContinueWithVerificationUi:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Indicates, that the UI flow could be continued by showing a verification ui
            properties:
                action:
                    description: |-
                        Action will always be `show_verification_ui`
                        show_verification_ui ContinueWithActionShowVerificationUIString
                    enum:
                        - show_verification_ui
                    type: string
                    x-go-enum-desc: show_verification_ui ContinueWithActionShowVerificationUIString
                flow:
                    $ref: '#/components/schemas/ContinueWithVerificationUiFlow'
            required:
                - action
                - flow
            title: Continue With Verification Ui
            type: object
        ContinueWithVerificationUiFlow:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                id:
                    description: The ID of the verification flow
                    format: uuid
                    type: string
                url:
                    description: The URL of the verification flow
                    type: string
                verifiable_address:
                    description: The address that should be verified in this flow
                    type: string
            required:
                - id
                - verifiable_address
            title: Continue With Verification Ui Flow
            type: object
        CreateOrganisation:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                organisation:
                    properties:
                        description:
                            description: Organisation description
                            format: string
                            type: string
                        name:
                            description: Organisation name
                            format: string
                            type: string
                    required:
                        - description
                        - name
                    type: object
                user:
                    properties:
                        email:
                            format: string
                            type: string
                        firstname:
                            format: string
                            type: string
                        lastname:
                            format: string
                            type: string
                    required:
                        - email
                        - firstname
                        - lastname
                    type: object
            required:
                - user
                - organisation
            title: Create an Organisation
            type: object
        CreateSpace:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/MutableSpace'
                - required:
                    - name
                    - description
                  type: object
            title: CreateSpace
            type: object
        CreatedOpenIdIdentity:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/RegisteredOpenIdentity'
                - properties:
                    secret:
                        description: secret
                        type: string
                  required:
                    - secret
                  type: object
            title: CreatedIdentity
        CreatedServiceAccount:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/ServiceAccountEdited'
                - properties:
                    secret:
                        description: Service account secret.
                        type: string
                  required:
                    - secret
                  type: object
            title: CreatedServiceAccount
            type: object
        CredentialSupportedDraft00:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Includes information about the supported verifiable credentials.
            properties:
                cryptographic_binding_methods_supported:
                    description: |-
                        OpenID Connect Verifiable Credentials Cryptographic Binding Methods Supported

                        Contains a list of cryptographic binding methods supported for signing the proof.
                    items:
                        type: string
                    type: array
                cryptographic_suites_supported:
                    description: |-
                        OpenID Connect Verifiable Credentials Cryptographic Suites Supported

                        Contains a list of cryptographic suites methods supported for signing the proof.
                    items:
                        type: string
                    type: array
                format:
                    description: |-
                        OpenID Connect Verifiable Credentials Format

                        Contains the format that is supported by this authorization server.
                    type: string
                types:
                    description: |-
                        OpenID Connect Verifiable Credentials Types

                        Contains the types of verifiable credentials supported.
                    items:
                        type: string
                    type: array
            title: Verifiable Credentials Metadata (Draft 00)
            type: object
        DateTime:
            $schema: https://json-schema.org/draft/2020-12/schema
            example: "2018-11-13T20:20:39+00:00"
            format: date-time
            title: DateTime
            type: string
        DeleteMySessionsCount:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Deleted Session Count
            properties:
                count:
                    description: The number of sessions that were revoked.
                    format: int64
                    type: integer
            title: Delete My Sessions Count
            type: object
        Email:
            $schema: https://json-schema.org/draft/2020-12/schema
            example: john.smith@acme.org
            format: email
            title: Email
            type: string
        Error:
            $schema: https://json-schema.org/draft/2020-12/schema
            additionalProperties: false
            description: For HTTP errors, we implement the https://datatracker.ietf.org/doc/html/rfc9457
            examples:
                - accounts:
                    - /account/12345
                    - /account/67890
                  balance: 30
                  detail: Your current balance is 30, but that costs 50.
                  instance: /account/12345/msgs/abc
                  title: You do not have enough credit.
                  type: https://docs.numspot.cloud/docs/domains/cloud/errors#unauthenticated_access
            properties:
                detail:
                    description: Human-readable explanation specific to this occurrence of the problem.
                    type: string
                instance:
                    $ref: '#/components/schemas/Url'
                    description: Url to fetch more information about this problem type.
                title:
                    description: Human-readable summary of the problem type.
                    type: string
                type:
                    $ref: '#/components/schemas/ErrorDocumentationUrl'
            required:
                - type
                - title
            title: Error
            type: object
        ErrorBrowserLocationChangeRequired:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                error:
                    $ref: '#/components/schemas/ErrorGeneric'
                redirect_browser_to:
                    description: Points to where to redirect the user to next.
                    type: string
            title: Is sent when a flow requires a browser to change its location.
            type: object
        ErrorDocumentationUrl:
            $schema: https://json-schema.org/draft/2020-12/schema
            additionalProperties: false
            description: Documentation URL for the domain error
            enum:
                - https://docs.numspot.cloud/docs/domains/cloud/errors#unauthenticated_access
                - https://docs.numspot.cloud/docs/domains/cloud/errors#forbidden_access
                - https://docs.numspot.cloud/docs/domains/cloud/errors#invalid_parameter
                - https://docs.numspot.cloud/docs/domains/cloud/errors#resource_not_found
                - https://docs.numspot.cloud/docs/domains/cloud/errors#duplicate_resource
                - https://docs.numspot.cloud/docs/domains/cloud/errors#internal_server_error
                - https://docs.numspot.cloud/docs/domains/cloud/errors#ambiguous_granular_permission_elements
                - https://docs.numspot.cloud/docs/domains/cloud/errors#ambiguous_permission_elements
                - https://docs.numspot.cloud/docs/domains/cloud/errors#ambiguous_role_elements
                - https://docs.numspot.cloud/docs/domains/cloud/errors#duplicate_role
                - https://docs.numspot.cloud/docs/domains/cloud/errors#forbidden
                - https://docs.numspot.cloud/docs/domains/cloud/errors#identity_not_found
                - https://docs.numspot.cloud/docs/domains/cloud/errors#inactive_token
                - https://docs.numspot.cloud/docs/domains/cloud/errors#method_not_allowed
                - https://docs.numspot.cloud/docs/domains/cloud/errors#missing_roles
                - https://docs.numspot.cloud/docs/domains/cloud/errors#namespace_not_found
                - https://docs.numspot.cloud/docs/domains/cloud/errors#not_in_tenant_roles
                - https://docs.numspot.cloud/docs/domains/cloud/errors#permission_not_found
                - https://docs.numspot.cloud/docs/domains/cloud/errors#role_not_found
                - https://docs.numspot.cloud/docs/domains/cloud/errors#unexpected_token_usage
                - https://docs.numspot.cloud/docs/domains/cloud/errors#uri_too_long
            format: uri
            title: ErrorDocumentationUrl
            type: string
        ErrorGeneric:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: The standard  JSON API error format.
            properties:
                error:
                    $ref: '#/components/schemas/GenericError'
            required:
                - error
            title: JSON API Error Response
            type: object
        ErrorOauth2:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                error:
                    description: The error type.
                    type: string
                error_description:
                    description: A human-readable explanation specific to this occurrence of the problem.
                    type: string
            required:
                - error
            title: ErrorOauth2
            type: object
        FlowError:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                created_at:
                    description: CreatedAt is a helper struct field for gobuffalo.pop.
                    format: date-time
                    type: string
                error:
                    type: object
                id:
                    description: ID of the error container.
                    format: uuid
                    type: string
                updated_at:
                    description: UpdatedAt is a helper struct field for gobuffalo.pop.
                    format: date-time
                    type: string
            required:
                - id
            title: Flow Error
            type: object
        GatewayIntrospectResp:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Introspection contains an access token's session data as specified by [IETF RFC 7662]
            properties:
                accountType:
                    description: Identity type.
                    enum:
                        - user
                        - serviceAccount
                        - serviceAccountNumspot
                    type: string
                active:
                    description: |-
                        Active is a boolean indicator of whether or not the presented token
                        is currently active.  The specifics of a token's "active" state
                        will vary depending on the implementation of the authorization
                        server and the information it keeps about its tokens, but a "true"
                        value return for the "active" property will generally indicate
                        that a given token has been issued by this authorization server,
                        has not been revoked by the resource owner, and is within its
                        given time window of validity.
                    type: boolean
                id:
                    description: Identity ID.
                    format: uuid
                    type: string
                token_use:
                    description: TokenUse is the introspected token's use, for example `access_token` or `refresh_token`.
                    enum:
                        - access_token
                        - refresh_token
                        - invalid
                    type: string
            required:
                - active
                - id
                - token_use
            title: GatewayIntrospectResp
            type: object
        GenericError:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                code:
                    description: The status code
                    example: 404
                    format: int64
                    type: integer
                debug:
                    description: |-
                        Debug information

                        This field is often not exposed to protect against leaking
                        sensitive information.
                    example: SQL field "foo" is not a bool.
                    type: string
                details:
                    additionalProperties: false
                    description: Further error details
                    type: object
                id:
                    description: |-
                        The error ID

                        Useful when trying to identify various errors in application logic.
                    type: string
                message:
                    description: |-
                        Error message

                        The error's message.
                    example: The resource could not be found
                    type: string
                reason:
                    description: A human-readable reason for the error
                    example: User with ID 1234 does not exist.
                    type: string
                request:
                    description: |-
                        The request ID

                        The request ID is often exposed internally in order to trace
                        errors across service architectures. This is often a UUID.
                    example: d7ef54b1-ec15-46e6-bccb-524b82c035e6
                    type: string
                status:
                    description: The status description
                    example: Not Found
                    type: string
            required:
                - message
            title: JSON API Error Response
            type: object
        GetOpenIdIdentity:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/RegisteredOpenIdentity'
            title: GetIdentity
        GetOpenIdIdentityList:
            $schema: https://json-schema.org/draft/2020-12/schema
            items:
                $ref: '#/components/schemas/RegisteredOpenIdentity'
            title: GetIdentityList
            type: array
        GrantType:
            $schema: https://json-schema.org/draft/2020-12/schema
            items:
                enum:
                    - authorization_code
                    - refresh_token
                type: string
            title: GrantType
            type: array
        GranularPermission:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                action:
                    description: Type of action (e.g., owners, editors, getters)
                    type: string
                objectId:
                    description: ID of the object
                    type: string
            required:
                - objectId
                - action
            title: GranularPermission
            type: object
        GranularPolicyList:
            $schema: https://json-schema.org/draft/2020-12/schema
            items:
                $ref: '#/components/schemas/GranularPermission'
            title: GranularPolicyList
            type: array
        IAMGranularPolicyList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/GranularPermission'
                        type: array
                  required:
                    - items
                  type: object
            title: IAMGranularPolicyList
            type: object
        IAMPolicy:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                permissions:
                    description: List of permission UUIDs
                    items:
                        allOf:
                            - description: permission ID
                              format: uuid
                              type: string
                    type: array
                roles:
                    description: List of role UUIDs
                    items:
                        allOf:
                            - description: role ID
                              format: uuid
                              type: string
                    type: array
            title: IAMPolicy
            type: object
        ID:
            $schema: https://json-schema.org/draft/2020-12/schema
            format: int64
            title: ID
            type: integer
        IamIdentityType:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: The type of identity impacted.
            enum:
                - user
                - users
                - serviceAccount
                - serviceAccounts
            title: IamIdentityType
            type: string
        IdentitiesIdsList:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                items:
                    items:
                        format: uuid
                        type: string
                    type: array
            required:
                - items
            title: IdentitiesIdsList
            type: object
        Identity:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: An identity represents a (human) user.
            properties:
                created_at:
                    description: CreatedAt is a helper struct field for gobuffalo.pop.
                    format: date-time
                    type: string
                credentials:
                    additionalProperties:
                        $ref: '#/components/schemas/IdentityCredentials'
                    description: Credentials represents all credentials that can be used for authenticating this identity.
                    type: object
                id:
                    description: |-
                        ID is the identity's unique identifier.
                        The Identity ID can not be changed and can not be chosen. This ensures future
                        compatibility and optimization for distributed stores such as CockroachDB.
                    format: uuid
                    type: string
                metadata_admin:
                    $ref: '#/components/schemas/NullJsonRawMessage'
                metadata_public:
                    $ref: '#/components/schemas/NullJsonRawMessage'
                organization_id:
                    $ref: '#/components/schemas/NullUUID'
                recovery_addresses:
                    description: RecoveryAddresses contains all the addresses that can be used to recover an identity.
                    items:
                        $ref: '#/components/schemas/RecoveryIdentityAddress'
                    type: array
                    x-omitempty: true
                schema_id:
                    description: SchemaID is the ID of the JSON Schema to be used for validating the identity's traits.
                    type: string
                schema_url:
                    description: SchemaURL is the URL of the endpoint where the identity's traits schema can be fetched from.
                    type: string
                state:
                    description: |-
                        State is the identity's state.

                        This value has currently no effect.
                        active StateActive
                        inactive StateInactive
                    enum:
                        - active
                        - inactive
                    type: string
                    x-go-enum-desc: |-
                        active StateActive
                        inactive StateInactive
                state_changed_at:
                    $ref: '#/components/schemas/NullTime'
                traits:
                    $ref: '#/components/schemas/IdentityTraits'
                updated_at:
                    description: UpdatedAt is a helper struct field for gobuffalo.pop.
                    format: date-time
                    type: string
                verifiable_addresses:
                    description: VerifiableAddresses contains all the addresses that can be verified by the user.
                    items:
                        $ref: '#/components/schemas/VerifiableIdentityAddress'
                    type: array
                    x-omitempty: true
            required:
                - id
                - schema_id
                - schema_url
                - traits
            title: Identity represents an identity
            type: object
        IdentityCredentials:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Credentials represents a specific credential type
            properties:
                config:
                    $ref: '#/components/schemas/JSONRawMessage'
                created_at:
                    description: CreatedAt is a helper struct field for gobuffalo.pop.
                    format: date-time
                    type: string
                identifiers:
                    description: Identifiers represents a list of unique identifiers this credential type matches.
                    items:
                        type: string
                    type: array
                type:
                    description: |-
                        Type discriminates between different types of credentials.
                        password CredentialsTypePassword
                        oidc CredentialsTypeOIDC
                        totp CredentialsTypeTOTP
                        lookup_secret CredentialsTypeLookup
                        webauthn CredentialsTypeWebAuthn
                        code CredentialsTypeCodeAuth
                        link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself.
                        code_recovery CredentialsTypeRecoveryCode
                    enum:
                        - password
                        - oidc
                        - totp
                        - lookup_secret
                        - webauthn
                        - code
                        - link_recovery
                        - code_recovery
                    type: string
                    x-go-enum-desc: |-
                        password CredentialsTypePassword
                        oidc CredentialsTypeOIDC
                        totp CredentialsTypeTOTP
                        lookup_secret CredentialsTypeLookup
                        webauthn CredentialsTypeWebAuthn
                        code CredentialsTypeCodeAuth
                        link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself.
                        code_recovery CredentialsTypeRecoveryCode
                updated_at:
                    description: UpdatedAt is a helper struct field for gobuffalo.pop.
                    format: date-time
                    type: string
                version:
                    description: Version refers to the version of the credential. Useful when changing the config schema.
                    format: int64
                    type: integer
            title: Identity Credentials
            type: object
        IdentityTraits:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Traits represent an identity's traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_url`.
            title: Identity Traits
        IdentityVerifiableAddressStatus:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: VerifiableAddressStatus must not exceed 16 characters as that is the limitation in the SQL Schema
            title: Identity Verifiable Address Status
            type: string
        ImmutableSpace:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                createdOn:
                    $ref: '#/components/schemas/DateTime'
                    description: Space creation date
                id:
                    description: Internal ID
                    format: uuid
                    type: string
                organisationId:
                    description: Organisation_id
                    format: uuid
                    type: string
                status:
                    description: status of the space, the space can only be used when the status is ready.
                    enum:
                        - QUEUED
                        - RUNNING
                        - READY
                        - FAILED
                    type: string
                updatedOn:
                    $ref: '#/components/schemas/DateTime'
                    description: Space last update
            required:
                - id
                - organisationId
                - createdOn
                - updatedOn
                - status
            title: ImmutableSpace
            type: object
        Int:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Equivalent to int32
            format: int32
            maximum: 2147483647
            minimum: -2147483648
            title: Int
            type: integer
        IntrospectResp:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                active:
                    description: A boolean value indicating whether the token is active or not.
                    type: boolean
                aud:
                    description: The intended audience of the token, specifying who the token is intended for.
                    items:
                        type: string
                    type: array
                client_id:
                    description: The unique identifier of the client application that requested the token.
                    type: string
                exp:
                    description: The expiration time of the token in seconds since the Unix epoch.
                    type: integer
                iat:
                    description: The issued-at time of the token in seconds since the Unix epoch.
                    type: integer
                iss:
                    description: The issuer of the token, identify the authorization server that issued the token.
                    type: string
                nbf:
                    description: The not-before time of the token in seconds since the Unix epoch, indicating the earliest time the token can be used.
                    type: integer
                scope:
                    description: The scope of the token, defining the permissions it grants.
                    type: string
                sub:
                    description: The subject of the token, typically the user or resource the token is issued for.
                    type: string
                token_type:
                    description: Indicate the type of the token, such as "Bearer".
                    type: string
                token_use:
                    description: Specify the intended use of the token, such as "access" or "refresh".
                    type: string
            required:
                - active
            title: IntrospectResp
            type: object
        Item:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                uuid:
                    description: Internal ID
                    type: string
            required:
                - uuid
            title: Item
            type: object
        ItemsPaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/Item'
                        type: array
                  required:
                    - items
                  type: object
            title: ItemsPaginatedList
            type: object
        JSONRawMessage:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: JSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger.
            title: JSON Raw Message
            type: object
        JsonWebKey:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                alg:
                    description: The "alg" (algorithm) parameter identifies the algorithm intended for use with the key.  The values used should either be registered in the IANA "JSON Web Signature and Encryption Algorithms" registry established by [JWA] or be a value that contains a Collision-Resistant Name.
                    example: RS256
                    type: string
                crv:
                    example: P-256
                    type: string
                d:
                    type: string
                dp:
                    type: string
                dq:
                    type: string
                e:
                    type: string
                k:
                    type: string
                kid:
                    description: The "kid" (key ID) parameter is used to match a specific key. This is used, for instance, to choose among a set of keys within a JWK Set during key rollover.  The structure of the "kid" value is unspecified. When "kid" values are used within a JWK Set, different keys within the JWK Set SHOULD use distinct "kid" values. (One example in which different keys might use the same "kid" value is if they have different "kty" (key type) values but are considered to be equivalent alternatives by the application using them.)  The "kid" value is a case-sensitive string.
                    type: string
                kty:
                    description: The "kty" parameter in JSON Web Keys (JWK) specifies the cryptographic algorithm family,such as "RSA" or "EC". It must be a case-sensitive string and is required in a JWK. The value should be registered in the IANA "JSON Web Key Types" registry or be a Collision-Resistant Name
                    type: string
                "n":
                    type: string
                p:
                    type: string
                q:
                    type: string
                qi:
                    type: string
                use:
                    description: Use ("public key use") identifies the intended use of the public key. The "use" parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature on data. Values are commonly "sig" (signature) or "enc" (encryption).
                    example: sig
                    type: string
                x:
                    type: string
                x5c:
                    description: The "x5c" parameter in JSON Web Keys (JWK) includes a chain of one or more PKIX certificates, represented as a JSON array of base64-encoded DER certificate values. The first certificate must contain the key value and must match the public key represented by other JWK members. Additional certificates can follow, with each certifying the previous one. This parameter is optional.
                    items:
                        type: string
                    type: array
                "y":
                    type: string
            required:
                - use
                - kty
                - kid
                - alg
            title: JsonWebKey
            type: object
        JsonWebKeySet:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: JSON Web Key Set
            properties:
                keys:
                    description: List of JSON Web Keys The value of the "keys" parameter is an array of JSON Web Key (JWK) values. By default, the order of the JWK values within the array does not imply an order of preference among them, although applications  of JWK Sets can choose to assign a meaning to the order for their  purposes, if desired.
                    items:
                        $ref: '#/components/schemas/JsonWebKey'
                    type: array
            title: Json Web Key Set
            type: object
        ListByAccess:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                context:
                    $ref: '#/components/schemas/ListByAccessContext'
            required:
                - context
            title: ListByAccess
            type: object
        ListByAccessContext:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Object describing the context of the service's call
            properties:
                identityToken:
                    description: JWT
                    type: string
                resource:
                    description: Type of the resource being accessed. Optional parameter
                    type: string
                service:
                    description: Name of the service making the call.
                    type: string
                subresource:
                    description: Specific type of the subresource within the main resource. Optional parameter
                    type: string
                tenantId:
                    description: Unique identifier for a specific tenant or subtenant.
                    format: uuid
                    type: string
            required:
                - tenantId
                - identityToken
                - service
            title: ListByAccessContext
            type: object
        ListOrganisations:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/Organisation'
                        type: array
                  required:
                    - items
                  type: object
            title: List of organisations
            type: object
        LoginFlow:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: |-
                This object represents a login flow. A login flow is initiated at the "Initiate Login API / Browser Flow"
                endpoint by a client.

                Once a login flow is completed successfully, a session cookie or session token will be issued.
            properties:
                active:
                    description: |-
                        The active login method

                        If set contains the login method used. If the flow is new, it is unset.
                        password CredentialsTypePassword
                        oidc CredentialsTypeOIDC
                        totp CredentialsTypeTOTP
                        lookup_secret CredentialsTypeLookup
                        webauthn CredentialsTypeWebAuthn
                        code CredentialsTypeCodeAuth
                        link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself.
                        code_recovery CredentialsTypeRecoveryCode
                    enum:
                        - password
                        - oidc
                        - totp
                        - lookup_secret
                        - webauthn
                        - code
                        - link_recovery
                        - code_recovery
                    type: string
                    x-go-enum-desc: |-
                        password CredentialsTypePassword
                        oidc CredentialsTypeOIDC
                        totp CredentialsTypeTOTP
                        lookup_secret CredentialsTypeLookup
                        webauthn CredentialsTypeWebAuthn
                        code CredentialsTypeCodeAuth
                        link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself.
                        code_recovery CredentialsTypeRecoveryCode
                created_at:
                    description: CreatedAt is a helper struct field for gobuffalo.pop.
                    format: date-time
                    type: string
                expires_at:
                    description: |-
                        ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in,
                        a new flow has to be initiated.
                    format: date-time
                    type: string
                id:
                    description: |-
                        ID represents the flow's unique ID. When performing the login flow, this
                        represents the id in the login UI's query parameter: http://<selfservice.flows.login.ui_url>/?flow=<flow_id>
                    format: uuid
                    type: string
                issued_at:
                    description: IssuedAt is the time (UTC) when the flow started.
                    format: date-time
                    type: string
                oauth2_login_challenge:
                    type: string
                oauth2_login_request:
                    $ref: '#/components/schemas/OAuth2LoginRequest'
                organization_id:
                    $ref: '#/components/schemas/NullUUID'
                refresh:
                    description: Refresh stores whether this login flow should enforce re-authentication.
                    type: boolean
                request_url:
                    description: |-
                        RequestURL is the initial URL that was requested. It can be used
                        to forward information contained in the URL's path or query for example.
                    type: string
                requested_aal:
                    $ref: '#/components/schemas/AuthenticatorAssuranceLevel'
                return_to:
                    description: ReturnTo contains the requested return_to URL.
                    type: string
                session_token_exchange_code:
                    description: |-
                        SessionTokenExchangeCode holds the secret code that the client can use to retrieve a session token after the login flow has been completed.
                        This is only set if the client has requested a session token exchange code, and if the flow is of type "api",
                        and only on creating the login flow.
                    type: string
                state:
                    description: |-
                        State represents the state of this request:

                        choose_method: ask the user to choose a method to sign in with
                        sent_email: the email has been sent to the user
                        passed_challenge: the request was successful and the login challenge was passed.
                type:
                    $ref: '#/components/schemas/SelfServiceFlowType'
                ui:
                    $ref: '#/components/schemas/UiContainer'
                updated_at:
                    description: UpdatedAt is a helper struct field for gobuffalo.pop.
                    format: date-time
                    type: string
            required:
                - id
                - type
                - expires_at
                - issued_at
                - request_url
                - ui
                - state
            title: Login Flow
            type: object
        LogoutFlow:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Logout Flow
            properties:
                logout_token:
                    description: LogoutToken can be used to perform logout using AJAX.
                    type: string
                logout_url:
                    description: |-
                        LogoutURL can be opened in a browser to sign the user out.

                        format: uri
                    type: string
            required:
                - logout_url
                - logout_token
            title: Logout Flow
            type: object
        MutableSpace:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                description:
                    description: Space description
                    format: string
                    maxLength: 300
                    minLength: 1
                    type: string
                name:
                    description: Space name
                    format: string
                    maxLength: 50
                    minLength: 1
                    type: string
            title: MutableSpace
            type: object
        Notify:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                action:
                    description: Action describing the operation being performed on the resource
                    enum:
                        - create
                        - delete
                    type: string
                identity:
                    description: Unique identifier of a specific subject
                    format: uuid
                    type: string
                identityType:
                    $ref: '#/components/schemas/IamIdentityType'
                object:
                    description: Unique identifier of a specific object being accessed
                    type: string
                parentId:
                    description: Unique identifier of the parent resource (e.g. bucketId for an object). Optional parameter
                    type: string
                resource:
                    description: Type of the resource being accessed. Optional parameter
                    type: string
                service:
                    description: Name of the service making the call
                    type: string
                subresource:
                    description: Specific type of the subresource within the main resource. Optional parameter
                    type: string
                tenantId:
                    description: Unique identifier for a specific tenant or subtenant
                    format: uuid
                    type: string
            required:
                - tenantId
                - identity
                - identityType
                - service
                - object
                - action
            title: Notify
            type: object
        NullJsonRawMessage:
            $schema: https://json-schema.org/draft/2020-12/schema
            nullable: true
            title: Null Json RawMessage
        NullTime:
            $schema: https://json-schema.org/draft/2020-12/schema
            format: date-time
            nullable: true
            title: Null Time
            type: string
        NullUUID:
            $schema: https://json-schema.org/draft/2020-12/schema
            format: uuid4
            nullable: true
            title: Null UUID
            type: string
        OAuth2Client:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: OAuth2Client OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
            properties:
                access_token_strategy:
                    description: OAuth 2.0 Access Token Strategy  AccessTokenStrategy is the strategy used to generate access tokens. Valid options are `jwt` and `opaque`. `jwt` is a bad idea.
                    type: string
                allowed_cors_origins:
                    items:
                        type: string
                    type: array
                audience:
                    items:
                        type: string
                    type: array
                authorization_code_grant_access_token_lifespan:
                    description: Specify a time duration in milliseconds, seconds, minutes, hours.
                    type: string
                authorization_code_grant_id_token_lifespan:
                    description: Specify a time duration in milliseconds, seconds, minutes, hours.
                    type: string
                authorization_code_grant_refresh_token_lifespan:
                    description: Specify a time duration in milliseconds, seconds, minutes, hours.
                    type: string
                backchannel_logout_session_required:
                    description: OpenID Connect Back-Channel Logout Session Required  Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.
                    type: boolean
                backchannel_logout_uri:
                    description: OpenID Connect Back-Channel Logout URI  RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
                    type: string
                client_credentials_grant_access_token_lifespan:
                    description: Specify a time duration in milliseconds, seconds, minutes, hours.
                    type: string
                client_id:
                    description: OAuth 2.0 Client ID  The ID is immutable. If no ID is provided, a UUID4 will be generated.
                    type: string
                client_name:
                    description: OAuth 2.0 Client Name  The human-readable name of the client to be presented to the end-user during authorization.
                    type: string
                client_secret:
                    description: OAuth 2.0 Client Secret  The secret will be included in the create request as cleartext, and then never again. The secret is kept in hashed format and is not recoverable once lost.
                    type: string
                client_secret_expires_at:
                    description: OAuth 2.0 Client Secret Expires At  The field is currently not supported and its value is always 0.
                    format: int64
                    type: integer
                client_uri:
                    description: OAuth 2.0 Client URI  ClientURI is a URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.
                    type: string
                contacts:
                    items:
                        type: string
                    type: array
                created_at:
                    description: OAuth 2.0 Client Creation Date  CreatedAt returns the timestamp of the client's creation.
                    format: date-time
                    type: string
                frontchannel_logout_session_required:
                    description: OpenID Connect Front-Channel Logout Session Required  Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false.
                    type: boolean
                frontchannel_logout_uri:
                    description: OpenID Connect Front-Channel Logout URI  RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be.
                    type: string
                grant_types:
                    items:
                        type: string
                    type: array
                implicit_grant_access_token_lifespan:
                    description: Specify a time duration in milliseconds, seconds, minutes, hours.
                    type: string
                implicit_grant_id_token_lifespan:
                    description: Specify a time duration in milliseconds, seconds, minutes, hours.
                    type: string
                jwks:
                    description: OAuth 2.0 Client JSON Web Key Set  Client's JSON Web Key Set [JWK] document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it MUST NOT use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does, as described in Section 10 of OpenID Connect Core 1.0 [OpenID.Core]). The jwks_uri and jwks parameters MUST NOT be used together.
                jwks_uri:
                    description: OAuth 2.0 Client JSON Web Key Set URL  URL for the Client's JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
                    type: string
                jwt_bearer_grant_access_token_lifespan:
                    description: Specify a time duration in milliseconds, seconds, minutes, hours.
                    type: string
                logo_uri:
                    description: OAuth 2.0 Client Logo URI  A URL string referencing the client's logo.
                    type: string
                metadata: {}
                owner:
                    description: OAuth 2.0 Client Owner  Owner is a string identifying the owner of the OAuth 2.0 Client.
                    type: string
                policy_uri:
                    description: OAuth 2.0 Client Policy URI  PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
                    type: string
                post_logout_redirect_uris:
                    items:
                        type: string
                    type: array
                redirect_uris:
                    items:
                        type: string
                    type: array
                refresh_token_grant_access_token_lifespan:
                    description: Specify a time duration in milliseconds, seconds, minutes, hours.
                    type: string
                refresh_token_grant_id_token_lifespan:
                    description: Specify a time duration in milliseconds, seconds, minutes, hours.
                    type: string
                refresh_token_grant_refresh_token_lifespan:
                    description: Specify a time duration in milliseconds, seconds, minutes, hours.
                    type: string
                registration_access_token:
                    description: OpenID Connect Dynamic Client Registration Access Token  RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client. It is sent when creating a client using Dynamic Client Registration.
                    type: string
                registration_client_uri:
                    description: OpenID Connect Dynamic Client Registration URL  RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client.
                    type: string
                request_object_signing_alg:
                    description: OpenID Connect Request Object Signing Algorithm  JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm.
                    type: string
                request_uris:
                    items:
                        type: string
                    type: array
                response_types:
                    items:
                        type: string
                    type: array
                scope:
                    description: OAuth 2.0 Client Scope  Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
                    type: string
                sector_identifier_uri:
                    description: OpenID Connect Sector Identifier URI  URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values.
                    type: string
                skip_consent:
                    description: SkipConsent skips the consent screen for this client. This field can only be set from the admin API.
                    type: boolean
                skip_logout_consent:
                    description: SkipLogoutConsent skips the logout consent screen for this client. This field can only be set from the admin API.
                    type: boolean
                subject_type:
                    description: OpenID Connect Subject Type  The `subject_types_supported` Discovery parameter contains a list of the supported subject_type values for this server. Valid types include `pairwise` and `public`.
                    type: string
                token_endpoint_auth_method:
                    description: 'OAuth 2.0 Token Endpoint Authentication Method  Requested Client Authentication method for the Token Endpoint. The options are:  `client_secret_basic`: (default) Send `client_id` and `client_secret` as `application/x-www-form-urlencoded` encoded in the HTTP Authorization header. `client_secret_post`: Send `client_id` and `client_secret` as `application/x-www-form-urlencoded` in the HTTP body. `private_key_jwt`: Use JSON Web Tokens to authenticate the client. `none`: Used for public clients (native apps, mobile apps) which can not have secrets.'
                    type: string
                token_endpoint_auth_signing_alg:
                    description: OAuth 2.0 Token Endpoint Signing Algorithm  Requested Client Authentication signing algorithm for the Token Endpoint.
                    type: string
                tos_uri:
                    description: OAuth 2.0 Client Terms of Service URI  A URL string pointing to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
                    type: string
                updated_at:
                    description: OAuth 2.0 Client Last Update Date  UpdatedAt returns the timestamp of the last update.
                    format: date-time
                    type: string
                userinfo_signed_response_alg:
                    description: OpenID Connect Request Userinfo Signed Response Algorithm  JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
                    type: string
            title: OAuth2 Client
            type: object
        OAuth2ConsentRequestOpenIDConnectContext:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: OAuth2ConsentRequestOpenIDConnectContext struct
            properties:
                acr_values:
                    description: 'ACRValues is the Authentication AuthorizationContext Class Reference requested in the OAuth 2.0 Authorization request. It is a parameter defined by OpenID Connect and expresses which level of authentication (e.g. 2FA) is required.  OpenID Connect defines it as follows: > Requested Authentication AuthorizationContext Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication AuthorizationContext Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.'
                    items:
                        type: string
                    type: array
                display:
                    description: 'Display is a string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are: page: The Authorization Server SHOULD display the authentication and consent UI consistent with a full User Agent page view. If the display parameter is not specified, this is the default display mode. popup: The Authorization Server SHOULD display the authentication and consent UI consistent with a popup User Agent window. The popup User Agent window should be of an appropriate size for a login-focused dialog and should not obscure the entire window that it is popping up over. touch: The Authorization Server SHOULD display the authentication and consent UI consistent with a device that leverages a touch interface. wap: The Authorization Server SHOULD display the authentication and consent UI consistent with a \"feature phone\" type display.  The Authorization Server MAY also attempt to detect the capabilities of the User Agent and present an appropriate display.'
                    type: string
                id_token_hint_claims:
                    additionalProperties: {}
                    description: IDTokenHintClaims are the claims of the ID Token previously issued by the Authorization Server being passed as a hint about the End-User's current or past authenticated session with the Client.
                    type: object
                login_hint:
                    description: LoginHint hints about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is optional.
                    type: string
                ui_locales:
                    description: UILocales is the End-User'id preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.
                    items:
                        type: string
                    type: array
            title: OAuth2 Consent Request OpenIDConnect Context
            type: object
        OAuth2LoginRequest:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: OAuth2LoginRequest struct for OAuth2LoginRequest
            properties:
                challenge:
                    description: ID is the identifier (\"login challenge\") of the login request. It is used to identify the session.
                    type: string
                client:
                    $ref: '#/components/schemas/OAuth2Client'
                oidc_context:
                    $ref: '#/components/schemas/OAuth2ConsentRequestOpenIDConnectContext'
                request_url:
                    description: RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.
                    type: string
                requested_access_token_audience:
                    items:
                        type: string
                    type: array
                requested_scope:
                    items:
                        type: string
                    type: array
                session_id:
                    description: SessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag) this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false) this will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back- channel logout. It's value can generally be used to associate consecutive login requests by a certain user.
                    type: string
                skip:
                    description: Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you can skip asking the user to grant the requested scopes, and simply forward the user to the redirect URL.  This feature allows you to update / set session information.
                    type: boolean
                subject:
                    description: Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client. If this value is set and `skip` is true, you MUST include this subject type when accepting the login request, or the request will fail.
                    type: string
            title: OAuth2 Login Request
            type: object
        OidcConfiguration:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Includes links to several endpoints and exposes information on supported signature algorithms among others.
            properties:
                authorization_endpoint:
                    description: OAuth 2.0 Authorization Endpoint URL
                    type: string
                backchannel_logout_session_supported:
                    description: |-
                        OpenID Connect Back-Channel Logout Session Required
                        Boolean value specifying whether the OP can pass a sid (session ID) Claim in the Logout Token to identify the RP session with the OP. If supported, the sid Claim is also included in ID Tokens issued by the OP.
                    type: boolean
                backchannel_logout_supported:
                    description: |-
                        OpenID Connect Back-Channel Logout Supported
                        Boolean value specifying whether the OP supports back-channel logout, with true indicating support.
                    type: boolean
                claims_parameter_supported:
                    description: |-
                        OpenID Connect Claims Parameter Parameter Supported
                        Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support.
                    type: boolean
                claims_supported:
                    description: |-
                        OpenID Connect Supported Claims
                        JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list.
                    items:
                        type: string
                    type: array
                code_challenge_methods_supported:
                    description: |-
                        OAuth 2.0 PKCE Supported Code Challenge Methods
                        JSON array containing a list of Proof Key for Code Exchange (PKCE) [RFC7636] code challenge methods supported by this authorization server.
                    items:
                        type: string
                    type: array
                credentials_endpoint_draft_00:
                    description: |-
                        OpenID Connect Verifiable Credentials Endpoint

                        Contains the URL of the Verifiable Credentials Endpoint.
                    type: string
                credentials_supported_draft_00:
                    description: |-
                        OpenID Connect Verifiable Credentials Supported
                        JSON array containing a list of the Verifiable Credentials supported by this authorization server.
                    items:
                        $ref: '#/components/schemas/CredentialSupportedDraft00'
                    type: array
                end_session_endpoint:
                    description: |-
                        OpenID Connect End-Session Endpoint
                        An URL provided by the OpenID Provider (OP) that a Relying Party (RP) can redirect to, to initiate a logout process for the End-User at the OP. This is part of the OpenID Connect session management functionality,  allowing for single sign-out across applications.
                    type: string
                frontchannel_logout_session_supported:
                    description: |-
                        OpenID Connect Front-Channel Logout Session Required
                        The boolean indicates if the OpenID Provider (OP) can use issuer (iss) and session ID (sid) parameters to identify the Relying Party (RP) session during logout via the  frontchannel_logout_uri. If this is supported, the sid claim is also included in ID Tokens issued by the OP.
                    type: boolean
                frontchannel_logout_supported:
                    description: |-
                        OpenID Connect Front-Channel Logout Supported
                        Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support.
                    type: boolean
                grant_types_supported:
                    description: |-
                        OAuth 2.0 Supported Grant Types
                        JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports.
                    items:
                        type: string
                    type: array
                id_token_signed_response_alg:
                    description: |-
                        OpenID Connect Default ID Token Signing Algorithms

                        Algorithm used to sign OpenID Connect ID Tokens.
                    items:
                        type: string
                    type: array
                id_token_signing_alg_values_supported:
                    description: |-
                        OpenID Connect Supported ID Token Signing Algorithms

                        JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.
                    items:
                        type: string
                    type: array
                issuer:
                    description: |-
                        OpenID Connect Issuer URL
                        An URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier. If IssuerURL discovery is supported, this value MUST be identical to the issuer value returned by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.
                    type: string
                jwks_uri:
                    description: |-
                        OpenID Connect Well-Known JSON Web Keys URL
                        The jwks_uri is the URL for the OpenID Provider's (OP) JSON Web Key Set (JWK) document, which contains the keys used by the Relying Party (RP) to validate the OP's signatures and, optionally, encrypt requests. Each key must specify its use (signing or encryption) for security purposes. The JWK set may include X.509  representations of keys via the x5c parameter, but the bare key values must still be present and match those in the certificate.
                    type: string
                registration_endpoint:
                    description: OpenID Connect Dynamic Client Registration Endpoint URL
                    type: string
                request_object_signing_alg_values_supported:
                    description: |-
                        OpenID Connect Supported Request Object Signing Algorithms
                        JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects, which are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter).
                    items:
                        type: string
                    type: array
                request_parameter_supported:
                    description: |-
                        OpenID Connect Request Parameter Supported
                        Boolean value specifying whether the OP supports use of the request parameter, with true indicating support.
                    type: boolean
                request_uri_parameter_supported:
                    description: |-
                        OpenID Connect Request URI Parameter Supported
                        Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support.
                    type: boolean
                require_request_uri_registration:
                    description: |-
                        OpenID Connect Requires Request URI Registration
                        Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter.
                    type: boolean
                response_modes_supported:
                    description: |-
                        OAuth 2.0 Supported Response Modes
                        JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports.
                    items:
                        type: string
                    type: array
                response_types_supported:
                    description: |-
                        OAuth 2.0 Supported Response Types
                        JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values.
                    items:
                        type: string
                    type: array
                revocation_endpoint:
                    description: |-
                        OAuth 2.0 Token Revocation URL

                        URL of the authorization server's OAuth 2.0 revocation endpoint.
                    type: string
                scopes_supported:
                    description: |-
                        OAuth 2.0 Supported Scope Values
                        JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used
                    items:
                        type: string
                    type: array
                subject_types_supported:
                    description: |-
                        OpenID Connect Supported Subject Types
                        JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.
                    items:
                        type: string
                    type: array
                token_endpoint:
                    description: OAuth 2.0 Token Endpoint URL
                    type: string
                token_endpoint_auth_methods_supported:
                    description: |-
                        OAuth 2.0 Supported Client Authentication Methods

                        JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0
                    items:
                        type: string
                    type: array
                userinfo_endpoint:
                    description: |-
                        OpenID Connect Userinfo URL

                        URL of the OP's UserInfo Endpoint.
                    type: string
                userinfo_signed_response_alg:
                    description: |-
                        OpenID Connect User Userinfo Signing Algorithm

                        Algorithm used to sign OpenID Connect Userinfo Responses.
                    items:
                        type: string
                    type: array
                userinfo_signing_alg_values_supported:
                    description: |-
                        OpenID Connect Supported Userinfo Signing Algorithm
                        JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
                    items:
                        type: string
                    type: array
            required:
                - issuer
                - authorization_endpoint
                - token_endpoint
                - jwks_uri
                - subject_types_supported
                - response_types_supported
                - id_token_signing_alg_values_supported
                - id_token_signed_response_alg
                - userinfo_signed_response_alg
            title: OpenID Connect Discovery Metadata
            type: object
        OpenIdIdentity:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                grantType:
                    $ref: '#/components/schemas/GrantType'
                name:
                    type: string
                redirectUris:
                    items:
                        type: string
                    type: array
                skipConsent:
                    type: boolean
            required:
                - name
                - grantType
                - redirectUris
                - skipConsent
            title: Identity
            type: object
        OpenIdIdentityRegistered:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                createdOn:
                    description: creation date
                    format: date-time
                    type: string
                id:
                    description: ID
                    type: string
                updatedOn:
                    description: last update
                    format: date-time
                    type: string
            required:
                - id
                - createdOn
                - updatedOn
            title: Registered
            type: object
        Organisation:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                createdOn:
                    description: Organisation creation date
                    format: date-time
                    type: string
                description:
                    description: Organisation description
                    format: string
                    type: string
                name:
                    description: Organisation name
                    format: string
                    type: string
                organisationId:
                    description: organisation ID
                    format: uuid
                    type: string
                updatedOn:
                    description: Organisation last update
                    format: date-time
                    type: string
            required:
                - organisationId
                - name
                - description
                - createdOn
                - updatedOn
            title: Organisation schema
            type: object
        OrganisationIdsList:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                items:
                    items:
                        format: uuid
                        type: string
                    type: array
            required:
                - items
            title: OrganisationIdsList
            type: object
        OrganisationSimple:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                id:
                    description: Organisation identifier
                    format: uuid
                    type: string
            required:
                - id
            title: OrganisationSimple
            type: object
        OrganisationSimplePaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/OrganisationSimple'
                        type: array
                  required:
                    - items
                  type: object
            title: OrganisationSimplePaginatedList
            type: object
        PaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            additionalProperties: false
            description: Represent the common attributes of a paginated list, to be used in an allOf with the specific items attribute of the desired type.
            properties:
                nextPageToken:
                    description: This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.
                    type: string
                totalSize:
                    $ref: '#/components/schemas/Int'
                    description: Total number of element of items.
            title: PaginatedList
            type: object
        PatchOpenIdIdentity:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/RegisteredOpenIdentity'
                - required:
                    - secret
                  type: object
            title: PatchIdentity
        PendingOrganisation:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/Organisation'
                - properties:
                    status:
                        description: status of the organisation, the organisation can only be used when the status is ready.
                        enum:
                            - QUEUED
                            - RUNNING
                            - READY
                            - FAILED
                        type: string
                    userId:
                        format: uuid
                        type: string
                  required:
                    - userId
                    - status
                  type: object
            title: Pending creation organisation schema
            type: object
        PerformNativeLogoutBody:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Perform Native Logout Request Body
            properties:
                session_token:
                    description: |-
                        The Session Token

                        Invalidate this session token.
                    type: string
            required:
                - session_token
            title: Perform Native Logout Body
            type: object
        Permission:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: A permission in the <service>[.<resource>.[<subResource>](0,1)](0,1).<action> form
            properties:
                action:
                    description: Allowed operation type
                    example: delete
                    pattern: ^[a-zA-Z]+$
                    type: string
                description:
                    description: Human-readable description
                    type: string
                name:
                    description: Human-readable name
                    type: string
                resource:
                    example: storage
                    pattern: ^[a-zA-Z]+$
                    type: string
                service:
                    description: Service name
                    example: resourcemanager
                    pattern: ^[a-z]+$
                    type: string
                subResource:
                    example: buckets
                    pattern: ^[a-zA-Z]+$
                    type: string
            required:
                - name
                - description
                - service
                - action
            title: Permission
            type: object
        PermissionsPaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/RegisteredPermission'
                        type: array
                  required:
                    - items
                  type: object
            title: PermissionsPaginatedList
            type: object
        RecoveryAddressType:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: RecoveryAddressType must not exceed 16 characters as that is the limitation in the SQL Schema.
            title: Recovery Address Type
            type: string
        RecoveryFlow:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: This request is used when an identity wants to recover their account.
            properties:
                active:
                    description: Active, if set, contains the recovery method that is being used. It is initially not set.
                    type: string
                continue_with:
                    description: Contains possible actions that could follow this flow
                    items:
                        $ref: '#/components/schemas/ContinueWith'
                    type: array
                expires_at:
                    description: ExpiresAt is the time (UTC) when the request expires. If the user still wishes to update the setting, a new request has to be initiated.
                    format: date-time
                    type: string
                id:
                    description: ID represents the request's unique ID.
                    format: uuid
                    type: string
                issued_at:
                    description: IssuedAt is the time (UTC) when the request occurred.
                    format: date-time
                    type: string
                request_url:
                    description: |-
                        RequestURL is the initial URL that was requested. It can be used
                        to forward information contained in the URL's path or query for example.
                    type: string
                return_to:
                    description: ReturnTo contains the requested return_to URL.
                    type: string
                state:
                    description: |-
                        State represents the state of this request:
                        choose_method: ask the user to choose a method (e.g. recover account via email)
                        sent_email: the email has been sent to the user
                        passed_challenge: the request was successful and the recovery challenge was passed.
                type:
                    $ref: '#/components/schemas/SelfServiceFlowType'
                ui:
                    $ref: '#/components/schemas/UiContainer'
            required:
                - id
                - type
                - expires_at
                - issued_at
                - request_url
                - ui
                - state
            title: A Recovery Flow
            type: object
        RecoveryIdentityAddress:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                created_at:
                    description: CreatedAt is a helper struct field for gobuffalo.pop.
                    format: date-time
                    type: string
                id:
                    format: uuid
                    type: string
                updated_at:
                    description: UpdatedAt is a helper struct field for gobuffalo.pop.
                    format: date-time
                    type: string
                value:
                    type: string
                via:
                    $ref: '#/components/schemas/RecoveryAddressType'
            required:
                - id
                - value
                - via
            title: Recovery Identity Address
            type: object
        RecoveryLink:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                expiration:
                    $ref: '#/components/schemas/DateTime'
                link:
                    description: Recovery link correctly generated
                    format: uri
                    type: string
            required:
                - link
                - expiration
            title: RecoveryLink
            type: object
        Registered:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                createdOn:
                    description: creation date
                    format: date-time
                    type: string
                updatedOn:
                    description: last update
                    format: date-time
                    type: string
                uuid:
                    description: Internal ID
                    format: uuid
                    type: string
            required:
                - uuid
                - createdOn
                - updatedOn
            title: Registered
            type: object
        RegisteredOpenIdentity:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/OpenIdIdentity'
                - $ref: '#/components/schemas/OpenIdIdentityRegistered'
            title: RegisteredIdentity
        RegisteredPermission:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/Permission'
                - $ref: '#/components/schemas/Registered'
            title: RegisteredPermission
            type: object
        RegisteredPermissionList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/RegisteredPermission'
                        type: array
                  required:
                    - items
                  type: object
            title: RegisteredPermissionList
            type: object
        RegisteredRole:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/Role'
                - $ref: '#/components/schemas/Registered'
            title: RegisteredRole
            type: object
        RegisteredRoleList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/RegisteredRole'
                        type: array
                  required:
                    - items
                  type: object
            title: RegisteredRoleList
            type: object
        RegistrationFlow:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                active:
                    description: |-
                        Active, if set, contains the registration method that is being used. It is initially
                        not set.
                        password CredentialsTypePassword
                        oidc CredentialsTypeOIDC
                        totp CredentialsTypeTOTP
                        lookup_secret CredentialsTypeLookup
                        webauthn CredentialsTypeWebAuthn
                        code CredentialsTypeCodeAuth
                        link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself.
                        code_recovery CredentialsTypeRecoveryCode
                    enum:
                        - password
                        - oidc
                        - totp
                        - lookup_secret
                        - webauthn
                        - code
                        - link_recovery
                        - code_recovery
                    type: string
                    x-go-enum-desc: |-
                        password CredentialsTypePassword
                        oidc CredentialsTypeOIDC
                        totp CredentialsTypeTOTP
                        lookup_secret CredentialsTypeLookup
                        webauthn CredentialsTypeWebAuthn
                        code CredentialsTypeCodeAuth
                        link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself.
                        code_recovery CredentialsTypeRecoveryCode
                expires_at:
                    description: |-
                        ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in,
                        a new flow has to be initiated.
                    format: date-time
                    type: string
                id:
                    description: |-
                        ID represents the flow's unique ID. When performing the registration flow, this
                        represents the id in the registration ui's query parameter: http://<selfservice.flows.registration.ui_url>/?flow=<id>
                    format: uuid
                    type: string
                issued_at:
                    description: IssuedAt is the time (UTC) when the flow occurred.
                    format: date-time
                    type: string
                oauth2_login_challenge:
                    type: string
                oauth2_login_request:
                    $ref: '#/components/schemas/OAuth2LoginRequest'
                organization_id:
                    $ref: '#/components/schemas/NullUUID'
                request_url:
                    description: |-
                        RequestURL is the initial URL that was requested. It can be used
                        to forward information contained in the URL's path or query for example.
                    type: string
                return_to:
                    description: ReturnTo contains the requested return_to URL.
                    type: string
                session_token_exchange_code:
                    description: |-
                        SessionTokenExchangeCode holds the secret code that the client can use to retrieve a session token after the flow has been completed.
                        This is only set if the client has requested a session token exchange code, and if the flow is of type "api",
                        and only on creating the flow.
                    type: string
                state:
                    description: |-
                        State represents the state of this request:
                        choose_method: ask the user to choose a method (e.g. registration with email)
                        sent_email: the email has been sent to the user
                        passed_challenge: the request was successful and the registration challenge was passed.
                transient_payload:
                    description: TransientPayload is used to pass data from the registration to a webhook
                    type: object
                type:
                    $ref: '#/components/schemas/SelfServiceFlowType'
                ui:
                    $ref: '#/components/schemas/UiContainer'
            required:
                - id
                - type
                - expires_at
                - issued_at
                - request_url
                - ui
                - state
            title: Registration Flow
            type: object
        Role:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: A role, linked to 1 or more permissions
            properties:
                description:
                    description: Human-readable description
                    example: Manage the resourcemanager.storage domain
                    type: string
                name:
                    description: Human-readable name
                    example: Storage Object Admin
                    type: string
            required:
                - name
                - description
            title: Role
            type: object
        RolePermission:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                permissions:
                    description: List of permissions UUIDs
                    items:
                        allOf:
                            - description: permission ID
                              format: uuid
                              type: string
                    maxItems: 100
                    minItems: 1
                    type: array
            required:
                - permissions
            title: RolePermission
            type: object
        RolesPaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/RegisteredRole'
                        type: array
                  required:
                    - items
                  type: object
            title: RolesPaginatedList
            type: object
        RootPolicies:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                policies:
                    description: List of relations between ServiceAccountNSId and root
                    items:
                        $ref: '#/components/schemas/RootPolicy'
                    type: array
            title: RootPolicies
            type: object
        RootPolicy:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                action:
                    description: Type of action
                    type: string
                serviceAccountNsId:
                    description: ServiceAccountNs identifier
                    format: uuid
                    type: string
            required:
                - serviceAccountNsId
                - action
            title: RootPolicy
        SelfServiceFlowType:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: The flow type can either be `api` or `browser`.
            title: Type is the flow type.
            type: string
        ServiceAccount:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                name:
                    description: Service account name
                    format: string
                    type: string
            required:
                - name
            title: ServiceAccount
            type: object
        ServiceAccountEdited:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                id:
                    description: Service account ID
                    format: string
                    type: string
                name:
                    description: Service Accounts name
                    format: string
                    type: string
            required:
                - name
                - id
            title: ServiceAccountEdited
            type: object
        ServiceAccountNS:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                identityId:
                    type: string
                identitySecret:
                    type: string
            required:
                - identityId
                - identitySecret
            title: ServiceAccountNS
            type: object
        ServiceAccountPaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/ServiceAccountEdited'
                        type: array
                  required:
                    - items
                  type: object
            title: ServiceAccountPaginatedList
            type: object
        Session:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: A Session
            properties:
                active:
                    description: Active state. If false the session is no longer active.
                    type: boolean
                authenticated_at:
                    description: |-
                        The Session Authentication Timestamp

                        When this session was authenticated at. If multi-factor authentication was used this
                        is the time when the last factor was authenticated (e.g. the TOTP code challenge was completed).
                    format: date-time
                    type: string
                authentication_methods:
                    $ref: '#/components/schemas/SessionAuthenticationMethods'
                authenticator_assurance_level:
                    $ref: '#/components/schemas/AuthenticatorAssuranceLevel'
                devices:
                    description: Devices has history of all endpoints where the session was used
                    items:
                        $ref: '#/components/schemas/SessionDevice'
                    type: array
                expires_at:
                    description: |-
                        The Session Expiry

                        When this session expires at.
                    format: date-time
                    type: string
                id:
                    description: Session ID
                    format: uuid
                    type: string
                identity:
                    $ref: '#/components/schemas/Identity'
                issued_at:
                    description: |-
                        The Session Issuance Timestamp

                        When this session was issued at. Usually equal or close to `authenticated_at`.
                    format: date-time
                    type: string
                tokenized:
                    description: |-
                        Tokenized is the tokenized (e.g. JWT) version of the session.

                        It is only set when the `tokenize` query parameter was set to a valid tokenize template during calls to `/session/whoami`.
                    type: string
            required:
                - id
            title: AuthenticationMethod identifies an authentication method
            type: object
        SessionAuthenticationMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: A singular authenticator used during authentication / login.
            properties:
                aal:
                    $ref: '#/components/schemas/AuthenticatorAssuranceLevel'
                completed_at:
                    description: When the authentication challenge was completed.
                    format: date-time
                    type: string
                method:
                    enum:
                        - link_recovery
                        - code_recovery
                        - password
                        - code
                        - totp
                        - oidc
                        - webauthn
                        - lookup_secret
                        - v0.6_legacy_session
                    title: The method used
                    type: string
                organization:
                    description: The Organization id used for authentication
                    type: string
                provider:
                    description: OIDC or SAML provider id used for authentication
                    type: string
            title: AuthenticationMethod identifies an authentication method
            type: object
        SessionAuthenticationMethods:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: A list of authenticators which were used to authenticate the session.
            items:
                $ref: '#/components/schemas/SessionAuthenticationMethod'
            title: List of (Used) AuthenticationMethods
            type: array
        SessionDevice:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Device corresponding to a Session
            properties:
                id:
                    description: Device record ID
                    format: uuid
                    type: string
                ip_address:
                    description: IPAddress of the client
                    type: string
                location:
                    description: Geo Location corresponding to the IP Address
                    type: string
                user_agent:
                    description: UserAgent of the client
                    type: string
            required:
                - id
            title: Session Device
            type: object
        SettingsFlow:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: This flow is used when an identity wants to update settings
            properties:
                active:
                    description: |-
                        Active, if set, contains the registration method that is being used. It is initially
                        not set.
                    type: string
                continue_with:
                    description: |-
                        Contains a list of actions, that could follow this flow

                        It can, for example, contain a reference to the verification flow, created as part of the user's
                        registration.
                    items:
                        $ref: '#/components/schemas/ContinueWith'
                    type: array
                expires_at:
                    description: |-
                        ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting,
                        a new flow has to be initiated.
                    format: date-time
                    type: string
                id:
                    description: |-
                        ID represents the flow's unique ID. When performing the settings flow, this
                        represents the id in the settings ui's query parameter: http://<selfservice.flows.settings.ui_url>?flow=<id>
                    format: uuid
                    type: string
                identity:
                    $ref: '#/components/schemas/Identity'
                issued_at:
                    description: IssuedAt is the time (UTC) when the flow occurred.
                    format: date-time
                    type: string
                request_url:
                    description: RequestURL is the initial URL that was requested. It can be used to forward information contained in the URL's path or query for example.
                    type: string
                return_to:
                    description: ReturnTo contains the requested return_to URL.
                    type: string
                state:
                    description: |-
                        State represents the state of this flow. It knows two states:
                        show_form: No user data has been collected, or it is invalid, and thus the form should be shown.
                        success: Indicates that the settings flow has been updated successfully with the provided data.
                        Done will stay true when repeatedly checking. If set to true, done will revert back to false only
                        when a flow with invalid (e.g. "please use a valid phone number") data was sent.
                type:
                    $ref: '#/components/schemas/SelfServiceFlowType'
                ui:
                    $ref: '#/components/schemas/UiContainer'
            required:
                - id
                - type
                - expires_at
                - issued_at
                - request_url
                - ui
                - identity
                - state
            title: Flow represents a Settings Flow
            type: object
        Space:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/MutableSpace'
                - $ref: '#/components/schemas/ImmutableSpace'
                - required:
                    - name
                    - description
                  type: object
            title: Space
            type: object
        SpaceIdsList:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                items:
                    items:
                        format: uuid
                        type: string
                    type: array
            required:
                - items
            title: SpaceIdsList
            type: object
        SpacePaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/Space'
                        type: array
                  required:
                    - items
                  type: object
            title: SpacePaginatedList
            type: object
        SpaceSimple:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                id:
                    description: Space identifier
                    format: uuid
                    type: string
            required:
                - id
            title: SpaceSimple
            type: object
        SpaceSimplePaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/SpaceSimple'
                        type: array
                  required:
                    - items
                  type: object
            title: SpaceSimplePaginatedList
            type: object
        SubjectType:
            $schema: https://json-schema.org/draft/2020-12/schema
            enum:
                - users
                - serviceAccounts
            title: SubjectType
            type: string
        SuccessfulNativeLogin:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: The Response for Login Flows via API
            properties:
                session:
                    $ref: '#/components/schemas/Session'
                session_token:
                    description: |-
                        The Session Token
                        A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization
                        Header:
                        Authorization: bearer ${session-token}
                        The session token is only issued for API flows, not for Browser flows!
                    type: string
            required:
                - session
            title: Successful Native Login
            type: object
        SuccessfulNativeRegistration:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: The Response for Registration Flows via API
            properties:
                continue_with:
                    description: |-
                        Contains a list of actions, that could follow this flow

                        It can, for example, this will contain a reference to the verification flow, created as part of the user's
                        registration or the token of the session.
                    items:
                        $ref: '#/components/schemas/ContinueWith'
                    type: array
                identity:
                    $ref: '#/components/schemas/Identity'
                session:
                    $ref: '#/components/schemas/Session'
                session_token:
                    description: |-
                        The Session Token

                        This field is only set when the session hook is configured as a post-registration hook.

                        A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization
                        Header:

                        Authorization: bearer ${session-token}

                        The session token is only issued for API flows, not for Browser flows!
                    type: string
            required:
                - identity
            title: Successful Native Registration
            type: object
        TokenBody:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                token:
                    description: The token to provide.
                    type: string
            required:
                - token
            title: TokenBody
            type: object
        TokenReq:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                client_id:
                    description: The client id.
                    format: uuid
                    type: string
                client_secret:
                    description: The client secret.
                    type: string
                code:
                    description: The code authorization.
                    type: string
                grant_type:
                    description: The grant type.
                    type: string
                redirect_uri:
                    description: The URLs redirection
                    type: string
                refresh_token:
                    description: The refresh Token
                    type: string
            required:
                - grant_type
            title: TokenReq
            type: object
        TokenResp:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                access_token:
                    description: The access token.
                    type: string
                expires_in:
                    description: The lifetime in seconds of the access token.
                    type: integer
                id_token:
                    description: The id token.
                    type: string
                refresh_token:
                    description: The refresh token.
                    type: string
                token_type:
                    description: The type of the token issued.
                    type: string
            required:
                - access_token
                - expires_in
                - token_type
            title: TokenResp
            type: object
        UiContainer:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Container represents a HTML Form. The container can work with both HTTP Form and JSON requests.
            properties:
                action:
                    description: Action should be used as the form action URL `<form action="{{.Action }}" method="post">`.
                    type: string
                messages:
                    $ref: '#/components/schemas/UiTexts'
                method:
                    description: Method is the form method (e.g. POST)
                    type: string
                nodes:
                    $ref: '#/components/schemas/UiNodes'
            required:
                - action
                - method
                - nodes
            title: Ui Container
            type: object
        UiNode:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: |-
                Nodes are represented as HTML elements or their native UI equivalents. For example,
                a node can be an `<img>` tag, or an `<input element>` but also `some plain text`.
            properties:
                attributes:
                    $ref: '#/components/schemas/UiNodeAttributes'
                group:
                    description: |-
                        Group specifies which group (e.g. password authenticator) this node belongs to.
                        default DefaultGroup
                        password PasswordGroup
                        oidc OpenIDConnectGroup
                        profile ProfileGroup
                        link LinkGroup
                        code CodeGroup
                        totp TOTPGroup
                        lookup_secret LookupGroup
                        webauthn WebAuthnGroup
                    enum:
                        - default
                        - password
                        - oidc
                        - profile
                        - link
                        - code
                        - totp
                        - lookup_secret
                        - webauthn
                    type: string
                    x-go-enum-desc: |-
                        default DefaultGroup
                        password PasswordGroup
                        oidc OpenIDConnectGroup
                        profile ProfileGroup
                        link LinkGroup
                        code CodeGroup
                        totp TOTPGroup
                        lookup_secret LookupGroup
                        webauthn WebAuthnGroup
                messages:
                    $ref: '#/components/schemas/UiTexts'
                meta:
                    $ref: '#/components/schemas/UiNodeMeta'
                type:
                    description: |-
                        The node's type
                        text Text
                        input Input
                        img Image
                        a Anchor
                        script Script
                    enum:
                        - text
                        - input
                        - img
                        - a
                        - script
                    type: string
                    x-go-enum-desc: |-
                        text Text
                        input Input
                        img Image
                        a Anchor
                        script Script
            required:
                - type
                - group
                - attributes
                - messages
                - meta
            title: Node represents a flow's nodes
            type: object
        UiNodeAnchorAttributes:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                href:
                    description: |-
                        The link's href (destination) URL.

                        format: uri
                    type: string
                id:
                    description: A unique identifier
                    type: string
                node_type:
                    description: |-
                        NodeType represents this node's types. It is a mirror of `node.type` and
                        is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "a".
                    type: string
                title:
                    $ref: '#/components/schemas/UiText'
            required:
                - href
                - title
                - id
                - node_type
            title: AnchorAttributes represents the attributes of an anchor node.
            type: object
        UiNodeAttributes:
            $schema: https://json-schema.org/draft/2020-12/schema
            discriminator:
                mapping:
                    a: '#/components/schemas/UiNodeAnchorAttributes'
                    img: '#/components/schemas/UiNodeImageAttributes'
                    input: '#/components/schemas/UiNodeInputAttributes'
                    script: '#/components/schemas/UiNodeScriptAttributes'
                    text: '#/components/schemas/UiNodeTextAttributes'
                propertyName: node_type
            oneOf:
                - $ref: '#/components/schemas/UiNodeInputAttributes'
                - $ref: '#/components/schemas/UiNodeTextAttributes'
                - $ref: '#/components/schemas/UiNodeImageAttributes'
                - $ref: '#/components/schemas/UiNodeAnchorAttributes'
                - $ref: '#/components/schemas/UiNodeScriptAttributes'
            title: Attributes represents a list of attributes
        UiNodeImageAttributes:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                height:
                    description: Height of the image
                    format: int64
                    type: integer
                id:
                    description: A unique identifier
                    type: string
                node_type:
                    description: |-
                        NodeType represents this node's types. It is a mirror of `node.type` and
                        is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "img".
                    type: string
                src:
                    description: |-
                        The image's source URL.

                        format: uri
                    type: string
                width:
                    description: Width of the image
                    format: int64
                    type: integer
            required:
                - src
                - id
                - width
                - height
                - node_type
            title: ImageAttributes represents the attributes of an image node.
            type: object
        UiNodeInputAttributes:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: InputAttributes represents the attributes of an input node
            properties:
                autocomplete:
                    description: |-
                        The autocomplete attribute for the input.
                        email InputAttributeAutocompleteEmail
                        tel InputAttributeAutocompleteTel
                        url InputAttributeAutocompleteUrl
                        current-password InputAttributeAutocompleteCurrentPassword
                        new-password InputAttributeAutocompleteNewPassword
                        one-time-code InputAttributeAutocompleteOneTimeCode
                    enum:
                        - email
                        - tel
                        - url
                        - current-password
                        - new-password
                        - one-time-code
                    type: string
                    x-go-enum-desc: |-
                        email InputAttributeAutocompleteEmail
                        tel InputAttributeAutocompleteTel
                        url InputAttributeAutocompleteUrl
                        current-password InputAttributeAutocompleteCurrentPassword
                        new-password InputAttributeAutocompleteNewPassword
                        one-time-code InputAttributeAutocompleteOneTimeCode
                disabled:
                    description: Sets the input's disabled field to true or false.
                    type: boolean
                label:
                    $ref: '#/components/schemas/UiText'
                name:
                    description: The input's element name.
                    type: string
                node_type:
                    description: |-
                        NodeType represents this node's types. It is a mirror of `node.type` and
                        is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "input".
                    type: string
                onclick:
                    description: |-
                        OnClick may contain javascript which should be executed on click. This is primarily
                        used for WebAuthn.
                    type: string
                pattern:
                    description: The input's pattern.
                    type: string
                required:
                    description: Mark this input field as required.
                    type: boolean
                type:
                    description: |-
                        The input's element type.
                        text InputAttributeTypeText
                        password InputAttributeTypePassword
                        number InputAttributeTypeNumber
                        checkbox InputAttributeTypeCheckbox
                        hidden InputAttributeTypeHidden
                        email InputAttributeTypeEmail
                        tel InputAttributeTypeTel
                        submit InputAttributeTypeSubmit
                        button InputAttributeTypeButton
                        datetime-local InputAttributeTypeDateTimeLocal
                        date InputAttributeTypeDate
                        url InputAttributeTypeURI
                    enum:
                        - text
                        - password
                        - number
                        - checkbox
                        - hidden
                        - email
                        - tel
                        - submit
                        - button
                        - datetime-local
                        - date
                        - url
                    type: string
                    x-go-enum-desc: |-
                        text InputAttributeTypeText
                        password InputAttributeTypePassword
                        number InputAttributeTypeNumber
                        checkbox InputAttributeTypeCheckbox
                        hidden InputAttributeTypeHidden
                        email InputAttributeTypeEmail
                        tel InputAttributeTypeTel
                        submit InputAttributeTypeSubmit
                        button InputAttributeTypeButton
                        datetime-local InputAttributeTypeDateTimeLocal
                        date InputAttributeTypeDate
                        url InputAttributeTypeURI
                value:
                    description: The input's value.
                    nullable: true
            required:
                - name
                - type
                - disabled
                - node_type
            title: ScriptAttributes represent input nodes which load javascript.
            type: object
        UiNodeMeta:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: |-
                This might include a label and other information that can optionally
                be used to render UIs.
            properties:
                label:
                    $ref: '#/components/schemas/UiText'
            title: A Node's Meta Information
            type: object
        UiNodeScriptAttributes:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                async:
                    description: The script async type
                    type: boolean
                crossorigin:
                    description: The script cross origin policy
                    type: string
                id:
                    description: A unique identifier
                    type: string
                integrity:
                    description: The script's integrity hash
                    type: string
                node_type:
                    description: |-
                        NodeType represents this node's types. It is a mirror of `node.type` and
                        is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is "script".
                    type: string
                nonce:
                    description: |-
                        Nonce for CSP

                        A nonce you may want to use to improve your Content Security Policy.
                        You do not have to use this value but if you want to improve your CSP
                        policies you may use it. You can also choose to use your own nonce value!
                    type: string
                referrerpolicy:
                    description: The script referrer policy
                    type: string
                src:
                    description: The script source
                    type: string
                type:
                    description: The script MIME type
                    type: string
            required:
                - src
                - async
                - referrerpolicy
                - crossorigin
                - integrity
                - type
                - id
                - nonce
                - node_type
            title: ScriptAttributes represent script nodes which load javascript.
            type: object
        UiNodeTextAttributes:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                id:
                    description: A unique identifier
                    type: string
                node_type:
                    description: |-
                        NodeType represents this node's types. It is a mirror of `node.type` and
                        is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "text".
                    type: string
                text:
                    $ref: '#/components/schemas/UiText'
            required:
                - text
                - id
                - node_type
            title: TextAttributes represents the attributes of a text node.
            type: object
        UiNodes:
            $schema: https://json-schema.org/draft/2020-12/schema
            items:
                $ref: '#/components/schemas/UiNode'
            title: Ui Nodes
            type: array
        UiText:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                context:
                    description: The message's context. Useful when customizing messages.
                    type: object
                id:
                    $ref: '#/components/schemas/ID'
                text:
                    description: The message text. Written in american english.
                    type: string
                type:
                    description: |-
                        The message type.
                        info Info
                        error Error
                        success Success
                    enum:
                        - info
                        - error
                        - success
                    type: string
                    x-go-enum-desc: |-
                        info Info
                        error Error
                        success Success
            required:
                - id
                - text
                - type
            title: Ui Text
            type: object
        UiTexts:
            $schema: https://json-schema.org/draft/2020-12/schema
            items:
                $ref: '#/components/schemas/UiText'
            title: Ui Texts
            type: array
        UpdateLoginFlowBody:
            $schema: https://json-schema.org/draft/2020-12/schema
            discriminator:
                mapping:
                    code: '#/components/schemas/UpdateLoginFlowWithCodeMethod'
                    lookup_secret: '#/components/schemas/UpdateLoginFlowWithLookupSecretMethod'
                    oidc: '#/components/schemas/UpdateLoginFlowWithOidcMethod'
                    password: '#/components/schemas/UpdateLoginFlowWithPasswordMethod'
                    totp: '#/components/schemas/UpdateLoginFlowWithTotpMethod'
                    webauthn: '#/components/schemas/UpdateLoginFlowWithWebAuthnMethod'
                propertyName: method
            oneOf:
                - $ref: '#/components/schemas/UpdateLoginFlowWithPasswordMethod'
                - $ref: '#/components/schemas/UpdateLoginFlowWithOidcMethod'
                - $ref: '#/components/schemas/UpdateLoginFlowWithTotpMethod'
                - $ref: '#/components/schemas/UpdateLoginFlowWithWebAuthnMethod'
                - $ref: '#/components/schemas/UpdateLoginFlowWithLookupSecretMethod'
                - $ref: '#/components/schemas/UpdateLoginFlowWithCodeMethod'
            title: Update Login Flow Body
        UpdateLoginFlowWithCodeMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Login flow using the code method
            properties:
                code:
                    description: Code is the 6 digits code sent to the user
                    type: string
                csrf_token:
                    description: CSRFToken is the anti-CSRF token
                    type: string
                identifier:
                    description: |-
                        Identifier is the code identifier
                        The identifier requires that the user has already completed the registration or settings with code flow.
                    type: string
                method:
                    description: Method should be set to "code" when logging in using the code strategy.
                    type: string
                resend:
                    description: Resend is set when the user wants to resend the code
                    type: string
            required:
                - method
                - csrf_token
            title: Update Login Flow Code
            type: object
        UpdateLoginFlowWithLookupSecretMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Login Flow with Lookup Secret Method
            properties:
                csrf_token:
                    description: Sending the anti-csrf token is only required for browser login flows.
                    type: string
                lookup_secret:
                    description: The lookup secret.
                    type: string
                method:
                    description: Method should be set to "lookup_secret" when logging in using the lookup_secret strategy.
                    type: string
            required:
                - method
                - lookup_secret
            title: Update Login Flow Lookup Secret
            type: object
        UpdateLoginFlowWithOidcMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Login Flow with OpenID Connect Method
            properties:
                csrf_token:
                    description: The CSRF Token
                    type: string
                id_token:
                    description: |-
                        IDToken is an optional id token provided by an OIDC provider

                        If submitted, it is verified using the OIDC provider's public key set and the claims are used to populate
                        the OIDC credentials of the identity.
                        If the OIDC provider does not store additional claims (such as name, etc.) in the IDToken itself, you can use
                        the `traits` field to populate the identity's traits. Note, that Apple only includes the users email in the IDToken.

                        Supported providers are
                        Apple
                    type: string
                id_token_nonce:
                    description: |-
                        IDTokenNonce is the nonce, used when generating the IDToken.
                        If the provider supports nonce validation, the nonce will be validated against this value and required.
                    type: string
                method:
                    description: |-
                        Method to use

                        This field must be set to `oidc` when using the oidc method.
                    type: string
                provider:
                    description: The provider to register with
                    type: string
                traits:
                    description: The identity traits. This is a placeholder for the registration flow.
                    type: object
                upstream_parameters:
                    description: |-
                        UpstreamParameters are the parameters that are passed to the upstream identity provider.

                        These parameters are optional and depend on what the upstream identity provider supports.
                        Supported parameters are:
                        `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session.
                        `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`.
                        `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
                    type: object
            required:
                - provider
                - method
            title: Update Login Flow Oidc
            type: object
        UpdateLoginFlowWithPasswordMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Login Flow with Password Method
            properties:
                csrf_token:
                    description: Sending the anti-csrf token is only required for browser login flows.
                    type: string
                identifier:
                    description: Identifier is the email or username of the user trying to log in.
                    type: string
                method:
                    description: Method should be set to "password" when logging in using the identifier and password strategy.
                    type: string
                password:
                    description: The user's password.
                    type: string
                password_identifier:
                    description: |-
                        Identifier is the email or username of the user trying to log in.
                        This field is deprecated!
                    type: string
            required:
                - method
                - password
                - identifier
            title: Update Login Flow Password
            type: object
        UpdateLoginFlowWithTotpMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Login Flow with TOTP Method
            properties:
                csrf_token:
                    description: Sending the anti-csrf token is only required for browser login flows.
                    type: string
                method:
                    description: Method should be set to "totp" when logging in using the TOTP strategy.
                    type: string
                totp_code:
                    description: The TOTP code.
                    type: string
            required:
                - method
                - totp_code
            title: Update Login Flow Totp
            type: object
        UpdateLoginFlowWithWebAuthnMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Login Flow with WebAuthn Method
            properties:
                csrf_token:
                    description: Sending the anti-csrf token is only required for browser login flows.
                    type: string
                identifier:
                    description: Identifier is the email or username of the user trying to log in.
                    type: string
                method:
                    description: Method should be set to "webAuthn" when logging in using the WebAuthn strategy.
                    type: string
                webauthn_login:
                    description: |-
                        Login a WebAuthn Security Key

                        This must contain the ID of the WebAuthN connection.
                    type: string
            required:
                - identifier
                - method
            title: Update Login Flow WebAuthn
            type: object
        UpdateOrganisation:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                description:
                    description: Organisation description
                    format: string
                    type: string
                name:
                    description: Organisation name
                    format: string
                    type: string
            title: Update Organisation
            type: object
        UpdateRecoveryFlowBody:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Recovery Flow Request Body
            discriminator:
                mapping:
                    code: '#/components/schemas/UpdateRecoveryFlowWithCodeMethod'
                    link: '#/components/schemas/UpdateRecoveryFlowWithLinkMethod'
                propertyName: method
            oneOf:
                - $ref: '#/components/schemas/UpdateRecoveryFlowWithLinkMethod'
                - $ref: '#/components/schemas/UpdateRecoveryFlowWithCodeMethod'
            title: Update Recovery Flow Body
        UpdateRecoveryFlowWithCodeMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Recovery Flow with Code Method
            properties:
                code:
                    description: |-
                        Code from the recovery email

                        If you want to submit a code, use this field, but make sure to _not_ include the email field, as well.
                    type: string
                csrf_token:
                    description: Sending the anti-csrf token is only required for browser login flows.
                    type: string
                email:
                    description: If the email belongs to a valid account, a recovery email will be sent.
                    type: string
                method:
                    description: |-
                        Method is the method that should be used for this recovery flow

                        Allowed values are `link` and `code`.
                        link RecoveryStrategyLink
                        code RecoveryStrategyCode
                    enum:
                        - link
                        - code
                    type: string
                    x-go-enum-desc: |-
                        link RecoveryStrategyLink
                        code RecoveryStrategyCode
            required:
                - method
            title: Update Recovery Flow Code
            type: object
        UpdateRecoveryFlowWithLinkMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Recovery Flow with Link Method
            properties:
                csrf_token:
                    description: Sending the anti-csrf token is only required for browser login flows.
                    type: string
                email:
                    description: |-
                        Email to Recover
                        Needs to be set when initiating the flow. If the email is a registered recovery email, a recovery link will be sent. If the email is not known,a email with details on what happened will be sent instead.
                    format: email
                    type: string
                method:
                    description: |-
                        Method is the method that should be used for this recovery flow

                        Allowed values are `link` and `code`
                        link RecoveryStrategyLink
                        code RecoveryStrategyCode
                    enum:
                        - link
                        - code
                    type: string
                    x-go-enum-desc: |-
                        link RecoveryStrategyLink
                        code RecoveryStrategyCode
            required:
                - email
                - method
            title: Update Recovery Flow Link
            type: object
        UpdateRegistrationFlowBody:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Registration Request Body
            discriminator:
                mapping:
                    code: '#/components/schemas/UpdateRegistrationFlowWithCodeMethod'
                    oidc: '#/components/schemas/UpdateRegistrationFlowWithOidcMethod'
                    password: '#/components/schemas/UpdateRegistrationFlowWithPasswordMethod'
                    webauthn: '#/components/schemas/UpdateRegistrationFlowWithWebAuthnMethod'
                propertyName: method
            oneOf:
                - $ref: '#/components/schemas/UpdateRegistrationFlowWithPasswordMethod'
                - $ref: '#/components/schemas/UpdateRegistrationFlowWithOidcMethod'
                - $ref: '#/components/schemas/UpdateRegistrationFlowWithWebAuthnMethod'
                - $ref: '#/components/schemas/UpdateRegistrationFlowWithCodeMethod'
            title: Update Registration Flow Body
        UpdateRegistrationFlowWithCodeMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Registration Flow with Code Method
            properties:
                code:
                    description: The OTP Code sent to the user
                    type: string
                csrf_token:
                    description: The CSRF Token
                    type: string
                method:
                    description: |-
                        Method to use

                        This field must be set to `code` when using the code method.
                    type: string
                resend:
                    description: Resend restarts the flow with a new code
                    type: string
                traits:
                    description: The identity's traits
                    type: object
                transient_payload:
                    description: Transient data to pass along to any webhooks
                    type: object
            required:
                - traits
                - method
            title: Update Registration Flow Code
            type: object
        UpdateRegistrationFlowWithOidcMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Registration Flow with OpenID Connect Method
            properties:
                csrf_token:
                    description: The CSRF Token
                    type: string
                id_token:
                    description: |-
                        IDToken is an optional id token provided by an OIDC provider

                        If submitted, it is verified using the OIDC provider's public key set and the claims are used to populate
                        the OIDC credentials of the identity.
                        If the OIDC provider does not store additional claims (such as name, etc.) in the IDToken itself, you can use
                        the `traits` field to populate the identity's traits. Note, that Apple only includes the users email in the IDToken.

                        Supported providers are
                        Apple
                    type: string
                id_token_nonce:
                    description: |-
                        IDTokenNonce is the nonce, used when generating the IDToken.
                        If the provider supports nonce validation, the nonce will be validated against this value and is required.
                    type: string
                method:
                    description: |-
                        Method to use

                        This field must be set to `oidc` when using the oidc method.
                    type: string
                provider:
                    description: The provider to register with
                    type: string
                traits:
                    description: The identity traits
                    type: object
                transient_payload:
                    description: Transient data to pass along to any webhooks
                    type: object
                upstream_parameters:
                    description: |-
                        UpstreamParameters are the parameters that are passed to the upstream identity provider.

                        These parameters are optional and depend on what the upstream identity provider supports.
                        Supported parameters are:
                        `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session.
                        `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`.
                        `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
                    type: object
            required:
                - provider
                - method
            title: Update Registration Flow Oidc
            type: object
        UpdateRegistrationFlowWithPasswordMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Registration Flow with Password Method
            properties:
                csrf_token:
                    description: The CSRF Token
                    type: string
                method:
                    description: |-
                        Method to use

                        This field must be set to `password` when using the password method.
                    type: string
                password:
                    description: Password to sign the user up with
                    type: string
                traits:
                    description: The identity's traits
                    type: object
                transient_payload:
                    description: Transient data to pass along to any webhooks
                    type: object
            required:
                - password
                - traits
                - method
            title: Update Registration Flow Password
            type: object
        UpdateRegistrationFlowWithWebAuthnMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Registration Flow with WebAuthn Method
            properties:
                csrf_token:
                    description: CSRFToken is the anti-CSRF token
                    type: string
                method:
                    description: |-
                        Method

                        Should be set to "webauthn" when trying to add, update, or remove a webAuthn pairing.
                    type: string
                traits:
                    description: The identity's traits
                    type: object
                transient_payload:
                    description: Transient data to pass along to any webhooks
                    type: object
                webauthn_register:
                    description: |-
                        Register a WebAuthn Security Key

                        It is expected that the JSON returned by the WebAuthn registration process
                        is included here.
                    type: string
                webauthn_register_displayname:
                    description: |-
                        Name of the WebAuthn Security Key to be Added

                        A human-readable name for the security key which will be added.
                    type: string
            required:
                - traits
                - method
            title: Update Registration Flow WebAuthn
            type: object
        UpdateSettingsFlowBody:
            $schema: https://json-schema.org/draft/2020-12/schema
            discriminator:
                mapping:
                    password: '#/components/schemas/UpdateSettingsFlowWithPasswordMethod'
                    totp: '#/components/schemas/UpdateSettingsFlowWithTotpMethod'
                propertyName: method
            oneOf:
                - $ref: '#/components/schemas/UpdateSettingsFlowWithPasswordMethod'
                - $ref: '#/components/schemas/UpdateSettingsFlowWithTotpMethod'
            title: Update Settings Flow Body
            type: object
        UpdateSettingsFlowMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                method:
                    description: |-
                        Method

                        Should be set to password when trying to update a password.
                    type: string
            required:
                - method
            title: Update Settings Flow method
            type: object
        UpdateSettingsFlowWithPasswordMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/UpdateSettingsFlowMethod'
                - properties:
                    csrf_token:
                        description: CSRFToken is the anti-CSRF token
                        type: string
                    method:
                        const: password
                    password:
                        description: Password is the updated password
                        type: string
                  required:
                    - password
                  type: object
            description: Update Settings Flow with Password Method
            title: Update Settings Flow Password
        UpdateSettingsFlowWithTotpMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/UpdateSettingsFlowMethod'
                - properties:
                    csrf_token:
                        description: CSRFToken is the anti-CSRF token
                        type: string
                    method:
                        const: totp
                    totp_code:
                        description: ValidationTOTP must contain a valid TOTP based on the
                        type: string
                    totp_unlink:
                        description: |-
                            UnlinkTOTP if true will remove the TOTP pairing,
                            effectively removing the credential. This can be used
                            to set up a new TOTP device.
                        type: boolean
                  type: object
            description: Update Settings Flow with TOTP Method
            title: Update Settings Flow Totp
        UpdateVerificationFlowBody:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Verification Flow Request Body
            discriminator:
                mapping:
                    code: '#/components/schemas/UpdateVerificationFlowWithCodeMethod'
                    link: '#/components/schemas/UpdateVerificationFlowWithLinkMethod'
                propertyName: method
            oneOf:
                - $ref: '#/components/schemas/UpdateVerificationFlowWithLinkMethod'
                - $ref: '#/components/schemas/UpdateVerificationFlowWithCodeMethod'
            title: Update Verification Flow Body
        UpdateVerificationFlowWithCodeMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                code:
                    description: |-
                        Code from the recovery email

                        If you want to submit a code, use this field, but make sure to _not_ include the email field, as well.
                    type: string
                csrf_token:
                    description: Sending the anti-csrf token is only required for browser login flows.
                    type: string
                email:
                    description: If the email belongs to a valid account, a verifiation email will be sent.
                    type: string
                method:
                    description: |-
                        Method is the method that should be used for this verification flow

                        Allowed values are `link` and `code`.
                        link VerificationStrategyLink
                        code VerificationStrategyCode
                    enum:
                        - link
                        - code
                    type: string
                    x-go-enum-desc: |-
                        link VerificationStrategyLink
                        code VerificationStrategyCode
            required:
                - method
            title: Update Verification Flow Code
            type: object
        UpdateVerificationFlowWithLinkMethod:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Update Verification Flow with Link Method
            properties:
                csrf_token:
                    description: Sending the anti-csrf token is only required for browser login flows.
                    type: string
                email:
                    description: |-
                        Email to Verify

                        Needs to be set when initiating the flow. If the email is a registered
                        verification email, a verification link will be sent. If the email is not known,
                        a email with details on what happened will be sent instead.

                        format: email
                    type: string
                method:
                    description: |-
                        Method is the method that should be used for this verification flow

                        Allowed values are `link` and `code`
                        link VerificationStrategyLink
                        code VerificationStrategyCode
                    enum:
                        - link
                        - code
                    type: string
                    x-go-enum-desc: |-
                        link VerificationStrategyLink
                        code VerificationStrategyCode
            required:
                - email
                - method
            title: Update Verification Flow Link
            type: object
        Url:
            $schema: https://json-schema.org/draft/2020-12/schema
            example: https://domain.org/path/
            format: uri
            title: Url
            type: string
        User:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                email:
                    $ref: '#/components/schemas/Email'
                firstname:
                    description: Firstname
                    type: string
                lastname:
                    description: Lastname
                    type: string
            required:
                - email
                - firstname
                - lastname
            title: User
            type: object
        UserCreated:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/User'
                - $ref: '#/components/schemas/UserCreation'
            title: UserCreated
            type: object
        UserCreation:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                active:
                    description: Account activation/deactivation state
                    type: boolean
                createdOn:
                    $ref: '#/components/schemas/DateTime'
                id:
                    description: User ID
                    format: uuid
                    type: string
            required:
                - id
                - active
                - createdOn
            title: UserCreation
            type: object
        UserEdited:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                active:
                    description: Account activation/deactivation state
                    type: boolean
                createdOn:
                    $ref: '#/components/schemas/DateTime'
                id:
                    description: User ID
                    format: uuid
                    type: string
                updatedOn:
                    $ref: '#/components/schemas/DateTime'
            required:
                - id
                - active
                - createdOn
                - updatedOn
            title: UserEdited
            type: object
        UserInfo:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                email:
                    type: string
                firstname:
                    type: string
                lastname:
                    type: string
                sub:
                    type: string
            required:
                - sub
            title: UserInfo
            type: object
        UserInstance:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: User instance inside of a tenant
            properties:
                createdOn:
                    description: Instance creation date
                    format: date-time
                    type: string
                tenantUuid:
                    description: The tenant in which the instance is
                    format: uuid
                    type: string
                updatedOn:
                    description: Instance last update
                    format: date-time
                    type: string
                userUuid:
                    description: User UUID. Aka a user's global UUID
                    format: uuid
                    type: string
                uuid:
                    description: User Instance UUID. Aka a user's ID inside a specific tenant
                    format: uuid
                    type: string
            title: UserInstance
            type: object
        UserModified:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/User'
                - $ref: '#/components/schemas/UserEdited'
            title: UserModified
            type: object
        UserPaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/UserModified'
                        type: array
                  required:
                    - items
                  type: object
            title: UserPaginatedList
            type: object
        UserState:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                active:
                    description: Account activation/deactivation state
                    type: boolean
            required:
                - active
            title: UserState
            type: object
        UserUpdate:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/User'
                - properties:
                    active:
                        description: Account activation/deactivation state
                        type: boolean
                  required:
                    - active
                  type: object
            title: UserUpdate
            type: object
        VerifiableIdentityAddress:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: VerifiableAddress is an identity's verifiable address
            properties:
                created_at:
                    description: When this entry was created
                    example: "2014-01-01T23:28:56.782Z"
                    format: date-time
                    type: string
                id:
                    description: The ID
                    format: uuid
                    type: string
                status:
                    $ref: '#/components/schemas/IdentityVerifiableAddressStatus'
                updated_at:
                    description: When this entry was last updated
                    example: "2014-01-01T23:28:56.782Z"
                    format: date-time
                    type: string
                value:
                    description: |-
                        The address value

                        example foo@user.com
                    type: string
                verified:
                    description: Indicates if the address has already been verified
                    example: true
                    type: boolean
                verified_at:
                    $ref: '#/components/schemas/NullTime'
                via:
                    description: The delivery method
                    enum:
                        - email
                        - sms
                    example: email
                    type: string
            required:
                - value
                - verified
                - via
                - status
            title: Verifiable Identity Address
            type: object
        VerificationFlow:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Used to verify an out-of-band communication channel such as an email address or a phone number.
            properties:
                active:
                    description: |-
                        Active, if set, contains the registration method that is being used. It is initially
                        not set.
                    type: string
                expires_at:
                    description: |-
                        ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address,
                        a new request has to be initiated.
                    format: date-time
                    type: string
                id:
                    description: ID represents the request's unique ID.
                    format: uuid
                    type: string
                issued_at:
                    description: IssuedAt is the time (UTC) when the request occurred.
                    format: date-time
                    type: string
                request_url:
                    description: RequestURL is the initial URL that was requested. It can be used to forward information contained in the URL's path or query for example.
                    type: string
                return_to:
                    description: ReturnTo contains the requested return_to URL.
                    type: string
                state:
                    description: |-
                        State represents the state of this request:

                        choose_method: ask the user to choose a method (e.g. verify your email)
                        sent_email: the email has been sent to the user
                        passed_challenge: the request was successful and the verification challenge was passed.
                type:
                    $ref: '#/components/schemas/SelfServiceFlowType'
                ui:
                    $ref: '#/components/schemas/UiContainer'
            required:
                - id
                - type
                - ui
                - state
            title: Verification Flow
            type: object
        VerifyRoot:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                context:
                    $ref: '#/components/schemas/VerifyRootContext'
            required:
                - context
            title: Verify
            type: object
        VerifyRootContext:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Object describing the context of the service's call
            properties:
                accessToken:
                    type: string
                action:
                    description: Action describing the operation being performed on the resource
                    type: string
            required:
                - accessToken
                - action
            title: VerifyContext
            type: object
        Violation:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                description:
                    description: A description of why the field is violated.
                    type: string
                field:
                    description: The field impacted by the violation.
                    type: string
            required:
                - field
                - description
            title: Violation
            type: object
        WebAuthnJavaScript:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                created_at:
                    format: date-time
                    type: string
                id:
                    format: uuid
                    type: string
                name:
                    type: string
                subscription_id:
                    $ref: '#/components/schemas/NullUUID'
                updated_at:
                    format: date-time
                    type: string
            required:
                - id
                - name
                - created_at
                - updated_at
            title: WebAuthnJavaScript
            type: object
    securitySchemes:
        BasicAuth:
            scheme: basic
            type: http
        BearerAuth:
            bearerFormat: JWT
            scheme: bearer
            type: http
