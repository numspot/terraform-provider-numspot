openapi: 3.1.0
info:
    title: Identity and access management
    version: 1.0.0
servers:
    - url: https://cloud-iam-gateway.{env}.{region}.numspot.internal
      variables:
        env:
            default: zex-dev
            description: Environment
            enum:
                - zex-dev
                - zex-integ
                - zex-preprod
                - zex-prod
        region:
            default: cloudgouv-eu-west-1
            description: Region
            enum:
                - eu-west-2
                - cloudgouv-eu-west-1
paths:
    /iam/admin/organisations/{organisationId}/spaces/{spaceId}/serviceAccounts:
        post:
            description: Create a new administrator service account.
            operationId: CreateAdminServiceAccountSpace
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/SpaceId'
            requestBody:
                $ref: '#/components/requestBodies/CreateServiceAccountRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateServiceAccount201Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    iam.space.createAdmin:
                        cardinality: SINGLE
                        location: spaceId
                        locationType: PATH
                tenant-path-name: organisationId
    /iam/bootstrap:
        post:
            description: Bootstrap system
            operationId: Bootstrap
            responses:
                "200":
                    $ref: '#/components/responses/Bootstrap200Response'
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: already exists
            security: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - Bootstrap
            x-numspot-internal: true
    /iam/bulk/notify:
        post:
            description: Bulk Notify the creation or deletion of a list of objects based on provided context attributes
            operationId: BulkNotifyObjectLifecycleChange
            requestBody:
                $ref: '#/components/requestBodies/BulkNotifyRequest'
            responses:
                "201":
                    description: Access is allowed based on the provided context
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Notify
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: CREATE
                path-with-tenant: false
    /iam/internal/admin/permissions:
        get:
            description: List permissions
            operationId: ListPermissions
            parameters:
                - $ref: '#/components/parameters/ListPermissionsPage'
            responses:
                "200":
                    $ref: '#/components/responses/Permissions200Response'
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
                scopes-details:
                    iam.admin.get: null
        post:
            description: Create permission
            operationId: CreatePermission
            requestBody:
                $ref: '#/components/requestBodies/PermissionRequest'
            responses:
                "200":
                    $ref: '#/components/responses/PermissionCreated200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid permission
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: CREATE
                path-with-tenant: false
                scopes-details:
                    iam.admin.create: null
    /iam/internal/admin/permissions/{permissionUuid}:
        delete:
            description: Delete permission
            operationId: DeletePermission
            parameters:
                - $ref: '#/components/parameters/PermissionUuid'
            responses:
                "204":
                    description: Permission deleted
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: DELETE
                path-with-tenant: false
                scopes-details:
                    iam.admin.delete: null
        get:
            description: Get permission
            operationId: GetPermission
            parameters:
                - $ref: '#/components/parameters/PermissionUuid'
            responses:
                "200":
                    $ref: '#/components/responses/PermissionCreated200Response'
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Permission not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
                scopes-details:
                    iam.admin.get: null
        patch:
            description: Update permission. To set resource or subResource as NULL, send an empty string.
            operationId: UpdatePermission
            parameters:
                - $ref: '#/components/parameters/PermissionUuid'
            requestBody:
                $ref: '#/components/requestBodies/PatchPermissionRequest'
            responses:
                "204":
                    description: Permission update
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid permission
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Permission not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
                path-with-tenant: false
                scopes-details:
                    iam.admin.update: null
    /iam/internal/admin/replicate/{tenantUuid}:
        post:
            description: Replicate Roles and Permissions for Tenant ID
            operationId: ReplicateRolesPermissions
            parameters:
                - $ref: '#/components/parameters/TenantUuid'
            responses:
                "201":
                    description: Replication started
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Tenant ID
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Tenant not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Replication
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: CREATE
                path-with-tenant: false
                scopes-details:
                    iam.admin.create: null
    /iam/internal/admin/roles:
        get:
            description: List roles
            operationId: ListRoles
            parameters:
                - $ref: '#/components/parameters/ListRolesPage'
            responses:
                "200":
                    $ref: '#/components/responses/RoleList200Response'
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: LIST
                path-with-tenant: false
                scopes-details:
                    iam.admin.get: null
        post:
            description: Create role
            operationId: CreateRole
            requestBody:
                $ref: '#/components/requestBodies/RoleRequest'
            responses:
                "200":
                    $ref: '#/components/responses/RoleCreated200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: CREATE
                path-with-tenant: false
                scopes-details:
                    iam.admin.create: null
    /iam/internal/admin/roles/{roleUuid}:
        delete:
            description: Delete role
            operationId: DeleteRole
            parameters:
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "204":
                    description: Role deleted
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: DELETE
                path-with-tenant: false
                scopes-details:
                    iam.admin.delete: null
        get:
            description: Get role
            operationId: GetRole
            parameters:
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "200":
                    $ref: '#/components/responses/RoleCreated200Response'
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
                scopes-details:
                    iam.admin.get: null
        patch:
            description: Update role
            operationId: UpdateRole
            parameters:
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/PatchRoleRequest'
            responses:
                "204":
                    description: Role updated
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
                path-with-tenant: false
                scopes-details:
                    iam.admin.update: null
    /iam/internal/admin/roles/{roleUuid}/permissions:
        delete:
            description: Remove permissions from a role
            operationId: RemoveRolePermissions
            parameters:
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/RemoveGlobalRolePermissionsRequest'
            responses:
                "204":
                    description: Permission removed
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: DELETE
                path-with-tenant: false
                scopes-details:
                    iam.admin.delete: null
        get:
            description: Get a role's permissions
            operationId: GetRolePermissions
            parameters:
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "200":
                    $ref: '#/components/responses/Permissions200Response'
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
                scopes-details:
                    iam.admin.get: null
        patch:
            description: Add permissions to a role
            operationId: AddRolePermissions
            parameters:
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/AddGlobalRolePermissionsRequest'
            responses:
                "204":
                    description: Permission added
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
                path-with-tenant: false
                scopes-details:
                    iam.admin.update: null
    /iam/listbyaccess:
        post:
            description: Returns a list of items, of the specified type, that the identity is authorized to access
            operationId: ListObjectsByAccess
            parameters:
                - $ref: '#/components/parameters/ListByAccessPage'
            requestBody:
                $ref: '#/components/requestBodies/ListObjectsByAccessRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ListObjectsByAccess200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ListByAccess
            x-numspot-internal: true
    /iam/notify:
        post:
            description: Notify the creation or deletion of an object based on provided context attributes
            operationId: NotifyObjectLifecycleChange
            requestBody:
                $ref: '#/components/requestBodies/NotifyRequest'
            responses:
                "201":
                    description: Access is allowed based on the provided context
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Notify
            x-numspot-internal: true
    /iam/notify/tenant:
        post:
            description: Notify the creation or deletion of a tenant based on provided context attributes
            operationId: NotifyTenantLifecycleChange
            requestBody:
                $ref: '#/components/requestBodies/NotifyTenantLifecycleChangeRequest'
            responses:
                "200":
                    description: Access is allowed based on the provided context
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://tenant-manager:8000
                - url: /
            tags:
                - TenantNotify
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
    /iam/notify/user:
        post:
            description: Notify the creation or deletion of a user based on provided context attributes
            operationId: NotifyUserLifecycleChange
            requestBody:
                $ref: '#/components/requestBodies/NotifyUserLifecycleChangeRequest'
            responses:
                "200":
                    description: Access is allowed based on the provided context
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://tenant-manager:8000
                - url: /
            tags:
                - TenantNotify
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
    /iam/openIdIdentity:
        get:
            description: get identities list
            operationId: OpenIdIdentityList
            parameters:
                - in: query
                  name: clientName
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/OpenIdIdentityList200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Identity not found.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - AuthIdentities
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
                scopes-details:
                    identity.openId.get: null
        post:
            description: create a new openId identity
            operationId: OpenIdIdentityCreate
            requestBody:
                $ref: '#/components/requestBodies/OpenIdIdentityCreateRequest'
            responses:
                "200":
                    $ref: '#/components/responses/OpenIdIdentityCreate200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - AuthIdentities
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: CREATE
                path-with-tenant: false
                scopes-details:
                    identity.openId.create: null
    /iam/openIdIdentity/{id}:
        delete:
            description: delete an identity
            operationId: OpenIdIdentityDelete
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    format: uuid
                    type: string
            responses:
                "204":
                    description: Identity updated.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Identity not found.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - AuthIdentities
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: DELETE
                path-with-tenant: false
                scopes-details:
                    identity.openId.delete: null
        get:
            description: get a new identity
            operationId: OpenIdIdentityGet
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    format: uuid
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/OpenIdIdentityGet200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Identity not found.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - AuthIdentities
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
                scopes-details:
                    identity.openId.get: null
        patch:
            description: patch an identity
            operationId: OpenIdIdentityPatch
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    format: uuid
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/OpenIdIdentityCreateRequest'
            responses:
                "200":
                    $ref: '#/components/responses/OpenIdIdentityPatch200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Identity not found.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - AuthIdentities
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
                path-with-tenant: false
                scopes-details:
                    identity.openId.patch: null
    /iam/organisations:
        get:
            description: Get a list of organisations assigned to an identity.
            operationId: ListOrganisationsIdentity
            parameters:
                - $ref: '#/components/parameters/ListUserOrganisations'
            responses:
                "200":
                    $ref: '#/components/responses/ListUserOrganisations200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: UUID in parameters are malformed. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: User or organisation not found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Identity
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
    /iam/organisations/{organisationId}/{subjectType}/{subjectId}/acl:
        get:
            description: Retrieve the ACLs assigned to a specific subject for a specific object type.
            operationId: GetACLOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
                - in: query
                  name: service
                  required: true
                  schema:
                    type: string
                - in: query
                  name: resource
                  required: true
                  schema:
                    type: string
                - in: query
                  name: subresource
                  required: false
                  schema:
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/GetACL200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: READ
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/{subjectType}/{subjectId}/bulk/acl:
        delete:
            description: delete an ACLs between a subject and a resource.
            operationId: DeleteACLOrganisationBulk
            requestBody:
                $ref: '#/components/requestBodies/DeleteACLRequest'
            responses:
                "204":
                    description: acl deleted.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: DELETE
                tenant-path-name: organisationId
        parameters:
            - $ref: '#/components/parameters/OrganisationId'
            - $ref: '#/components/parameters/SubjectTypeParam'
            - $ref: '#/components/parameters/SubjectId'
        post:
            description: Create an ACLs between a subject and a resource.
            operationId: CreateACLOrganisationBulk
            requestBody:
                $ref: '#/components/requestBodies/SetACLRequest'
            responses:
                "201":
                    description: acl created.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: CREATE
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/iamgranularPolicy/{subjectType}/{subjectId}/{objectType}:
        get:
            deprecated: true
            description: Retrieve the granular policy assigned to a specific subject for a specific object type.
            operationId: GetIAMGranularPolicyOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
                - $ref: '#/components/parameters/ObjectType'
            responses:
                "200":
                    $ref: '#/components/responses/GetIAMGranularPolicy200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: READ
                tenant-path-name: organisationId
        patch:
            deprecated: true
            description: Modify the IAM policy by adding or removing granular permissions for a specific object type. If the policy does not exist, it will be implicitly created
            operationId: SetIAMGranularPolicyOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
                - $ref: '#/components/parameters/ObjectType'
            requestBody:
                $ref: '#/components/requestBodies/SetIAMGranularPolicyRequest'
            responses:
                "204":
                    description: policy set
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Subject not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: UPDATE
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/iampolicy/{subjectType}/{subjectId}:
        get:
            description: Retrieve the policy assigned to a specific subject
            operationId: GetIAMPolicyOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
            responses:
                "200":
                    $ref: '#/components/responses/GetIAMPolicy200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.getPolicy: null
                tenant-path-name: organisationId
        patch:
            description: Modify the IAM policy by adding or removing roles and permissions. If the policy does not exist, it will be implicitly created
            operationId: SetIAMPolicyOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
            requestBody:
                $ref: '#/components/requestBodies/SetIAMPolicyRequest'
            responses:
                "204":
                    description: policy set
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Subject not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.createPolicy: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/permissions:
        get:
            description: List permissions
            operationId: ListPermissionsOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/Service'
                - $ref: '#/components/parameters/Resource'
                - $ref: '#/components/parameters/SubResource'
                - $ref: '#/components/parameters/Action'
                - $ref: '#/components/parameters/ListPermissionsPage'
            responses:
                "200":
                    $ref: '#/components/responses/ListPermissions200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.permission.get: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/permissions/{permissionUuid}:
        get:
            description: Get permission
            operationId: GetPermissionOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/PermissionUuid'
            responses:
                "200":
                    $ref: '#/components/responses/GetPermission200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Permission not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.permission.get: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/roles:
        get:
            description: List roles
            operationId: ListRolesOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/RoleName'
                - $ref: '#/components/parameters/ListRolesPage'
            responses:
                "200":
                    $ref: '#/components/responses/ListRoles200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No such role
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.role.get: null
                tenant-path-name: organisationId
        post:
            description: Create role
            operationId: CreateRoleOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            requestBody:
                $ref: '#/components/requestBodies/CreateRoleRequest'
            responses:
                "200":
                    $ref: '#/components/responses/CreateRole200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: uuid
                    locationType: BODY_JSON
                    type: iam.role
                scopes-details:
                    iam.role.create: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/roles/{roleUuid}:
        delete:
            description: Delete role
            operationId: DeleteRoleOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "204":
                    description: Role deleted
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: DELETE
                operation-output:
                    cardinality: SINGLE
                    location: iam.role.delete
                    locationType: SCOPE
                    type: iam.role
                scopes-details:
                    iam.role.delete: null
                tenant-path-name: organisationId
        get:
            description: Get role
            operationId: GetRoleOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "200":
                    $ref: '#/components/responses/GetRole200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.role.get: null
                tenant-path-name: organisationId
        patch:
            description: Update role
            operationId: UpdateRoleOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/UpdateRoleRequest'
            responses:
                "204":
                    description: Role updated
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.role.update: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/roles/{roleUuid}/permissions:
        delete:
            description: Remove permissions from a role
            operationId: RemoveRolePermissionsOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/RemoveRolePermissionsRequest'
            responses:
                "204":
                    description: Permission removed
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.role.delete: null
                tenant-path-name: organisationId
        get:
            description: Get a role's permissions
            operationId: GetRolePermissionsOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "200":
                    $ref: '#/components/responses/GetRolePermissions200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.role.get: null
                tenant-path-name: organisationId
        patch:
            description: Add permissions to a role
            operationId: AddRolePermissionsOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/AddRolePermissionsRequest'
            responses:
                "204":
                    description: Permission added
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role(s) and/or permission(s)
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.role.get: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/serviceAccounts:
        get:
            description: List an existing service account.
            operationId: ListServiceAccountOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/ListServiceAccounts'
            requestBody:
                $ref: '#/components/requestBodies/ListIdentitiesByAccessRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ListServiceAccount200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                list-propagation:
                    location: items
                    locationType: BODY_JSON
                    resourceType: identity.serviceAccount
                operation-action: LIST
                tenant-path-name: organisationId
        post:
            description: Create a new service account.
            operationId: CreateServiceAccountOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            requestBody:
                $ref: '#/components/requestBodies/CreateServiceAccountRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateServiceAccount201Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.serviceAccount.create: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/serviceAccounts/{serviceAccountId}:
        delete:
            description: Delete an existing service account
            operationId: DeleteServiceAccountOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/ServiceAccountId'
            responses:
                "204":
                    description: Service account deleted
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    identity.serviceAccount.delete:
                        cardinality: SINGLE
                        location: serviceAccountId
                        locationType: PATH
                tenant-path-name: organisationId
        get:
            description: Retrieve an existing service account.
            operationId: GetServiceAccountOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/ServiceAccountId'
            responses:
                "200":
                    $ref: '#/components/responses/GetServiceAccount200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    identity.serviceAccount.get:
                        cardinality: SINGLE
                        location: serviceAccountId
                        locationType: PATH
                tenant-path-name: organisationId
        put:
            description: Update an existing service account.
            operationId: UpdateServiceAccountOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/ServiceAccountId'
            requestBody:
                $ref: '#/components/requestBodies/UpdateServiceAccountRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateServiceAccount200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    identity.serviceAccount.update:
                        cardinality: SINGLE
                        location: serviceAccountId
                        locationType: PATH
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/serviceAccounts/{serviceAccountId}/spaces:
        get:
            description: Get a list of spaces assigned to a service account within an organisation.
            operationId: ListSpacesOfServiceAccount
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/ServiceAccountId'
                - $ref: '#/components/parameters/ListSpacesOfServiceAccount'
            responses:
                "200":
                    $ref: '#/components/responses/ListSpacesServiceAccount200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: UUID in parameters are malformed. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: User or organisation not found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: LIST
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/spaces:
        get:
            description: Get a list of spaces assigned to an identity within an organisation.
            operationId: ListSpacesIdentity
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/ListSpacesIdentity'
            responses:
                "200":
                    $ref: '#/components/responses/ListSpacesIdentity200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: UUID in parameters are malformed. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: User or organisation not found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Identity
            x-numspot-permissions:
                operation-action: LIST
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/users:
        get:
            description: List users or get an existing user by email.
            operationId: ListUserOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/UserEmail'
                - $ref: '#/components/parameters/ListUser'
            requestBody:
                $ref: '#/components/requestBodies/ListIdentitiesByAccessRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ListUser200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                list-propagation:
                    location: items
                    locationType: BODY_JSON
                    resourceType: identity.user
                operation-action: LIST
                tenant-path-name: organisationId
        post:
            description: Create a new user.
            operationId: CreateUserOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            requestBody:
                $ref: '#/components/requestBodies/CreateUserRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateUser201Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.user.create: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/users/{userId}:
        delete:
            description: Delete an existing user
            operationId: DeleteUserOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/UserId'
            responses:
                "204":
                    description: User deleted
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    identity.user.delete:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
                tenant-path-name: organisationId
        get:
            description: Retrieve an existing user
            operationId: GetUserOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/UserId'
            responses:
                "200":
                    $ref: '#/components/responses/GetUser200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    identity.user.get:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
                tenant-path-name: organisationId
        patch:
            description: Patch user state within an space.
            operationId: PatchUserStateOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/UserId'
            requestBody:
                $ref: '#/components/requestBodies/PatchUserStateRequest'
            responses:
                "200":
                    $ref: '#/components/responses/PatchUserState200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    identity.user.update:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
                tenant-path-name: organisationId
        put:
            description: Update an existing user
            operationId: UpdateUserOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/UserId'
            requestBody:
                $ref: '#/components/requestBodies/UpdateUserRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateUser200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    identity.user.update:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/users/{userId}/recover:
        post:
            description: Generate a recovery link to let the user set his password / totp
            operationId: RecoverUserOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/UserId'
            responses:
                "200":
                    $ref: '#/components/responses/RecoverUser200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.user.recover: null
                tenant-path-name: organisationId
    /iam/organisations/{organisationId}/users/{userId}/spaces:
        get:
            description: Get a list of spaces assigned to a user within an organisation.
            operationId: ListSpacesOfUser
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/UserId'
                - $ref: '#/components/parameters/ListSpacesOfUser'
            responses:
                "200":
                    $ref: '#/components/responses/ListSpacesUser200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: UUID in parameters are malformed. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: User or organisation not found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: LIST
                tenant-path-name: organisationId
    /iam/root/verify:
        post:
            description: todo
            operationId: VerifyRootAccess
            requestBody:
                $ref: '#/components/requestBodies/VerifyRootAccessRequest'
            responses:
                "200":
                    description: Access is allowed based on the provided context
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - Verify Root
            x-numspot-internal: true
    /iam/serviceAccountNS:
        post:
            description: ServiceAccountNS create
            operationId: CreateServiceAccountNS
            requestBody:
                $ref: '#/components/requestBodies/CreateServiceAccountNSRequest'
            responses:
                "200":
                    $ref: '#/components/responses/CreateServiceAccountNS200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - ServiceAccountNS
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: CREATE
                path-with-tenant: false
                scopes-details:
                    identity.san.create: null
    /iam/serviceAccountNS/{sanId}/iampolicy:
        get:
            description: ServiceAccountNS IAMPolicy
            operationId: GetRootIAMPolicy
            parameters:
                - in: path
                  name: sanId
                  required: true
                  schema:
                    format: uuid
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/GetRootIAMPolicy200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - ServiceAccountNS
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
                scopes-details:
                    identity.san.getIAMPolicy: null
    /iam/serviceAccountNS/iampolicy:
        patch:
            description: ServiceAccountNS IAMPolicy
            operationId: PatchRootIAMPolicy
            requestBody:
                $ref: '#/components/requestBodies/PatchRootIAMPolicyRequest'
            responses:
                "204":
                    description: Identity updated.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://root-manager:8000
                - url: /
            tags:
                - ServiceAccountNS
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
                path-with-tenant: false
                scopes-details:
                    identity.san.setIAMPolicy: null
    /iam/spaces/{spaceId}/{subjectType}/{subjectId}/acl:
        get:
            description: Retrieve the ACLs assigned to a specific subject for a specific object type.
            operationId: GetACLSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
                - in: query
                  name: service
                  required: true
                  schema:
                    type: string
                - in: query
                  name: resource
                  required: true
                  schema:
                    type: string
                - in: query
                  name: subresource
                  required: false
                  schema:
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/GetACL200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: READ
    /iam/spaces/{spaceId}/{subjectType}/{subjectId}/bulk/acl:
        delete:
            description: delete an ACLs between a subject and a resource.
            operationId: DeleteACLSpaceBulk
            requestBody:
                $ref: '#/components/requestBodies/DeleteACLRequest'
            responses:
                "204":
                    description: acl deleted.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: DELETE
        parameters:
            - $ref: '#/components/parameters/SpaceId'
            - $ref: '#/components/parameters/SubjectTypeParam'
            - $ref: '#/components/parameters/SubjectId'
        post:
            description: Create an ACLs between a subject and a resource.
            operationId: CreateACLSpaceBulk
            requestBody:
                $ref: '#/components/requestBodies/SetACLRequest'
            responses:
                "201":
                    description: acl created.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - ACL
            x-numspot-permissions:
                operation-action: CREATE
    /iam/spaces/{spaceId}/iamgranularPolicy/{subjectType}/{subjectId}/{objectType}:
        get:
            deprecated: true
            description: Retrieve the granular policy assigned to a specific subject for a specific object type.
            operationId: GetIAMGranularPolicySpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
                - $ref: '#/components/parameters/ObjectType'
            responses:
                "200":
                    $ref: '#/components/responses/GetIAMGranularPolicy200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: READ
        patch:
            deprecated: true
            description: Modify the IAM policy by adding or removing granular permissions for a specific object type. If the policy does not exist, it will be implicitly created
            operationId: SetIAMGranularPolicySpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
                - $ref: '#/components/parameters/ObjectType'
            requestBody:
                $ref: '#/components/requestBodies/SetIAMGranularPolicyRequest'
            responses:
                "204":
                    description: policy set
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Subject not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: UPDATE
    /iam/spaces/{spaceId}/iampolicy/{subjectType}/{subjectId}:
        get:
            description: Retrieve the policy assigned to a specific subject
            operationId: GetIAMPolicySpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
            responses:
                "200":
                    $ref: '#/components/responses/GetIAMPolicy200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No IAM policy found for the given subject.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.getPolicy: null
        patch:
            description: Modify the IAM policy by adding or removing roles and permissions. If the policy does not exist, it will be implicitly created
            operationId: SetIAMPolicySpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/SubjectTypeParam'
                - $ref: '#/components/parameters/SubjectId'
            requestBody:
                $ref: '#/components/requestBodies/SetIAMPolicyRequest'
            responses:
                "204":
                    description: policy set
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Subject not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - IAMPolicy
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.createPolicy: null
    /iam/spaces/{spaceId}/permissions:
        get:
            description: List permissions
            operationId: ListPermissionsSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/Service'
                - $ref: '#/components/parameters/Resource'
                - $ref: '#/components/parameters/SubResource'
                - $ref: '#/components/parameters/Action'
                - $ref: '#/components/parameters/ListPermissionsPage'
            responses:
                "200":
                    $ref: '#/components/responses/ListPermissions200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.permission.get: null
    /iam/spaces/{spaceId}/permissions/{permissionUuid}:
        get:
            description: Get permission
            operationId: GetPermissionSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/PermissionUuid'
            responses:
                "200":
                    $ref: '#/components/responses/GetPermission200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Permission not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Permissions
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.permission.get: null
    /iam/spaces/{spaceId}/roles:
        get:
            description: List roles
            operationId: ListRolesSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/RoleName'
                - $ref: '#/components/parameters/ListRolesPage'
            responses:
                "200":
                    $ref: '#/components/responses/ListRoles200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No such role
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.role.get: null
        post:
            description: Create role
            operationId: CreateRoleSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
            requestBody:
                $ref: '#/components/requestBodies/CreateRoleRequest'
            responses:
                "200":
                    $ref: '#/components/responses/CreateRole200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: uuid
                    locationType: BODY_JSON
                    type: iam.role
                scopes-details:
                    iam.role.create: null
    /iam/spaces/{spaceId}/roles/{roleUuid}:
        delete:
            description: Delete role
            operationId: DeleteRoleSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "204":
                    description: Role deleted
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: DELETE
                operation-output:
                    cardinality: SINGLE
                    location: iam.role.delete
                    locationType: SCOPE
                    type: iam.role
                scopes-details:
                    iam.role.delete: null
        get:
            description: Get role
            operationId: GetRoleSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "200":
                    $ref: '#/components/responses/GetRole200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.role.get: null
        patch:
            description: Update role
            operationId: UpdateRoleSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/UpdateRoleRequest'
            responses:
                "204":
                    description: Role updated
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.role.update: null
    /iam/spaces/{spaceId}/roles/{roleUuid}/permissions:
        delete:
            description: Remove permissions from a role
            operationId: RemoveRolePermissionsSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/RemoveRolePermissionsRequest'
            responses:
                "204":
                    description: Permission removed
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.role.update: null
        get:
            description: Get a role's permissions
            operationId: GetRolePermissionsSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/RoleUuid'
            responses:
                "200":
                    $ref: '#/components/responses/GetRolePermissions200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.role.get: null
        patch:
            description: Add permissions to a role
            operationId: AddRolePermissionsSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/RoleUuid'
            requestBody:
                $ref: '#/components/requestBodies/AddRolePermissionsRequest'
            responses:
                "204":
                    description: Permission added
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid role(s) and/or permission(s)
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Role not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Roles
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.role.update: null
    /iam/spaces/{spaceId}/serviceAccounts:
        get:
            description: List an existing service account.
            operationId: ListServiceAccountSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/ListServiceAccounts'
            requestBody:
                $ref: '#/components/requestBodies/ListIdentitiesByAccessRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ListServiceAccount200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                list-propagation:
                    location: items
                    locationType: BODY_JSON
                    resourceType: identity.serviceAccount
                operation-action: LIST
        post:
            description: Create a new service account.
            operationId: CreateServiceAccountSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
            requestBody:
                $ref: '#/components/requestBodies/CreateServiceAccountRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateServiceAccount201Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.serviceAccount.create: null
    /iam/spaces/{spaceId}/serviceAccounts/{serviceAccountId}:
        delete:
            description: Delete an existing service account
            operationId: DeleteServiceAccountSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/ServiceAccountId'
            responses:
                "204":
                    description: Service account deleted
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    identity.serviceAccount.delete:
                        cardinality: SINGLE
                        location: serviceAccountId
                        locationType: PATH
        get:
            description: Retrieve an existing service account.
            operationId: GetServiceAccountSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/ServiceAccountId'
            responses:
                "200":
                    $ref: '#/components/responses/GetServiceAccount200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    identity.serviceAccount.get:
                        cardinality: SINGLE
                        location: serviceAccountId
                        locationType: PATH
        post:
            description: Assign a service account to a space within an organisation.
            operationId: AssignServiceAccountToSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/ServiceAccountId'
            responses:
                "200":
                    description: Successfully assigned service account to space
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.serviceAccount.create: null
        put:
            description: Update an existing service account.
            operationId: UpdateServiceAccountSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/ServiceAccountId'
            requestBody:
                $ref: '#/components/requestBodies/UpdateServiceAccountRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateServiceAccount200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Service Accounts
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    identity.serviceAccount.update:
                        cardinality: SINGLE
                        location: serviceAccountId
                        locationType: PATH
    /iam/spaces/{spaceId}/users:
        get:
            description: List users or get an existing user by email.
            operationId: ListUserSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/UserEmail'
                - $ref: '#/components/parameters/ListUser'
            requestBody:
                $ref: '#/components/requestBodies/ListIdentitiesByAccessRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ListUser200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                list-propagation:
                    location: items
                    locationType: BODY_JSON
                    resourceType: identity.user
                operation-action: LIST
        post:
            description: Create a new user.
            operationId: CreateUserSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
            requestBody:
                $ref: '#/components/requestBodies/CreateUserRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateUser201Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.user.create: null
    /iam/spaces/{spaceId}/users/{userId}:
        delete:
            description: Delete an existing user
            operationId: DeleteUserSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/UserId'
            responses:
                "204":
                    description: User deleted
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    identity.user.delete:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
        get:
            description: Retrieve an existing user
            operationId: GetUserSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/UserId'
            responses:
                "200":
                    $ref: '#/components/responses/GetUser200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    identity.user.get:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
        patch:
            description: Patch user state within space.
            operationId: PatchUserStateSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/UserId'
            requestBody:
                $ref: '#/components/requestBodies/PatchUserStateRequest'
            responses:
                "200":
                    $ref: '#/components/responses/PatchUserState200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occurred during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    identity.user.update:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
        post:
            description: Assign a user to a space within an organisation.
            operationId: AssignUserToSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/UserId'
            responses:
                "200":
                    description: Successfully assigned user to space
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.user.create: null
        put:
            description: Update an existing user
            operationId: UpdateUserSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/UserId'
            requestBody:
                $ref: '#/components/requestBodies/UpdateUserRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateUser200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. See details in the error response
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Conflict. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    identity.user.update:
                        cardinality: SINGLE
                        location: userId
                        locationType: PATH
    /iam/spaces/{spaceId}/users/{userId}/recover:
        post:
            description: Generate a recovery link to let the user set his password / totp
            operationId: RecoverUserSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
                - $ref: '#/components/parameters/UserId'
            responses:
                "200":
                    $ref: '#/components/responses/RecoverUser200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized. See details in the error response
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Forbidden. See details in the error response
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Not Found. See details in the error response
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal Server Error. An error occured during the operation execution. See details in the error response
            security:
                - BearerAuth: []
            servers:
                - url: http://identity-manager:8000
                - url: /
            tags:
                - Users
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    identity.user.create: null
    /iam/tenants/{tenantId}/users/{userId}:
        get:
            description: Get a user instance id from a user id
            operationId: UserPtrIdFromUserId
            parameters:
                - $ref: '#/components/parameters/TenantId'
                - in: path
                  name: userId
                  required: true
                  schema:
                    format: uuid
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/UserPtrIdFromUserId200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. One of the UUIDs is malformed.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://tenant-manager:8000
                - url: /
            tags:
                - Objects
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
    /iam/verify:
        post:
            description: Verify if a subject is allowed to access a resource based on the provided context attributes
            operationId: VerifyAccess
            requestBody:
                $ref: '#/components/requestBodies/VerifyRequest'
            responses:
                "201":
                    description: Access is allowed based on the provided context
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request. Invalid input provided.
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: inactive token
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Access is forbidden based on the provided context
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: permission not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security: []
            servers:
                - url: http://access-manager:8000
                - url: /
            tags:
                - Verify
            x-numspot-internal: true
    /organisations:
        get:
            description: List Organisations
            operationId: ListOrganisations
            parameters:
                - $ref: '#/components/parameters/ListOrganisationsPage'
            requestBody:
                $ref: '#/components/requestBodies/ListOrganisationIdsRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ListOrganisations200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Space
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://organisation-manager:8000
                - url: /
            tags:
                - Organisations
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                path-with-tenant: false
        post:
            description: Create Organisation
            operationId: CreateOrganisation
            requestBody:
                $ref: '#/components/requestBodies/CreateOrganisationRequest'
            responses:
                "200":
                    $ref: '#/components/responses/CreateOrganisation200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Mail already in use.
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://organisation-manager:8000
                - url: /
            tags:
                - Organisations
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: CREATE
                path-with-tenant: false
    /organisations/{organisationId}:
        delete:
            description: Delete Organisation
            operationId: DeleteOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            responses:
                "204":
                    description: Organisation deleted
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Space
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No such organisation
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://organisation-manager:8000
                - url: /
            tags:
                - Organisations
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: DELETE
                tenant-path-name: organisationId
        get:
            description: Get Organisation
            operationId: GetOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            responses:
                "200":
                    $ref: '#/components/responses/GetOrganisation200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Space
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No such organisation
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://organisation-manager:8000
                - url: /
            tags:
                - Organisations
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                tenant-path-name: organisationId
        patch:
            description: Update Organisation
            operationId: UpdateOrganisation
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            requestBody:
                $ref: '#/components/requestBodies/UpdateOrganisationRequest'
            responses:
                "204":
                    description: Organisation updated
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Space
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No such organisation
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://organisation-manager:8000
                - url: /
            tags:
                - Organisations
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: UPDATE
                tenant-path-name: organisationId
    /organisations/{organisationId}/spaces:
        get:
            description: List spaces
            operationId: ListSpaces
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
                - $ref: '#/components/parameters/ListSpacesPage'
            requestBody:
                $ref: '#/components/requestBodies/ListSpaceIdsRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ListSpaces200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Bad request
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No such Space
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://space-manager:8000
                - url: https://space-manager.zex-{env}.cloudgouv-eu-west-1.numspot.internal
                  variables:
                    env:
                        default: dev
                        enum:
                            - dev
                            - integ
                - url: http://localhost:8000
                - url: /
            tags:
                - Spaces
            x-numspot-permissions:
                list-propagation:
                    location: items
                    locationType: BODY_JSON
                    resourceType: iam.space
                operation-action: LIST
                tenant-path-name: organisationId
        post:
            description: Create Space
            operationId: CreateSpace
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            requestBody:
                $ref: '#/components/requestBodies/CreateSpaceRequest'
            responses:
                "200":
                    $ref: '#/components/responses/CreateSpace200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Space
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://space-manager:8000
                - url: https://space-manager.zex-{env}.cloudgouv-eu-west-1.numspot.internal
                  variables:
                    env:
                        default: dev
                        enum:
                            - dev
                            - integ
                - url: http://localhost:8000
                - url: /
            tags:
                - Spaces
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    iam.space.create: null
                tenant-path-name: organisationId
    /organisations/{organisationId}/status:
        get:
            description: Get Organisation creation status
            operationId: GetOrganisationStatus
            parameters:
                - $ref: '#/components/parameters/OrganisationId'
            responses:
                "200":
                    $ref: '#/components/responses/GetOrganisationStatus200Response'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Space
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: No such organisation
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://organisation-manager:8000
                - url: /
            tags:
                - Organisations
            x-numspot-internal: true
            x-numspot-permissions:
                operation-action: READ
                tenant-path-name: organisationId
    /organisations/spaces/{spaceId}:
        delete:
            description: Delete Space
            operationId: DeleteSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
            responses:
                "204":
                    description: Space deleted
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Space not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://space-manager:8000
                - url: https://space-manager.zex-{env}.cloudgouv-eu-west-1.numspot.internal
                  variables:
                    env:
                        default: dev
                        enum:
                            - dev
                            - integ
                - url: http://localhost:8000
                - url: /
            tags:
                - Spaces
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    iam.space.get:
                        cardinality: SINGLE
                        location: spaceId
                        locationType: PATH
        get:
            description: Get Space
            operationId: GetSpaceById
            parameters:
                - $ref: '#/components/parameters/SpaceId'
            responses:
                "200":
                    $ref: '#/components/responses/GetSpaceById200Response'
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Space not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://space-manager:8000
                - url: https://space-manager.zex-{env}.cloudgouv-eu-west-1.numspot.internal
                  variables:
                    env:
                        default: dev
                        enum:
                            - dev
                            - integ
                - url: http://localhost:8000
                - url: /
            tags:
                - Spaces
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    iam.space.get:
                        cardinality: SINGLE
                        location: spaceId
                        locationType: PATH
        patch:
            description: Partially update a space
            operationId: UpdateSpace
            parameters:
                - $ref: '#/components/parameters/SpaceId'
            requestBody:
                $ref: '#/components/requestBodies/UpdateSpaceRequest'
            responses:
                "204":
                    description: Space updated
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/BadRequestError'
                    description: Invalid Space
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthenticated
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Unauthorized
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Space not found
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: Internal error
            security:
                - BearerAuth: []
            servers:
                - url: http://space-manager:8000
                - url: https://space-manager.zex-{env}.cloudgouv-eu-west-1.numspot.internal
                  variables:
                    env:
                        default: dev
                        enum:
                            - dev
                            - integ
                - url: http://localhost:8000
                - url: /
            tags:
                - Spaces
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    iam.space.update:
                        cardinality: SINGLE
                        location: spaceId
                        locationType: PATH
components:
    parameters:
        Action:
            description: action the permission allows to perform
            in: query
            name: action
            required: false
            schema:
                example: get
                type: string
        ListByAccessPage:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        nullable: true
                        type: string
                    size:
                        default: 15
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 0
                        nullable: true
                        type: integer
                type: object
            style: deepObject
        ListOrganisationsPage:
            description: list Organisations paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 30
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ListPermissionsPage:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        nullable: true
                        type: string
                    size:
                        default: 15
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 0
                        nullable: true
                        type: integer
                type: object
            style: deepObject
        ListRolesPage:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        nullable: true
                        type: string
                    size:
                        default: 15
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 0
                        nullable: true
                        type: integer
                type: object
            style: deepObject
        ListServiceAccounts:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 20
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ListSpacesIdentity:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 20
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ListSpacesOfServiceAccount:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 20
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ListSpacesOfUser:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 20
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ListSpacesPage:
            description: list spaces paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 30
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ListUser:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 20
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ListUserOrganisations:
            description: Paginated request
            in: query
            name: page
            required: false
            schema:
                properties:
                    nextToken:
                        description: A page token received from a previous call. Provide this to retrieve the subsequent page.
                        type: string
                    size:
                        default: 20
                        description: The maximum number of items to return. The service may return fewer than this value.
                        format: int32
                        maximum: 50
                        minimum: 1
                        type: integer
                type: object
            style: deepObject
        ObjectType:
            description: Object Type
            in: path
            name: objectType
            required: true
            schema:
                type: string
        OrganisationId:
            description: Identifier of the Organisation
            in: path
            name: organisationId
            required: true
            schema:
                format: uuid
                type: string
        PermissionUuid:
            description: Permission ID
            in: path
            name: permissionUuid
            required: true
            schema:
                format: uuid
                type: string
        Resource:
            description: resource the permission is related to
            in: query
            name: resource
            required: false
            schema:
                example: bucket
                type: string
        RoleName:
            description: Role name
            in: query
            name: name
            schema:
                format: string
                type: string
        RoleUuid:
            description: Role ID
            in: path
            name: roleUuid
            required: true
            schema:
                format: uuid
                type: string
        Service:
            description: service the permission is related to
            in: query
            name: service
            required: false
            schema:
                example: storageblock
                type: string
        ServiceAccountId:
            description: Service account ID
            in: path
            name: serviceAccountId
            required: true
            schema:
                format: uuid
                type: string
        SpaceId:
            description: Identifier of the Space
            in: path
            name: spaceId
            required: true
            schema:
                format: uuid
                type: string
        SubResource:
            description: subresource the permission is related to
            in: query
            name: subresource
            required: false
            schema:
                example: object
                type: string
        SubjectId:
            description: Identifier of the subject of the operation.
            in: path
            name: subjectId
            required: true
            schema:
                format: uuid
                type: string
        SubjectTypeParam:
            description: The Type of the Object holding or destined to hold an IAMPolicy
            in: path
            name: subjectType
            required: true
            schema:
                $ref: '#/components/schemas/SubjectType'
        TenantId:
            description: Tenant ID
            in: path
            name: tenantId
            required: true
            schema:
                format: uuid
                type: string
        TenantUuid:
            description: tenant ID
            in: path
            name: tenantUuid
            required: true
            schema:
                format: uuid
                type: string
        UserEmail:
            description: User email
            in: query
            name: email
            schema:
                format: email
                type: string
        UserId:
            description: User account ID
            in: path
            name: userId
            required: true
            schema:
                format: uuid
                type: string
    requestBodies:
        AddGlobalRolePermissionsRequest:
            content:
                application/json:
                    schema:
                        properties:
                            permissions:
                                description: List of permissions UUIDs to add
                                items:
                                    description: permission ID
                                    format: uuid
                                    type: string
                                maxItems: 1000
                                minItems: 1
                                type: array
                        required:
                            - permissions
                        type: object
            description: add role permission request
            required: true
        AddRolePermissionsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RolePermission'
            description: add role permission request
            required: true
        BulkNotifyRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/BulkNotify'
            description: Contains the creation context of a list of objects
            required: true
        CreateOrganisationRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateOrganisation'
            description: Organisation
            required: true
        CreateRoleRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Role'
            description: Role
            required: true
        CreateServiceAccountNSRequest:
            content:
                application/json:
                    schema:
                        description: Defines the structure for adding a ServiceAccountNS
                        properties:
                            name:
                                type: string
                        required:
                            - name
                        type: object
            required: true
        CreateServiceAccountRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ServiceAccount'
            description: Create a new service account
        CreateSpaceRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateSpace'
            description: Space
            required: true
        CreateUserRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/User'
            description: Create a user
        DeleteACLRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ACLList'
            description: Contains ACLs to be removed.
            required: true
        ListIdentitiesByAccessRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/IdentitiesIdsList'
            description: A list of Identities Ids
        ListObjectsByAccessRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ListByAccess'
            description: Contains the context of the service's call to determine access rights
            required: true
        ListOrganisationIdsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/OrganisationIdsList'
            description: A list of organisations ids
        ListSpaceIdsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/SpaceIdsList'
            description: A list of Spaces Ids
        NotifyRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Notify'
            description: Contains the creation context of an object
            required: true
        NotifyTenantLifecycleChangeRequest:
            content:
                application/json:
                    schema:
                        properties:
                            context:
                                description: Object describing the context of the service's call
                                properties:
                                    action:
                                        description: Action describing the operation being performed on the resource
                                        enum:
                                            - CREATE
                                            - DELETE
                                        type: string
                                    identity:
                                        description: Unique identifier of a specific subject
                                        type: string
                                    identityType:
                                        description: Type of the subject
                                        type: string
                                    object:
                                        description: Unique identifier of a specific object being accessed
                                        type: string
                                    parentId:
                                        description: Unique identifier of the parent resource (e.g. bucketId for an object). Optional parameter
                                        type: string
                                    tenantId:
                                        description: Unique identifier for a specific tenant or subtenant
                                        format: uuid
                                        type: string
                                required:
                                    - tenantId
                                    - identity
                                    - identityType
                                    - action
                                    - object
                                type: object
                        type: object
            description: Contains the lifecycle context of a tenant
            required: true
        NotifyUserLifecycleChangeRequest:
            content:
                application/json:
                    schema:
                        properties:
                            context:
                                description: Object describing the context of the service's call
                                properties:
                                    action:
                                        description: Action describing the operation being performed on the resource
                                        enum:
                                            - CREATE
                                            - DELETE
                                        type: string
                                    identity:
                                        description: Unique identifier of a specific subject
                                        type: string
                                    identityType:
                                        description: Type of the subject
                                        type: string
                                    object:
                                        description: Unique identifier of a specific object being accessed
                                        format: uuid
                                        type: string
                                    parentId:
                                        description: Unique identifier of the parent resource (e.g. bucketId for an object). Optional parameter
                                        type: string
                                    tenantId:
                                        description: Unique identifier for a specific tenant or subtenant
                                        format: uuid
                                        type: string
                                required:
                                    - tenantId
                                    - identity
                                    - identityType
                                    - action
                                    - object
                                type: object
                        type: object
            description: Contains the lifecycle context of a tenant
            required: true
        OpenIdIdentityCreateRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/OpenIdIdentity'
            description: contains the details about a new identity.
            required: true
        PatchPermissionRequest:
            content:
                application/json:
                    schema:
                        properties:
                            action:
                                description: Allowed operation type
                                example: delete
                                pattern: ^[a-zA-Z]+$
                                type: string
                            description:
                                description: Human-readable description
                                type: string
                            name:
                                description: Human-readable name
                                type: string
                            resource:
                                example: storage
                                pattern: ^[a-zA-Z]+$
                                type: string
                            service:
                                description: Service name
                                example: resourcemanager
                                pattern: ^[a-z]+$
                                type: string
                            subResource:
                                example: buckets
                                pattern: ^[a-zA-Z]+$
                                type: string
                        type: object
            description: patch permission
        PatchRoleRequest:
            content:
                application/json:
                    schema:
                        properties:
                            description:
                                description: Human-readable description
                                example: Manage the resourcemanager.storage domain
                                type: string
                            name:
                                description: Human-readable name
                                example: Storage Object Admin
                                type: string
                        type: object
            description: patch role
        PatchRootIAMPolicyRequest:
            content:
                application/json:
                    schema:
                        description: Defines the structure for modification instructions for roles and permissions
                        properties:
                            add:
                                $ref: '#/components/schemas/RootPolicies'
                            delete:
                                $ref: '#/components/schemas/RootPolicies'
                        type: object
            description: Contains details of roles and permissions to be added or deleted from the IAM policy
            required: true
        PatchUserStateRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserState'
            description: Patch user state
        PermissionRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Permission'
            description: Permission
            required: true
        RemoveGlobalRolePermissionsRequest:
            content:
                application/json:
                    schema:
                        properties:
                            permissions:
                                description: List of permissions UUIDs to remove
                                items:
                                    description: permission ID
                                    format: uuid
                                    type: string
                                maxItems: 1000
                                minItems: 1
                                type: array
                        required:
                            - permissions
                        type: object
            description: remove role permission request
            required: true
        RemoveRolePermissionsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RolePermission'
            description: remove role permission request
            required: true
        RoleRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Role'
            description: Role
            required: true
        SetACLRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ACLList'
            description: Contains ACLs to be added.
            required: true
        SetIAMGranularPolicyRequest:
            content:
                application/json:
                    schema:
                        description: Defines the structure for modification instructions for roles and permissions
                        properties:
                            add:
                                $ref: '#/components/schemas/GranularPolicyList'
                            delete:
                                $ref: '#/components/schemas/GranularPolicyList'
                        type: object
            description: Contains details of roles and permissions to be added or deleted from the IAM policy
            required: true
        SetIAMPolicyRequest:
            content:
                application/json:
                    schema:
                        description: Defines the structure for modification instructions for roles and permissions
                        properties:
                            add:
                                $ref: '#/components/schemas/IAMPolicy'
                            delete:
                                $ref: '#/components/schemas/IAMPolicy'
                        type: object
            description: Contains details of roles and permissions to be added or deleted from the IAM policy
            required: true
        UpdateOrganisationRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateOrganisation'
            description: Organisation
            required: true
        UpdateRoleRequest:
            content:
                application/json:
                    schema:
                        properties:
                            description:
                                description: Human-readable description
                                example: Manage the resourcemanager.storage domain
                                type: string
                            name:
                                description: Human-readable name
                                example: Storage Object Admin
                                type: string
                        type: object
            description: patch role
        UpdateServiceAccountRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ServiceAccount'
            description: Update a service account
        UpdateSpaceRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/MutableSpace'
            description: Space
            required: true
        UpdateUserRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserUpdate'
            description: Update a user
        VerifyRequest:
            content:
                application/json:
                    schema:
                        properties:
                            action:
                                description: Action describing the operation being performed on the resource
                                type: string
                            identityToken:
                                description: JWT
                                type: string
                            object:
                                description: Unique identifier of a specific object being accessed. Optional parameter
                                type: string
                            resource:
                                description: Type of the resource being accessed. Optional parameter
                                type: string
                            service:
                                description: Name of the service making the call.
                                type: string
                            subresource:
                                description: Specific type of the subresource within the main resource. Optional parameter
                                type: string
                            tenantId:
                                description: Unique identifier for a specific tenant or subtenant.
                                format: uuid
                                type: string
                        required:
                            - tenantId
                            - identityToken
                            - service
                            - action
                        type: object
            description: Contains the context of the service's call to determine access rights
            required: true
        VerifyRootAccessRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/VerifyRoot'
            description: Contains the context of the service's call to determine access rights
            required: true
    responses:
        Bootstrap200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/BootstrapSuccess'
            description: Created
            x-go-name: Bootstrap200ResponseSchema
        CreateOrganisation200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Organisation'
            description: A Organisation
            x-go-name: CreateOrganisation200ResponseSchema
        CreateRole200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RegisteredRole'
            description: A role
            links:
                DeleteRole:
                    description: The returned uuid field can be reused to do further operations on the role
                    operationId: DeleteRole
                    parameters:
                        uuid: $response.body#/uuid
                GetRole:
                    description: The returned uuid field can be reused to do further operations on the role
                    operationId: GetRole
                    parameters:
                        uuid: $response.body#/uuid
                UpdateRole:
                    description: The returned uuid field can be reused to do further operations on the role
                    operationId: UpdateRole
                    parameters:
                        uuid: $response.body#/uuid
            x-go-name: CreateRole200ResponseSchema
        CreateServiceAccount201Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreatedServiceAccount'
            description: Create a new service account.
            x-go-name: CreateServiceAccount201ResponseSchema
        CreateServiceAccountNS200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ServiceAccountNS'
            description: SAN created successfully
            x-go-name: CreateServiceAccountNS200ResponseSchema
        CreateSpace200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Space'
            description: a Space
            x-go-name: CreateSpace200ResponseSchema
        CreateUser201Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserCreated'
            description: New user creation.
            x-go-name: CreateUser201ResponseSchema
        GetACL200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ACLPaginatedList'
            description: a list of acl.
            x-go-name: GetACL200ResponseSchema
        GetIAMGranularPolicy200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/IAMGranularPolicyList'
            description: The IAMPolicy currently associated with the object
            x-go-name: GetIAMGranularPolicy200ResponseSchema
        GetIAMPolicy200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/IAMPolicy'
            description: The IAMPolicy currently associated with the object
            x-go-name: GetIAMPolicy200ResponseSchema
        GetOrganisation200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Organisation'
            description: A Organisation
            links:
                DeleteOrganisation:
                    description: delete a specific Organisation by its id
                    operationId: DeleteOrganisation
                    parameters:
                        uuid: $response.body#/uuid
                GetOrganisation:
                    description: Get a specific Organisation by its id
                    operationId: GetOrganisation
                    parameters:
                        uuid: $response.body#/uuid
                UpdateOrganisation:
                    description: Update the information of a specific Organisation by its id
                    operationId: UpdateOrganisation
                    parameters:
                        uuid: $response.body#/uuid
            x-go-name: GetOrganisation200ResponseSchema
        GetOrganisationStatus200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/PendingOrganisation'
            description: A Organisation
            x-go-name: GetOrganisationStatus200ResponseSchema
        GetPermission200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RegisteredPermission'
            description: A permission
            links:
                DeletePermission:
                    description: The returned uuid field can be reused to do further operations on the permission
                    operationId: DeletePermission
                    parameters:
                        uuid: $response.body#/uuid
                GetPermission:
                    description: The returned uuid field can be reused to do further operations on the permission
                    operationId: GetPermission
                    parameters:
                        uuid: $response.body#/uuid
                UpdatePermission:
                    description: The returned uuid field can be reused to do further operations on the permission
                    operationId: UpdatePermission
                    parameters:
                        uuid: $response.body#/uuid
            x-go-name: GetPermission200ResponseSchema
        GetRole200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RegisteredRole'
            description: A role
            x-go-name: GetRole200ResponseSchema
        GetRolePermissions200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/PermissionsPaginatedList'
            description: A list of permissions assigned to a role
            x-go-name: GetRolePermissions200ResponseSchema
        GetRootIAMPolicy200Response:
            content:
                application/json:
                    schema:
                        properties:
                            policies:
                                items:
                                    $ref: '#/components/schemas/RootPolicy'
                                type: array
                        required:
                            - policies
                        type: object
            description: created
            x-go-name: GetRootIAMPolicy200ResponseSchema
        GetServiceAccount200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ServiceAccountEdited'
            description: Get a service account.
            x-go-name: GetServiceAccount200ResponseSchema
        GetSpaceById200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Space'
            description: a Space
            x-go-name: GetSpaceById200ResponseSchema
        GetUser200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserModified'
            description: Retrieve a user.
            x-go-name: GetUser200ResponseSchema
        ListObjectsByAccess200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ItemsPaginatedList'
            description: A list of items
            x-go-name: ListObjectsByAccess200ResponseSchema
        ListOrganisations200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ListOrganisations'
            description: A list of Organisations
            x-go-name: ListOrganisations200ResponseSchema
        ListPermissions200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/PermissionsPaginatedList'
            description: A list of permissions
            x-go-name: ListPermissions200ResponseSchema
        ListRoles200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RolesPaginatedList'
            description: A list of roles
            x-go-name: ListRoles200ResponseSchema
        ListServiceAccount200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ServiceAccountPaginatedList'
            description: A list of services accounts.
            x-go-name: ListServiceAccount200ResponseSchema
        ListSpaces200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/SpacePaginatedList'
            description: A list of Spaces
            x-go-name: ListSpaces200ResponseSchema
        ListSpacesIdentity200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/SpaceSimplePaginatedList'
            description: A list of spaces
            x-go-name: ListSpacesIdentity200ResponseSchema
        ListSpacesServiceAccount200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/SpaceSimplePaginatedList'
            description: A list of spaces
            x-go-name: ListSpacesServiceAccount200ResponseSchema
        ListSpacesUser200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/SpaceSimplePaginatedList'
            description: A list of spaces
            x-go-name: ListSpacesUser200ResponseSchema
        ListUser200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserPaginatedList'
            description: A list of users.
            x-go-name: ListUser200ResponseSchema
        ListUserOrganisations200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/OrganisationSimplePaginatedList'
            description: A list of organisation
            x-go-name: ListUserOrganisations200ResponseSchema
        OpenIdIdentityCreate200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreatedOpenIdIdentity'
            description: SAN created successfully
            x-go-name: OpenIdIdentityCreate200ResponseSchema
        OpenIdIdentityGet200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/GetOpenIdIdentity'
            description: Get single SAN
            x-go-name: OpenIdIdentityGet200ResponseSchema
        OpenIdIdentityList200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/GetOpenIdIdentityList'
            description: Get SAN list
            x-go-name: OpenIdIdentityList200ResponseSchema
        OpenIdIdentityPatch200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/PatchOpenIdIdentity'
            description: Patch single SAN
            x-go-name: OpenIdIdentityPatch200ResponseSchema
        PatchUserState200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserEdited'
            description: Update user state
            x-go-name: PatchUserState200ResponseSchema
        PermissionCreated200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RegisteredPermission'
            description: A permission
            links:
                DeletePermission:
                    description: The returned uuid field can be reused to do further operations on the permission
                    operationId: DeletePermission
                    parameters:
                        uuid: $response.body#/uuid
                GetPermission:
                    description: The returned uuid field can be reused to do further operations on the permission
                    operationId: GetPermission
                    parameters:
                        uuid: $response.body#/uuid
                UpdatePermission:
                    description: The returned uuid field can be reused to do further operations on the permission
                    operationId: UpdatePermission
                    parameters:
                        uuid: $response.body#/uuid
            x-go-name: PermissionCreated200ResponseSchema
        Permissions200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RegisteredPermissionList'
            description: A list of permissions
            x-go-name: Permissions200ResponseSchema
        RecoverUser200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RecoveryLink'
            description: Generate recovery link
            x-go-name: RecoverUser200ResponseSchema
        RoleCreated200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RegisteredRole'
            description: A role
            links:
                DeleteRole:
                    description: The returned uuid field can be reused to do further operations on the role
                    operationId: DeleteRole
                    parameters:
                        uuid: $response.body#/uuid
                GetRole:
                    description: The returned uuid field can be reused to do further operations on the role
                    operationId: GetRole
                    parameters:
                        uuid: $response.body#/uuid
                UpdateRole:
                    description: The returned uuid field can be reused to do further operations on the role
                    operationId: UpdateRole
                    parameters:
                        uuid: $response.body#/uuid
            x-go-name: RoleCreated200ResponseSchema
        RoleList200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RegisteredRoleList'
            description: A list of roles
            x-go-name: RoleList200ResponseSchema
        UpdateServiceAccount200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ServiceAccountEdited'
            description: Update a service account.
            x-go-name: UpdateServiceAccount200ResponseSchema
        UpdateUser200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserModified'
            description: Update a user.
            x-go-name: UpdateUser200ResponseSchema
        UserPtrIdFromUserId200Response:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UserInstance'
            description: UUID of a user on a specific tenant
            x-go-name: UserPtrIdFromUserId200ResponseSchema
    schemas:
        ACL:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                permissionId:
                    description: id of the permission
                    format: uuid
                    type: string
                resource:
                    description: Type of the resource being accessed
                    type: string
                resourceId:
                    description: Unique identifier of a resource
                    type: string
                service:
                    description: Name of the service making the call
                    type: string
                subresource:
                    description: Specific type of the subresource within the main resource
                    type: string
            required:
                - permissionId
                - service
                - resource
                - resourceId
            title: ACLPaginatedList
            type: object
        ACLList:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: List of ACLs.
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/ACL'
                    maxItems: 100
                    minItems: 1
                    type: array
            title: ACLList
            type: object
        ACLPaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/ACL'
                        type: array
                  required:
                    - items
                  type: object
            title: ACLPaginatedList
            type: object
        BadRequestError:
            $schema: https://json-schema.org/draft/2020-12/schema
            additionalProperties: false
            allOf:
                - $ref: '#/components/schemas/Error'
                - properties:
                    violations:
                        description: Array of violations to provide a per-field detail.
                        items:
                            $ref: '#/components/schemas/Violation'
                        type: array
                  type: object
            description: For HTTP 400 bad request errors, we implement the https://datatracker.ietf.org/doc/html/rfc9457
            title: BadRequestError
            type: object
        BootstrapSuccess:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                identityId:
                    type: string
                identitySecret:
                    type: string
            required:
                - identityId
                - identitySecret
            title: BootstrapSuccess
            type: object
        BulkNotify:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                action:
                    description: Action describing the operation being performed on the resource
                    enum:
                        - create
                        - delete
                    type: string
                identity:
                    description: Unique identifier of a specific subject
                    format: uuid
                    type: string
                identityType:
                    $ref: '#/components/schemas/IamIdentityType'
                objects:
                    description: List of object being accessed
                    items:
                        description: Unique identifier for the object being accessed
                        format: string
                        type: string
                    type: array
                resource:
                    description: Type of the resource being accessed. Optional parameter
                    type: string
                service:
                    description: Name of the service making the call
                    type: string
                subresource:
                    description: Specific type of the subresource within the main resource. Optional parameter
                    type: string
                tenantId:
                    description: Unique identifier for a specific tenant or subtenant
                    format: uuid
                    type: string
            required:
                - tenantId
                - identity
                - identityType
                - service
                - objects
                - action
            title: BulkNotify
            type: object
        CreateOrganisation:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                organisation:
                    properties:
                        description:
                            description: Organisation description
                            format: string
                            type: string
                        name:
                            description: Organisation name
                            format: string
                            type: string
                    required:
                        - description
                        - name
                    type: object
                user:
                    properties:
                        email:
                            format: string
                            type: string
                        firstname:
                            format: string
                            type: string
                        lastname:
                            format: string
                            type: string
                    required:
                        - email
                        - firstname
                        - lastname
                    type: object
            required:
                - user
                - organisation
            title: Create an Organisation
            type: object
        CreateSpace:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/MutableSpace'
                - required:
                    - name
                    - description
                  type: object
            title: CreateSpace
            type: object
        CreatedOpenIdIdentity:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/RegisteredOpenIdentity'
                - properties:
                    secret:
                        description: secret
                        type: string
                  required:
                    - secret
                  type: object
            title: CreatedIdentity
        CreatedServiceAccount:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/ServiceAccountEdited'
                - properties:
                    secret:
                        description: Service account secret.
                        type: string
                  required:
                    - secret
                  type: object
            title: CreatedServiceAccount
            type: object
        DateTime:
            $schema: https://json-schema.org/draft/2020-12/schema
            example: "2018-11-13T20:20:39+00:00"
            format: date-time
            title: DateTime
            type: string
        Email:
            $schema: https://json-schema.org/draft/2020-12/schema
            example: john.smith@acme.org
            format: email
            title: Email
            type: string
        Error:
            $schema: https://json-schema.org/draft/2020-12/schema
            additionalProperties: false
            description: For HTTP errors, we implement the https://datatracker.ietf.org/doc/html/rfc9457
            examples:
                - accounts:
                    - /account/12345
                    - /account/67890
                  balance: 30
                  detail: Your current balance is 30, but that costs 50.
                  instance: /account/12345/msgs/abc
                  title: You do not have enough credit.
                  type: https://docs.numspot.cloud/docs/domains/cloud/errors#unauthenticated_access
            properties:
                detail:
                    description: Human-readable explanation specific to this occurrence of the problem.
                    type: string
                instance:
                    $ref: '#/components/schemas/Url'
                    description: Url to fetch more information about this problem type.
                title:
                    description: Human-readable summary of the problem type.
                    type: string
                type:
                    $ref: '#/components/schemas/ErrorDocumentationUrl'
            required:
                - type
                - title
            title: Error
            type: object
        ErrorDocumentationUrl:
            $schema: https://json-schema.org/draft/2020-12/schema
            additionalProperties: false
            description: Documentation URL for the domain error
            enum:
                - https://docs.numspot.cloud/docs/domains/cloud/errors#unauthenticated_access
                - https://docs.numspot.cloud/docs/domains/cloud/errors#forbidden_access
                - https://docs.numspot.cloud/docs/domains/cloud/errors#invalid_parameter
                - https://docs.numspot.cloud/docs/domains/cloud/errors#resource_not_found
                - https://docs.numspot.cloud/docs/domains/cloud/errors#duplicate_resource
                - https://docs.numspot.cloud/docs/domains/cloud/errors#internal_server_error
                - https://docs.numspot.cloud/docs/domains/cloud/errors#ambiguous_granular_permission_elements
                - https://docs.numspot.cloud/docs/domains/cloud/errors#ambiguous_permission_elements
                - https://docs.numspot.cloud/docs/domains/cloud/errors#ambiguous_role_elements
                - https://docs.numspot.cloud/docs/domains/cloud/errors#duplicate_role
                - https://docs.numspot.cloud/docs/domains/cloud/errors#forbidden
                - https://docs.numspot.cloud/docs/domains/cloud/errors#identity_not_found
                - https://docs.numspot.cloud/docs/domains/cloud/errors#inactive_token
                - https://docs.numspot.cloud/docs/domains/cloud/errors#method_not_allowed
                - https://docs.numspot.cloud/docs/domains/cloud/errors#missing_roles
                - https://docs.numspot.cloud/docs/domains/cloud/errors#namespace_not_found
                - https://docs.numspot.cloud/docs/domains/cloud/errors#not_in_tenant_roles
                - https://docs.numspot.cloud/docs/domains/cloud/errors#permission_not_found
                - https://docs.numspot.cloud/docs/domains/cloud/errors#role_not_found
                - https://docs.numspot.cloud/docs/domains/cloud/errors#unexpected_token_usage
                - https://docs.numspot.cloud/docs/domains/cloud/errors#uri_too_long
            format: uri
            title: ErrorDocumentationUrl
            type: string
        GetOpenIdIdentity:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/RegisteredOpenIdentity'
            title: GetIdentity
        GetOpenIdIdentityList:
            $schema: https://json-schema.org/draft/2020-12/schema
            items:
                $ref: '#/components/schemas/RegisteredOpenIdentity'
            title: GetIdentityList
            type: array
        GrantType:
            $schema: https://json-schema.org/draft/2020-12/schema
            items:
                enum:
                    - authorization_code
                    - refresh_token
                type: string
            title: GrantType
            type: array
        GranularPermission:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                action:
                    description: Type of action (e.g., owners, editors, getters)
                    type: string
                objectId:
                    description: ID of the object
                    type: string
            required:
                - objectId
                - action
            title: GranularPermission
            type: object
        GranularPolicyList:
            $schema: https://json-schema.org/draft/2020-12/schema
            items:
                $ref: '#/components/schemas/GranularPermission'
            title: GranularPolicyList
            type: array
        IAMGranularPolicyList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/GranularPermission'
                        type: array
                  required:
                    - items
                  type: object
            title: IAMGranularPolicyList
            type: object
        IAMPolicy:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                permissions:
                    description: List of permission UUIDs
                    items:
                        allOf:
                            - description: permission ID
                              format: uuid
                              type: string
                    type: array
                roles:
                    description: List of role UUIDs
                    items:
                        allOf:
                            - description: role ID
                              format: uuid
                              type: string
                    type: array
            title: IAMPolicy
            type: object
        IamIdentityType:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: The type of identity impacted.
            enum:
                - user
                - users
                - serviceAccount
                - serviceAccounts
            title: IamIdentityType
            type: string
            x-go-type: pkg.IdentityType
            x-go-type-import:
                name: pkg
                path: gitlab.tooling.cloudgouv-eu-west-1.numspot.internal/cloud-iam/access-manager/v2/pkg
        IdentitiesIdsList:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                items:
                    items:
                        format: uuid
                        type: string
                    type: array
            required:
                - items
            title: IdentitiesIdsList
            type: object
        ImmutableSpace:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                createdOn:
                    $ref: '#/components/schemas/DateTime'
                    description: Space creation date
                id:
                    description: Internal ID
                    format: uuid
                    type: string
                organisationId:
                    description: Organisation_id
                    format: uuid
                    type: string
                status:
                    description: status of the space, the space can only be used when the status is ready.
                    enum:
                        - QUEUED
                        - RUNNING
                        - READY
                        - FAILED
                    type: string
                updatedOn:
                    $ref: '#/components/schemas/DateTime'
                    description: Space last update
            required:
                - id
                - organisationId
                - createdOn
                - updatedOn
                - status
            title: ImmutableSpace
            type: object
        Int:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Equivalent to int32
            format: int32
            maximum: 2147483647
            minimum: -2147483648
            title: Int
            type: integer
        Item:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                uuid:
                    description: Internal ID
                    type: string
            required:
                - uuid
            title: Item
            type: object
        ItemsPaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/Item'
                        type: array
                  required:
                    - items
                  type: object
            title: ItemsPaginatedList
            type: object
        ListByAccess:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                context:
                    $ref: '#/components/schemas/ListByAccessContext'
            required:
                - context
            title: ListByAccess
            type: object
        ListByAccessContext:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Object describing the context of the service's call
            properties:
                identityToken:
                    description: JWT
                    type: string
                resource:
                    description: Type of the resource being accessed. Optional parameter
                    type: string
                service:
                    description: Name of the service making the call.
                    type: string
                subresource:
                    description: Specific type of the subresource within the main resource. Optional parameter
                    type: string
                tenantId:
                    description: Unique identifier for a specific tenant or subtenant.
                    format: uuid
                    type: string
            required:
                - tenantId
                - identityToken
                - service
            title: ListByAccessContext
            type: object
        ListOrganisations:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/Organisation'
                        type: array
                  required:
                    - items
                  type: object
            title: List of organisations
            type: object
        MutableSpace:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                description:
                    description: Space description
                    format: string
                    maxLength: 300
                    minLength: 1
                    type: string
                name:
                    description: Space name
                    format: string
                    maxLength: 50
                    minLength: 1
                    type: string
            title: MutableSpace
            type: object
        Notify:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                action:
                    description: Action describing the operation being performed on the resource
                    enum:
                        - create
                        - delete
                    type: string
                identity:
                    description: Unique identifier of a specific subject
                    format: uuid
                    type: string
                identityType:
                    $ref: '#/components/schemas/IamIdentityType'
                object:
                    description: Unique identifier of a specific object being accessed
                    type: string
                parentId:
                    description: Unique identifier of the parent resource (e.g. bucketId for an object). Optional parameter
                    type: string
                resource:
                    description: Type of the resource being accessed. Optional parameter
                    type: string
                service:
                    description: Name of the service making the call
                    type: string
                subresource:
                    description: Specific type of the subresource within the main resource. Optional parameter
                    type: string
                tenantId:
                    description: Unique identifier for a specific tenant or subtenant
                    format: uuid
                    type: string
            required:
                - tenantId
                - identity
                - identityType
                - service
                - object
                - action
            title: Notify
            type: object
        OpenIdIdentity:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                grantType:
                    $ref: '#/components/schemas/GrantType'
                name:
                    type: string
                redirectUris:
                    items:
                        type: string
                    type: array
                skipConsent:
                    type: boolean
            required:
                - name
                - grantType
                - redirectUris
                - skipConsent
            title: Identity
            type: object
        OpenIdIdentityRegistered:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                createdOn:
                    description: creation date
                    format: date-time
                    type: string
                id:
                    description: ID
                    type: string
                updatedOn:
                    description: last update
                    format: date-time
                    type: string
            required:
                - id
                - createdOn
                - updatedOn
            title: Registered
            type: object
        Organisation:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                createdOn:
                    description: Organisation creation date
                    format: date-time
                    type: string
                description:
                    description: Organisation description
                    format: string
                    type: string
                name:
                    description: Organisation name
                    format: string
                    type: string
                organisationId:
                    description: organisation ID
                    format: uuid
                    type: string
                updatedOn:
                    description: Organisation last update
                    format: date-time
                    type: string
            required:
                - organisationId
                - name
                - description
                - createdOn
                - updatedOn
            title: Organisation schema
            type: object
        OrganisationIdsList:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                items:
                    items:
                        format: uuid
                        type: string
                    type: array
            required:
                - items
            title: OrganisationIdsList
            type: object
        OrganisationSimple:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                id:
                    description: Organisation identifier
                    format: uuid
                    type: string
            required:
                - id
            title: OrganisationSimple
            type: object
        OrganisationSimplePaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/OrganisationSimple'
                        type: array
                  required:
                    - items
                  type: object
            title: OrganisationSimplePaginatedList
            type: object
        PaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            additionalProperties: false
            description: Represent the common attributes of a paginated list, to be used in an allOf with the specific items attribute of the desired type.
            properties:
                nextPageToken:
                    description: This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.
                    type: string
                totalSize:
                    $ref: '#/components/schemas/Int'
                    description: Total number of element of items.
            title: PaginatedList
            type: object
        PatchOpenIdIdentity:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/RegisteredOpenIdentity'
                - required:
                    - secret
                  type: object
            title: PatchIdentity
        PendingOrganisation:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/Organisation'
                - properties:
                    status:
                        description: status of the organisation, the organisation can only be used when the status is ready.
                        enum:
                            - QUEUED
                            - RUNNING
                            - READY
                            - FAILED
                        type: string
                    userId:
                        format: uuid
                        type: string
                  required:
                    - userId
                    - status
                  type: object
            title: Pending creation organisation schema
            type: object
        Permission:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: A permission in the <service>[.<resource>.[<subResource>](0,1)](0,1).<action> form
            properties:
                action:
                    description: Allowed operation type
                    example: delete
                    pattern: ^[a-zA-Z]+$
                    type: string
                description:
                    description: Human-readable description
                    type: string
                name:
                    description: Human-readable name
                    type: string
                resource:
                    example: storage
                    pattern: ^[a-zA-Z]+$
                    type: string
                service:
                    description: Service name
                    example: resourcemanager
                    pattern: ^[a-z]+$
                    type: string
                subResource:
                    example: buckets
                    pattern: ^[a-zA-Z]+$
                    type: string
            required:
                - name
                - description
                - service
                - action
            title: Permission
            type: object
        PermissionsPaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/RegisteredPermission'
                        type: array
                  required:
                    - items
                  type: object
            title: PermissionsPaginatedList
            type: object
        RecoveryLink:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                expiration:
                    $ref: '#/components/schemas/DateTime'
                link:
                    description: Recovery link correctly generated
                    format: uri
                    type: string
            required:
                - link
                - expiration
            title: RecoveryLink
            type: object
        Registered:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                createdOn:
                    description: creation date
                    format: date-time
                    type: string
                updatedOn:
                    description: last update
                    format: date-time
                    type: string
                uuid:
                    description: Internal ID
                    format: uuid
                    type: string
            required:
                - uuid
                - createdOn
                - updatedOn
            title: Registered
            type: object
        RegisteredOpenIdentity:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/OpenIdIdentity'
                - $ref: '#/components/schemas/OpenIdIdentityRegistered'
            title: RegisteredIdentity
        RegisteredPermission:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/Permission'
                - $ref: '#/components/schemas/Registered'
            title: RegisteredPermission
            type: object
        RegisteredPermissionList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/RegisteredPermission'
                        type: array
                  required:
                    - items
                  type: object
            title: RegisteredPermissionList
            type: object
        RegisteredRole:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/Role'
                - $ref: '#/components/schemas/Registered'
            title: RegisteredRole
            type: object
        RegisteredRoleList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/RegisteredRole'
                        type: array
                  required:
                    - items
                  type: object
            title: RegisteredRoleList
            type: object
        Role:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: A role, linked to 1 or more permissions
            properties:
                description:
                    description: Human-readable description
                    example: Manage the resourcemanager.storage domain
                    type: string
                name:
                    description: Human-readable name
                    example: Storage Object Admin
                    type: string
            required:
                - name
                - description
            title: Role
            type: object
        RolePermission:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                permissions:
                    description: List of permissions UUIDs
                    items:
                        allOf:
                            - description: permission ID
                              format: uuid
                              type: string
                    maxItems: 100
                    minItems: 1
                    type: array
            required:
                - permissions
            title: RolePermission
            type: object
        RolesPaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/RegisteredRole'
                        type: array
                  required:
                    - items
                  type: object
            title: RolesPaginatedList
            type: object
        RootPolicies:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                policies:
                    description: List of relations between ServiceAccountNSId and root
                    items:
                        $ref: '#/components/schemas/RootPolicy'
                    type: array
            title: RootPolicies
            type: object
        RootPolicy:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                action:
                    description: Type of action
                    type: string
                serviceAccountNsId:
                    description: ServiceAccountNs identifier
                    format: uuid
                    type: string
            required:
                - serviceAccountNsId
                - action
            title: RootPolicy
        ServiceAccount:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                name:
                    description: Service account name
                    format: string
                    type: string
            required:
                - name
            title: ServiceAccount
            type: object
        ServiceAccountEdited:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                id:
                    description: Service account ID
                    format: string
                    type: string
                name:
                    description: Service Accounts name
                    format: string
                    type: string
            required:
                - name
                - id
            title: ServiceAccountEdited
            type: object
        ServiceAccountNS:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                identityId:
                    type: string
                identitySecret:
                    type: string
            required:
                - identityId
                - identitySecret
            title: ServiceAccountNS
            type: object
        ServiceAccountPaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/ServiceAccountEdited'
                        type: array
                  required:
                    - items
                  type: object
            title: ServiceAccountPaginatedList
            type: object
        Space:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/MutableSpace'
                - $ref: '#/components/schemas/ImmutableSpace'
                - required:
                    - name
                    - description
                  type: object
            title: Space
            type: object
        SpaceIdsList:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                items:
                    items:
                        format: uuid
                        type: string
                    type: array
            required:
                - items
            title: SpaceIdsList
            type: object
        SpacePaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/Space'
                        type: array
                  required:
                    - items
                  type: object
            title: SpacePaginatedList
            type: object
        SpaceSimple:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                id:
                    description: Space identifier
                    format: uuid
                    type: string
            required:
                - id
            title: SpaceSimple
            type: object
        SpaceSimplePaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/SpaceSimple'
                        type: array
                  required:
                    - items
                  type: object
            title: SpaceSimplePaginatedList
            type: object
        SubjectType:
            $schema: https://json-schema.org/draft/2020-12/schema
            enum:
                - users
                - serviceAccounts
            title: SubjectType
            type: string
            x-go-type: pkg.IdentityPathType
            x-go-type-import:
                name: pkg
                path: gitlab.tooling.cloudgouv-eu-west-1.numspot.internal/cloud-iam/access-manager/v2/pkg
        UpdateOrganisation:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                description:
                    description: Organisation description
                    format: string
                    type: string
                name:
                    description: Organisation name
                    format: string
                    type: string
            title: Update Organisation
            type: object
        Url:
            $schema: https://json-schema.org/draft/2020-12/schema
            example: https://domain.org/path/
            format: uri
            title: Url
            type: string
        User:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                email:
                    $ref: '#/components/schemas/Email'
                firstname:
                    description: Firstname
                    type: string
                lastname:
                    description: Lastname
                    type: string
            required:
                - email
                - firstname
                - lastname
            title: User
            type: object
        UserCreated:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/User'
                - $ref: '#/components/schemas/UserCreation'
            title: UserCreated
            type: object
        UserCreation:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                active:
                    description: Account activation/deactivation state
                    type: boolean
                createdOn:
                    $ref: '#/components/schemas/DateTime'
                id:
                    description: User ID
                    format: uuid
                    type: string
            required:
                - id
                - active
                - createdOn
            title: UserCreation
            type: object
        UserEdited:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                active:
                    description: Account activation/deactivation state
                    type: boolean
                createdOn:
                    $ref: '#/components/schemas/DateTime'
                id:
                    description: User ID
                    format: uuid
                    type: string
                updatedOn:
                    $ref: '#/components/schemas/DateTime'
            required:
                - id
                - active
                - createdOn
                - updatedOn
            title: UserEdited
            type: object
        UserInstance:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: User instance inside of a tenant
            properties:
                createdOn:
                    description: Instance creation date
                    format: date-time
                    type: string
                tenantUuid:
                    description: The tenant in which the instance is
                    format: uuid
                    type: string
                updatedOn:
                    description: Instance last update
                    format: date-time
                    type: string
                userUuid:
                    description: User UUID. Aka a user's global UUID
                    format: uuid
                    type: string
                uuid:
                    description: User Instance UUID. Aka a user's ID inside a specific tenant
                    format: uuid
                    type: string
            title: UserInstance
            type: object
        UserModified:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/User'
                - $ref: '#/components/schemas/UserEdited'
            title: UserModified
            type: object
        UserPaginatedList:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/PaginatedList'
                - properties:
                    items:
                        items:
                            $ref: '#/components/schemas/UserModified'
                        type: array
                  required:
                    - items
                  type: object
            title: UserPaginatedList
            type: object
        UserState:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                active:
                    description: Account activation/deactivation state
                    type: boolean
            required:
                - active
            title: UserState
            type: object
        UserUpdate:
            $schema: https://json-schema.org/draft/2020-12/schema
            allOf:
                - $ref: '#/components/schemas/User'
                - properties:
                    active:
                        description: Account activation/deactivation state
                        type: boolean
                  required:
                    - active
                  type: object
            title: UserUpdate
            type: object
        VerifyRoot:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                context:
                    $ref: '#/components/schemas/VerifyRootContext'
            required:
                - context
            title: Verify
            type: object
        VerifyRootContext:
            $schema: https://json-schema.org/draft/2020-12/schema
            description: Object describing the context of the service's call
            properties:
                accessToken:
                    type: string
                action:
                    description: Action describing the operation being performed on the resource
                    type: string
            required:
                - accessToken
                - action
            title: VerifyContext
            type: object
        Violation:
            $schema: https://json-schema.org/draft/2020-12/schema
            properties:
                description:
                    description: A description of why the field is violated.
                    type: string
                field:
                    description: The field impacted by the violation.
                    type: string
            required:
                - field
                - description
            title: Violation
            type: object
    securitySchemes:
        BearerAuth:
            bearerFormat: JWT
            scheme: bearer
            type: http
