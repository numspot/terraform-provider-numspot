openapi: 3.1.0
info:
    contact:
        email: support@numspot.eu
        name: Numspot
        url: https://numspot.com/contact/
    description: Numspot IaaS API - /!\ WIP
    license:
        name: BSD 3 Clause
        url: https://opensource.org/licenses/BSD-3-Clause
    termsOfService: https://numspot.com/
    title: Numspot IaaS API
    version: 0.0.22
servers:
    - url: https://iaas.{env}.{region}.numspot.internal
      variables:
        env:
            default: zex-integ
            enum:
                - zex-dev
                - zex-integ
        region:
            default: cloudgouv-eu-west-1
            enum:
                - eu-west-2
                - cloudgouv-eu-west-1
paths:
    /compute/spaces/{spaceId}/bulk/loadBalancersTags:
        delete:
            description: Deletes one or more tags from the specified load balancers.
            operationId: DeleteLoadBalancerTags
            requestBody:
                $ref: '#/components/requestBodies/DeleteLoadBalancerTagsRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - metadata.tag.unset
            servers:
                - url: http://wiretap:9090
            tags:
                - LoadBalancer
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    metadata.tag.unset: null
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        patch:
            description: |-
                Adds one or more tags to the specified load balancers.<br />
                 If a tag with the same key already exists for the load balancer, the tag value is replaced.<br /><br />
                For more information, see [About Tags](https://docs.outscale.com/en/userguide/About-Tags.html).
            operationId: CreateLoadBalancerTags
            requestBody:
                $ref: '#/components/requestBodies/CreateLoadBalancerTagsRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - metadata.tag.set
            servers:
                - url: http://wiretap:9090
            tags:
                - LoadBalancer
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    metadata.tag.set: null
    /compute/spaces/{spaceId}/bulk/tags:
        delete:
            description: Deletes one or more tags from the specified resources.
            operationId: DeleteTags
            requestBody:
                $ref: '#/components/requestBodies/DeleteTagsRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - metadata.tag.unset
            servers:
                - url: http://wiretap:9090
            tags:
                - Tag
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    metadata.tag.unset: null
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        patch:
            description: |-
                Adds one or more tags to the specified resources.<br />
                If a tag with the same key already exists for the resource, the tag value is replaced.<br />
                You can tag the following resources using their IDs:<br /><br />

                * Virtual machines (VMs) (i-xxxxxxxx)<br />
                * NMIs (ami-xxxxxxxx)<br />
                * Volumes (vol-xxxxxxxx)<br />
                * Snapshots (snap-xxxxxxxx)<br />
                * Public IPs (eipalloc-xxxxxxxx)<br />
                * Security groups (sg-xxxxxxxx)<br />
                * Route tables (rtb-xxxxxxxx)<br />
                * Network interface cards (NIC) (eni-xxxxxxxx)<br />
                * Vpcs (vpc-xxxxxxxx)<br />
                * Subnets (subnet-xxxxxxxx)<br />
                * Vpc peerings (vpcx-xxxxxxxx)<br />
                * Vpc endpoints (vpce-xxxxxxxx)<br />
                * NAT Gateways (nat-xxxxxxxx)<br />
                * Internet Gateways (igw-xxxxxxxx)<br />
                 * Client gateways (cgw-xxxxxxxx)<br />
                * Virtual gateways (vgw-xxxxxxxx)<br />
                * VPN connections (vpn-xxxxxxxx)<br />
                * DHCP options (dopt-xxxxxxxx)<br />
                * NMI export tasks (image-export-xxxxxxxx)<br />
                * Snapshot export tasks (snap-export-xxxxxxxx)

                For more information, see [About Tags](https://docs.outscale.com/en/userguide/About-Tags.html).
            operationId: CreateTags
            requestBody:
                $ref: '#/components/requestBodies/CreateTagsRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - metadata.tag.set
            servers:
                - url: http://wiretap:9090
            tags:
                - Tag
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    metadata.tag.set: null
    /compute/spaces/{spaceId}/clientGateways:
        get:
            description: Lists one or more of your client gateways.
            operationId: ReadClientGateways
            parameters:
                - description: The Border Gateway Protocol (BGP) Autonomous System Numbers (ASNs) of the connections.
                  in: query
                  name: bgpAsns
                  schema:
                    items:
                        type: integer
                    type: array
                - description: The types of communication tunnels used by the client gateways (only `ipsec.1` is supported).
                  in: query
                  name: connectionTypes
                  schema:
                    items:
                        type: string
                    type: array
                - description: The public IPv4 addresses of the client gateways.
                  in: query
                  name: publicIps
                  schema:
                    items:
                        type: string
                    type: array
                - description: The states of the client gateways (`pending` \| `available` \| `deleting` \| `deleted`).
                  in: query
                  name: states
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the client gateways.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the client gateways.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the client gateways, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the client gateways.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadClientGatewaysResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.clientGateway
            servers:
                - url: http://wiretap:9090
            tags:
                - ClientGateway
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: network.clientGateway
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Provides information about your client gateway.<br />
                This action registers information to identify the client gateway that you deployed in your network.<br />
                To open a tunnel to the client gateway, you must provide the communication protocol type, the fixed public IP of the gateway, and an Autonomous System Number (ASN).<br /><br />
                For more information, see [About Client Gateways](https://docs.outscale.com/en/userguide/About-Client-Gateways.html).
            operationId: CreateClientGateway
            requestBody:
                $ref: '#/components/requestBodies/CreateClientGatewayRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateClientGatewayResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.clientGateway.create
            servers:
                - url: http://wiretap:9090
            tags:
                - ClientGateway
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: network.clientGateway
                scopes-details:
                    network.clientGateway.create: null
    /compute/spaces/{spaceId}/clientGateways/{id}:
        delete:
            description: |-
                Deletes a client gateway.<br />
                You must delete the VPN connection before deleting the client gateway.
            operationId: DeleteClientGateway
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the client gateway you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.clientGateway.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - ClientGateway
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    network.clientGateway.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the ClientGateway whose id is given as a parameter.
            operationId: ReadClientGatewaysById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadClientGateways
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadClientGatewaysByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.clientGateway.get
            servers:
                - url: http://wiretap:9090
            tags:
                - ClientGateway
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    network.clientGateway.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/dhcpOptions:
        get:
            description: Gets information about the content one or more DHCP options sets.
            operationId: ReadDhcpOptions
            parameters:
                - description: If true, lists all default DHCP options set. If false, lists all non-default DHCP options set.
                  in: query
                  name: default
                  schema:
                    type: boolean
                - description: The IPs of the domain name servers used for the DHCP options sets.
                  in: query
                  name: domainNameServers
                  schema:
                    items:
                        type: string
                    type: array
                - description: The domain names used for the DHCP options sets.
                  in: query
                  name: domainNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IPs of the log servers used for the DHCP options sets.
                  in: query
                  name: logServers
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IPs of the Network Time Protocol (NTP) servers used for the DHCP options sets.
                  in: query
                  name: ntpServers
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the DHCP options sets.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the DHCP options sets.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the DHCP options sets, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the DHCP options sets.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadDhcpOptionsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - dhcp.dhcpOption
            servers:
                - url: http://wiretap:9090
            tags:
                - DhcpOption
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: dhcp.dhcpOption
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a set of DHCP options, that you can then associate with a Vpc using the [UpdateVpc](#updatenet) method.<br /><br />
                For more information, see [About DHCP Options](https://docs.outscale.com/en/userguide/About-DHCP-Options.html).
            operationId: CreateDhcpOptions
            requestBody:
                $ref: '#/components/requestBodies/CreateDhcpOptionsRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateDhcpOptionsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - dhcp.dhcpOption.create
            servers:
                - url: http://wiretap:9090
            tags:
                - DhcpOption
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: dhcp.dhcpOption
                scopes-details:
                    dhcp.dhcpOption.create: null
    /compute/spaces/{spaceId}/dhcpOptions/{id}:
        delete:
            description: |-
                Deletes a specified DHCP options set.<br />
                Before deleting a DHCP options set, you must disassociate it from the Vpcs you associated it with. To do so, you need to associate with each Vpc a new set of DHCP options, or the `default` one if you do not want to associate any DHCP options with the Vpc.<br /><br />

                **[IMPORTANT]**<br />
                You cannot delete the `default` set.
            operationId: DeleteDhcpOptions
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the DHCP options set you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - dhcp.dhcpOption.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - DhcpOption
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    dhcp.dhcpOption.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the DHCP Option whose id is given as a parameter.
            operationId: ReadDhcpOptionsById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadDhcpOptions
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadDhcpOptionsByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - dhcp.dhcpOption.get
            servers:
                - url: http://wiretap:9090
            tags:
                - DhcpOption
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    dhcp.dhcpOption.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/directLinkInterfaces:
        get:
            description: Lists one or more of your DirectLink interfaces.
            operationId: ReadDirectLinkInterfaces
            parameters:
                - description: The IDs of the DirectLinks.
                  in: query
                  name: directLinkIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the DirectLink interfaces.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadDirectLinkInterfacesResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.directLinkInterface
            servers:
                - url: http://wiretap:9090
            tags:
                - DirectLinkInterface
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: network.directLinkInterface
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a DirectLink interface.<br />
                DirectLink interfaces enable you to reach one of your Vpcs through a virtual gateway.<br /><br />
                For more information, see [About DirectLink](https://docs.outscale.com/en/userguide/About-DirectLink.html).
            operationId: CreateDirectLinkInterface
            requestBody:
                $ref: '#/components/requestBodies/CreateDirectLinkInterfaceRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateDirectLinkInterfaceResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.directLinkInterface.create
            servers:
                - url: http://wiretap:9090
            tags:
                - DirectLinkInterface
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: network.directLinkInterface
                scopes-details:
                    network.directLinkInterface.create: null
    /compute/spaces/{spaceId}/directLinkInterfaces/{id}:
        delete:
            description: Deletes a specified DirectLink interface.
            operationId: DeleteDirectLinkInterface
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the DirectLink interface you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.directLinkInterface.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - DirectLinkInterface
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    network.directLinkInterface.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the DirectLink Interface whose id is given as a parameter.
            operationId: ReadDirectLinkInterfacesById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadDirectLinkInterfaces
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadDirectLinkInterfacesByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.directLinkInterface.get
            servers:
                - url: http://wiretap:9090
            tags:
                - DirectLinkInterface
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    network.directLinkInterface.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: Modifies the maximum transmission unit (MTU) of a DirectLink interface.
            operationId: UpdateDirectLinkInterface
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the DirectLink interface you want to update.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UpdateDirectLinkInterfaceRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateDirectLinkInterfaceResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.directLinkInterface.update
            servers:
                - url: http://wiretap:9090
            tags:
                - DirectLinkInterface
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.directLinkInterface.update:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/directLinks:
        get:
            description: Lists all DirectLinks in the Region.
            operationId: ReadDirectLinks
            parameters:
                - description: The IDs of the DirectLinks.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadDirectLinksResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.directLink
            servers:
                - url: http://wiretap:9090
            tags:
                - DirectLink
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: network.directLink
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a DirectLink between a customer network and a specified DirectLink location.<br /><br />
                For more information, see [About DirectLink](https://docs.outscale.com/en/userguide/About-DirectLink.html).
            operationId: CreateDirectLink
            requestBody:
                $ref: '#/components/requestBodies/CreateDirectLinkRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateDirectLinkResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.directLink.create
            servers:
                - url: http://wiretap:9090
            tags:
                - DirectLink
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: network.directLink
                scopes-details:
                    network.directLink.create: null
    /compute/spaces/{spaceId}/directLinks/{id}:
        delete:
            description: |-
                Deletes a specified DirectLink.<br />
                Before deleting a DirectLink, ensure that all your DirectLink interfaces related to this DirectLink are deleted.
            operationId: DeleteDirectLink
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the DirectLink you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.directLink.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - DirectLink
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    network.directLink.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the DirectLink in the Region whose id is given as a parameter.
            operationId: ReadDirectLinksById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadDirectLinks
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadDirectLinksByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.directLink.get
            servers:
                - url: http://wiretap:9090
            tags:
                - DirectLink
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    network.directLink.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/flexibleGpuCatalogs:
        get:
            description: Lists all flexible GPUs available in the public catalog.
            operationId: ReadFlexibleGpuCatalog
            responses:
                "200":
                    $ref: '#/components/responses/ReadFlexibleGpuCatalogResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.flexibleGpu
            servers:
                - url: http://wiretap:9090
            tags:
                - FlexibleGpu
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: compute.flexibleGpu
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/flexibleGpus:
        get:
            description: Lists one or more flexible GPUs (fGPUs) allocated to your account.
            operationId: ReadFlexibleGpus
            parameters:
                - description: Indicates whether the fGPU is deleted when terminating the VM.
                  in: query
                  name: deleteOnVmDeletion
                  schema:
                    type: boolean
                - description: The processor generations that the fGPUs are compatible with.
                  in: query
                  name: generations
                  schema:
                    items:
                        type: string
                    type: array
                - description: One or more models of fGPUs. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
                  in: query
                  name: modelNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The states of the fGPUs (`allocated` \| `attaching` \| `attached` \| `detaching`).
                  in: query
                  name: states
                  schema:
                    items:
                        type: string
                    type: array
                - description: One or more IDs of VMs.
                  in: query
                  name: vmIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The Subregions where the fGPUs are located.
                  in: query
                  name: availabilityZoneNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: One or more IDs of fGPUs.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadFlexibleGpusResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.flexibleGpu
            servers:
                - url: http://wiretap:9090
            tags:
                - FlexibleGpu
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: compute.flexibleGpu
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Allocates a flexible GPU (fGPU) to your account.<br />
                You can then attach this fGPU to a virtual machine (VM).<br /><br />
                For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
            operationId: CreateFlexibleGpu
            requestBody:
                $ref: '#/components/requestBodies/CreateFlexibleGpuRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateFlexibleGpuResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.flexibleGpu.create
            servers:
                - url: http://wiretap:9090
            tags:
                - FlexibleGpu
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: compute.flexibleGpu
                scopes-details:
                    compute.flexibleGpu.create: null
    /compute/spaces/{spaceId}/flexibleGpus/{id}:
        delete:
            description: |-
                Releases a flexible GPU (fGPU) from your account.<br />
                The fGPU becomes free to be used by someone else.
            operationId: DeleteFlexibleGpu
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the fGPU you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.flexibleGpu.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - FlexibleGpu
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    compute.flexibleGpu.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Gets information about one of flexible GPUs (fGPUs) allocated to your account.
            operationId: ReadFlexibleGpusById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadFlexibleGpus
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadFlexibleGpusByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.flexibleGpu.get
            servers:
                - url: http://wiretap:9090
            tags:
                - FlexibleGpu
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    compute.flexibleGpu.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: Modifies a flexible GPU (fGPU) behavior.
            operationId: UpdateFlexibleGpu
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the fGPU you want to modify.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UpdateFlexibleGpuRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateFlexibleGpuResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.flexibleGpu.update
            servers:
                - url: http://wiretap:9090
            tags:
                - FlexibleGpu
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    compute.flexibleGpu.update:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/flexibleGpus/{id}/vms/link:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Attaches one of your allocated flexible GPUs (fGPUs) to one of your virtual machines (VMs).<br />
                The fGPU is in the `attaching` state until the VM is stopped, after which it becomes `attached`.
            operationId: LinkFlexibleGpu
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the fGPU you want to attach.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/LinkFlexibleGpuRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.flexibleGpu.link
                    - compute.vm.update
            servers:
                - url: http://wiretap:9090
            tags:
                - FlexibleGpu
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    compute.flexibleGpu.link:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
                    compute.vm.update: null
    /compute/spaces/{spaceId}/flexibleGpus/{id}/vms/unlink:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Detaches a flexible GPU (fGPU) from a virtual machine (VM).<br />
                The fGPU is in the `detaching` state until the VM is stopped, after which it becomes available for allocation again.
            operationId: UnlinkFlexibleGpu
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the fGPU you want to detach from your VM.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.flexibleGpu.unlink
                    - compute.vm.update
            servers:
                - url: http://wiretap:9090
            tags:
                - FlexibleGpu
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    compute.flexibleGpu.unlink:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
                    compute.vm.update: null
    /compute/spaces/{spaceId}/images:
        get:
            description: Lists one or more NumSpot machine images (NMIs) you can use.
            operationId: ReadImages
            parameters:
                - description: The account aliases of the owners of the OMIs.
                  in: query
                  name: accountAliases
                  schema:
                    items:
                        type: string
                    type: array
                - description: The account IDs of the owners of the OMIs. By default, all the OMIs for which you have launch permissions are described.
                  in: query
                  name: accountIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The architectures of the OMIs (`i386` \| `x86_64`).
                  in: query
                  name: architectures
                  schema:
                    items:
                        type: string
                    type: array
                - description: Whether the volumes are deleted or not when terminating the VM.
                  in: query
                  name: blockDeviceMappingDeleteOnVmDeletion
                  schema:
                    type: boolean
                - description: The device names for the volumes.
                  in: query
                  name: blockDeviceMappingDeviceNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the snapshots used to create the volumes.
                  in: query
                  name: blockDeviceMappingSnapshotIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The sizes of the volumes, in gibibytes (GiB).
                  in: query
                  name: blockDeviceMappingVolumeSizes
                  schema:
                    items:
                        type: integer
                    type: array
                - description: The types of volumes (`standard` \| `gp2` \| `io1`).
                  in: query
                  name: blockDeviceMappingVolumeTypes
                  schema:
                    items:
                        type: string
                    type: array
                - description: The descriptions of the OMIs, provided when they were created.
                  in: query
                  name: descriptions
                  schema:
                    items:
                        type: string
                    type: array
                - description: The locations of the buckets where the OMI files are stored.
                  in: query
                  name: fileLocations
                  schema:
                    items:
                        type: string
                    type: array
                - description: The hypervisor type of the OMI (always `xen`).
                  in: query
                  name: hypervisors
                  schema:
                    items:
                        type: string
                    type: array
                - description: The names of the OMIs, provided when they were created.
                  in: query
                  name: imageNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The names of the product codes associated with the OMI.
                  in: query
                  name: productCodeNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The product codes associated with the OMI.
                  in: query
                  name: productCodes
                  schema:
                    items:
                        type: string
                    type: array
                - description: The name of the root device. This value must be /dev/sda1.
                  in: query
                  name: rootDeviceNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The types of root device used by the OMIs (`bsu` or `ebs`).
                  in: query
                  name: rootDeviceTypes
                  schema:
                    items:
                        type: string
                    type: array
                - description: The states of the OMIs (`pending` \| `available` \| `failed`).
                  in: query
                  name: states
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the OMIs.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the OMIs.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the OMIs, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The virtualization types (always `hvm`).
                  in: query
                  name: virtualizationTypes
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the OMIs.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
                - description: If true, lists all public OMIs. If false, lists all private OMIs.
                  in: query
                  name: isPublic
                  schema:
                    type: boolean
            responses:
                "200":
                    $ref: '#/components/responses/ReadImagesResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - datamanagement.machineImage
            servers:
                - url: http://wiretap:9090
            tags:
                - Image
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: CONTINUE
                    location: id
                    locationType: HEADER
                    resourceType: datamanagement.machineImage
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: "Creates an NumSpot machine image (NMI).<br />\nYou can use this method in different ways:\n* **Creating from a VM**: You create an NMI from one of your virtual machines (VMs).<br>\n* **Copying an NMI**: You copy an existing NMI. The source NMI can be one of your own NMIs, or an NMI owned by another account that has granted you permission via the [UpdateImage](#updateimage) method.<br>\n* **Registering from a snapshot**: You register an NMI from an existing snapshot. The source snapshot can be one of your own snapshots, or a snapshot owned by another account that has granted you permission via the [UpdateSnapshot](#updatesnapshot) method.<br>\n* **Registering from a bucket by using a manifest file**: You register an NMI from the manifest file of an NMI that was exported to an NumSpot Object Storage (NOS) bucket. First, the owner of the source NMI must export it to the bucket by using the [CreateImageExportTask](#createimageexporttask) method. Then, they must grant you permission to read the manifest file via a pre-signed URL or Access Control Lists. For more information, see [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).<br />\n* **Registering from a bucket without using a manifest file**: This is similar to the previous case but you manually specify all the information that would be in a manifest file instead of using a manifest file.\n\n**[TIP]**<br />\nRegistering from a bucket enables you to copy an NMI across Regions.\n \nFor more information, see [About NMIs](https://docs.outscale.com/en/userguide/About-NMIs.html)."
            operationId: CreateImage
            requestBody:
                $ref: '#/components/requestBodies/CreateImageRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateImageResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - datamanagement.machineImage.create
            servers:
                - url: http://wiretap:9090
            tags:
                - Image
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: datamanagement.machineImage
                scopes-details:
                    datamanagement.machineImage.create: null
    /compute/spaces/{spaceId}/images/{id}:
        delete:
            description: Deletes an NumSpot machine image (NMI) so that you cannot use it anymore to launch virtual machines (VMs). However, you can still use VMs already launched from this NMI.
            operationId: DeleteImage
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the OMI you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - datamanagement.machineImage.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - Image
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    datamanagement.machineImage.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Gets information about one of NumSpot machine images (NMIs) you can use.
            operationId: ReadImagesById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadImages
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadImagesByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - datamanagement.machineImage.get
            servers:
                - url: http://wiretap:9090
            tags:
                - Image
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    datamanagement.machineImage.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Modifies the access permissions for an NumSpot machine image (NMI).<br />
                You must specify either the `Additions` or the `Removals` parameter.<br />
                After sharing an NMI with an account, the other account can create a copy of it that they own. For more information about copying NMIs, see [CreateImage](#createimage).
            operationId: UpdateImage
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the OMI you want to modify.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UpdateImageRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateImageResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - datamanagement.machineImage.update
            servers:
                - url: http://wiretap:9090
            tags:
                - Image
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    datamanagement.machineImage.update:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/internetGateways:
        get:
            description: |-
                Lists one or more of your Internet Gateways.<br />
                An Internet Gateway enables your virtual machines (VMs) launched in a Vpc to connect to the Internet. By default, a Vpc includes an Internet Gateway, and each Subnet is public. Every VM launched within a default Subnet has a private IP and a public IP.
            operationId: ReadInternetGateways
            parameters:
                - description: The current states of the attachments between the Internet services and the Nets (only `available`, if the Internet gateway is attached to a Net).
                  in: query
                  name: linkStates
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the Internet services.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the Internet services.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the Internet services, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Nets the Internet services are attached to.
                  in: query
                  name: linkVpcIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Internet services.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadInternetGatewaysResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.internetGateway
            servers:
                - url: http://wiretap:9090
            tags:
                - InternetGateway
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: loadbalancing.internetGateway
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates an Internet Gateway you can use with a Vpc.<br />
                An Internet Gateway enables your virtual machines (VMs) launched in a Vpc to connect to the Internet. By default, a Vpc includes an Internet Gateway, and each Subnet is public. Every VM launched within a default Subnet has a private IP and a public IP.<br /><br />
                For more information, see [About Internet Services](https://docs.outscale.com/en/userguide/About-Internet-Services.html).
            operationId: CreateInternetGateway
            responses:
                "201":
                    $ref: '#/components/responses/CreateInternetGatewayResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.internetGateway.create
            servers:
                - url: http://wiretap:9090
            tags:
                - InternetGateway
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: loadbalancing.internetGateway
                scopes-details:
                    loadbalancing.internetGateway.create: null
    /compute/spaces/{spaceId}/internetGateways/{id}:
        delete:
            description: |-
                Deletes an Internet Gateway.<br />
                Before deleting an Internet Gateway, you must detach it from any Vpc it is attached to.
            operationId: DeleteInternetGateway
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the Internet service you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.internetGateway.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - InternetGateway
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    loadbalancing.internetGateway.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the Internet Gateway whose id is given as a parameter.
            operationId: ReadInternetGatewaysById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadInternetServices
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadInternetGatewaysByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.internetGateway.get
            servers:
                - url: http://wiretap:9090
            tags:
                - InternetGateway
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    loadbalancing.internetGateway.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/internetGateways/{id}/vpcs/link:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Attaches an Internet Gateway to a Vpc.<br />
                To enable the connection between the Internet and a Vpc, you must attach an Internet Gateway to this Vpc.
            operationId: LinkInternetGateway
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the Internet service you want to attach.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/LinkInternetGatewayRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.internetGateway.link
                    - network.vpc.update
            servers:
                - url: http://wiretap:9090
            tags:
                - InternetGateway
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    loadbalancing.internetGateway.link:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
                    network.vpc.update: null
    /compute/spaces/{spaceId}/internetGateways/{id}/vpcs/unlink:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Detaches an Internet Gateway from a Vpc.<br />
                This action disables and detaches an Internet Gateway from a Vpc. The Vpc must not contain virtual machines (VMs) using public IPs nor internet-facing load balancers.
            operationId: UnlinkInternetGateway
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the Internet service you want to detach.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UnlinkInternetGatewayRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.internetGateway.unlink
                    - network.vpc.update
            servers:
                - url: http://wiretap:9090
            tags:
                - InternetGateway
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    loadbalancing.internetGateway.unlink:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
                    network.vpc.update: null
    /compute/spaces/{spaceId}/keypairs:
        get:
            description: Lists one or more of your keypairs.
            operationId: ReadKeypairs
            parameters:
                - description: The fingerprints of the keypairs.
                  in: query
                  name: keypairFingerprints
                  schema:
                    items:
                        type: string
                    type: array
                - description: The names of the keypairs.
                  in: query
                  name: keypairNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The types of the keypairs (`ssh-rsa`, `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`).
                  in: query
                  name: keypairTypes
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadKeypairsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - security.keyPair
            servers:
                - url: http://wiretap:9090
            tags:
                - Keypair
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: security.keyPair
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a keypair to use with your virtual machines (VMs).<br />
                You can use this method in two different ways:
                * **Creating a keypair**: In that case, NumSpot creates a 2048-bit RSA keypair, stores its public key in your account, and returns its private key in the response of the call so that you can save it in a file.<br />
                When you save the returned private key, make sure you replace the `\n` escape sequences with real line breaks.
                 * **Importing a keypair created locally**: If you already have a keypair that you have created locally with a third-party tool, you can import its public key in your account. The following types of key can be imported: RSA (2048 bits or preferably 4096 bits), ECDSA (256 bits), and Ed25519. The following formats can be used: PEM, PKCS8, RFC4716, and OpenSSH.

                For more information, see [About Keypairs](https://docs.outscale.com/en/userguide/About-Keypairs.html).
            operationId: CreateKeypair
            requestBody:
                $ref: '#/components/requestBodies/CreateKeypairRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateKeypairResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 409 response (Conflict).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - security.keyPair.create
            servers:
                - url: http://wiretap:9090
            tags:
                - Keypair
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: name
                    locationType: BODY_JSON
                    type: security.keyPair
                scopes-details:
                    security.keyPair.create: null
    /compute/spaces/{spaceId}/keypairs/{id}:
        delete:
            description: |-
                Deletes the specified keypair.<br />
                This action deletes the public key stored by NumSpot, thus deleting the keypair.
            operationId: DeleteKeypair
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The name of the keypair you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - security.keyPair.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - Keypair
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    security.keyPair.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the KeyPair whose id is given as a parameter.
            operationId: ReadKeypairsById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadKeypairs
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadKeypairsByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - security.keyPair.get
            servers:
                - url: http://wiretap:9090
            tags:
                - Keypair
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    security.keyPair.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/listenerRules:
        get:
            description: Lists one or more listener rules. By default, this action returns the full list of listener rules for the account.
            operationId: ReadListenerRules
            parameters:
                - description: The names of the listener rules.
                  in: query
                  name: listenerRuleNames
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadListenerRulesResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.listenerRule
            servers:
                - url: http://wiretap:9090
            tags:
                - Listener
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: loadbalancing.listenerRule
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a rule for traffic redirection for the specified listener. Each rule must have either the `HostNamePattern` or `PathPattern` parameter specified. Rules are treated in priority order, from the highest value to the lowest value.<br />
                Once the rule is created, you need to register backend VMs with it. For more information, see the [RegisterVmsInLoadBalancer](#registervmsinloadbalancer) method.<br /><br />
                For more information, see [About Load Balancers](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).
            operationId: CreateListenerRule
            requestBody:
                $ref: '#/components/requestBodies/CreateListenerRuleRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateListenerRuleResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.listenerRule.create
            servers:
                - url: http://wiretap:9090
            tags:
                - Listener
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: loadbalancing.listenerRule
                scopes-details:
                    loadbalancing.listenerRule.create: null
    /compute/spaces/{spaceId}/listenerRules/{id}:
        delete:
            description: |-
                Deletes a listener rule.<br />
                The previously active rule is disabled after deletion.
            operationId: DeleteListenerRule
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The name of the rule you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.listenerRule.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - Listener
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    loadbalancing.listenerRule.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the ListenerRule whose id is given as a parameter.
            operationId: ReadListenerRulesById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadListenerRules
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadListenerRulesByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.listenerRule.get
            servers:
                - url: http://wiretap:9090
            tags:
                - Listener
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    loadbalancing.listenerRule.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Updates the pattern of the listener rule.<br />
                This call updates the pattern matching algorithm for incoming traffic.
            operationId: UpdateListenerRule
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The name of the listener rule.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UpdateListenerRuleRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateListenerRuleResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.listenerRule.update
            servers:
                - url: http://wiretap:9090
            tags:
                - Listener
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    loadbalancing.listenerRule.update:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/loadBalancers:
        get:
            description: Lists one or more load balancers and their attributes.
            operationId: ReadLoadBalancers
            parameters:
                - description: The names of the load balancers.
                  in: query
                  name: loadBalancerNames
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadLoadBalancersResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.loadBalancer
            servers:
                - url: http://wiretap:9090
            tags:
                - LoadBalancer
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: loadbalancing.loadBalancer
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a load balancer.<br />
                The load balancer is created with a unique Domain Name Service (DNS) name. It receives the incoming traffic and routes it to its registered virtual machines (VMs).<br />
                By default, this action creates an Internet-facing load balancer, resolving to public IPs. To create an internal load balancer in a Vpc, resolving to private IPs, use the `LoadBalancerType` parameter.<br />
                You must specify either the `Subnets` or the `AvailabilityZoneNames` parameters.<br /><br />
                For more information, see [About Load Balancers](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).
            operationId: CreateLoadBalancer
            requestBody:
                $ref: '#/components/requestBodies/CreateLoadBalancerRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateLoadBalancerResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.loadBalancer.create
            servers:
                - url: http://wiretap:9090
            tags:
                - LoadBalancer
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: name
                    locationType: BODY_JSON
                    type: loadbalancing.loadBalancer
                scopes-details:
                    loadbalancing.loadBalancer.create: null
    /compute/spaces/{spaceId}/loadBalancers/{id}:
        delete:
            description: Deletes a specified load balancer.
            operationId: DeleteLoadBalancer
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The name of the load balancer you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.loadBalancer.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - LoadBalancer
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    loadbalancing.loadBalancer.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the LoadBalancer whose id is given as a parameter.
            operationId: ReadLoadBalancersById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadLoadBalancers
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadLoadBalancersByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.loadBalancer.get
            servers:
                - url: http://wiretap:9090
            tags:
                - LoadBalancer
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    loadbalancing.loadBalancer.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Modifies the specified attribute of a load balancer. You can specify only one attribute at a time.<br /><br />

                You can set a new SSL certificate to an SSL or HTTPS listener of a load balancer.<br />
                This certificate replaces any certificate used on the same load balancer and port.<br /><br />

                You can also replace the currently enabled policy for the load balancer with another one.<br />
                If the `PolicyNames` parameter is empty, the currently enabled policy is disabled.
            operationId: UpdateLoadBalancer
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The name of the load balancer.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UpdateLoadBalancerRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateLoadBalancerResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.loadBalancer.update
            servers:
                - url: http://wiretap:9090
            tags:
                - LoadBalancer
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    loadbalancing.loadBalancer.update:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/loadBalancers/{id}/backendMachines/link:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Attaches virtual machine (VM) to a specified load balancer. You need to specify at least the `BackendIps` or the `BackendVmIds` parameter.<br />
                The VMs can be in different Subnets and different AvailabilityZones than the load balancer, as long as the VMs and load balancers are all in the public Cloud or all in the same Vpc. It may take a little time for a VM to be registered with the load balancer. Once the VM is registered with a load balancer, it receives traffic and requests from this load balancer and is called a back-end VM.
            operationId: LinkLoadBalancerBackendMachines
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ' The name of the load balancer. '
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/LinkLoadBalancerBackendMachinesRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.loadBalancer.link
                    - compute.vm.update
            servers:
                - url: http://wiretap:9090
            tags:
                - LoadBalancer
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    compute.vm.update: null
                    loadbalancing.loadBalancer.link:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/loadBalancers/{id}/backendMachines/unlink:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: Detaches one or more back-end virtual machines (VMs) from a load balancer. You need to specify at least the `BackendIps` or the `BackendVmIds` parameter.
            operationId: UnlinkLoadBalancerBackendMachines
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ' The name of the load balancer.'
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UnlinkLoadBalancerBackendMachinesRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.loadBalancer.unlink
                    - compute.vm.update
            servers:
                - url: http://wiretap:9090
            tags:
                - LoadBalancer
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    compute.vm.update: null
                    loadbalancing.loadBalancer.unlink:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/loadBalancers/{id}/listeners:
        delete:
            description: Deletes listeners of a specified load balancer.
            operationId: DeleteLoadBalancerListeners
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The name of the load balancer for which you want to delete listeners.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/DeleteLoadBalancerListenersRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.listener.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - Listener
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    loadbalancing.listener.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates one or more listeners for a specified load balancer.<br /><br />
                For more information, see [About Load Balancers](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).
            operationId: CreateLoadBalancerListeners
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The name of the load balancer for which you want to create listeners.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/CreateLoadBalancerListenersRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateLoadBalancerListenersResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.listener.create
            servers:
                - url: http://wiretap:9090
            tags:
                - Listener
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: name
                    locationType: BODY_JSON
                    type: loadbalancing.listener
                scopes-details:
                    loadbalancing.listener.create: null
    /compute/spaces/{spaceId}/loadBalancers/{id}/policies:
        delete:
            description: |-
                Deletes a specified policy from a load balancer.<br />
                In order to be deleted, the policy must not be enabled for any listener.
            operationId: DeleteLoadBalancerPolicy
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The name of the load balancer for which you want to delete a policy.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/DeleteLoadBalancerPolicyRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.policy.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - LoadBalancerPolicy
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    loadbalancing.policy.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a stickiness policy with sticky session lifetimes defined by the browser lifetime.<br />
                The created policy can be used with HTTP or HTTPS listeners only.<br />
                If this policy is implemented by a load balancer, this load balancer uses this cookie in all incoming requests to direct them to the specified back-end server virtual machine (VM). If this cookie is not present, the load balancer sends the request to any other server according to its load-balancing algorithm.<br /><br />

                You can also create a stickiness policy with sticky session lifetimes following the lifetime of an application-generated cookie.<br />
                Unlike the other type of stickiness policy, the lifetime of the special Load Balancer Unit (LBU) cookie follows the lifetime of the application-generated cookie specified in the policy configuration. The load balancer inserts a new stickiness cookie only when the application response includes a new application cookie.<br />
                The session stops being sticky if the application cookie is removed or expires, until a new application cookie is issued.<br /><br />
                 For more information, see [About Load Balancers](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).
            operationId: CreateLoadBalancerPolicy
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The name of the load balancer for which you want to create a policy.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/CreateLoadBalancerPolicyRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateLoadBalancerPolicyResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.policy.create
            servers:
                - url: http://wiretap:9090
            tags:
                - LoadBalancerPolicy
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: name
                    locationType: BODY_JSON
                    type: loadbalancing.policy
                scopes-details:
                    loadbalancing.policy.create: null
    /compute/spaces/{spaceId}/loadBalancers/{id}/vmsHealth:
        get:
            description: Lists the state of one or more back-end virtual machines (VMs) registered with a specified load balancer.
            operationId: ReadVmsHealth
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The name of the load balancer.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/ReadVmsHealthRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ReadVmsHealthResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.loadBalancer.get
            servers:
                - url: http://wiretap:9090
            tags:
                - LoadBalancer
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    loadbalancing.loadBalancer.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/loadBalancersTags:
        get:
            description: Lists the tags associated with one or more specified load balancers.
            operationId: ReadLoadBalancerTags
            requestBody:
                $ref: '#/components/requestBodies/ReadLoadBalancerTagsRequest'
            responses:
                "200":
                    $ref: '#/components/responses/ReadLoadBalancerTagsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - loadbalancing.tags
            servers:
                - url: http://wiretap:9090
            tags:
                - LoadBalancer
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: loadbalancing.tags
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/locations:
        get:
            description: |-
                Lists the locations, corresponding to datacenters, where you can set up a DirectLink.<br /><br />
                For more information, see [About DirectLink](https://docs.outscale.com/en/userguide/About-DirectLink.html).
            operationId: ReadLocations
            responses:
                "200":
                    $ref: '#/components/responses/ReadLocationsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security: []
            servers:
                - url: http://wiretap:9090
            tags:
                - Location
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/natGateways:
        get:
            description: Lists one or more network address translation (NAT) services.
            operationId: ReadNatGateway
            parameters:
                - description: The states of the NAT services (`pending` \| `available` \| `deleting` \| `deleted`).
                  in: query
                  name: states
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Subnets in which the NAT services are.
                  in: query
                  name: subnetIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the NAT services.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the NAT services.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the NAT services, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the NAT services.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Nets in which the NAT services are.
                  in: query
                  name: vpcIds
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadNatGatewayResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.natGateway
            servers:
                - url: http://wiretap:9090
            tags:
                - NatGateway
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: network.natGateway
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: "Creates a network address translation (NAT) service in the specified public Subnet of a Vpc.<br />\nA NAT Gateway enables virtual machines (VMs) placed in the private Subnet of this Vpc to connect to the Internet, without being accessible from the Internet.<br />\nWhen creating a NAT Gateway, you specify the allocation ID of the public IP you want to use as public IP for the NAT Gateway. Once the NAT Gateway is created, you need to create a route in the route table of the private Subnet, with 0.0.0.0/0 as destination and the ID of the NAT Gateway as target. For more information, see [LinkPublicIP](#linkpublicip) and [CreateRoute](#createroute).<br />\nThis action also enables you to create multiple NAT Gateways in the same Vpc (one per public Subnet).<br /><br />\n \n**[IMPORTANT]**<br />\nYou cannot modify the public IP associated with a NAT Gateway after its creation. To do so, you need to delete the NAT Gateway and create a new one with another public IP.<br /><br />\nFor more information, see [About NAT Services](https://docs.outscale.com/en/userguide/About-NAT-Services.html)."
            operationId: CreateNatGateway
            requestBody:
                $ref: '#/components/requestBodies/CreateNatGatewayRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateNatGatewayResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.natGateway.create
                    - network.subnet.get
                    - network.publicIp.get
            servers:
                - url: http://wiretap:9090
            tags:
                - NatGateway
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: network.natGateway
                scopes-details:
                    network.natGateway.create: null
                    network.publicIp.get: null
                    network.subnet.get: null
    /compute/spaces/{spaceId}/natGateways/{id}:
        delete:
            description: |-
                Deletes a specified network address translation (NAT) service.<br />
                This action disassociates the public IP from the NAT Gateway, but does not release this public IP from your account. However, it does not delete any NAT Gateway routes in your route tables.
            operationId: DeleteNatGateway
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the NAT service you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.natGateway.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - NatGateway
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    network.natGateway.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the Network Address Translation (NAT) Gateway whose id is given as a parameter.
            operationId: ReadNatGatewayById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadNatServices
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadNatGatewayByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.natGateway.get
            servers:
                - url: http://wiretap:9090
            tags:
                - NatGateway
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    network.natGateway.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/nics:
        get:
            description: |-
                Lists one or more network interface cards (NICs).<br />
                A NIC is a virtual network interface that you can attach to a virtual machine (VM) in a Vpc.
            operationId: ReadNics
            parameters:
                - description: The descriptions of the NICs.
                  in: query
                  name: descriptions
                  schema:
                    items:
                        type: string
                    type: array
                - description: Whether the source/destination checking is enabled (true) or disabled (false).
                  in: query
                  name: isSourceDestCheck
                  schema:
                    type: boolean
                - description: Whether the NICs are deleted when the VMs they are attached to are terminated.
                  in: query
                  name: linkNicDeleteOnVmDeletion
                  schema:
                    type: boolean
                - description: The device numbers the NICs are attached to.
                  in: query
                  name: linkNicDeviceNumbers
                  schema:
                    items:
                        type: integer
                    type: array
                - description: The attachment IDs of the NICs.
                  in: query
                  name: linkNicLinkNicIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The states of the attachments.
                  in: query
                  name: linkNicStates
                  schema:
                    items:
                        type: string
                    type: array
                - description: The account IDs of the owners of the VMs the NICs are attached to.
                  in: query
                  name: linkNicVmAccountIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the VMs the NICs are attached to.
                  in: query
                  name: linkNicVmIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The account IDs of the owners of the public IPs associated with the NICs.
                  in: query
                  name: linkPublicIpAccountIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The association IDs returned when the public IPs were associated with the NICs.
                  in: query
                  name: linkPublicIpLinkPublicIpIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The allocation IDs returned when the public IPs were allocated to their accounts.
                  in: query
                  name: linkPublicIpPublicIpIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The public IPs associated with the NICs.
                  in: query
                  name: linkPublicIpPublicIps
                  schema:
                    items:
                        type: string
                    type: array
                - description: The Media Access Control (MAC) addresses of the NICs.
                  in: query
                  name: macAddresses
                  schema:
                    items:
                        type: string
                    type: array
                - description: The private DNS names associated with the primary private IPs.
                  in: query
                  name: privateDnsNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The public IPs associated with the private IPs.
                  in: query
                  name: privateIpsLinkPublicIpPublicIps
                  schema:
                    items:
                        type: string
                    type: array
                - description: Whether the private IP is the primary IP associated with the NIC.
                  in: query
                  name: privateIpsPrimaryIp
                  schema:
                    type: boolean
                - description: The private IPs of the NICs.
                  in: query
                  name: privateIpsPrivateIps
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the security groups associated with the NICs.
                  in: query
                  name: securityGroupIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The names of the security groups associated with the NICs.
                  in: query
                  name: securityGroupNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The states of the NICs.
                  in: query
                  name: states
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Subnets for the NICs.
                  in: query
                  name: subnetIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the NICs.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the NICs.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the NICs, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Nets where the NICs are located.
                  in: query
                  name: vpcIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the NICs.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
                - description: The Subregions where the NICs are located.
                  in: query
                  name: availabilityZoneNames
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadNicsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.nic
            servers:
                - url: http://wiretap:9090
            tags:
                - Nic
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: network.nic
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a network interface card (NIC) in the specified Subnet.<br /><br />
                For more information, see [About NICs](https://docs.outscale.com/en/userguide/About-NICs.html).
            operationId: CreateNic
            requestBody:
                $ref: '#/components/requestBodies/CreateNicRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateNicResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.nic.create
            servers:
                - url: http://wiretap:9090
            tags:
                - Nic
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: network.nic
                scopes-details:
                    network.nic.create: null
    /compute/spaces/{spaceId}/nics/{id}:
        delete:
            description: |-
                Deletes the specified network interface card (NIC).<br />
                The network interface must not be attached to any virtual machine (VM).
            operationId: DeleteNic
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the NIC you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.nic.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - Nic
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    network.nic.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the Network Interface Card (NIC) whose id is given as a parameter.
            operationId: ReadNicsById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadNics
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadNicsByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.nic.get
            servers:
                - url: http://wiretap:9090
            tags:
                - Nic
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    network.nic.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: Modifies the specified network interface card (NIC). You can specify only one attribute at a time.
            operationId: UpdateNic
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the NIC you want to modify.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UpdateNicRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateNicResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.nic.update
            servers:
                - url: http://wiretap:9090
            tags:
                - Nic
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.nic.update:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/nics/{id}/privateIps/link:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: Assigns one or more secondary private IPs to a specified network interface card (NIC). This action is only available in a Vpc. The private IPs to be assigned can be added individually using the `PrivateIps` parameter, or you can specify the number of private IPs to be automatically chosen within the Subnet range using the `SecondaryPrivateIpCount` parameter. You can specify only one of these two parameters. If none of these parameters are specified, a private IP is chosen within the Subnet range.
            operationId: LinkPrivateIps
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the NIC.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/LinkPrivateIpsRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.nic.link
            servers:
                - url: http://wiretap:9090
            tags:
                - Nic
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.nic.link:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/nics/{id}/privateIps/unlink:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: Unassigns one or more secondary private IPs from a network interface card (NIC).
            operationId: UnlinkPrivateIps
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: Id of Nic
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UnlinkPrivateIpsRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.nic.unlink
            servers:
                - url: http://wiretap:9090
            tags:
                - Nic
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.nic.unlink:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/nics/{id}/vms/link:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Attaches a network interface card (NIC) to a virtual machine (VM).<br />
                The interface and the VM must be in the same AvailabilityZone. The VM can be either `running` or `stopped`. The NIC must be in the `available` state. For more information, see [Attaching a NIC to a VM](https://docs.outscale.com/en/userguide/Attaching-a-NIC-to-a-VM.html).
            operationId: LinkNic
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the NIC you want to attach.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/LinkNicRequest'
            responses:
                "200":
                    $ref: '#/components/responses/LinkNicResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.nic.link
                    - compute.vm.update
            servers:
                - url: http://wiretap:9090
            tags:
                - Nic
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    compute.vm.update: null
                    network.nic.link:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/nics/{id}/vms/unlink:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Detaches a network interface card (NIC) from a virtual machine (VM).<br />
                The primary NIC cannot be detached.
            operationId: UnlinkNic
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: Id of Nic
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UnlinkNicRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.nic.unlink
                    - compute.vm.update
            servers:
                - url: http://wiretap:9090
            tags:
                - Nic
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    compute.vm.update: null
                    network.nic.unlink:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/productTypes:
        get:
            description: Lists one or more product types.
            operationId: ReadProductTypes
            parameters:
                - description: The IDs of the product types.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadProductTypesResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security: []
            servers:
                - url: http://wiretap:9090
            tags:
                - ProductType
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/productTypes/{id}:
        get:
            description: Lists one or more product types.
            operationId: ReadProductTypesById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadProductTypes
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadProductTypesByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security: []
            servers:
                - url: http://wiretap:9090
            tags:
                - ProductType
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/publicIpRanges:
        get:
            description: Gets the public IPv4 addresses in CIDR notation for the Region specified in the endpoint of the request. For more information, see [Regions, Endpoints, and AvailabilityZones Reference](https://docs.outscale.com/en/userguide/Regions-Endpoints-and-AvailabilityZones-Reference.html).
            operationId: ReadPublicIpRanges
            responses:
                "200":
                    $ref: '#/components/responses/ReadPublicIpRangesResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security: []
            servers:
                - url: http://wiretap:9090
            tags:
                - PublicIp
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/publicIps:
        get:
            description: |-
                Lists one or more public IPs allocated to your account.<br />
                 By default, this action returns information about all your public IPs: available or associated with a virtual machine (VM), a network interface card (NIC) or a NAT Gateway.
            operationId: ReadPublicIps
            parameters:
                - description: The IDs representing the associations of public IPs with VMs or NICs.
                  in: query
                  name: linkPublicIpIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the NICs.
                  in: query
                  name: nicIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The private IPs associated with the public IPs.
                  in: query
                  name: privateIps
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the public IPs.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the public IPs.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the public IPs, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the VMs.
                  in: query
                  name: vmIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the public IPs.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadPublicIpsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security: []
            servers:
                - url: http://wiretap:9090
            tags:
                - PublicIp
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Acquires a public IP for your account.<br />
                A public IP is a static IP designed for dynamic Cloud computing. It can be associated with a virtual machine (VM) in the public Cloud or in a Vpc, a network interface card (NIC), a NAT Gateway.<br /><br />
                For more information, see [About Public IPs](https://docs.outscale.com/en/userguide/About-Public-IPs.html).
            operationId: CreatePublicIp
            responses:
                "201":
                    $ref: '#/components/responses/CreatePublicIpResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security: []
            servers:
                - url: http://wiretap:9090
            tags:
                - PublicIp
    /compute/spaces/{spaceId}/publicIps/{id}:
        delete:
            description: |-
                Releases a public IP.<br />
                You can release a public IP associated with your account. This address is released in the public IP pool and can be used by someone else. Before releasing a public IP, ensure you updated all your resources communicating with this address.
            operationId: DeletePublicIp
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID representing the association of the public IP with the VM or the NIC. In a Net, this parameter is required.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.publicIp.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - PublicIp
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    network.publicIp.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Gets information about one of public IPs allocated to your account.
            operationId: ReadPublicIpsById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadPublicIps
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadPublicIpsByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.publicIp.get
            servers:
                - url: http://wiretap:9090
            tags:
                - PublicIp
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    network.publicIp.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/publicIps/{id}/link:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Associates a public IP with a virtual machine (VM) or a network interface card (NIC), in the public Cloud or in a Vpc. You can associate a public IP with only one VM or network interface at a time.<br />
                To associate a public IP in a Vpc, ensure that the Vpc has an Internet Gateway attached. For more information, see the [LinkInternetGateway](#linkinternetservice) method.<br />
                By default, the public IP is disassociated every time you stop and start the VM. For a persistent association, you can add the `osc.fcu.eip.auto-attach` tag to the VM with the public IP as value. For more information, see the [CreateTags](#createtags) method.<br /><br />

                **[IMPORTANT]**<br />
                You can associate a public IP with a network address translation (NAT) service only when creating the NAT Gateway. To modify its public IP, you need to delete the NAT Gateway and re-create it with the new public IP. For more information, see the [CreateNatService](#createnatservice) method.
            operationId: LinkPublicIp
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The allocation ID of the public IP. This parameter is required unless you use the `PublicIp` parameter.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/LinkPublicIpRequest'
            responses:
                "200":
                    $ref: '#/components/responses/LinkPublicIpResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.publicIp.link
            servers:
                - url: http://wiretap:9090
            tags:
                - PublicIp
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.publicIp.link:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/publicIps/{id}/unlink:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Disassociates a public IP from the virtual machine (VM) or network interface card (NIC) it is associated with.<br /><br />

                **[IMPORTANT]**<br />
                To disassociate the public IP from a NAT Gateway, you need to delete the NAT Gateway. For more information, see the [DeleteNatService](#deletenatservice) method.
            operationId: UnlinkPublicIp
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: Id of the PublicIp
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UnlinkPublicIpRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.publicIp.unlink
            servers:
                - url: http://wiretap:9090
            tags:
                - PublicIp
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.publicIp.unlink:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/routeTables:
        get:
            description: |-
                Lists one or more of your route tables.<br />
                In your Vpc, each Subnet must be associated with a route table. If a Subnet is not explicitly associated with a route table, it is implicitly associated with the main route table of the Vpc.
            operationId: ReadRouteTables
            parameters:
                - description: The IDs of the route tables involved in the associations.
                  in: query
                  name: linkRouteTableIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the associations between the route tables and the Subnets.
                  in: query
                  name: linkRouteTableLinkRouteTableIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: If true, the route tables are the main ones for their Nets.
                  in: query
                  name: linkRouteTableMain
                  schema:
                    type: boolean
                - description: The IDs of the Subnets involved in the associations.
                  in: query
                  name: linkSubnetIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The methods used to create a route.
                  in: query
                  name: routeCreationMethods
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IP ranges specified in routes in the tables.
                  in: query
                  name: routeDestinationIpRanges
                  schema:
                    items:
                        type: string
                    type: array
                - description: The service IDs specified in routes in the tables.
                  in: query
                  name: routeDestinationServiceIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the gateways specified in routes in the tables.
                  in: query
                  name: routeGatewayIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The states of routes in the route tables (always `active`).
                  in: query
                  name: routeStates
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the VMs specified in routes in the tables.
                  in: query
                  name: routeVmIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the route tables.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the route tables.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the route tables, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Nets for the route tables.
                  in: query
                  name: vpcIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the NAT services specified in routes in the tables.
                  in: query
                  name: routeNatGatewayIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Net peerings specified in routes in the tables.
                  in: query
                  name: routeVpcPeeringIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the route tables.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadRouteTablesResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - routing.routeTable
            servers:
                - url: http://wiretap:9090
            tags:
                - RouteTable
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: routing.routeTable
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a route table for a specified Vpc.<br />
                You can then add routes and associate this route table with a Subnet.<br /><br />
                For more information, see [About Route Tables](https://docs.outscale.com/en/userguide/About-Route-Tables.html).
            operationId: CreateRouteTable
            requestBody:
                $ref: '#/components/requestBodies/CreateRouteTableRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateRouteTableResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - routing.routeTable.create
            servers:
                - url: http://wiretap:9090
            tags:
                - RouteTable
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: routing.routeTable
                scopes-details:
                    routing.routeTable.create: null
    /compute/spaces/{spaceId}/routeTables/{id}:
        delete:
            description: |-
                Deletes a specified route table.<br />
                Before deleting a route table, you must disassociate it from any Subnet. You cannot delete the main route table.
            operationId: DeleteRouteTable
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the route table you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - routing.routeTable.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - RouteTable
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    routing.routeTable.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the RouteTable whose id is given as a parameter.
            operationId: ReadRouteTablesById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadRouteTables
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadRouteTablesByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - routing.routeTable.get
            servers:
                - url: http://wiretap:9090
            tags:
                - RouteTable
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    routing.routeTable.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/routeTables/{id}/routePropagation:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: Configures the propagation of routes to a specified route table of a Vpc by a virtual gateway.
            operationId: UpdateRouteTableRoutePropagation
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the route table.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UpdateRouteTableRoutePropagationRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateRouteTableRoutePropagationResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - routing.routeTable.update
            servers:
                - url: http://wiretap:9090
            tags:
                - RouteTable
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    routing.routeTable.update:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/routeTables/{id}/routes:
        delete:
            description: Deletes a route from a specified route table.
            operationId: DeleteRoute
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the route table from which you want to delete a route.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/DeleteRouteRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - routing.routeTable.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - Route
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    routing.routeTable.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a route in a specified route table within a specified Vpc.<br />
                You must specify one of the following elements as the target:<br /><br />

                * Vpc peering<br />
                * NAT VM<br />
                * Internet Gateway<br />
                 * Virtual gateway<br />
                * NAT Gateway<br />
                * Network interface card (NIC)<br /><br />

                The routing algorithm is based on the most specific match.<br /><br />
                For more information, see [About Route Tables](https://docs.outscale.com/en/userguide/About-Route-Tables.html).
            operationId: CreateRoute
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the route table for which you want to create a route.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/CreateRouteRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateRouteResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - routing.routeTable.create
            servers:
                - url: http://wiretap:9090
            tags:
                - Route
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: routing.routeTable
                scopes-details:
                    routing.routeTable.create: null
        put:
            description: "Replaces an existing route within a route table in a Vpc.<br />\n You must specify one of the following elements as the target:<br /><br />\n \n* Vpc peering<br />\n* NAT virtual machine (VM)<br />\n* Internet Gateway<br />\n* Virtual gateway<br />\n* NAT Gateway<br />\n* Network interface card (NIC)<br /><br />\n\nThe routing algorithm is based on the most specific match."
            operationId: UpdateRoute
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the route table.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UpdateRouteRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateRouteResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - routing.routeTable.update
            servers:
                - url: http://wiretap:9090
            tags:
                - Route
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    routing.routeTable.update:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/routeTables/{id}/subnets/link:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Associates a Subnet with a route table.<br />
                The Subnet and the route table must be in the same Vpc. The traffic is routed according to the route table defined within this Vpc. You can associate a route table with several Subnets.
            operationId: LinkRouteTable
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the route table.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/LinkRouteTableRequest'
            responses:
                "200":
                    $ref: '#/components/responses/LinkRouteTableResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - routing.routeTable.link
                    - network.subnet.update
            servers:
                - url: http://wiretap:9090
            tags:
                - RouteTable
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.subnet.update: null
                    routing.routeTable.link:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/routeTables/{id}/subnets/unlink:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Disassociates a Subnet from a route table.<br />
                After disassociation, the Subnet can no longer use the routes in this route table, but uses the routes in the main route table of the Vpc instead.
            operationId: UnlinkRouteTable
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: Id of the RouteTable
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UnlinkRouteTableRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - routing.routeTable.unlink
                    - network.subnet.update
            servers:
                - url: http://wiretap:9090
            tags:
                - RouteTable
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.subnet.update: null
                    routing.routeTable.unlink:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/securityGroups:
        get:
            description: |-
                Lists one or more security groups.<br />
                You can specify either the name of the security groups or their IDs.
            operationId: ReadSecurityGroups
            parameters:
                - description: The descriptions of the security groups.
                  in: query
                  name: descriptions
                  schema:
                    items:
                        type: string
                    type: array
                - description: The account IDs that have been granted permissions.
                  in: query
                  name: inboundRuleAccountIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The beginnings of the port ranges for the TCP and UDP protocols, or the ICMP type numbers.
                  in: query
                  name: inboundRuleFromPortRanges
                  schema:
                    items:
                        type: integer
                    type: array
                - description: The IP ranges that have been granted permissions, in CIDR notation (for example, `10.0.0.0/24`).
                  in: query
                  name: inboundRuleIpRanges
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IP protocols for the permissions (`tcp` \| `udp` \| `icmp`, or a protocol number, or `-1` for all protocols).
                  in: query
                  name: inboundRuleProtocols
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the security groups that have been granted permissions.
                  in: query
                  name: inboundRuleSecurityGroupIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The names of the security groups that have been granted permissions.
                  in: query
                  name: inboundRuleSecurityGroupNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The ends of the port ranges for the TCP and UDP protocols, or the ICMP code numbers.
                  in: query
                  name: inboundRuleToPortRanges
                  schema:
                    items:
                        type: integer
                    type: array
                - description: The account IDs that have been granted permissions.
                  in: query
                  name: outboundRuleAccountIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The beginnings of the port ranges for the TCP and UDP protocols, or the ICMP type numbers.
                  in: query
                  name: outboundRuleFromPortRanges
                  schema:
                    items:
                        type: integer
                    type: array
                - description: The IP ranges that have been granted permissions, in CIDR notation (for example, `10.0.0.0/24`).
                  in: query
                  name: outboundRuleIpRanges
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IP protocols for the permissions (`tcp` \| `udp` \| `icmp`, or a protocol number, or `-1` for all protocols).
                  in: query
                  name: outboundRuleProtocols
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the security groups that have been granted permissions.
                  in: query
                  name: outboundRuleSecurityGroupIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The names of the security groups that have been granted permissions.
                  in: query
                  name: outboundRuleSecurityGroupNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The ends of the port ranges for the TCP and UDP protocols, or the ICMP code numbers.
                  in: query
                  name: outboundRuleToPortRanges
                  schema:
                    items:
                        type: integer
                    type: array
                - description: The IDs of the security groups.
                  in: query
                  name: securityGroupIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The names of the security groups.
                  in: query
                  name: securityGroupNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the security groups.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the security groups.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the security groups, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Nets specified when the security groups were created.
                  in: query
                  name: vpcIds
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadSecurityGroupsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - security.securityGroup
            servers:
                - url: http://wiretap:9090
            tags:
                - SecurityGroup
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: security.securityGroup
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a security group.<br />
                This action creates a security group either in the public Cloud or in a specified Vpc. By default, a default security group for use in the public Cloud and a default security group for use in a Vpc are created.<br />
                When launching a virtual machine (VM), if no security group is explicitly specified, the appropriate default security group is assigned to the VM. Default security groups include a default rule granting VMs network access to each other.<br />
                When creating a security group, you specify a name. Two security groups for use in the public Cloud or for use in a Vpc cannot have the same name.<br />
                You can have up to 500 security groups in the public Cloud. You can create up to 500 security groups per Vpc.<br />
                To add or remove rules, use the [CreateSecurityGroupRule](#createsecuritygrouprule) method.<br /><br />
                For more information, see [About Security Groups](https://docs.outscale.com/en/userguide/About-Security-Groups.html).
            operationId: CreateSecurityGroup
            requestBody:
                $ref: '#/components/requestBodies/CreateSecurityGroupRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateSecurityGroupResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - security.securityGroup.create
            servers:
                - url: http://wiretap:9090
            tags:
                - SecurityGroup
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: security.securityGroup
                scopes-details:
                    security.securityGroup.create: null
    /compute/spaces/{spaceId}/securityGroups/{id}:
        delete:
            description: |-
                Deletes a specified security group.<br />
                You can specify either the name of the security group or its ID.<br />
                This action fails if the specified group is associated with a virtual machine (VM) or referenced by another security group.
            operationId: DeleteSecurityGroup
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the security group you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - security.securityGroup.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - SecurityGroup
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    security.securityGroup.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the SecurityGroup whose id is given as a parameter.
            operationId: ReadSecurityGroupsById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadSecurityGroups
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadSecurityGroupsByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - security.securityGroup.get
            servers:
                - url: http://wiretap:9090
            tags:
                - SecurityGroup
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    security.securityGroup.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/securityGroups/{id}/rules:
        delete:
            description: |-
                Deletes one or more inbound or outbound rules from a security group. For the rule to be deleted, the values specified in the deletion request must exactly match the value of the existing rule.<br />
                In case of TCP and UDP protocols, you have to indicate the destination port or range of ports. In case of ICMP protocol, you have to specify the ICMP type and code numbers.<br />
                Rules (IP permissions) consist of the protocol, IP range or source security group.<br />
                To remove outbound access to a destination security group, we recommend to use a set of IP permissions. We also recommend to specify the protocol in a set of IP permissions.
            operationId: DeleteSecurityGroupRule
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the security group you want to delete a rule from.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/DeleteSecurityGroupRuleRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - security.securityGroup.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - SecurityGroupRule
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    security.securityGroup.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Adds one or more rules to a security group.<br />
                Use the `SecurityGroupId` parameter to specify the security group for which you want to create a rule.<br />
                Use the `Flow` parameter to specify if you want an inbound rule or an outbound rule.<br /><br />
                An inbound rule allows the security group to receive traffic:
                * Either from a specific IP range (`IpRange` parameter) on a specific port range (`FromPortRange` and `ToPortRange` parameters) and specific protocol (`IpProtocol` parameter).
                * Or from another specific security group (`SecurityGroupAccountIdToLink` and `SecurityGroupNameToLink` parameters).<br />

                (Vpc only) An outbound rule works similarly but allows the security group to send traffic rather than receive traffic.<br />

                Alternatively, you can use the `Rules` parameter to add several rules at the same time.

                **[NOTE]**<br />
                * The modifications are effective as quickly as possible, but a small delay may occur.<br />
                 * By default, traffic between two security groups is allowed through both public and private IPs. To restrict traffic to private IPs only, contact our Support team at support@numspot.com.

                For more information, see [About Security Group Rules](https://docs.outscale.com/en/userguide/About-Security-Group-Rules.html).
            operationId: CreateSecurityGroupRule
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the security group for which you want to create a rule.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/CreateSecurityGroupRuleRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateSecurityGroupRuleResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - security.securityGroup.create
            servers:
                - url: http://wiretap:9090
            tags:
                - SecurityGroupRule
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: security.securityGroup
                scopes-details:
                    security.securityGroup.create: null
    /compute/spaces/{spaceId}/snapshots:
        get:
            description: Lists one or more snapshots that are available to you and the permissions to create volumes from them.
            operationId: ReadSnapshots
            parameters:
                - description: The descriptions of the snapshots.
                  in: query
                  name: descriptions
                  schema:
                    items:
                        type: string
                    type: array
                - description: The beginning of the time period, in ISO 8601 date-time format (for example, `2020-06-14T00:00:00.000Z`).
                  in: query
                  name: fromCreationDate
                  schema:
                    type: string
                - description: The progresses of the snapshots, as a percentage.
                  in: query
                  name: progresses
                  schema:
                    items:
                        type: integer
                    type: array
                - description: The states of the snapshots (`in-queue` \| `completed` \| `error`).
                  in: query
                  name: states
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the snapshots.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the snapshots.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the snapshots, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The end of the time period, in ISO 8601 date-time format (for example, `2020-06-30T00:00:00.000Z`).
                  in: query
                  name: toCreationDate
                  schema:
                    type: string
                - description: The IDs of the volumes used to create the snapshots.
                  in: query
                  name: volumeIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The sizes of the volumes used to create the snapshots, in gibibytes (GiB).
                  in: query
                  name: volumeSizes
                  schema:
                    items:
                        type: integer
                    type: array
                - description: If true, lists all public volumes. If false, lists all private volumes.
                  in: query
                  name: isPublic
                  schema:
                    type: boolean
                - description: The IDs of the snapshots.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadSnapshotsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - storageblock.snapshot
            servers:
                - url: http://wiretap:9090
            tags:
                - Snapshot
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: storageblock.snapshot
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: "Creates a snapshot. Snapshots are point-in-time images of a volume that you can use to back up your data or to create replicas of this volume.<br />\nYou can use this method in three different ways:\n* **Creating from a volume**: You create a snapshot from one of your volumes.<br />\n* **Copying a snapshot**: You copy an existing snapshot. The source snapshot can be one of your own snapshots, or a snapshot owned by another account that has granted you permission via the [UpdateSnapshot](#updatesnapshot) method.<br />\n* **Importing from a bucket**: You import a snapshot located in an NumSpot Object Storage (NOS) bucket. First, the owner of the source snapshot must export it to the bucket by using the [CreateSnapshotExportTask](#createsnapshotexporttask) method. Then, they must grant you permission to read the snapshot via a pre-signed URL or Access Control Lists. For more information, see [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).\n \nFor more information, see [About Snapshots](https://docs.outscale.com/en/userguide/About-Snapshots.html)."
            operationId: CreateSnapshot
            requestBody:
                $ref: '#/components/requestBodies/CreateSnapshotRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateSnapshotResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - storageblock.snapshot.create
            servers:
                - url: http://wiretap:9090
            tags:
                - Snapshot
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: storageblock.snapshot
                scopes-details:
                    storageblock.snapshot.create: null
    /compute/spaces/{spaceId}/snapshots/{id}:
        delete:
            description: |-
                Deletes a specified snapshot.<br />
                You cannot delete a snapshot that is currently used by an NumSpot machine image (NMI). To do so, you first need to delete the corresponding NMI. For more information, see the [DeleteImage](#deleteimage) method.
            operationId: DeleteSnapshot
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the snapshot you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - storageblock.snapshot.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - Snapshot
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    storageblock.snapshot.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the Snapshot whose id is given as a parameter.
            operationId: ReadSnapshotsById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadSnapshots
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadSnapshotsByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - storageblock.snapshot.get
            servers:
                - url: http://wiretap:9090
            tags:
                - Snapshot
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    storageblock.snapshot.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/subnets:
        get:
            description: |-
                Lists one or more of your Subnets.<br />
                If you do not specify any Subnet ID, this action describes all of your Subnets.
            operationId: ReadSubnets
            parameters:
                - description: The number of available IPs.
                  in: query
                  name: availableIpsCounts
                  schema:
                    items:
                        type: integer
                    type: array
                - description: The IP ranges in the Subnets, in CIDR notation (for example, `10.0.0.0/16`).
                  in: query
                  name: ipRanges
                  schema:
                    items:
                        type: string
                    type: array
                - description: The states of the Subnets (`pending` \| `available` \| `deleted`).
                  in: query
                  name: states
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the Subnets.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the Subnets.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the Subnets, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Nets in which the Subnets are.
                  in: query
                  name: vpcIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Subnets.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
                - description: The names of the Subregions in which the Subnets are located.
                  in: query
                  name: availabilityZoneNames
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadSubnetsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.subnet
            servers:
                - url: http://wiretap:9090
            tags:
                - Subnet
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: network.subnet
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a Subnet in an existing Vpc.<br />
                To create a Subnet in a Vpc, you have to provide the ID of the Vpc and the IP range for the Subnet (its network range). Once the Subnet is created, you cannot modify its IP range.<br /><br />
                For more information, see [About Vpcs](https://docs.outscale.com/en/userguide/About-Vpcs.html).
            operationId: CreateSubnet
            requestBody:
                $ref: '#/components/requestBodies/CreateSubnetRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateSubnetResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 409 response (Conflict).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.subnet.create
            servers:
                - url: http://wiretap:9090
            tags:
                - Subnet
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: network.subnet
                scopes-details:
                    network.subnet.create: null
    /compute/spaces/{spaceId}/subnets/{id}:
        delete:
            description: "Deletes a specified Subnet.<br />\nBefore deleting the Subnet, you need to delete all resources associated with the Subnet:<br /><br />\n \n* Virtual machines (VMs)<br />\n* Network Interface Cards (NICs)<br />\n * NAT Gateways<br />\n* Load balancers"
            operationId: DeleteSubnet
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the Subnet you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.subnet.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - Subnet
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    network.subnet.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the Subnet whose id is given as a parameter.
            operationId: ReadSubnetsById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadSubnets
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadSubnetsByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.subnet.get
            servers:
                - url: http://wiretap:9090
            tags:
                - Subnet
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    network.subnet.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: Modifies the specified attribute of a Subnet.
            operationId: UpdateSubnet
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the Subnet.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UpdateSubnetRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateSubnetResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.subnet.update
            servers:
                - url: http://wiretap:9090
            tags:
                - Subnet
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.subnet.update:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/tags:
        get:
            description: Lists one or more tags for your resources.
            operationId: ReadTags
            parameters:
                - description: The keys of the tags that are assigned to the resources. You can use this filter alongside the `Values` filter. In that case, you filter the resources corresponding to each tag, regardless of the other filter.
                  in: query
                  name: keys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the resources with which the tags are associated.
                  in: query
                  name: resourceIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The resource type (`vm` \| `image` \| `volume` \| `snapshot` \| `public-ip` \| `security-group` \| `route-table` \| `nic` \| `net` \| `subnet` \| `net-peering` \| `net-access-point` \| `nat-service` \| `internet-service` \| `client-gateway` \| `virtual-gateway` \| `vpn-connection` \| `dhcp-options` \| `task`).
                  in: query
                  name: resourceTypes
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags that are assigned to the resources. You can use this filter alongside the `TagKeys` filter. In that case, you filter the resources corresponding to each tag, regardless of the other filter.
                  in: query
                  name: values
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadTagsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - metadata.tag
            servers:
                - url: http://wiretap:9090
            tags:
                - Tag
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: metadata.tag
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/virtualGateways:
        get:
            description: Lists one or more virtual gateways.
            operationId: ReadVirtualGateways
            parameters:
                - description: The types of the virtual gateways (only `ipsec.1` is supported).
                  in: query
                  name: connectionTypes
                  schema:
                    items:
                        type: string
                    type: array
                - description: The current states of the attachments between the virtual gateways and the Nets (`attaching` \| `attached` \| `detaching` \| `detached`).
                  in: query
                  name: linkStates
                  schema:
                    items:
                        type: string
                    type: array
                - description: The states of the virtual gateways (`pending` \| `available` \| `deleting` \| `deleted`).
                  in: query
                  name: states
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the virtual gateways.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the virtual gateways.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the virtual gateways, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Nets the virtual gateways are attached to.
                  in: query
                  name: linkVpcIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the virtual gateways.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadVirtualGatewaysResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.virtualGateway
            servers:
                - url: http://wiretap:9090
            tags:
                - VirtualGateway
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: network.virtualGateway
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a virtual gateway.<br />
                A virtual gateway is the access point on the Vpc side of a VPN connection.<br /><br />
                For more information, see [About Virtual Gateways](https://docs.outscale.com/en/userguide/About-Virtual-Gateways.html).
            operationId: CreateVirtualGateway
            requestBody:
                $ref: '#/components/requestBodies/CreateVirtualGatewayRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateVirtualGatewayResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.virtualGateway.create
            servers:
                - url: http://wiretap:9090
            tags:
                - VirtualGateway
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: network.virtualGateway
                scopes-details:
                    network.virtualGateway.create: null
    /compute/spaces/{spaceId}/virtualGateways/{id}:
        delete:
            description: |-
                Deletes a specified virtual gateway.<br />
                Before deleting a virtual gateway, we recommend to detach it from the Vpc and delete the VPN connection.
            operationId: DeleteVirtualGateway
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the virtual gateway you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.virtualGateway.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - VirtualGateway
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    network.virtualGateway.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the VirtualGateway whose id is given as a parameter.
            operationId: ReadVirtualGatewaysById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadVirtualGateways
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadVirtualGatewaysByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.virtualGateway.get
            servers:
                - url: http://wiretap:9090
            tags:
                - VirtualGateway
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    network.virtualGateway.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/virtualGateways/{id}/vpcs/link:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Attaches a virtual gateway to a Vpc.

                **[IMPORTANT]**<br />
                 This action can be done only if the virtual gateway is in the `available` state.
            operationId: LinkVirtualGatewayToVpc
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the virtual gateway.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/LinkVirtualGatewayToVpcRequest'
            responses:
                "200":
                    $ref: '#/components/responses/LinkVirtualGatewayToVpcResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.virtualGateway.link
                    - network.vpc.update
            servers:
                - url: http://wiretap:9090
            tags:
                - VirtualGateway
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.virtualGateway.link:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
                    network.vpc.update: null
    /compute/spaces/{spaceId}/virtualGateways/{id}/vpcs/unlink:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Detaches a virtual gateway from a Vpc.<br />
                You must wait until the virtual gateway is in the detached state before you can attach another Vpc to it or delete the Vpc it was previously attached to.
            operationId: UnlinkVirtualGatewayToVpc
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the virtual gateway.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UnlinkVirtualGatewayToVpcRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.virtualGateway.unlink
                    - network.vpc.update
            servers:
                - url: http://wiretap:9090
            tags:
                - VirtualGateway
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.virtualGateway.unlink:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
                    network.vpc.update: null
    /compute/spaces/{spaceId}/vms:
        get:
            description: |-
                Lists one or more of your virtual machines (VMs).<br />
                This  action returns a description for all of the VMs that belong to you. The  refresh interval for data returned by this action is one hour, meaning  that a terminated VM may appear in the response.
            operationId: ReadVms
            parameters:
                - description: The architectures of the VMs (`i386` \| `x86_64`).
                  in: query
                  name: architectures
                  schema:
                    items:
                        type: string
                    type: array
                - description: Whether the BSU volumes are deleted when terminating the VMs.
                  in: query
                  name: blockDeviceMappingDeleteOnVmDeletion
                  schema:
                    type: boolean
                - description: The device names for the BSU volumes (in the format `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX`).
                  in: query
                  name: blockDeviceMappingDeviceNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The link dates for the BSU volumes mapped to the VMs (for example, `2016-01-23T18:45:30.000Z`).
                  in: query
                  name: blockDeviceMappingLinkDates
                  schema:
                    items:
                        oneOf:
                            - format: date
                              type: string
                            - format: date-time
                              type: string
                    type: array
                - description: The states for the BSU volumes (`attaching` \| `attached` \| `detaching` \| `detached`).
                  in: query
                  name: blockDeviceMappingStates
                  schema:
                    items:
                        type: string
                    type: array
                - description: The volume IDs of the BSU volumes.
                  in: query
                  name: blockDeviceMappingVolumeIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The idempotency tokens provided when launching the VMs.
                  in: query
                  name: clientTokens
                  schema:
                    items:
                        type: string
                    type: array
                - description: The dates when the VMs were launched.
                  in: query
                  name: creationDates
                  schema:
                    items:
                        oneOf:
                            - format: date
                              type: string
                            - format: date-time
                              type: string
                    type: array
                - description: The IDs of the OMIs used to launch the VMs.
                  in: query
                  name: imageIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: Whether the source/destination checking is enabled (true) or disabled (false).
                  in: query
                  name: isSourceDestChecked
                  schema:
                    type: boolean
                - description: The names of the keypairs used when launching the VMs.
                  in: query
                  name: keypairNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The numbers for the VMs when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
                  in: query
                  name: launchNumbers
                  schema:
                    items:
                        type: integer
                    type: array
                - description: Whether the VMs are Spot Instances (spot).
                  in: query
                  name: lifecycles
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the NICs.
                  in: query
                  name: nicAccountIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The descriptions of the NICs.
                  in: query
                  name: nicDescriptions
                  schema:
                    items:
                        type: string
                    type: array
                - description: Whether the source/destination checking is enabled (true) or disabled (false).
                  in: query
                  name: nicIsSourceDestChecked
                  schema:
                    type: boolean
                - description: Whether the NICs are deleted when the VMs they are attached to are deleted.
                  in: query
                  name: nicLinkNicDeleteOnVmDeletion
                  schema:
                    type: boolean
                - description: The device numbers the NICs are attached to.
                  in: query
                  name: nicLinkNicDeviceNumbers
                  schema:
                    items:
                        type: integer
                    type: array
                - description: The dates and time when the NICs were attached to the VMs.
                  in: query
                  name: nicLinkNicLinkNicDates
                  schema:
                    items:
                        oneOf:
                            - format: date
                              type: string
                            - format: date-time
                              type: string
                    type: array
                - description: The IDs of the NIC attachments.
                  in: query
                  name: nicLinkNicLinkNicIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The states of the attachments.
                  in: query
                  name: nicLinkNicStates
                  schema:
                    items:
                        type: string
                    type: array
                - description: The account IDs of the owners of the VMs the NICs are attached to.
                  in: query
                  name: nicLinkNicVmAccountIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the VMs the NICs are attached to.
                  in: query
                  name: nicLinkNicVmIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The account IDs of the owners of the public IPs associated with the NICs.
                  in: query
                  name: nicLinkPublicIpAccountIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The association IDs returned when the public IPs were associated with the NICs.
                  in: query
                  name: nicLinkPublicIpLinkPublicIpIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The allocation IDs returned when the public IPs were allocated to their accounts.
                  in: query
                  name: nicLinkPublicIpPublicIpIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The public IPs associated with the NICs.
                  in: query
                  name: nicLinkPublicIpPublicIps
                  schema:
                    items:
                        type: string
                    type: array
                - description: The Media Access Control (MAC) addresses of the NICs.
                  in: query
                  name: nicMacAddresses
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the NICs.
                  in: query
                  name: nicNicIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The account IDs of the owner of the public IPs associated with the private IPs.
                  in: query
                  name: nicPrivateIpsLinkPublicIpAccountIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The public IPs associated with the private IPs.
                  in: query
                  name: nicPrivateIpsLinkPublicIpIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: Whether the private IPs are the primary IPs associated with the NICs.
                  in: query
                  name: nicPrivateIpsPrimaryIp
                  schema:
                    type: boolean
                - description: The private IPs of the NICs.
                  in: query
                  name: nicPrivateIpsPrivateIps
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the security groups associated with the NICs.
                  in: query
                  name: nicSecurityGroupIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The names of the security groups associated with the NICs.
                  in: query
                  name: nicSecurityGroupNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The states of the NICs (`available` \| `in-use`).
                  in: query
                  name: nicStates
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Subnets for the NICs.
                  in: query
                  name: nicSubnetIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The platforms. Use windows if you have Windows VMs. Otherwise, leave this filter blank.
                  in: query
                  name: platforms
                  schema:
                    items:
                        type: string
                    type: array
                - description: The private IPs of the VMs.
                  in: query
                  name: privateIps
                  schema:
                    items:
                        type: string
                    type: array
                - description: The product codes associated with the OMI used to create the VMs.
                  in: query
                  name: productCodes
                  schema:
                    items:
                        type: string
                    type: array
                - description: The public IPs of the VMs.
                  in: query
                  name: publicIps
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the reservation of the VMs, created every time you launch VMs. These reservation IDs can be associated with several VMs when you lauch a group of VMs using the same launch request.
                  in: query
                  name: reservationIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The names of the root devices for the VMs (for example, `/dev/sda1`)
                  in: query
                  name: rootDeviceNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The root devices types used by the VMs (always `ebs`)
                  in: query
                  name: rootDeviceTypes
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the security groups for the VMs (only in the public Cloud).
                  in: query
                  name: securityGroupIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The names of the security groups for the VMs (only in the public Cloud).
                  in: query
                  name: securityGroupNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The reason codes for the state changes.
                  in: query
                  name: stateReasonCodes
                  schema:
                    items:
                        type: integer
                    type: array
                - description: The messages describing the state changes.
                  in: query
                  name: stateReasonMessages
                  schema:
                    items:
                        type: string
                    type: array
                - description: The reasons explaining the current states of the VMs. This filter is like the `StateReasonCodes` one.
                  in: query
                  name: stateReasons
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Subnets for the VMs.
                  in: query
                  name: subnetIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the VMs.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the VMs.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the VMs, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The tenancies of the VMs (`dedicated` \| `default` \| `host`).
                  in: query
                  name: tenancies
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the security groups for the VMs.
                  in: query
                  name: vmSecurityGroupIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The names of the security group for the VMs.
                  in: query
                  name: vmSecurityGroupNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The state codes of the VMs: `-1` (quarantine), `0` (pending), `16` (running), `32` (shutting-down), `48` (terminated), `64` (stopping), and `80` (stopped).'
                  in: query
                  name: vmStateCodes
                  schema:
                    items:
                        type: integer
                    type: array
                - description: The state names of the VMs (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
                  in: query
                  name: vmStateNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The VM types (for example, t2.micro). For more information, see [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
                  in: query
                  name: types
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Nets in which the VMs are running.
                  in: query
                  name: vpcIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Nets where the NICs are located.
                  in: query
                  name: nicVpcIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The Subregions where the NICs are located.
                  in: query
                  name: nicAvailabilityZoneNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The names of the Subregions of the VMs.
                  in: query
                  name: availabilityZoneNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: One or more IDs of VMs.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadVmsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.vm
            servers:
                - url: http://wiretap:9090
            tags:
                - Vm
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: compute.vm
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates virtual machines (VMs), and then launches them.<br />
                 This action enables you to create a specified number of VMs using an NumSpot machine image (NMI) that you are allowed to use, and then to automatically launch them.<br />
                The VMs remain in the `pending` state until they are created and ready to be used. Once automatically launched, they are in the `running` state.<br />
                To check the state of your VMs, call the [ReadVms](#readvms) method.<br />
                If not specified, the security group used by the service is the default one.<br />
                The metadata server enables you to get the public key provided when the VM is launched. Official NMIs contain a script to get this public key and put it inside the VM to provide secure access without password.<br /><br />
                For more information, see [About VMs](https://docs.outscale.com/en/userguide/About-VMs.html).
            operationId: CreateVms
            requestBody:
                $ref: '#/components/requestBodies/CreateVmsRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateVmsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.vm.create
            servers:
                - url: http://wiretap:9090
            tags:
                - Vm
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: compute.vm
                operation-outputs:
                    - cardinality: SINGLE
                      location: id
                      locationType: BODY_JSON
                      type: storageblock.volume
                scopes-details:
                    compute.vm.create: null
    /compute/spaces/{spaceId}/vms/{id}:
        delete:
            description: |-
                Terminates virtual machine (VM).<br />
                This operation is idempotent, that means that all calls succeed if you terminate a VM more than once.
            operationId: DeleteVms
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: Id of the VM
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.vm.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - Vm
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    compute.vm.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the Virtual Machine (VM) whose id is given as a parameter.
            operationId: ReadVmsById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadVms
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadVmsByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.vm.get
            servers:
                - url: http://wiretap:9090
            tags:
                - Vm
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    compute.vm.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Modifies the specified attributes of a virtual machine (VM).<br />
                You must stop the VM before modifying the following attributes:<br />
                 * `NestedVirtualization`<br />
                * `Performance`<br />
                * `UserData`<br />
                 * `type`
            operationId: UpdateVm
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the VM.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UpdateVmRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateVmResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.vm.update
            servers:
                - url: http://wiretap:9090
            tags:
                - Vm
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    compute.vm.update:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/vms/{id}/adminPasswords:
        get:
            description: |-
                Gets the administrator password for a Windows running virtual machine (VM).<br />
                The administrator password is encrypted using the keypair you specified when launching the VM.<br /><br />

                **[IMPORTANT]**<br />
                 * Only RSA keypairs can decrypt the password of a Windows VM.<br />
                * The administrator password is generated only on the first boot of the Windows VM. It is not returned after the first boot.
            operationId: ReadAdminPassword
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the VM.
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadAdminPasswordResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.vm.getAdminPassword
            servers:
                - url: http://wiretap:9090
            tags:
                - Vm
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    compute.vm.getAdminPassword:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/vms/{id}/consoleOutputs:
        get:
            description: |-
                Gets the console output for a virtual machine (VM). This console provides the most recent 64 KiB output.<br /><br />

                **[IMPORTANT]**<br />
                On Windows VMs, the console is handled only on the first boot. It returns no output after the first boot.
            operationId: ReadConsoleOutput
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the VM.
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadConsoleOutputResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.vm.getConsoleOutput
            servers:
                - url: http://wiretap:9090
            tags:
                - Vm
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    compute.vm.getConsoleOutput:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/vms/{id}/reboot:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Reboots virtual machine (VM).<br />
                This operation sends a reboot request to specified VM. This is an asynchronous action that queues this reboot request. This action only reboots VM that are valid and that belong to you.
            operationId: RebootVm
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: Id of the VM
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.vm.reboot
            servers:
                - url: http://wiretap:9090
            tags:
                - Vm
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    compute.vm.reboot:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/vms/{id}/start:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Start virtual machine (VM).<br />
                You can start only VM that is valid and that belong to you.
            operationId: StartVm
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: Id of the VM
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/StartVmResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.vm.start
            servers:
                - url: http://wiretap:9090
            tags:
                - Vm
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    compute.vm.start:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/vms/{id}/stop:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Stops running virtual machine (VM).<br />
                You can stop only VM that is valid and that belong to you. Data stored in the VM RAM is lost.
            operationId: StopVm
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: Id of the VM
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/StopVmRequest'
            responses:
                "200":
                    $ref: '#/components/responses/StopVmResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.vm.stop
            servers:
                - url: http://wiretap:9090
            tags:
                - Vm
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    compute.vm.stop:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/vms/states:
        get:
            description: Lists the status of virtual machine (VM).
            operationId: ReadVmsState
            parameters:
                - description: The code for the scheduled event (`system-reboot` \| `system-maintenance`).
                  in: query
                  name: maintenanceEventCodes
                  schema:
                    items:
                        type: string
                    type: array
                - description: The description of the scheduled event.
                  in: query
                  name: maintenanceEventDescriptions
                  schema:
                    items:
                        type: string
                    type: array
                - description: The latest time the event can end.
                  in: query
                  name: maintenanceEventsNotAfter
                  schema:
                    items:
                        format: date
                        type: string
                    type: array
                - description: The earliest time the event can start.
                  in: query
                  name: maintenanceEventsNotBefore
                  schema:
                    items:
                        format: date
                        type: string
                    type: array
                - description: The states of the VMs (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
                  in: query
                  name: vmStates
                  schema:
                    items:
                        type: string
                    type: array
                - description: The names of the Subregions of the VMs.
                  in: query
                  name: availabilityZoneNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: One or more IDs of VMs.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadVmsStateResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - compute.vm
            servers:
                - url: http://wiretap:9090
            tags:
                - Vm
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: compute.vm
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/volumes:
        get:
            description: Lists one or more specified Block Storage Unit (BSU) volumes.
            operationId: ReadVolumes
            parameters:
                - description: The dates and times of creation of the volumes, in ISO 8601 date-time format (for example, `2020-06-30T00:00:00.000Z`).
                  in: query
                  name: creationDates
                  schema:
                    items:
                        format: date-time
                        type: string
                    type: array
                - description: Whether the volumes are deleted or not when terminating the VMs.
                  in: query
                  name: linkVolumeDeleteOnVmDeletion
                  schema:
                    type: boolean
                - description: The VM device names.
                  in: query
                  name: linkVolumeDeviceNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The dates and times of creation of the volumes, in ISO 8601 date-time format (for example, `2020-06-30T00:00:00.000Z`).
                  in: query
                  name: linkVolumeLinkDates
                  schema:
                    items:
                        format: date-time
                        type: string
                    type: array
                - description: The attachment states of the volumes (`attaching` \| `detaching` \| `attached` \| `detached`).
                  in: query
                  name: linkVolumeLinkStates
                  schema:
                    items:
                        type: string
                    type: array
                - description: One or more IDs of VMs.
                  in: query
                  name: linkVolumeVmIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The snapshots from which the volumes were created.
                  in: query
                  name: snapshotIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the volumes.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the volumes.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the volumes, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The sizes of the volumes, in gibibytes (GiB).
                  in: query
                  name: volumeSizes
                  schema:
                    items:
                        type: integer
                    type: array
                - description: The states of the volumes (`creating` \| `available` \| `in-use` \| `updating` \| `deleting` \| `error`).
                  in: query
                  name: volumeStates
                  schema:
                    items:
                        type: string
                    type: array
                - description: The types of the volumes (`standard` \| `gp2` \| `io1`).
                  in: query
                  name: volumeTypes
                  schema:
                    items:
                        type: string
                    type: array
                - description: The names of the Subregions in which the volumes were created.
                  in: query
                  name: availabilityZoneNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the volumes.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadVolumesResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - storageblock.volume
            servers:
                - url: http://wiretap:9090
            tags:
                - Volume
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: storageblock.volume
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a Block Storage Unit (BSU) volume in a specified Region.<br />
                BSU volumes can be attached to a virtual machine (VM) in the same AvailabilityZone. You can create an empty volume or restore a volume from an existing snapshot.<br />
                You can create the following volume types: Enterprise (`io1`) for provisioned IOPS SSD volumes, Performance (`gp2`) for general purpose SSD volumes, or Magnetic (`standard`) volumes.<br /><br />
                For more information, see [About Volumes](https://docs.outscale.com/en/userguide/About-Volumes.html).
            operationId: CreateVolume
            requestBody:
                $ref: '#/components/requestBodies/CreateVolumeRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateVolumeResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - storageblock.volume.create
            servers:
                - url: http://wiretap:9090
            tags:
                - Volume
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: storageblock.volume
                scopes-details:
                    storageblock.volume.create: null
    /compute/spaces/{spaceId}/volumes/{id}:
        delete:
            description: |-
                Deletes a specified Block Storage Unit (BSU) volume.<br />
                You can delete available volumes only, that is, volumes that are not attached to a virtual machine (VM).
            operationId: DeleteVolume
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the volume you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - storageblock.volume.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - Volume
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    storageblock.volume.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the specified Block Storage Unit (BSU) Volume whose id is given as a parameter.
            operationId: ReadVolumesById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadVolumes
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadVolumesByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - storageblock.volume.get
            servers:
                - url: http://wiretap:9090
            tags:
                - Volume
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    storageblock.volume.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Modifies the specified attributes of a volume.<br />
                Cold volumes are volumes that are attached to stopped or stopping VMs, or that are detached. Hot volumes are volumes that are attached to running VMs.<br /><br />

                 **[NOTE]**<br />
                When the modification is not instantaneous, the response displays the previous value. You can use the [ReadVolumes](#readvolumes) method to see the new value.
            operationId: UpdateVolume
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the volume you want to update.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UpdateVolumeRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateVolumeResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - storageblock.volume.update
            servers:
                - url: http://wiretap:9090
            tags:
                - Volume
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    storageblock.volume.update:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/volumes/{id}/vms/link:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Attaches a Block Storage Unit (BSU) volume to a virtual machine (VM).<br />
                The volume and the VM must be in the same AvailabilityZone. The VM can be running or stopped. The volume is attached to the specified VM device.
            operationId: LinkVolume
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the volume you want to attach.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/LinkVolumeRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - storageblock.volume.link
                    - compute.vm.update
            servers:
                - url: http://wiretap:9090
            tags:
                - Volume
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    compute.vm.update: null
                    storageblock.volume.link:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/volumes/{id}/vms/unlink:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Detaches a Block Storage Unit (BSU) volume from a virtual machine (VM).<br />
                To detach the root device of a VM, this VM must be stopped.
            operationId: UnlinkVolume
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the volume you want to detach.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UnlinkVolumeRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - storageblock.volume.unlink
            servers:
                - url: http://wiretap:9090
            tags:
                - Volume
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    storageblock.volume.unlink:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/vpcAccessPoints:
        get:
            description: Lists one or more Vpc access points.
            operationId: ReadVpcAccessPoints
            parameters:
                - description: The names of the services. For more information, see [ReadNetAccessPointServices](#readnetaccesspointservices).
                  in: query
                  name: serviceNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The states of the Net access points (`pending` \| `available` \| `deleting` \| `deleted`).
                  in: query
                  name: states
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the Net access points.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the Net access points.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the Net access points, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Net access points.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Nets.
                  in: query
                  name: vpcIds
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadVpcAccessPointsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpcAccessPoint
            servers:
                - url: http://wiretap:9090
            tags:
                - VpcAccessPoint
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: network.vpcAccessPoint
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a Vpc access point to access an NumSpot service from this Vpc without using the Internet and public IPs.<br />
                You specify the service using its name. For more information about the available services, see [ReadVpcAccessPointServices](#readnetaccesspointservices).<br />
                To control the routing of traffic between the Vpc and the specified service, you can specify one or more route tables. Virtual machines placed in Subnets associated with the specified route table thus use the Vpc access point to access the service. When you specify a route table, a route is automatically added to it with the destination set to the prefix list ID of the service, and the target set to the ID of the access point.<br /><br />
                For more information, see [About Vpc Access Points](https://docs.outscale.com/en/userguide/About-Vpc-Access-Points.html).
            operationId: CreateVpcAccessPoint
            requestBody:
                $ref: '#/components/requestBodies/CreateVpcAccessPointRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateVpcAccessPointResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpcAccessPoint.create
            servers:
                - url: http://wiretap:9090
            tags:
                - VpcAccessPoint
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: network.vpcAccessPoint
                scopes-details:
                    network.vpcAccessPoint.create: null
    /compute/spaces/{spaceId}/vpcAccessPoints/{id}:
        delete:
            description: |-
                Deletes a specified Vpc access point.<br />
                This action also deletes the corresponding routes added to the route tables you specified for the Vpc access point.
            operationId: DeleteVpcAccessPoint
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the Net access point.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpcAccessPoint.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - VpcAccessPoint
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    network.vpcAccessPoint.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the VpcAccessPoint whose id is given as a parameter.
            operationId: ReadVpcAccessPointsById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadNetAccessPoints
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadVpcAccessPointsByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpcAccessPoint.get
            servers:
                - url: http://wiretap:9090
            tags:
                - VpcAccessPoint
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    network.vpcAccessPoint.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Modifies the attributes of a Vpc access point.<br />
                This action enables you to add or remove route tables associated with the specified Vpc access point.
            operationId: UpdateVpcAccessPoint
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the Net access point.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UpdateVpcAccessPointRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateVpcAccessPointResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpcAccessPoint.update
            servers:
                - url: http://wiretap:9090
            tags:
                - VpcAccessPoint
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.vpcAccessPoint.update:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/vpcPeerings:
        get:
            description: Lists one or more peering connections between two Vpcs.
            operationId: ReadVpcPeerings
            parameters:
                - description: The dates and times at which the Net peerings expire, in ISO 8601 date-time format (for example, `2020-06-14T00:00:00.000Z`).
                  in: query
                  name: expirationDates
                  schema:
                    items:
                        format: date-time
                        type: string
                    type: array
                - description: Additional information about the states of the Net peerings.
                  in: query
                  name: stateMessages
                  schema:
                    items:
                        type: string
                    type: array
                - description: The states of the Net peerings (`pending-acceptance` \| `active` \| `rejected` \| `failed` \| `expired` \| `deleted`).
                  in: query
                  name: stateNames
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the Net peerings.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the Net peerings.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the Net peerings, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The account IDs of the owners of the peer Nets.
                  in: query
                  name: accepterVpcAccountIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IP ranges of the peer Nets, in CIDR notation (for example, `10.0.0.0/24`).
                  in: query
                  name: accepterVpcIpRanges
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the peer Nets.
                  in: query
                  name: accepterVpcVpcIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Net peerings.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
                - description: The account IDs of the owners of the peer Nets.
                  in: query
                  name: sourceVpcAccountIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IP ranges of the peer Nets.
                  in: query
                  name: sourceVpcIpRanges
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the peer Nets.
                  in: query
                  name: sourceVpcVpcIds
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadVpcPeeringsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpcPeering
            servers:
                - url: http://wiretap:9090
            tags:
                - VpcPeering
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: network.vpcPeering
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Requests a Vpc peering between a Vpc you own and a peer Vpc that belongs to you or another account.<br />
                This action creates a Vpc peering that remains in the `pending-acceptance` state until it is accepted by the owner of the peer Vpc. If the owner of the peer Vpc does not accept the request within 7 days, the state of the Vpc peering becomes `expired`. For more information, see [AcceptVpcPeering](#acceptnetpeering).<br /><br />

                **[IMPORTANT]**<br />
                * Peered Vpcs must contain at least one virtual machine (VM) each before the creation of the Vpc peering.<br />
                * The two Vpcs must not have overlapping IP ranges. Otherwise, the Vpc peering is in the `failed` state.<br />
                * A peering connection between two Vpcs works both ways. Therefore, you do not need to create a B-to-A connection if an A-to-B connection is created and accepted.

                For more information, see [About Vpc Peerings](https://docs.outscale.com/en/userguide/About-Vpc-Peerings.html).
            operationId: CreateVpcPeering
            requestBody:
                $ref: '#/components/requestBodies/CreateVpcPeeringRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateVpcPeeringResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpcPeering.create
            servers:
                - url: http://wiretap:9090
            tags:
                - VpcPeering
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: network.vpcPeering
                scopes-details:
                    network.vpcPeering.create: null
    /compute/spaces/{spaceId}/vpcPeerings/{id}:
        delete:
            description: |-
                Deletes a Vpc peering.<br />
                If the Vpc peering is in the `active` state, it can be deleted either by the owner of the requester Vpc or the owner of the peer Vpc.<br />
                If it is in the `pending-acceptance` state, it can be deleted only by the owner of the requester Vpc.<br />
                If it is in the `rejected`, `failed`, or `expired` states, it cannot be deleted.
            operationId: DeleteVpcPeering
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the Net peering you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 409 response (Conflict).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpcPeering.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - VpcPeering
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    network.vpcPeering.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the Peering Connection between two Vpcs whose id is given as a parameter.
            operationId: ReadVpcPeeringsById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadNetPeerings
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadVpcPeeringsByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpcPeering.get
            servers:
                - url: http://wiretap:9090
            tags:
                - VpcPeering
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    network.vpcPeering.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
    /compute/spaces/{spaceId}/vpcPeerings/{id}/accept:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Accepts a Vpc peering request.<br />
                To accept this request, you must be the owner of the peer Vpc. If you do not accept the request within 7 days, the state of the Vpc peering becomes `expired`.<br /><br />

                **[NOTE]**<br />
                A peering connection between two Vpcs works both ways. Therefore, when an A-to-B peering connection is accepted, any pending B-to-A peering connection is automatically rejected as redundant.
            operationId: AcceptVpcPeering
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the Net peering you want to accept.
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/AcceptVpcPeeringResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 409 response (Conflict).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpcPeering.accept
            servers:
                - url: http://wiretap:9090
            tags:
                - VpcPeering
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.vpcPeering.accept:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/vpcPeerings/{id}/reject:
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: |-
                Rejects a Vpc peering request.<br />
                The Vpc peering must be in the `pending-acceptance` state to be rejected. The rejected Vpc peering is then in the `rejected` state.
            operationId: RejectVpcPeering
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the Net peering you want to reject.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 409 response (Conflict).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpcPeering.reject
            servers:
                - url: http://wiretap:9090
            tags:
                - VpcPeering
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.vpcPeering.reject:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/vpcs:
        get:
            description: Lists one or more Vpcs.
            operationId: ReadVpcs
            parameters:
                - description: The IDs of the DHCP options sets.
                  in: query
                  name: dhcpOptionsSetIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IP ranges for the Nets, in CIDR notation (for example, `10.0.0.0/16`).
                  in: query
                  name: ipRanges
                  schema:
                    items:
                        type: string
                    type: array
                - description: If true, the Net used is the default one.
                  in: query
                  name: isDefault
                  schema:
                    type: boolean
                - description: The states of the Nets (`pending` \| `available` \| `deleting`).
                  in: query
                  name: states
                  schema:
                    items:
                        type: string
                    type: array
                - description: The keys of the tags associated with the Nets.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the Nets.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the Nets, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the Nets.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadVpcsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpc
            servers:
                - url: http://wiretap:9090
            tags:
                - Vpc
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: network.vpc
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a Vpc with a specified IP range.<br />
                The IP range (network range) of your Vpc must be between a /28 netmask (16 IPs) and a /16 netmask (65536 IPs).<br /><br />
                For more information, see [About Vpcs](https://docs.outscale.com/en/userguide/About-Vpcs.html).
            operationId: CreateVpc
            requestBody:
                $ref: '#/components/requestBodies/CreateVpcRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateVpcResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "409":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 409 response (Conflict).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpc.create
            servers:
                - url: http://wiretap:9090
            tags:
                - Vpc
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: network.vpc
                scopes-details:
                    network.vpc.create: null
    /compute/spaces/{spaceId}/vpcs/{id}:
        delete:
            description: "Deletes a specified Vpc.<br />\nBefore deleting the Vpc, you need to delete or detach all the resources associated with the Vpc:<br /><br />\n \n* Virtual machines (VMs)<br />\n* Vpc peerings<br />\n* Custom route tables<br />\n* Public IPs allocated to resources in the Vpc<br />\n* Network Interface Cards (NICs) created in the Subnets<br />\n* Virtual gateways, Internet Gateways and NAT Gateways<br />\n* Load balancers<br />\n* Security groups<br />\n * Subnets"
            operationId: DeleteVpc
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the Net you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpc.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - Vpc
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    network.vpc.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the Vpc whose id is given as a parameter.
            operationId: ReadVpcsById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadNets
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadVpcsByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpc.get
            servers:
                - url: http://wiretap:9090
            tags:
                - Vpc
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    network.vpc.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: Associates a DHCP options set with a specified Vpc.
            operationId: UpdateVpc
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the Net.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UpdateVpcRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateVpcResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpc.update
            servers:
                - url: http://wiretap:9090
            tags:
                - Vpc
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.vpc.update:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/vpnConnections:
        get:
            description: Lists one or more VPN connections.
            operationId: ReadVpnConnections
            parameters:
                - description: The Border Gateway Protocol (BGP) Autonomous System Numbers (ASNs) of the connections.
                  in: query
                  name: bgpAsns
                  schema:
                    items:
                        type: integer
                    type: array
                - description: The IDs of the client gateways.
                  in: query
                  name: clientGatewayIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The types of the VPN connections (only `ipsec.1` is supported).
                  in: query
                  name: connectionTypes
                  schema:
                    items:
                        type: string
                    type: array
                - description: The destination IP ranges.
                  in: query
                  name: routeDestinationIpRanges
                  schema:
                    items:
                        type: string
                    type: array
                - description: The states of the VPN connections (`pending` \| `available` \| `deleting` \| `deleted`).
                  in: query
                  name: states
                  schema:
                    items:
                        type: string
                    type: array
                - description: If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](#createvpnconnectionroute) and [DeleteVpnConnectionRoute](#deletevpnconnectionroute).
                  in: query
                  name: staticRoutesOnly
                  schema:
                    type: boolean
                - description: The keys of the tags associated with the VPN connections.
                  in: query
                  name: tagKeys
                  schema:
                    items:
                        type: string
                    type: array
                - description: The values of the tags associated with the VPN connections.
                  in: query
                  name: tagValues
                  schema:
                    items:
                        type: string
                    type: array
                - description: 'The key/value combination of the tags associated with the VPN connections, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.'
                  in: query
                  name: tags
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the virtual gateways.
                  in: query
                  name: virtualGatewayIds
                  schema:
                    items:
                        type: string
                    type: array
                - description: The IDs of the VPN connections.
                  in: query
                  name: ids
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    $ref: '#/components/responses/ReadVpnConnectionsResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpnConnection
            servers:
                - url: http://wiretap:9090
            tags:
                - VpnConnection
            x-numspot-permissions:
                list-propagation:
                    emptyBehaviour: RETURN
                    location: id
                    locationType: HEADER
                    resourceType: network.vpnConnection
                operation-action: LIST
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a VPN connection between a specified virtual gateway and a specified client gateway.<br />
                You can create only one VPN connection between a virtual gateway and a client gateway.<br /><br />

                **[IMPORTANT]**<br />
                This action can be done only if the virtual gateway is in the `available` state.<br /><br />
                For more information, see [About VPN Connections](https://docs.outscale.com/en/userguide/About-VPN-Connections.html).
            operationId: CreateVpnConnection
            requestBody:
                $ref: '#/components/requestBodies/CreateVpnConnectionRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateVpnConnectionResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpnConnection.create
            servers:
                - url: http://wiretap:9090
            tags:
                - VpnConnection
            x-numspot-permissions:
                operation-action: CREATE
                operation-output:
                    cardinality: SINGLE
                    location: id
                    locationType: BODY_JSON
                    type: network.vpnConnection
                scopes-details:
                    network.vpnConnection.create: null
    /compute/spaces/{spaceId}/vpnConnections/{id}:
        delete:
            description: |-
                Deletes a specified VPN connection.<br />
                If you want to delete a Vpc and all its dependencies, we recommend to detach the virtual gateway from the Vpc and delete the Vpc before deleting the VPN connection. This enables you to delete the Vpc without waiting for the VPN connection to be deleted.
            operationId: DeleteVpnConnection
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the VPN connection you want to delete.
                    type: string
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpnConnection.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - VpnConnection
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    network.vpnConnection.delete:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        get:
            description: Retrieves information about the VpnConnection whose id is given as a parameter.
            operationId: ReadVpnConnectionsById
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: ID for ReadVpnConnections
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/ReadVpnConnectionsByIdResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpnConnection.get
            servers:
                - url: http://wiretap:9090
            tags:
                - VpnConnection
            x-numspot-permissions:
                operation-action: READ
                scopes-details:
                    network.vpnConnection.get:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        put:
            description: Modifies the specified attributes of a VPN connection.
            operationId: UpdateVpnConnection
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the VPN connection you want to modify.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/UpdateVpnConnectionRequest'
            responses:
                "200":
                    $ref: '#/components/responses/UpdateVpnConnectionResponse'
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpnConnection.update
            servers:
                - url: http://wiretap:9090
            tags:
                - VpnConnection
            x-numspot-permissions:
                operation-action: UPDATE
                scopes-details:
                    network.vpnConnection.update:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
    /compute/spaces/{spaceId}/vpnConnections/{id}/routes:
        delete:
            description: Deletes a static route to a VPN connection previously created using the CreateVpnConnectionRoute method.
            operationId: DeleteVpnConnectionRoute
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the target VPN connection of the static route to delete.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/DeleteVpnConnectionRouteRequest'
            responses:
                "204":
                    description: No content.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpnConnection.update
                    - network.vpnConnectionRoute.delete
            servers:
                - url: http://wiretap:9090
            tags:
                - VpnConnection
            x-numspot-permissions:
                operation-action: DELETE
                scopes-details:
                    network.vpnConnection.update:
                        cardinality: SINGLE
                        location: id
                        locationType: PATH
                    network.vpnConnectionRoute.delete: null
        parameters:
            - $ref: '#/components/parameters/SpaceId'
        post:
            description: |-
                Creates a static route to a VPN connection.<br />
                This enables you to select the network flows sent by the virtual gateway to the target VPN connection.<br /><br />
                For more information, see [About Routing Configuration for VPN Connections](https://docs.outscale.com/en/userguide/About-Routing-Configuration-for-VPN-Connections.html).
            operationId: CreateVpnConnectionRoute
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    description: The ID of the target VPN connection of the static route.
                    type: string
            requestBody:
                $ref: '#/components/requestBodies/CreateVpnConnectionRouteRequest'
            responses:
                "200":
                    description: Ok.
                "400":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 400 response (Bad Request).
                "401":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 401 response (Unauthorized).
                "403":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 403 response (Forbidden).
                "404":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 404 response (Not Found).
                "414":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 414 response (URI Too Long).
                "500":
                    content:
                        application/problem+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                    description: The HTTP 500 response (Internal Server Error).
            security:
                - BearerAuth:
                    - network.vpnConnection.update
                    - network.vpnConnectionRoute.create
            servers:
                - url: http://wiretap:9090
            tags:
                - VpnConnection
            x-numspot-permissions:
                operation-action: CREATE
                scopes-details:
                    network.vpnConnection.update: null
                    network.vpnConnectionRoute.create: null
components:
    parameters:
        SpaceId:
            description: Space ID
            in: path
            name: spaceId
            required: true
            schema:
                format: uuid
                type: string
    requestBodies:
        CreateClientGatewayRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateClientGateway'
        CreateDhcpOptionsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateDhcpOptions'
        CreateDirectLinkInterfaceRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateDirectLinkInterface'
        CreateDirectLinkRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateDirectLink'
        CreateFlexibleGpuRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateFlexibleGpu'
        CreateImageRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateImage'
        CreateKeypairRequest:
            content:
                application/json:
                    schema:
                        additionalProperties: false
                        properties:
                            name:
                                description: A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
                                type: string
                            publicKey:
                                description: The public key to import in your account, if you are importing an existing keypair. This value must be Base64-encoded.
                                type: string
                        required:
                            - name
                        type: object
        CreateListenerRuleRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateListenerRule'
        CreateLoadBalancerListenersRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateLoadBalancerListeners'
        CreateLoadBalancerPolicyRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateLoadBalancerPolicy'
        CreateLoadBalancerRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateLoadBalancer'
        CreateLoadBalancerTagsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateLoadBalancerTags'
        CreateNatGatewayRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateNatGateway'
        CreateNicRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateNic'
        CreateRouteRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateRoute'
        CreateRouteTableRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateRouteTable'
        CreateSecurityGroupRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateSecurityGroup'
        CreateSecurityGroupRuleRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateSecurityGroupRule'
        CreateSnapshotRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateSnapshot'
        CreateSubnetRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateSubnet'
        CreateTagsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateTags'
        CreateVirtualGatewayRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateVirtualGateway'
        CreateVmsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateVms'
        CreateVolumeRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateVolume'
        CreateVpcAccessPointRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateVpcAccessPoint'
        CreateVpcPeeringRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateVpcPeering'
        CreateVpcRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateVpc'
        CreateVpnConnectionRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateVpnConnection'
        CreateVpnConnectionRouteRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateVpnConnectionRoute'
        DeleteLoadBalancerListenersRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/DeleteLoadBalancerListeners'
        DeleteLoadBalancerPolicyRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/DeleteLoadBalancerPolicy'
        DeleteLoadBalancerTagsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/DeleteLoadBalancerTags'
        DeleteRouteRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/DeleteRoute'
        DeleteSecurityGroupRuleRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/DeleteSecurityGroupRule'
        DeleteTagsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/DeleteTags'
        DeleteVpnConnectionRouteRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/DeleteVpnConnectionRoute'
        LinkFlexibleGpuRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/LinkFlexibleGpu'
        LinkInternetGatewayRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/LinkInternetGateway'
        LinkLoadBalancerBackendMachinesRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/LinkLoadBalancerBackendMachines'
        LinkNicRequest:
            content:
                application/json:
                    schema:
                        additionalProperties: false
                        properties:
                            deviceNumber:
                                description: The index of the VM device for the NIC attachment (between `1` and `7`, both included).
                                type: integer
                            vmId:
                                description: The ID of the VM to which you want to attach the NIC.
                                type: string
                        required:
                            - deviceNumber
                            - vmId
                        type: object
        LinkPrivateIpsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/LinkPrivateIps'
        LinkPublicIpRequest:
            content:
                application/json:
                    schema:
                        additionalProperties: false
                        properties:
                            allowRelink:
                                description: If true, allows the public IP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC. If false, prevents the public IP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC. (By default, true in the public Cloud, false in a Net.)
                                type: boolean
                            nicId:
                                description: (Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `VmId` parameter instead. You cannot specify both parameters at the same time.
                                type: string
                            privateIp:
                                description: (Net only) The primary or secondary private IP of the specified NIC. By default, the primary private IP.
                                type: string
                            vmId:
                                description: |-
                                    The ID of the VM.<br />
                                    - In the public Cloud, this parameter is required.<br />
                                    - In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `NicId` parameter instead. You cannot specify both parameters at the same time.
                                type: string
                        type: object
        LinkRouteTableRequest:
            content:
                application/json:
                    schema:
                        additionalProperties: false
                        properties:
                            subnetId:
                                description: The ID of the Subnet.
                                type: string
                        required:
                            - subnetId
                        type: object
        LinkVirtualGatewayToVpcRequest:
            content:
                application/json:
                    schema:
                        additionalProperties: false
                        properties:
                            vpcId:
                                description: The ID of the Net to which you want to attach the virtual gateway.
                                type: string
                        required:
                            - vpcId
                        type: object
        LinkVolumeRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/LinkVolume'
        ReadLoadBalancerTagsRequest:
            content:
                application/json:
                    schema:
                        additionalProperties: false
                        properties:
                            names:
                                description: One or more load balancer names.
                                items:
                                    type: string
                                type: array
                        required:
                            - names
                        type: object
        ReadVmsHealthRequest:
            content:
                application/json:
                    schema:
                        additionalProperties: false
                        properties:
                            backendVmIds:
                                description: One or more IDs of back-end VMs.
                                items:
                                    type: string
                                type: array
                        required: []
                        type: object
        StopVmRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/StopVm'
        UnlinkInternetGatewayRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UnlinkInternetGateway'
        UnlinkLoadBalancerBackendMachinesRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UnlinkLoadBalancerBackendMachines'
        UnlinkNicRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UnlinkNic'
        UnlinkPrivateIpsRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UnlinkPrivateIps'
        UnlinkPublicIpRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UnlinkPublicIp'
        UnlinkRouteTableRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UnlinkRouteTable'
        UnlinkVirtualGatewayToVpcRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UnlinkVirtualGatewayToVpc'
        UnlinkVolumeRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UnlinkVolume'
        UpdateDirectLinkInterfaceRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateDirectLinkInterface'
        UpdateFlexibleGpuRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateFlexibleGpu'
        UpdateImageRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateImage'
        UpdateListenerRuleRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateListenerRule'
        UpdateLoadBalancerRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateLoadBalancer'
        UpdateNicRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateNic'
        UpdateRouteRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateRoute'
        UpdateRouteTableRoutePropagationRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateRouteTableRoutePropagation'
        UpdateSubnetRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateSubnet'
        UpdateVmRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateVm'
        UpdateVolumeRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateVolume'
        UpdateVpcAccessPointRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateVpcAccessPoint'
        UpdateVpcRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateVpc'
        UpdateVpnConnectionRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UpdateVpnConnection'
    responses:
        AcceptVpcPeeringResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/AcceptVpcPeering'
            description: Response payload for AcceptVpcPeering
            x-go-name: AcceptVpcPeeringResponseSchema
        CreateClientGatewayResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ClientGateway'
            description: Response payload for CreateClientGateway
            x-go-name: CreateClientGatewayResponseSchema
        CreateDhcpOptionsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/DhcpOptionsSet'
            description: Response payload for CreateDhcpOptions
            x-go-name: CreateDhcpOptionsResponseSchema
        CreateDirectLinkInterfaceResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/DirectLinkInterfaces'
            description: Response payload for CreateDirectLinkInterface
            x-go-name: CreateDirectLinkInterfaceResponseSchema
        CreateDirectLinkResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/DirectLink'
            description: Response payload for CreateDirectLink
            x-go-name: CreateDirectLinkResponseSchema
        CreateFlexibleGpuResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/FlexibleGpu'
            description: Response payload for CreateFlexibleGpu
            x-go-name: CreateFlexibleGpuResponseSchema
        CreateImageResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Image'
            description: Response payload for CreateImage
            x-go-name: CreateImageResponseSchema
        CreateInternetGatewayResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/InternetGateway'
            description: Response payload for CreateInternetGateway
            x-go-name: CreateInternetGatewayResponseSchema
        CreateKeypairResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/CreateKeypair'
            description: Response payload for CreateKeypair
            x-go-name: CreateKeypairResponseSchema
        CreateListenerRuleResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ListenerRule'
            description: Response payload for CreateListenerRule
            x-go-name: CreateListenerRuleResponseSchema
        CreateLoadBalancerListenersResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/LoadBalancer'
            description: Response payload for CreateLoadBalancerListeners
            x-go-name: CreateLoadBalancerListenersResponseSchema
        CreateLoadBalancerPolicyResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/LoadBalancer'
            description: Response payload for CreateLoadBalancerPolicy
            x-go-name: CreateLoadBalancerPolicyResponseSchema
        CreateLoadBalancerResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/LoadBalancer'
            description: Response payload for CreateLoadBalancer
            x-go-name: CreateLoadBalancerResponseSchema
        CreateNatGatewayResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/NatGateway'
            description: Response payload for CreateNatGateway
            x-go-name: CreateNatGatewayResponseSchema
        CreateNicResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Nic'
            description: Response payload for CreateNic
            x-go-name: CreateNicResponseSchema
        CreatePublicIpResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/PublicIp'
            description: Response payload for CreatePublicIp
            x-go-name: CreatePublicIpResponseSchema
        CreateRouteResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RouteTable'
            description: Response payload for CreateRoute
            x-go-name: CreateRouteResponseSchema
        CreateRouteTableResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RouteTable'
            description: Response payload for CreateRouteTable
            x-go-name: CreateRouteTableResponseSchema
        CreateSecurityGroupResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/SecurityGroup'
            description: Response payload for CreateSecurityGroup
            x-go-name: CreateSecurityGroupResponseSchema
        CreateSecurityGroupRuleResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/SecurityGroup'
            description: Response payload for CreateSecurityGroupRule
            x-go-name: CreateSecurityGroupRuleResponseSchema
        CreateSnapshotResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Snapshot'
            description: Response payload for CreateSnapshot
            x-go-name: CreateSnapshotResponseSchema
        CreateSubnetResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Subnet'
            description: Response payload for CreateSubnet
            x-go-name: CreateSubnetResponseSchema
        CreateVirtualGatewayResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/VirtualGateway'
            description: Response payload for CreateVirtualGateway
            x-go-name: CreateVirtualGatewayResponseSchema
        CreateVmsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Vm'
            description: Response payload for CreateVms
            x-go-name: CreateVmsResponseSchema
        CreateVolumeResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Volume'
            description: Response payload for CreateVolume
            x-go-name: CreateVolumeResponseSchema
        CreateVpcAccessPointResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/VpcAccessPoint'
            description: Response payload for CreateVpcAccessPoint
            x-go-name: CreateVpcAccessPointResponseSchema
        CreateVpcPeeringResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/VpcPeering'
            description: Response payload for CreateVpcPeering
            x-go-name: CreateVpcPeeringResponseSchema
        CreateVpcResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Vpc'
            description: Response payload for CreateVpc
            x-go-name: CreateVpcResponseSchema
        CreateVpnConnectionResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/VpnConnection'
            description: Response payload for CreateVpnConnection
            x-go-name: CreateVpnConnectionResponseSchema
        LinkNicResponse:
            content:
                application/json:
                    schema:
                        additionalProperties: false
                        properties:
                            linkNicId:
                                description: The ID of the NIC attachment.
                                type: string
                        type: object
            description: Response payload for LinkNic
            x-go-name: LinkNicResponseSchema
        LinkPublicIpResponse:
            content:
                application/json:
                    schema:
                        additionalProperties: false
                        properties:
                            linkPublicIpId:
                                description: (Net only) The ID representing the association of the public IP with the VM or the NIC.
                                type: string
                        type: object
            description: Response payload for LinkPublicIp
            x-go-name: LinkPublicIpResponseSchema
        LinkRouteTableResponse:
            content:
                application/json:
                    schema:
                        additionalProperties: false
                        properties:
                            linkRouteTableId:
                                description: The ID of the association between the route table and the Subnet.
                                type: string
                        type: object
            description: Response payload for LinkRouteTable
            x-go-name: LinkRouteTableResponseSchema
        LinkVirtualGatewayToVpcResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/LinkVirtualGatewayToVpc'
            description: Response payload for LinkVirtualGatewayToVpc
            x-go-name: LinkVirtualGatewayToVpcResponseSchema
        ReadAdminPasswordResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadAdminPassword'
            description: Response payload for ReadAdminPassword
            x-go-name: ReadAdminPasswordResponseSchema
        ReadClientGatewaysByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ClientGateway'
            description: Response payload for ReadClientGatewaysById
            x-go-name: ReadClientGatewaysByIdResponseSchema
        ReadClientGatewaysResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadClientGateways'
            description: Response payload for ReadClientGateways
            x-go-name: ReadClientGatewaysResponseSchema
        ReadConsoleOutputResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadConsoleOutput'
            description: Response payload for ReadConsoleOutput
            x-go-name: ReadConsoleOutputResponseSchema
        ReadDhcpOptionsByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/DhcpOptionsSet'
            description: Response payload for ReadDhcpOptionsById
            x-go-name: ReadDhcpOptionsByIdResponseSchema
        ReadDhcpOptionsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadDhcpOptions'
            description: Response payload for ReadDhcpOptions
            x-go-name: ReadDhcpOptionsResponseSchema
        ReadDirectLinkInterfacesByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/DirectLinkInterfaces'
            description: Response payload for ReadDirectLinkInterfacesById
            x-go-name: ReadDirectLinkInterfacesByIdResponseSchema
        ReadDirectLinkInterfacesResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadDirectLinkInterfaces'
            description: Response payload for ReadDirectLinkInterfaces
            x-go-name: ReadDirectLinkInterfacesResponseSchema
        ReadDirectLinksByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/DirectLink'
            description: Response payload for ReadDirectLinksById
            x-go-name: ReadDirectLinksByIdResponseSchema
        ReadDirectLinksResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadDirectLinks'
            description: Response payload for ReadDirectLinks
            x-go-name: ReadDirectLinksResponseSchema
        ReadFlexibleGpuCatalogResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadFlexibleGpuCatalog'
            description: Response payload for ReadFlexibleGpuCatalog
            x-go-name: ReadFlexibleGpuCatalogResponseSchema
        ReadFlexibleGpusByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/FlexibleGpu'
            description: Response payload for ReadFlexibleGpusById
            x-go-name: ReadFlexibleGpusByIdResponseSchema
        ReadFlexibleGpusResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadFlexibleGpus'
            description: Response payload for ReadFlexibleGpus
            x-go-name: ReadFlexibleGpusResponseSchema
        ReadImagesByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Image'
            description: Response payload for ReadImagesById
            x-go-name: ReadImagesByIdResponseSchema
        ReadImagesResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadImages'
            description: Response payload for ReadImages
            x-go-name: ReadImagesResponseSchema
        ReadInternetGatewaysByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/InternetGateway'
            description: Response payload for ReadInternetGatewaysById
            x-go-name: ReadInternetGatewaysByIdResponseSchema
        ReadInternetGatewaysResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadInternetGateways'
            description: Response payload for ReadInternetGateways
            x-go-name: ReadInternetGatewaysResponseSchema
        ReadKeypairsByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadKeypairsById'
            description: Response payload for ReadKeypairsById
            x-go-name: ReadKeypairsByIdResponseSchema
        ReadKeypairsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadKeypairs'
            description: Response payload for ReadKeypairs
            x-go-name: ReadKeypairsResponseSchema
        ReadListenerRulesByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ListenerRule'
            description: Response payload for ReadListenerRulesById
            x-go-name: ReadListenerRulesByIdResponseSchema
        ReadListenerRulesResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadListenerRules'
            description: Response payload for ReadListenerRules
            x-go-name: ReadListenerRulesResponseSchema
        ReadLoadBalancerTagsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadLoadBalancerTags'
            description: Response payload for ReadLoadBalancerTags
            x-go-name: ReadLoadBalancerTagsResponseSchema
        ReadLoadBalancersByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/LoadBalancer'
            description: Response payload for ReadLoadBalancersById
            x-go-name: ReadLoadBalancersByIdResponseSchema
        ReadLoadBalancersResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadLoadBalancers'
            description: Response payload for ReadLoadBalancers
            x-go-name: ReadLoadBalancersResponseSchema
        ReadLocationsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadLocations'
            description: Response payload for ReadLocations
            x-go-name: ReadLocationsResponseSchema
        ReadNatGatewayByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/NatGateway'
            description: Response payload for ReadNatGatewayById
            x-go-name: ReadNatGatewayByIdResponseSchema
        ReadNatGatewayResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadNatGateway'
            description: Response payload for ReadNatGateway
            x-go-name: ReadNatGatewayResponseSchema
        ReadNicsByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Nic'
            description: Response payload for ReadNicsById
            x-go-name: ReadNicsByIdResponseSchema
        ReadNicsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadNics'
            description: Response payload for ReadNics
            x-go-name: ReadNicsResponseSchema
        ReadProductTypesByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadProductTypesById'
            description: Response payload for ReadProductTypesById
            x-go-name: ReadProductTypesByIdResponseSchema
        ReadProductTypesResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadProductTypes'
            description: Response payload for ReadProductTypes
            x-go-name: ReadProductTypesResponseSchema
        ReadPublicIpRangesResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadPublicIpRanges'
            description: Response payload for ReadPublicIpRanges
            x-go-name: ReadPublicIpRangesResponseSchema
        ReadPublicIpsByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/PublicIp'
            description: Response payload for ReadPublicIpsById
            x-go-name: ReadPublicIpsByIdResponseSchema
        ReadPublicIpsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadPublicIps'
            description: Response payload for ReadPublicIps
            x-go-name: ReadPublicIpsResponseSchema
        ReadRouteTablesByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RouteTable'
            description: Response payload for ReadRouteTablesById
            x-go-name: ReadRouteTablesByIdResponseSchema
        ReadRouteTablesResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadRouteTables'
            description: Response payload for ReadRouteTables
            x-go-name: ReadRouteTablesResponseSchema
        ReadSecurityGroupsByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/SecurityGroup'
            description: Response payload for ReadSecurityGroupsById
            x-go-name: ReadSecurityGroupsByIdResponseSchema
        ReadSecurityGroupsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadSecurityGroups'
            description: Response payload for ReadSecurityGroups
            x-go-name: ReadSecurityGroupsResponseSchema
        ReadSnapshotsByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Snapshot'
            description: Response payload for ReadSnapshotsById
            x-go-name: ReadSnapshotsByIdResponseSchema
        ReadSnapshotsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadSnapshots'
            description: Response payload for ReadSnapshots
            x-go-name: ReadSnapshotsResponseSchema
        ReadSubnetsByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Subnet'
            description: Response payload for ReadSubnetsById
            x-go-name: ReadSubnetsByIdResponseSchema
        ReadSubnetsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadSubnets'
            description: Response payload for ReadSubnets
            x-go-name: ReadSubnetsResponseSchema
        ReadTagsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadTags'
            description: Response payload for ReadTags
            x-go-name: ReadTagsResponseSchema
        ReadVirtualGatewaysByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/VirtualGateway'
            description: Response payload for ReadVirtualGatewaysById
            x-go-name: ReadVirtualGatewaysByIdResponseSchema
        ReadVirtualGatewaysResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadVirtualGateways'
            description: Response payload for ReadVirtualGateways
            x-go-name: ReadVirtualGatewaysResponseSchema
        ReadVmsByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Vm'
            description: Response payload for ReadVmsById
            x-go-name: ReadVmsByIdResponseSchema
        ReadVmsHealthResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadVmsHealth'
            description: Response payload for ReadVmsHealth
            x-go-name: ReadVmsHealthResponseSchema
        ReadVmsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadVms'
            description: Response payload for ReadVms
            x-go-name: ReadVmsResponseSchema
        ReadVmsStateResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadVmsState'
            description: Response payload for ReadVmsState
            x-go-name: ReadVmsStateResponseSchema
        ReadVolumesByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Volume'
            description: Response payload for ReadVolumesById
            x-go-name: ReadVolumesByIdResponseSchema
        ReadVolumesResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadVolumes'
            description: Response payload for ReadVolumes
            x-go-name: ReadVolumesResponseSchema
        ReadVpcAccessPointsByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/VpcAccessPoint'
            description: Response payload for ReadVpcAccessPointsById
            x-go-name: ReadVpcAccessPointsByIdResponseSchema
        ReadVpcAccessPointsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadVpcAccessPoints'
            description: Response payload for ReadVpcAccessPoints
            x-go-name: ReadVpcAccessPointsResponseSchema
        ReadVpcPeeringsByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/VpcPeering'
            description: Response payload for ReadVpcPeeringsById
            x-go-name: ReadVpcPeeringsByIdResponseSchema
        ReadVpcPeeringsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadVpcPeerings'
            description: Response payload for ReadVpcPeerings
            x-go-name: ReadVpcPeeringsResponseSchema
        ReadVpcsByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Vpc'
            description: Response payload for ReadVpcsById
            x-go-name: ReadVpcsByIdResponseSchema
        ReadVpcsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadVpcs'
            description: Response payload for ReadVpcs
            x-go-name: ReadVpcsResponseSchema
        ReadVpnConnectionsByIdResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/VpnConnection'
            description: Response payload for ReadVpnConnectionsById
            x-go-name: ReadVpnConnectionsByIdResponseSchema
        ReadVpnConnectionsResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ReadVpnConnections'
            description: Response payload for ReadVpnConnections
            x-go-name: ReadVpnConnectionsResponseSchema
        StartVmResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/VmState'
            description: Response payload for StartVm
            x-go-name: StartVmResponseSchema
        StopVmResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/VmState'
            description: Response payload for StopVm
            x-go-name: StopVmResponseSchema
        UpdateDirectLinkInterfaceResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/DirectLinkInterfaces'
            description: Response payload for UpdateDirectLinkInterface
            x-go-name: UpdateDirectLinkInterfaceResponseSchema
        UpdateFlexibleGpuResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/FlexibleGpu'
            description: Response payload for UpdateFlexibleGpu
            x-go-name: UpdateFlexibleGpuResponseSchema
        UpdateImageResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Image'
            description: Response payload for UpdateImage
            x-go-name: UpdateImageResponseSchema
        UpdateListenerRuleResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ListenerRule'
            description: Response payload for UpdateListenerRule
            x-go-name: UpdateListenerRuleResponseSchema
        UpdateLoadBalancerResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/LoadBalancer'
            description: Response payload for UpdateLoadBalancer
            x-go-name: UpdateLoadBalancerResponseSchema
        UpdateNicResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Nic'
            description: Response payload for UpdateNic
            x-go-name: UpdateNicResponseSchema
        UpdateRouteResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RouteTable'
            description: Response payload for UpdateRoute
            x-go-name: UpdateRouteResponseSchema
        UpdateRouteTableRoutePropagationResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/RouteTable'
            description: Response payload for UpdateRouteTableRoutePropagation
            x-go-name: UpdateRouteTableRoutePropagationResponseSchema
        UpdateSubnetResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Subnet'
            description: Response payload for UpdateSubnet
            x-go-name: UpdateSubnetResponseSchema
        UpdateVmResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Vm'
            description: Response payload for UpdateVm
            x-go-name: UpdateVmResponseSchema
        UpdateVolumeResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Volume'
            description: Response payload for UpdateVolume
            x-go-name: UpdateVolumeResponseSchema
        UpdateVpcAccessPointResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/VpcAccessPoint'
            description: Response payload for UpdateVpcAccessPoint
            x-go-name: UpdateVpcAccessPointResponseSchema
        UpdateVpcResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Vpc'
            description: Response payload for UpdateVpc
            x-go-name: UpdateVpcResponseSchema
        UpdateVpnConnectionResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/VpnConnection'
            description: Response payload for UpdateVpnConnection
            x-go-name: UpdateVpnConnectionResponseSchema
    schemas:
        AcceptVpcPeering:
            additionalProperties: false
            properties:
                vpcPeering:
                    $ref: '#/components/schemas/VpcPeering'
            type: object
        AccepterVpc:
            additionalProperties: false
            description: Information about the accepter Net.
            properties:
                ipRange:
                    description: The IP range for the accepter Net, in CIDR notation (for example, `10.0.0.0/16`).
                    type: string
                vpcId:
                    description: The ID of the accepter Net.
                    type: string
            type: object
        Access:
            additionalProperties: false
            description: Permissions for the resource.
            properties:
                isPublic:
                    description: |-
                        A global permission for all accounts.<br />
                        (Request) Set this parameter to true to make the resource public (if the parent parameter is `Additions`) or to make the resource private (if the parent parameter is `Removals`).<br />
                        (Response) If true, the resource is public. If false, the resource is private.
                    type: boolean
            type: object
        AccessCreation:
            additionalProperties: false
            description: |-
                Information about the permissions for the resource.<br />
                Specify either the `Additions` or the `Removals` parameter.
            properties:
                additions:
                    $ref: '#/components/schemas/Access'
                removals:
                    $ref: '#/components/schemas/Access'
            type: object
        ApplicationStickyCookiePolicy:
            additionalProperties: false
            description: Information about the stickiness policy.
            properties:
                cookieName:
                    description: The name of the application cookie used for stickiness.
                    type: string
                policyName:
                    description: The mnemonic name for the policy being created. The name must be unique within a set of policies for this load balancer.
                    type: string
            type: object
        BackendVmHealth:
            additionalProperties: false
            description: Information about the health of a back-end VM.
            properties:
                description:
                    description: The description of the state of the back-end VM.
                    type: string
                state:
                    description: The state of the back-end VM (`InService` \| `OutOfService` \| `Unknown`).
                    type: string
                stateReason:
                    description: |-
                        Information about the cause of `OutOfService` VMs.<br />
                         Specifically, whether the cause is Elastic Load Balancing or the VM (`ELB` \| `Instance` \| `N/A`).
                    type: string
                vmId:
                    description: The ID of the back-end VM.
                    type: string
            type: object
        BlockDeviceMappingCreated:
            additionalProperties: false
            description: Information about the created block device mapping.
            properties:
                bsu:
                    $ref: '#/components/schemas/BsuCreated'
                deviceName:
                    description: The name of the device.
                    type: string
            type: object
        BlockDeviceMappingImage:
            additionalProperties: false
            description: One or more parameters used to automatically set up volumes when the VM is created.
            properties:
                bsu:
                    $ref: '#/components/schemas/BsuToCreate'
                deviceName:
                    description: The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
                    type: string
                virtualDeviceName:
                    description: The name of the virtual device (`ephemeralN`).
                    type: string
            type: object
        BlockDeviceMappingVmCreation:
            additionalProperties: false
            description: Information about the block device mapping.
            properties:
                bsu:
                    $ref: '#/components/schemas/BsuToCreate'
                deviceName:
                    description: The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
                    type: string
                noDevice:
                    description: Removes the device which is included in the block device mapping of the OMI.
                    type: string
                virtualDeviceName:
                    description: The name of the virtual device (`ephemeralN`).
                    type: string
            type: object
        BlockDeviceMappingVmUpdate:
            additionalProperties: false
            description: Information about the block device mapping.
            properties:
                bsu:
                    $ref: '#/components/schemas/BsuToUpdateVm'
                deviceName:
                    description: The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
                    type: string
                noDevice:
                    description: Removes the device which is included in the block device mapping of the OMI.
                    type: string
                virtualDeviceName:
                    description: The name of the virtual device (`ephemeralN`).
                    type: string
            type: object
        BsuCreated:
            additionalProperties: false
            description: Information about the created BSU volume.
            properties:
                deleteOnVmDeletion:
                    description: If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
                    type: boolean
                linkDate:
                    description: The date and time of attachment of the volume to the VM, in ISO 8601 date-time format.
                    format: date-time
                    type: string
                state:
                    description: The state of the volume.
                    type: string
                volumeId:
                    description: The ID of the volume.
                    type: string
            type: object
        BsuToCreate:
            additionalProperties: false
            description: Information about the BSU volume to create.
            properties:
                deleteOnVmDeletion:
                    default: true
                    description: By default or if set to true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
                    type: boolean
                iops:
                    description: The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
                    type: integer
                snapshotId:
                    description: The ID of the snapshot used to create the volume.
                    type: string
                volumeSize:
                    description: |-
                        The size of the volume, in gibibytes (GiB).<br />
                        If you specify a snapshot ID, the volume size must be at least equal to the snapshot size.<br />
                        If you specify a snapshot ID but no volume size, the volume is created with a size similar to the snapshot one.
                    type: integer
                volumeType:
                    description: |-
                        The type of the volume (`standard` \| `io1` \| `gp2`). If not specified in the request, a `standard` volume is created.<br />
                         For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
                    type: string
            type: object
        BsuToUpdateVm:
            additionalProperties: false
            description: Information about the BSU volume.
            properties:
                deleteOnVmDeletion:
                    description: If set to true, the volume is deleted when terminating the VM. If set to false, the volume is not deleted when terminating the VM.
                    type: boolean
                volumeId:
                    description: The ID of the volume.
                    type: string
            type: object
        ClientGateway:
            additionalProperties: false
            description: Information about the client gateway.
            properties:
                bgpAsn:
                    description: The Autonomous System Number (ASN) used by the Border Gateway Protocol (BGP) to find the path to your client gateway through the Internet.
                    type: integer
                connectionType:
                    description: The type of communication tunnel used by the client gateway (only `ipsec.1` is supported).
                    type: string
                id:
                    description: The ID of the client gateway.
                    type: string
                publicIp:
                    description: The public IPv4 address of the client gateway (must be a fixed address into a NATed network).
                    type: string
                state:
                    description: The state of the client gateway (`pending` \| `available` \| `deleting` \| `deleted`).
                    type: string
                tags:
                    description: One or more tags associated with the client gateway.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
            type: object
        CreateClientGateway:
            additionalProperties: false
            properties:
                bgpAsn:
                    description: |-
                        The Autonomous System Number (ASN) used by the Border Gateway Protocol (BGP) to find the path to your client gateway through the Internet. <br/>
                        This number must be between `1` and `4294967295`. If you do not have an ASN, you can choose one between 64512 and 65534, or between 4200000000 and 4294967294.
                    type: integer
                connectionType:
                    description: The communication protocol used to establish tunnel with your client gateway (only `ipsec.1` is supported).
                    type: string
                publicIp:
                    description: The public fixed IPv4 address of your client gateway.
                    type: string
            required:
                - bgpAsn
                - publicIp
                - connectionType
            type: object
        CreateDhcpOptions:
            additionalProperties: false
            properties:
                domainName:
                    description: 'Specify a domain name (for example, `MyCompany.com`). You can specify only one domain name. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, `LogServers`, or `NtpServers`.'
                    type: string
                domainNameServers:
                    description: 'The IPs of domain name servers. If no IPs are specified, the `OutscaleProvidedDNS` value is set by default. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, `LogServers`, or `NtpServers`.'
                    items:
                        type: string
                    type: array
                logServers:
                    description: 'The IPs of the log servers. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, `LogServers`, or `NtpServers`.'
                    items:
                        type: string
                    type: array
                ntpServers:
                    description: 'The IPs of the Network Time Protocol (NTP) servers. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, `LogServers`, or `NtpServers`.'
                    items:
                        type: string
                    type: array
            type: object
        CreateDirectLink:
            additionalProperties: false
            properties:
                bandwidth:
                    description: The bandwidth of the DirectLink (`1Gbps` \| `10Gbps`).
                    type: string
                location:
                    description: The code of the requested location for the DirectLink, returned by the [ReadLocations](#readlocations) method.
                    type: string
                name:
                    description: The name of the DirectLink.
                    type: string
            required:
                - bandwidth
                - location
                - name
            type: object
        CreateDirectLinkInterface:
            additionalProperties: false
            properties:
                directLinkId:
                    description: The ID of the existing DirectLink for which you want to create the DirectLink interface.
                    type: string
                directLinkInterface:
                    $ref: '#/components/schemas/DirectLinkInterface'
            required:
                - directLinkId
                - directLinkInterface
            type: object
        CreateFlexibleGpu:
            additionalProperties: false
            properties:
                availabilityZoneName:
                    description: The Subregion in which you want to create the fGPU.
                    type: string
                deleteOnVmDeletion:
                    default: false
                    description: If true, the fGPU is deleted when the VM is terminated.
                    type: boolean
                generation:
                    description: The processor generation that the fGPU must be compatible with. If not specified, the oldest possible processor generation is selected (as provided by [ReadFlexibleGpuCatalog](#readflexiblegpucatalog) for the specified model of fGPU).
                    type: string
                modelName:
                    description: The model of fGPU you want to allocate. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
                    type: string
            required:
                - modelName
                - availabilityZoneName
            type: object
        CreateImage:
            additionalProperties: false
            properties:
                architecture:
                    description: '**(when registering from a snapshot, or from a bucket without using a manifest file)** The architecture of the OMI (`i386` or `x84_64`).'
                    type: string
                blockDeviceMappings:
                    description: '**(when registering from a snapshot, or from a bucket without using a manifest file)** One or more block device mappings.'
                    items:
                        $ref: '#/components/schemas/BlockDeviceMappingImage'
                    type: array
                description:
                    description: A description for the new OMI.
                    type: string
                name:
                    description: |-
                        A unique name for the new OMI.<br />
                        Constraints: 3-128 alphanumeric characters, underscores (`_`), spaces (` `), parentheses (`()`), slashes (`/`), periods (`.`), or dashes (`-`).
                    type: string
                noReboot:
                    description: '**(when creating from a VM)** If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.'
                    type: boolean
                productCodes:
                    description: The product codes associated with the OMI.
                    items:
                        type: string
                    type: array
                rootDeviceName:
                    description: '**(when registering from a snapshot, or from a bucket without using a manifest file)** The name of the root device for the new OMI.'
                    type: string
                sourceImageId:
                    description: '**(when copying an OMI)** The ID of the OMI you want to copy.'
                    type: string
                sourceRegionName:
                    description: '**(when copying an OMI)** The name of the source Region (always the same as the Region of your account).'
                    type: string
                vmId:
                    description: '**(when creating from a VM)** The ID of the VM from which you want to create the OMI.'
                    type: string
            type: object
        CreateKeypair:
            additionalProperties: false
            description: Information about the created keypair.
            properties:
                fingerprint:
                    description: The MD5 public key fingerprint, as specified in section 4 of RFC 4716.
                    type: string
                name:
                    description: The name of the keypair.
                    type: string
                privateKey:
                    description: The private key, returned only if you are creating a keypair (not if you are importing). When you save this private key in a .rsa file, make sure you replace the `\n` escape sequences with real line breaks.
                    type: string
                type:
                    description: The type of the keypair (`ssh-rsa`, `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`).
                    type: string
            type: object
        CreateListenerRule:
            additionalProperties: false
            properties:
                listener:
                    $ref: '#/components/schemas/LoadBalancerLight'
                listenerRule:
                    $ref: '#/components/schemas/ListenerRuleForCreation'
                vmIds:
                    description: The IDs of the backend VMs.
                    items:
                        type: string
                    type: array
            required:
                - vmIds
                - listener
                - listenerRule
            type: object
        CreateLoadBalancer:
            additionalProperties: false
            properties:
                availabilityZoneNames:
                    description: (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
                    items:
                        type: string
                    type: array
                listeners:
                    description: One or more listeners to create.
                    items:
                        $ref: '#/components/schemas/ListenerForCreation'
                    type: array
                name:
                    description: The unique name of the load balancer (32 alphanumeric or hyphen characters maximum, but cannot start or end with a hyphen).
                    type: string
                publicIp:
                    description: (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
                    type: string
                securityGroups:
                    description: (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
                    items:
                        type: string
                    type: array
                subnets:
                    description: (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
                    items:
                        type: string
                    type: array
                tags:
                    description: One or more tags assigned to the load balancer.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                type:
                    description: 'The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.'
                    type: string
            required:
                - listeners
                - name
            type: object
        CreateLoadBalancerListeners:
            additionalProperties: false
            properties:
                listeners:
                    description: One or more listeners for the load balancer.
                    items:
                        $ref: '#/components/schemas/ListenerForCreation'
                    type: array
            required:
                - listeners
            type: object
        CreateLoadBalancerPolicy:
            additionalProperties: false
            properties:
                cookieExpirationPeriod:
                    description: The lifetime of the cookie, in seconds. If not specified, the default value of this parameter is `1`, which means that the sticky session lasts for the duration of the browser session.
                    type: integer
                cookieName:
                    description: The name of the application cookie used for stickiness. This parameter is required if you create a stickiness policy based on an application-generated cookie.
                    type: string
                policyName:
                    description: The name of the policy. This name must be unique and consist of alphanumeric characters and dashes (-).
                    type: string
                policyType:
                    description: 'The type of stickiness policy you want to create: `app` or `load_balancer`.'
                    type: string
            required:
                - policyType
                - policyName
            type: object
        CreateLoadBalancerTags:
            additionalProperties: false
            properties:
                names:
                    description: One or more load balancer names.
                    items:
                        type: string
                    type: array
                tags:
                    description: One or more tags to add to the specified load balancers.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
            required:
                - tags
                - names
            type: object
        CreateNatGateway:
            additionalProperties: false
            properties:
                publicIpId:
                    description: |-
                        The allocation ID of the public IP to associate with the NAT service.<br />
                        If the public IP is already associated with another resource, you must first disassociate it.
                    type: string
                subnetId:
                    description: The ID of the Subnet in which you want to create the NAT service.
                    type: string
            required:
                - publicIpId
                - subnetId
            type: object
        CreateNic:
            additionalProperties: false
            properties:
                description:
                    description: A description for the NIC.
                    type: string
                privateIps:
                    description: |-
                        The primary private IP for the NIC.<br />
                        This IP must be within the IP range of the Subnet that you specify with the `SubnetId` attribute.<br />
                        If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
                    items:
                        $ref: '#/components/schemas/PrivateIpLight'
                    type: array
                securityGroupIds:
                    description: One or more IDs of security groups for the NIC.
                    items:
                        type: string
                    type: array
                subnetId:
                    description: The ID of the Subnet in which you want to create the NIC.
                    type: string
            required:
                - subnetId
            type: object
        CreateRoute:
            additionalProperties: false
            properties:
                destinationIpRange:
                    description: The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
                    type: string
                gatewayId:
                    description: The ID of an Internet service or virtual gateway attached to your Net.
                    type: string
                natGatewayId:
                    description: The ID of a NAT service.
                    type: string
                nicId:
                    description: The ID of a NIC.
                    type: string
                vmId:
                    description: The ID of a NAT VM in your Net (attached to exactly one NIC).
                    type: string
                vpcPeeringId:
                    description: The ID of a Net peering.
                    type: string
            required:
                - destinationIpRange
            type: object
        CreateRouteTable:
            additionalProperties: false
            properties:
                vpcId:
                    description: The ID of the Net for which you want to create a route table.
                    type: string
            required:
                - vpcId
            type: object
        CreateSecurityGroup:
            additionalProperties: false
            properties:
                description:
                    description: |-
                        A description for the security group.<br />
                        This description can contain between 1 and 255 characters. Allowed characters are `a-z`, `A-Z`, `0-9`, accented letters, spaces, and `_.-:/()#,@[]+=&;{}!$*`.
                    type: string
                name:
                    description: |-
                        The name of the security group.<br />
                        This name must not start with `sg-`.<br />
                        This name must be unique and contain between 1 and 255 characters. Allowed characters are `a-z`, `A-Z`, `0-9`, spaces, and `_.-:/()#,@[]+=&;{}!$*`.
                    type: string
                vpcId:
                    description: The ID of the Net for the security group.
                    type: string
            required:
                - description
                - name
            type: object
        CreateSecurityGroupRule:
            additionalProperties: false
            properties:
                flow:
                    description: 'The direction of the flow: `Inbound` or `Outbound`. You can specify `Outbound` for Nets only.'
                    type: string
                fromPortRange:
                    description: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number. If you specify this parameter, you cannot specify the `Rules` parameter and its subparameters.
                    type: integer
                ipProtocol:
                    description: The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). If you specify this parameter, you cannot specify the `Rules` parameter and its subparameters.
                    type: string
                ipRange:
                    description: The IP range for the security group rule, in CIDR notation (for example, 10.0.0.0/16). If you specify this parameter, you cannot specify the `Rules` parameter and its subparameters.
                    type: string
                rules:
                    description: 'Information about the security group rule to create. If you specify this parent parameter and its subparameters, you cannot specify the following parent parameters: `FromPortRange`, `IpProtocol`, `IpRange`, and `ToPortRange`.'
                    items:
                        $ref: '#/components/schemas/SecurityGroupRule'
                    type: array
                securityGroupAccountIdToLink:
                    description: The account ID that owns the source or destination security group specified in the `SecurityGroupNameToLink` parameter.
                    type: string
                securityGroupNameToLink:
                    description: The ID of a source or destination security group that you want to link to the security group of the rule.
                    type: string
                toPortRange:
                    description: The end of the port range for the TCP and UDP protocols, or an ICMP code number. If you specify this parameter, you cannot specify the `Rules` parameter and its subparameters.
                    type: integer
            required:
                - flow
            type: object
        CreateSnapshot:
            additionalProperties: false
            properties:
                description:
                    description: A description for the snapshot.
                    type: string
                sourceRegionName:
                    description: '**(when copying a snapshot)** The name of the source Region, which must be the same as the Region of your account.'
                    type: string
                sourceSnapshotId:
                    description: '**(when copying a snapshot)** The ID of the snapshot you want to copy.'
                    type: string
                volumeId:
                    description: '**(when creating from a volume)** The ID of the volume you want to create a snapshot of.'
                    type: string
            type: object
        CreateSubnet:
            additionalProperties: false
            properties:
                availabilityZoneName:
                    description: The name of the Subregion in which you want to create the Subnet.
                    type: string
                ipRange:
                    description: |-
                        The IP range in the Subnet, in CIDR notation (for example, `10.0.0.0/16`).<br />
                        The IP range of the Subnet can be either the same as the Net one if you create only a single Subnet in this Net, or a subset of the Net one. In case of several Subnets in a Net, their IP ranges must not overlap. The smallest Subnet you can create uses a /29 netmask (eight IPs). For more information, see [About Nets](https://docs.outscale.com/en/userguide/About-Nets.html).
                    type: string
                vpcId:
                    description: The ID of the Net for which you want to create a Subnet.
                    type: string
            required:
                - ipRange
                - vpcId
            type: object
        CreateTags:
            additionalProperties: false
            properties:
                resourceIds:
                    description: One or more resource IDs.
                    items:
                        type: string
                    type: array
                tags:
                    description: One or more tags to add to the specified resources.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
            required:
                - resourceIds
                - tags
            type: object
        CreateVirtualGateway:
            additionalProperties: false
            properties:
                connectionType:
                    description: The type of VPN connection supported by the virtual gateway (only `ipsec.1` is supported).
                    type: string
            required:
                - connectionType
            type: object
        CreateVms:
            additionalProperties: false
            properties:
                blockDeviceMappings:
                    description: One or more block device mappings.
                    items:
                        $ref: '#/components/schemas/BlockDeviceMappingVmCreation'
                    type: array
                bootOnCreation:
                    default: true
                    description: By default or if true, the VM is started on creation. If false, the VM is stopped on creation.
                    type: boolean
                bsuOptimized:
                    description: This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
                    type: boolean
                clientToken:
                    description: A unique identifier which enables you to manage the idempotency.
                    type: string
                deletionProtection:
                    description: If true, you cannot delete the VM unless you change this parameter back to false.
                    type: boolean
                imageId:
                    description: The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](#readimages) method.
                    type: string
                keypairName:
                    description: The name of the keypair.
                    type: string
                maxVmsCount:
                    description: The maximum number of VMs you want to create. If all the VMs cannot be created, the largest possible number of VMs above MinVmsCount is created.
                    type: integer
                minVmsCount:
                    description: The minimum number of VMs you want to create. If this number of VMs cannot be created, no VMs are created.
                    type: integer
                nestedVirtualization:
                    default: false
                    description: (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
                    type: boolean
                nics:
                    description: One or more NICs. If you specify this parameter, you must not specify the `SubnetId` and `SubregionName` parameters. You also must define one NIC as the primary network interface of the VM with `0` as its device number.
                    items:
                        $ref: '#/components/schemas/NicForVmCreation'
                    type: array
                performance:
                    default: high
                    description: The performance of the VM (`medium` \| `high` \|  `highest`). By default, `high`. This parameter is ignored if you specify a performance flag directly in the `type` parameter.
                    enum:
                        - medium
                        - high
                        - highest
                    type: string
                placement:
                    $ref: '#/components/schemas/Placement'
                privateIps:
                    description: One or more private IPs of the VM.
                    items:
                        type: string
                    type: array
                securityGroupIds:
                    description: One or more IDs of security group for the VMs.
                    items:
                        type: string
                    type: array
                securityGroups:
                    description: One or more names of security groups for the VMs.
                    items:
                        type: string
                    type: array
                subnetId:
                    description: The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `Nics` parameter.
                    type: string
                type:
                    description: |-
                        The type of VM. You can specify a TINA type (in the `tinavW.cXrYpZ` or `tinavW.cXrY` format), or an AWS type (for example, `t2.small`, which is the default value).<br />
                        If you specify an AWS type, it is converted in the background to its corresponding TINA type, but the AWS type is still returned. If the specified or converted TINA type includes a performance flag, this performance flag is applied regardless of the value you may have provided in the `Performance` parameter. For more information, see [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
                    type: string
                userData:
                    description: Data or script used to add a specific configuration to the VM. It must be Base64-encoded and is limited to 500 kibibytes (KiB).
                    type: string
                vmInitiatedShutdownBehavior:
                    default: stop
                    description: The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
                    type: string
            required:
                - imageId
            type: object
        CreateVolume:
            additionalProperties: false
            properties:
                availabilityZoneName:
                    description: The Subregion in which you want to create the volume.
                    type: string
                iops:
                    description: The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
                    type: integer
                size:
                    description: 'The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`SnapshotId` unspecified). '
                    type: integer
                snapshotId:
                    description: The ID of the snapshot from which you want to create the volume.
                    type: string
                type:
                    description: |-
                        The type of volume you want to create (`io1` \| `gp2` \ | `standard`). If not specified, a `standard` volume is created.<br />
                         For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
                    type: string
            required:
                - availabilityZoneName
            type: object
        CreateVpc:
            additionalProperties: false
            properties:
                ipRange:
                    description: The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
                    type: string
                tenancy:
                    description: |-
                        The tenancy options for the VMs:<br />
                        - `default` if a VM created in a Net can be launched with any tenancy.<br />
                        - `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware.<br />
                        - `dedicated group ID`: if it can be launched in a dedicated group on single-tenant hardware.
                    type: string
            required:
                - ipRange
            type: object
        CreateVpcAccessPoint:
            additionalProperties: false
            properties:
                routeTableIds:
                    description: One or more IDs of route tables to use for the connection.
                    items:
                        type: string
                    type: array
                serviceName:
                    description: The name of the service (in the format `com.outscale.region.service`).
                    type: string
                vpcId:
                    description: The ID of the Net.
                    type: string
            required:
                - serviceName
                - vpcId
            type: object
        CreateVpcPeering:
            additionalProperties: false
            properties:
                accepterVpcId:
                    description: The ID of the Net you want to connect with.
                    type: string
                sourceVpcId:
                    description: The ID of the Net you send the peering request from.
                    type: string
            required:
                - accepterVpcId
                - sourceVpcId
            type: object
        CreateVpnConnection:
            additionalProperties: false
            properties:
                clientGatewayId:
                    description: The ID of the client gateway.
                    type: string
                connectionType:
                    description: The type of VPN connection (only `ipsec.1` is supported).
                    type: string
                staticRoutesOnly:
                    description: By default or if false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](#createvpnconnectionroute) and [DeleteVpnConnectionRoute](#deletevpnconnectionroute).
                    type: boolean
                virtualGatewayId:
                    description: The ID of the virtual gateway.
                    type: string
            required:
                - clientGatewayId
                - connectionType
                - virtualGatewayId
            type: object
        CreateVpnConnectionRoute:
            additionalProperties: false
            properties:
                destinationIpRange:
                    description: The network prefix of the route, in CIDR notation (for example, `10.12.0.0/16`).
                    type: string
            required:
                - destinationIpRange
            type: object
        DeleteLoadBalancerListeners:
            additionalProperties: false
            properties:
                loadBalancerPorts:
                    description: One or more port numbers of the listeners you want to delete.
                    items:
                        type: integer
                    type: array
            required:
                - loadBalancerPorts
            type: object
        DeleteLoadBalancerPolicy:
            additionalProperties: false
            properties:
                policyName:
                    description: The name of the policy you want to delete.
                    type: string
            required:
                - policyName
            type: object
        DeleteLoadBalancerTags:
            additionalProperties: false
            properties:
                names:
                    description: One or more load balancer names.
                    items:
                        type: string
                    type: array
                tags:
                    description: One or more tags to delete from the load balancers.
                    items:
                        $ref: '#/components/schemas/ResourceLoadBalancerTag'
                    type: array
            required:
                - tags
                - names
            type: object
        DeleteRoute:
            additionalProperties: false
            properties:
                destinationIpRange:
                    description: The exact IP range for the route.
                    type: string
            required:
                - destinationIpRange
            type: object
        DeleteSecurityGroupRule:
            additionalProperties: false
            properties:
                flow:
                    description: 'The direction of the flow: `Inbound` or `Outbound`. You can specify `Outbound` for Nets only.'
                    type: string
                fromPortRange:
                    description: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
                    type: integer
                ipProtocol:
                    description: The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
                    type: string
                ipRange:
                    description: The IP range for the security group rule, in CIDR notation (for example, `10.0.0.0/16`).
                    type: string
                rules:
                    description: One or more rules you want to delete from the security group.
                    items:
                        $ref: '#/components/schemas/SecurityGroupRule'
                    type: array
                securityGroupAccountIdToUnlink:
                    description: The account ID of the owner of the security group you want to delete a rule from.
                    type: string
                securityGroupNameToUnlink:
                    description: The ID of the source security group. If you are in the Public Cloud, you can also specify the name of the source security group.
                    type: string
                toPortRange:
                    description: The end of the port range for the TCP and UDP protocols, or an ICMP code number.
                    type: integer
            required:
                - flow
            type: object
        DeleteTags:
            additionalProperties: false
            properties:
                resourceIds:
                    description: One or more resource IDs.
                    items:
                        type: string
                    type: array
                tags:
                    description: One or more tags to delete (if you set a tag value, only the tags matching exactly this value are deleted).
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
            required:
                - resourceIds
                - tags
            type: object
        DeleteVpnConnectionRoute:
            additionalProperties: false
            properties:
                destinationIpRange:
                    description: The network prefix of the route to delete, in CIDR notation (for example, `10.12.0.0/16`).
                    type: string
            required:
                - destinationIpRange
            type: object
        DhcpOptionsSet:
            additionalProperties: false
            description: Information about the DHCP options set.
            properties:
                default:
                    description: If true, the DHCP options set is a default one. If false, it is not.
                    type: boolean
                domainName:
                    description: The domain name.
                    type: string
                domainNameServers:
                    description: One or more IPs for the domain name servers.
                    items:
                        type: string
                    type: array
                id:
                    description: The ID of the DHCP options set.
                    type: string
                logServers:
                    description: One or more IPs for the log servers.
                    items:
                        type: string
                    type: array
                ntpServers:
                    description: One or more IPs for the NTP servers.
                    items:
                        type: string
                    type: array
                tags:
                    description: One or more tags associated with the DHCP options set.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
            type: object
        DirectLink:
            additionalProperties: false
            description: Information about the DirectLink.
            properties:
                bandwidth:
                    description: The physical link bandwidth (either 1 Gbps or 10 Gbps).
                    type: string
                id:
                    description: The ID of the DirectLink (for example, `dxcon-xxxxxxxx`).
                    type: string
                location:
                    description: The datacenter where the DirectLink is located.
                    type: string
                name:
                    description: The name of the DirectLink.
                    type: string
                regionName:
                    description: The Region in which the DirectLink has been created.
                    type: string
                state:
                    description: |-
                        The state of the DirectLink.<br />
                        * `requested`: The DirectLink is requested but the request has not been validated yet.<br />
                        * `pending`: The DirectLink request has been validated. It remains in the `pending` state until you establish the physical link.<br />
                        * `available`: The physical link is established and the connection is ready to use.<br />
                         * `deleting`: The deletion process is in progress.<br />
                        * `deleted`: The DirectLink is deleted.
                    type: string
            type: object
        DirectLinkInterface:
            additionalProperties: false
            description: Information about the DirectLink interface.
            properties:
                bgpAsn:
                    description: The BGP (Border Gateway Protocol) ASN (Autonomous System Number) on the customer's side of the DirectLink interface. This number must be between `64512` and `65534`.
                    type: integer
                bgpKey:
                    description: The BGP authentication key.
                    type: string
                clientPrivateIp:
                    description: The IP on the customer's side of the DirectLink interface.
                    type: string
                name:
                    description: The name of the DirectLink interface.
                    type: string
                outscalePrivateIp:
                    description: The IP on the OUTSCALE side of the DirectLink interface.
                    type: string
                virtualGatewayId:
                    description: The ID of the target virtual gateway.
                    type: string
                vlan:
                    description: The VLAN number associated with the DirectLink interface. This number must be unique and be between `2` and `4094`.
                    type: integer
            required:
                - bgpAsn
                - virtualGatewayId
                - vlan
                - name
            type: object
        DirectLinkInterfaces:
            additionalProperties: false
            description: Information about the DirectLink interfaces.
            properties:
                bgpAsn:
                    description: The BGP (Border Gateway Protocol) ASN (Autonomous System Number) on the customer's side of the DirectLink interface.
                    type: integer
                bgpKey:
                    description: The BGP authentication key.
                    type: string
                clientPrivateIp:
                    description: The IP on the customer's side of the DirectLink interface.
                    type: string
                directLinkId:
                    description: The ID of the DirectLink.
                    type: string
                directLinkInterfaceName:
                    description: The name of the DirectLink interface.
                    type: string
                id:
                    description: The ID of the DirectLink interface.
                    type: string
                interfaceType:
                    description: The type of the DirectLink interface (always `private`).
                    type: string
                location:
                    description: The datacenter where the DirectLink interface is located.
                    type: string
                mtu:
                    description: The maximum transmission unit (MTU) of the DirectLink interface, in bytes (always `1500`).
                    type: integer
                outscalePrivateIp:
                    description: The IP on the OUTSCALE side of the DirectLink interface.
                    type: string
                state:
                    description: The state of the DirectLink interface (`pending` \| `available` \| `deleting` \| `deleted` \| `confirming` \| `rejected` \| `expired`).
                    type: string
                virtualGatewayId:
                    description: The ID of the target virtual gateway.
                    type: string
                vlan:
                    description: The VLAN number associated with the DirectLink interface.
                    type: integer
            type: object
        Error:
            $schema: https://json-schema.org/draft/2020-12/schema
            additionalProperties: false
            description: For HTTP errors, we implement the https://datatracker.ietf.org/doc/html/rfc9457
            examples:
                - accounts:
                    - /account/12345
                    - /account/67890
                  balance: 30
                  detail: Your current balance is 30, but that costs 50.
                  instance: /account/12345/msgs/abc
                  title: You do not have enough credit.
                  type: https://docs.numspot.cloud/docs/domains/cloud/errors#unauthenticated_access
            properties:
                detail:
                    description: Human-readable explanation specific to this occurrence of the problem.
                    type: string
                instance:
                    $ref: '#/components/schemas/Url'
                    description: Url to fetch more information about this problem type.
                title:
                    description: Human-readable summary of the problem type.
                    type: string
                type:
                    $ref: '#/components/schemas/ErrorDocumentationUrl'
            required:
                - type
                - title
            title: Error
            type: object
        ErrorDocumentationUrl:
            $schema: https://json-schema.org/draft/2020-12/schema
            additionalProperties: false
            description: Documentation URL for the domain error
            enum:
                - https://docs.numspot.cloud/docs/domains/cloud/errors#unauthenticated_access
                - https://docs.numspot.cloud/docs/domains/cloud/errors#forbidden_access
                - https://docs.numspot.cloud/docs/domains/cloud/errors#invalid_parameter
                - https://docs.numspot.cloud/docs/domains/cloud/errors#resource_not_found
                - https://docs.numspot.cloud/docs/domains/cloud/errors#duplicate_resource
                - https://docs.numspot.cloud/docs/domains/cloud/errors#internal_server_error
                - https://docs.numspot.cloud/docs/domains/cloud/errors#ambiguous_granular_permission_elements
                - https://docs.numspot.cloud/docs/domains/cloud/errors#ambiguous_permission_elements
                - https://docs.numspot.cloud/docs/domains/cloud/errors#ambiguous_role_elements
                - https://docs.numspot.cloud/docs/domains/cloud/errors#duplicate_role
                - https://docs.numspot.cloud/docs/domains/cloud/errors#forbidden
                - https://docs.numspot.cloud/docs/domains/cloud/errors#identity_not_found
                - https://docs.numspot.cloud/docs/domains/cloud/errors#inactive_token
                - https://docs.numspot.cloud/docs/domains/cloud/errors#method_not_allowed
                - https://docs.numspot.cloud/docs/domains/cloud/errors#missing_roles
                - https://docs.numspot.cloud/docs/domains/cloud/errors#namespace_not_found
                - https://docs.numspot.cloud/docs/domains/cloud/errors#not_in_tenant_roles
                - https://docs.numspot.cloud/docs/domains/cloud/errors#permission_not_found
                - https://docs.numspot.cloud/docs/domains/cloud/errors#role_not_found
                - https://docs.numspot.cloud/docs/domains/cloud/errors#unexpected_token_usage
                - https://docs.numspot.cloud/docs/domains/cloud/errors#uri_too_long
            format: uri
            title: ErrorDocumentationUrl
            type: string
        FlexibleGpu:
            additionalProperties: false
            description: Information about the flexible GPU (fGPU).
            properties:
                availabilityZoneName:
                    description: The Subregion where the fGPU is located.
                    type: string
                deleteOnVmDeletion:
                    description: If true, the fGPU is deleted when the VM is terminated.
                    type: boolean
                generation:
                    description: The compatible processor generation.
                    type: string
                id:
                    description: The ID of the fGPU.
                    type: string
                modelName:
                    description: The model of fGPU. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
                    type: string
                state:
                    description: The state of the fGPU (`allocated` \| `attaching` \| `attached` \| `detaching`).
                    type: string
                vmId:
                    description: The ID of the VM the fGPU is attached to, if any.
                    type: string
            type: object
        FlexibleGpuCatalog:
            additionalProperties: false
            description: Information about the flexible GPU (fGPU) that is available in the public catalog.
            properties:
                generations:
                    description: The generations of VMs that the fGPU is compatible with.
                    items:
                        type: string
                    type: array
                maxCpu:
                    description: The maximum number of VM vCores that the fGPU is compatible with.
                    type: integer
                maxRam:
                    description: The maximum amount of VM memory that the fGPU is compatible with.
                    type: integer
                modelName:
                    description: The model of fGPU.
                    type: string
                vRam:
                    description: The amount of video RAM (VRAM) of the fGPU.
                    type: integer
            type: object
        HealthCheck:
            additionalProperties: false
            description: Information about the health check configuration.
            properties:
                checkInterval:
                    description: The number of seconds between two requests (between `5` and `600` both included).
                    type: integer
                healthyThreshold:
                    description: The number of consecutive successful requests before considering the VM as healthy (between `2` and `10` both included).
                    type: integer
                path:
                    description: If you use the HTTP or HTTPS protocols, the request URL path.
                    type: string
                port:
                    description: The port number (between `1` and `65535`, both included).
                    type: integer
                protocol:
                    description: The protocol for the URL of the VM (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
                    type: string
                timeout:
                    description: The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
                    type: integer
                unhealthyThreshold:
                    description: The number of consecutive failed requests before considering the VM as unhealthy (between `2` and `10` both included).
                    type: integer
            required:
                - checkInterval
                - healthyThreshold
                - port
                - protocol
                - timeout
                - unhealthyThreshold
            type: object
        Image:
            additionalProperties: false
            description: Information about the OMI.
            properties:
                access:
                    $ref: '#/components/schemas/Access'
                architecture:
                    description: The architecture of the OMI.
                    type: string
                blockDeviceMappings:
                    description: One or more block device mappings.
                    items:
                        $ref: '#/components/schemas/BlockDeviceMappingImage'
                    type: array
                creationDate:
                    description: The date and time of creation of the OMI, in ISO 8601 date-time format.
                    format: date-time
                    type: string
                description:
                    description: The description of the OMI.
                    type: string
                id:
                    description: The ID of the OMI.
                    type: string
                name:
                    description: The name of the OMI.
                    type: string
                productCodes:
                    description: The product codes associated with the OMI.
                    items:
                        type: string
                    type: array
                rootDeviceName:
                    description: The name of the root device.
                    type: string
                rootDeviceType:
                    description: The type of root device used by the OMI (always `bsu`).
                    type: string
                state:
                    description: The state of the OMI (`pending` \| `available` \| `failed`).
                    type: string
                stateComment:
                    $ref: '#/components/schemas/StateComment'
                tags:
                    description: One or more tags associated with the OMI.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                type:
                    description: The type of the OMI.
                    type: string
            type: object
        InternetGateway:
            additionalProperties: false
            description: Information about the Internet service.
            properties:
                id:
                    description: The ID of the Internet service.
                    type: string
                state:
                    description: The state of the attachment of the Internet service to the Net (always `available`).
                    type: string
                tags:
                    description: One or more tags associated with the Internet service.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                vpcId:
                    description: The ID of the Net attached to the Internet service.
                    type: string
            type: object
        Keypair:
            additionalProperties: false
            description: Information about the keypair.
            properties:
                fingerprint:
                    description: The MD5 public key fingerprint as specified in section 4 of RFC 4716.
                    type: string
                name:
                    description: The name of the keypair.
                    type: string
                type:
                    description: The type of the keypair (`ssh-rsa`, `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`).
                    type: string
            type: object
        LinkFlexibleGpu:
            additionalProperties: false
            properties:
                vmId:
                    description: The ID of the VM you want to attach the fGPU to.
                    type: string
            required:
                - vmId
            type: object
        LinkInternetGateway:
            additionalProperties: false
            properties:
                vpcId:
                    description: The ID of the Net to which you want to attach the Internet service.
                    type: string
            required:
                - vpcId
            type: object
        LinkLoadBalancerBackendMachines:
            additionalProperties: false
            properties:
                backendIps:
                    description: ' One or more public IPs of back-end VMs.'
                    items:
                        type: string
                    type: array
                backendVmIds:
                    description: ' One or more IDs of back-end VMs.'
                    items:
                        type: string
                    type: array
            required: []
            type: object
        LinkNic:
            additionalProperties: false
            description: Information about the NIC attachment.
            properties:
                deleteOnVmDeletion:
                    description: If true, the NIC is deleted when the VM is terminated.
                    type: boolean
                deviceNumber:
                    description: The device index for the NIC attachment (between `1` and `7`, both included).
                    type: integer
                id:
                    description: The ID of the NIC to attach.
                    type: string
                state:
                    description: The state of the attachment (`attaching` \| `attached` \| `detaching` \| `detached`).
                    type: string
                vmId:
                    description: The ID of the VM.
                    type: string
            type: object
        LinkNicLight:
            additionalProperties: false
            description: Information about the network interface card (NIC).
            properties:
                deleteOnVmDeletion:
                    description: If true, the NIC is deleted when the VM is terminated.
                    type: boolean
                deviceNumber:
                    description: The device index for the NIC attachment (between `1` and `7`, both included).
                    type: integer
                linkNicId:
                    description: The ID of the NIC to attach.
                    type: string
                state:
                    description: The state of the attachment (`attaching` \| `attached` \| `detaching` \| `detached`).
                    type: string
            type: object
        LinkNicToUpdate:
            additionalProperties: false
            description: Information about the NIC attachment. If you are modifying the `DeleteOnVmDeletion` attribute, you must specify the ID of the NIC attachment.
            properties:
                deleteOnVmDeletion:
                    description: If true, the NIC is deleted when the VM is terminated. If false, the NIC is detached from the VM.
                    type: boolean
                linkNicId:
                    description: The ID of the NIC attachment.
                    type: string
            type: object
        LinkPrivateIps:
            additionalProperties: false
            properties:
                allowRelink:
                    description: If true, allows an IP that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
                    type: boolean
                privateIps:
                    description: The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
                    items:
                        type: string
                    type: array
                secondaryPrivateIpCount:
                    description: The number of secondary private IPs to assign to the NIC.
                    type: integer
            required: []
            type: object
        LinkPublicIp:
            additionalProperties: false
            description: Information about the public IP association.
            properties:
                id:
                    description: (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
                    type: string
                publicDnsName:
                    description: The name of the public DNS.
                    type: string
                publicIp:
                    description: The public IP associated with the NIC.
                    type: string
                publicIpId:
                    description: The allocation ID of the public IP.
                    type: string
            type: object
        LinkPublicIpLightForVm:
            additionalProperties: false
            description: Information about the public IP associated with the NIC.
            properties:
                publicDnsName:
                    description: The name of the public DNS.
                    type: string
                publicIp:
                    description: The public IP associated with the NIC.
                    type: string
            type: object
        LinkRouteTable:
            additionalProperties: false
            description: One or more associations between the route table and the Subnets.
            properties:
                id:
                    description: The ID of the association between the route table and the Subnet.
                    type: string
                main:
                    description: If true, the route table is the main one.
                    type: boolean
                routeTableId:
                    description: The ID of the route table.
                    type: string
                subnetId:
                    description: The ID of the Subnet.
                    type: string
                vpcId:
                    description: The ID of the Net.
                    type: string
            type: object
        LinkVirtualGatewayToVpc:
            additionalProperties: false
            properties:
                vpcToVirtualGatewayLink:
                    $ref: '#/components/schemas/VpcToVirtualGatewayLink'
            type: object
        LinkVolume:
            additionalProperties: false
            properties:
                deviceName:
                    description: The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
                    type: string
                vmId:
                    description: The ID of the VM you want to attach the volume to.
                    type: string
            required:
                - deviceName
                - vmId
            type: object
        LinkedVolume:
            additionalProperties: false
            description: Information about volume attachment.
            properties:
                deleteOnVmDeletion:
                    description: If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
                    type: boolean
                deviceName:
                    description: The name of the device.
                    type: string
                id:
                    description: The ID of the volume.
                    type: string
                state:
                    description: The state of the attachment of the volume (`attaching` \| `detaching` \| `attached` \| `detached`).
                    type: string
                vmId:
                    description: The ID of the VM.
                    type: string
            type: object
        Listener:
            additionalProperties: false
            description: Information about the listener.
            properties:
                backendPort:
                    description: The port on which the back-end VM is listening (between `1` and `65535`, both included).
                    type: integer
                backendProtocol:
                    description: The protocol for routing traffic to back-end VMs (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
                    type: string
                loadBalancerPort:
                    description: The port on which the load balancer is listening (between `1` and `65535`, both included).
                    type: integer
                loadBalancerProtocol:
                    description: The routing protocol (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
                    type: string
                policyNames:
                    description: The names of the policies. If there are no policies enabled, the list is empty.
                    items:
                        type: string
                    type: array
                serverCertificateId:
                    description: The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
                    type: string
            type: object
        ListenerForCreation:
            additionalProperties: false
            description: Information about the listener to create.
            properties:
                backendPort:
                    description: The port on which the back-end VM is listening (between `1` and `65535`, both included).
                    type: integer
                backendProtocol:
                    description: The protocol for routing traffic to back-end VMs (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
                    type: string
                loadBalancerPort:
                    description: The port on which the load balancer is listening (between `1` and `65535`, both included).
                    type: integer
                loadBalancerProtocol:
                    description: The routing protocol (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
                    type: string
            required:
                - backendPort
                - loadBalancerPort
                - loadBalancerProtocol
            type: object
        ListenerRule:
            additionalProperties: false
            description: Information about the listener rule.
            properties:
                action:
                    description: The type of action for the rule (always `forward`).
                    type: string
                hostNamePattern:
                    description: A host-name pattern for the rule, with a maximum length of 128 characters. This host-name pattern supports maximum three wildcards, and must not contain any special characters except [-.?].
                    type: string
                id:
                    description: The ID of the listener rule.
                    type: integer
                listenerId:
                    description: The ID of the listener.
                    type: integer
                name:
                    description: A human-readable name for the listener rule.
                    type: string
                pathPattern:
                    description: A path pattern for the rule, with a maximum length of 128 characters. This path pattern supports maximum three wildcards, and must not contain any special characters except [_-.$/~&quot;'@:+?].
                    type: string
                priority:
                    description: The priority level of the listener rule, between `1` and `19999` both included. Each rule must have a unique priority level. Otherwise, an error is returned.
                    type: integer
                vmIds:
                    description: The IDs of the backend VMs.
                    items:
                        type: string
                    type: array
            type: object
        ListenerRuleForCreation:
            additionalProperties: false
            description: Information about the listener rule.
            properties:
                action:
                    description: The type of action for the rule (always `forward`).
                    type: string
                hostNamePattern:
                    description: 'A host-name pattern for the rule, with a maximum length of 128 characters. This host-name pattern supports maximum three wildcards, and must not contain any special characters except [-.?]. '
                    type: string
                listenerRuleName:
                    description: A human-readable name for the listener rule.
                    type: string
                pathPattern:
                    description: A path pattern for the rule, with a maximum length of 128 characters. This path pattern supports maximum three wildcards, and must not contain any special characters except [_-.$/~&quot;'@:+?].
                    type: string
                priority:
                    description: The priority level of the listener rule, between `1` and `19999` both included. Each rule must have a unique priority level. Otherwise, an error is returned.
                    type: integer
            required:
                - listenerRuleName
                - priority
            type: object
        LoadBalancer:
            additionalProperties: false
            description: Information about the load balancer.
            properties:
                applicationStickyCookiePolicies:
                    description: The stickiness policies defined for the load balancer.
                    items:
                        $ref: '#/components/schemas/ApplicationStickyCookiePolicy'
                    type: array
                availabilityZoneNames:
                    description: The ID of the Subregion in which the load balancer was created.
                    items:
                        type: string
                    type: array
                backendIps:
                    description: One or more public IPs of back-end VMs.
                    items:
                        type: string
                    type: array
                backendVmIds:
                    description: One or more IDs of back-end VMs for the load balancer.
                    items:
                        type: string
                    type: array
                dnsName:
                    description: The DNS name of the load balancer.
                    type: string
                healthCheck:
                    $ref: '#/components/schemas/HealthCheck'
                listeners:
                    description: The listeners for the load balancer.
                    items:
                        $ref: '#/components/schemas/Listener'
                    type: array
                name:
                    description: The name of the load balancer.
                    type: string
                publicIp:
                    description: (internet-facing only) The public IP associated with the load balancer.
                    type: string
                securedCookies:
                    description: Whether secure cookies are enabled for the load balancer.
                    type: boolean
                securityGroups:
                    description: One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
                    items:
                        type: string
                    type: array
                sourceSecurityGroup:
                    $ref: '#/components/schemas/SourceSecurityGroup'
                stickyCookiePolicies:
                    description: The policies defined for the load balancer.
                    items:
                        $ref: '#/components/schemas/LoadBalancerStickyCookiePolicy'
                    type: array
                subnets:
                    description: The ID of the Subnet in which the load balancer was created.
                    items:
                        type: string
                    type: array
                tags:
                    description: One or more tags associated with the load balancer.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                type:
                    description: |-
                        The type of load balancer. Valid only for load balancers in a Net.<br />
                        If `LoadBalancerType` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
                        If `LoadBalancerType` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
                    type: string
                vpcId:
                    description: The ID of the Net for the load balancer.
                    type: string
            type: object
        LoadBalancerLight:
            additionalProperties: false
            description: Information about the load balancer.
            properties:
                loadBalancerName:
                    description: The name of the load balancer to which the listener is attached.
                    type: string
                loadBalancerPort:
                    description: The port of load balancer on which the load balancer is listening (between `1` and `65535` both included).
                    type: integer
            required:
                - loadBalancerName
                - loadBalancerPort
            type: object
        LoadBalancerStickyCookiePolicy:
            additionalProperties: false
            description: Information about the stickiness policy.
            properties:
                cookieExpirationPeriod:
                    description: |-
                        The time period, in seconds, after which the cookie should be considered stale.<br />
                        If `1`, the stickiness session lasts for the duration of the browser session.
                    type: integer
                policyName:
                    description: The name of the stickiness policy.
                    type: string
            type: object
        LoadBalancerTag:
            additionalProperties: false
            description: Information about the load balancer tag.
            properties:
                key:
                    description: The key of the tag.
                    type: string
                name:
                    description: The name of the load balancer.
                    type: string
                value:
                    description: The value of the tag.
                    type: string
            type: object
        Location:
            additionalProperties: false
            description: Information about the DirectLink location.
            properties:
                code:
                    description: The location code, to be set as the `Location` parameter of the *CreateDirectLink* method when creating a DirectLink.
                    type: string
                name:
                    description: The name and description of the location, corresponding to a datacenter.
                    type: string
            type: object
        MaintenanceEvent:
            additionalProperties: false
            description: Information about the maintenance event.
            properties:
                code:
                    description: The code of the event (`system-reboot` \| `system-maintenance`).
                    type: string
                description:
                    description: The description of the event.
                    type: string
                notAfter:
                    description: The latest scheduled end time for the event.
                    format: date
                    type: string
                notBefore:
                    description: The earliest scheduled start time for the event.
                    format: date
                    type: string
            type: object
        NatGateway:
            additionalProperties: false
            description: Information about the NAT service.
            properties:
                id:
                    description: The ID of the NAT service.
                    type: string
                publicIps:
                    description: Information about the public IP or IPs associated with the NAT service.
                    items:
                        $ref: '#/components/schemas/PublicIpLight'
                    type: array
                state:
                    description: The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
                    type: string
                subnetId:
                    description: The ID of the Subnet in which the NAT service is.
                    type: string
                tags:
                    description: One or more tags associated with the NAT service.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                vpcId:
                    description: The ID of the Net in which the NAT service is.
                    type: string
            type: object
        Nic:
            additionalProperties: false
            description: Information about the NIC.
            properties:
                availabilityZoneName:
                    description: The Subregion in which the NIC is located.
                    type: string
                description:
                    description: The description of the NIC.
                    type: string
                id:
                    description: The ID of the NIC.
                    type: string
                isSourceDestChecked:
                    description: (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
                    type: boolean
                linkNic:
                    $ref: '#/components/schemas/LinkNic'
                linkPublicIp:
                    $ref: '#/components/schemas/LinkPublicIp'
                macAddress:
                    description: The Media Access Control (MAC) address of the NIC.
                    type: string
                privateDnsName:
                    description: The name of the private DNS.
                    type: string
                privateIps:
                    description: The private IPs of the NIC.
                    items:
                        $ref: '#/components/schemas/PrivateIp'
                    type: array
                securityGroups:
                    description: One or more IDs of security groups for the NIC.
                    items:
                        $ref: '#/components/schemas/SecurityGroupLight'
                    type: array
                state:
                    description: The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
                    type: string
                subnetId:
                    description: The ID of the Subnet.
                    type: string
                tags:
                    description: One or more tags associated with the NIC.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                vpcId:
                    description: The ID of the Net for the NIC.
                    type: string
            type: object
        NicForVmCreation:
            additionalProperties: false
            description: Information about the network interface card (NIC) when creating a virtual machine (VM).
            properties:
                deleteOnVmDeletion:
                    description: If true, the NIC is deleted when the VM is terminated. You can specify this parameter only for a new NIC. To modify this value for an existing NIC, see [UpdateNic](#updatenic).
                    type: boolean
                description:
                    description: The description of the NIC, if you are creating a NIC when creating the VM.
                    type: string
                deviceNumber:
                    description: The index of the VM device for the NIC attachment (between `0` and `7`, both included). This parameter is required if you create a NIC when creating the VM.
                    type: integer
                nicId:
                    description: The ID of the NIC, if you are attaching an existing NIC when creating a VM.
                    type: string
                privateIps:
                    description: One or more private IPs to assign to the NIC, if you create a NIC when creating a VM. Only one private IP can be the primary private IP.
                    items:
                        $ref: '#/components/schemas/PrivateIpLight'
                    type: array
                secondaryPrivateIpCount:
                    description: The number of secondary private IPs, if you create a NIC when creating a VM. This parameter cannot be specified if you specified more than one private IP in the `PrivateIps` parameter.
                    type: integer
                securityGroupIds:
                    description: One or more IDs of security groups for the NIC, if you create a NIC when creating a VM.
                    items:
                        type: string
                    type: array
                subnetId:
                    description: The ID of the Subnet for the NIC, if you create a NIC when creating a VM. This parameter is required if you create a NIC when creating the VM.
                    type: string
            type: object
        NicLight:
            additionalProperties: false
            description: Information about the network interface card (NIC).
            properties:
                description:
                    description: The description of the NIC.
                    type: string
                isSourceDestChecked:
                    description: (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
                    type: boolean
                linkNic:
                    $ref: '#/components/schemas/LinkNicLight'
                linkPublicIp:
                    $ref: '#/components/schemas/LinkPublicIpLightForVm'
                macAddress:
                    description: The Media Access Control (MAC) address of the NIC.
                    type: string
                nicId:
                    description: The ID of the NIC.
                    type: string
                privateDnsName:
                    description: The name of the private DNS.
                    type: string
                privateIps:
                    description: The private IP or IPs of the NIC.
                    items:
                        $ref: '#/components/schemas/PrivateIpLightForVm'
                    type: array
                securityGroups:
                    description: One or more IDs of security groups for the NIC.
                    items:
                        $ref: '#/components/schemas/SecurityGroupLight'
                    type: array
                state:
                    description: The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
                    type: string
                subnetId:
                    description: The ID of the Subnet for the NIC.
                    type: string
                vpcId:
                    description: The ID of the Net for the NIC.
                    type: string
            type: object
        Phase1Options:
            additionalProperties: false
            description: 'Information about Phase 1 of the Internet Key Exchange (IKE) negotiation. When Phase 1 finishes successfully, peers proceed to Phase 2 negotiations. '
            properties:
                dpdTimeoutAction:
                    description: The action to carry out after a Dead Peer Detection (DPD) timeout occurs.
                    type: string
                dpdTimeoutSeconds:
                    description: The maximum waiting time for a Dead Peer Detection (DPD) response before considering the peer as dead, in seconds.
                    type: integer
                ikeVersions:
                    description: The Internet Key Exchange (IKE) versions allowed for the VPN tunnel.
                    items:
                        type: string
                    type: array
                phase1DhGroupNumbers:
                    description: The Diffie-Hellman (DH) group numbers allowed for the VPN tunnel for phase 1.
                    items:
                        type: integer
                    type: array
                phase1EncryptionAlgorithms:
                    description: The encryption algorithms allowed for the VPN tunnel for phase 1.
                    items:
                        type: string
                    type: array
                phase1IntegrityAlgorithms:
                    description: The integrity algorithms allowed for the VPN tunnel for phase 1.
                    items:
                        type: string
                    type: array
                phase1LifetimeSeconds:
                    description: The lifetime for phase 1 of the IKE negotiation process, in seconds.
                    type: integer
                replayWindowSize:
                    description: The number of packets in an IKE replay window.
                    type: integer
                startupAction:
                    description: The action to carry out when establishing tunnels for a VPN connection.
                    type: string
            type: object
        Phase2Options:
            additionalProperties: false
            description: 'Information about Phase 2 of the Internet Key Exchange (IKE) negotiation. '
            properties:
                phase2DhGroupNumbers:
                    description: The Diffie-Hellman (DH) group numbers allowed for the VPN tunnel for phase 2.
                    items:
                        type: integer
                    type: array
                phase2EncryptionAlgorithms:
                    description: The encryption algorithms allowed for the VPN tunnel for phase 2.
                    items:
                        type: string
                    type: array
                phase2IntegrityAlgorithms:
                    description: The integrity algorithms allowed for the VPN tunnel for phase 2.
                    items:
                        type: string
                    type: array
                phase2LifetimeSeconds:
                    description: The lifetime for phase 2 of the Internet Key Exchange (IKE) negociation process, in seconds.
                    type: integer
                preSharedKey:
                    description: The pre-shared key to establish the initial authentication between the client gateway and the virtual gateway. This key can contain any character except line breaks and double quotes (&quot;).
                    type: string
            type: object
        Phase2OptionsToUpdate:
            additionalProperties: false
            description: 'Information about Phase 2 of the Internet Key Exchange (IKE) negotiation. '
            properties:
                preSharedKey:
                    description: The pre-shared key to establish the initial authentication between the client gateway and the virtual gateway. This key can contain any character except line breaks and double quotes (&quot;).
                    type: string
            type: object
        Placement:
            additionalProperties: false
            description: Information about the placement of the VM.
            properties:
                availabilityZoneName:
                    description: The name of the Subregion. If you specify this parameter, you must not specify the `Nics` parameter.
                    type: string
                tenancy:
                    description: The tenancy of the VM (`default`, `dedicated`, or a dedicated group ID).
                    type: string
            type: object
        PrivateIp:
            additionalProperties: false
            description: Information about the private IP.
            properties:
                isPrimary:
                    description: If true, the IP is the primary private IP of the NIC.
                    type: boolean
                linkPublicIp:
                    $ref: '#/components/schemas/LinkPublicIp'
                privateDnsName:
                    description: The name of the private DNS.
                    type: string
                privateIp:
                    description: The private IP of the NIC.
                    type: string
            type: object
        PrivateIpLight:
            additionalProperties: false
            description: Information about the private IP.
            properties:
                isPrimary:
                    description: If true, the IP is the primary private IP of the NIC.
                    type: boolean
                privateIp:
                    description: The private IP of the NIC.
                    type: string
            type: object
        PrivateIpLightForVm:
            additionalProperties: false
            description: Information about the private IP of the NIC.
            properties:
                isPrimary:
                    description: If true, the IP is the primary private IP of the NIC.
                    type: boolean
                linkPublicIp:
                    $ref: '#/components/schemas/LinkPublicIpLightForVm'
                privateDnsName:
                    description: The name of the private DNS.
                    type: string
                privateIp:
                    description: The private IP.
                    type: string
            type: object
        ProductType:
            additionalProperties: false
            description: Information about the product type.
            properties:
                description:
                    description: The description of the product type.
                    type: string
                id:
                    description: The ID of the product type.
                    type: string
                vendor:
                    description: The vendor of the product type.
                    type: string
            type: object
        PublicIp:
            additionalProperties: false
            description: Information about the public IP.
            properties:
                id:
                    description: The allocation ID of the public IP.
                    type: string
                linkPublicIpId:
                    description: (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
                    type: string
                nicId:
                    description: The ID of the NIC the public IP is associated with (if any).
                    type: string
                privateIp:
                    description: The private IP associated with the public IP.
                    type: string
                publicIp:
                    description: The public IP.
                    type: string
                tags:
                    description: One or more tags associated with the public IP.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                vmId:
                    description: The ID of the VM the public IP is associated with (if any).
                    type: string
            type: object
        PublicIpLight:
            additionalProperties: false
            description: Information about the public IP.
            properties:
                publicIp:
                    description: The public IP associated with the NAT service.
                    type: string
                publicIpId:
                    description: The allocation ID of the public IP associated with the NAT service.
                    type: string
            type: object
        ReadAdminPassword:
            additionalProperties: false
            properties:
                adminPassword:
                    description: The password of the VM. After the first boot, returns an empty string.
                    type: string
                vmId:
                    description: The ID of the VM.
                    type: string
            type: object
        ReadClientGateways:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more client gateways.
                    items:
                        $ref: '#/components/schemas/ClientGateway'
                    type: array
            type: object
        ReadConsoleOutput:
            additionalProperties: false
            properties:
                consoleOutput:
                    description: The Base64-encoded output of the console. If a command line tool is used, the output is decoded by the tool.
                    type: string
                vmId:
                    description: The ID of the VM.
                    type: string
            type: object
        ReadDhcpOptions:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more DHCP options sets.
                    items:
                        $ref: '#/components/schemas/DhcpOptionsSet'
                    type: array
            type: object
        ReadDirectLinkInterfaces:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more DirectLink interfaces.
                    items:
                        $ref: '#/components/schemas/DirectLinkInterfaces'
                    type: array
            type: object
        ReadDirectLinks:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more DirectLinks.
                    items:
                        $ref: '#/components/schemas/DirectLink'
                    type: array
            type: object
        ReadFlexibleGpuCatalog:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more fGPUs available in the public catalog.
                    items:
                        $ref: '#/components/schemas/FlexibleGpuCatalog'
                    type: array
            type: object
        ReadFlexibleGpus:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more fGPUs.
                    items:
                        $ref: '#/components/schemas/FlexibleGpu'
                    type: array
            type: object
        ReadImages:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more OMIs.
                    items:
                        $ref: '#/components/schemas/Image'
                    type: array
            type: object
        ReadInternetGateways:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more Internet services.
                    items:
                        $ref: '#/components/schemas/InternetGateway'
                    type: array
            type: object
        ReadKeypairs:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more keypairs.
                    items:
                        $ref: '#/components/schemas/Keypair'
                    type: array
            type: object
        ReadKeypairsById:
            additionalProperties: false
            description: Information about the keypair.
            properties:
                fingerprint:
                    description: The MD5 public key fingerprint as specified in section 4 of RFC 4716.
                    type: string
                name:
                    description: The name of the keypair.
                    type: string
                type:
                    description: The type of the keypair (`ssh-rsa`, `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`).
                    type: string
            type: object
        ReadListenerRules:
            additionalProperties: false
            properties:
                items:
                    description: The list of the rules to describe.
                    items:
                        $ref: '#/components/schemas/ListenerRule'
                    type: array
            type: object
        ReadLoadBalancerTags:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more load balancer tags.
                    items:
                        $ref: '#/components/schemas/LoadBalancerTag'
                    type: array
            type: object
        ReadLoadBalancers:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more load balancers.
                    items:
                        $ref: '#/components/schemas/LoadBalancer'
                    type: array
            type: object
        ReadLocations:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more locations.
                    items:
                        $ref: '#/components/schemas/Location'
                    type: array
            type: object
        ReadNatGateway:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more NAT services.
                    items:
                        $ref: '#/components/schemas/NatGateway'
                    type: array
            type: object
        ReadNics:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more NICs.
                    items:
                        $ref: '#/components/schemas/Nic'
                    type: array
            type: object
        ReadProductTypes:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more product types.
                    items:
                        $ref: '#/components/schemas/ProductType'
                    type: array
            type: object
        ReadProductTypesById:
            additionalProperties: false
            description: Information about the product type.
            properties:
                description:
                    description: The description of the product type.
                    type: string
                id:
                    description: The ID of the product type.
                    type: string
                vendor:
                    description: The vendor of the product type.
                    type: string
            type: object
        ReadPublicIpRanges:
            additionalProperties: false
            properties:
                items:
                    description: The list of public IPv4 addresses used in the Region, in CIDR notation.
                    items:
                        type: string
                    type: array
            type: object
        ReadPublicIps:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more public IPs.
                    items:
                        $ref: '#/components/schemas/PublicIp'
                    type: array
            type: object
        ReadRouteTables:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more route tables.
                    items:
                        $ref: '#/components/schemas/RouteTable'
                    type: array
            type: object
        ReadSecurityGroups:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more security groups.
                    items:
                        $ref: '#/components/schemas/SecurityGroup'
                    type: array
            type: object
        ReadSnapshots:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more snapshots and their permissions.
                    items:
                        $ref: '#/components/schemas/Snapshot'
                    type: array
            type: object
        ReadSubnets:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more Subnets.
                    items:
                        $ref: '#/components/schemas/Subnet'
                    type: array
            type: object
        ReadTags:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more tags.
                    items:
                        $ref: '#/components/schemas/Tag'
                    type: array
            type: object
        ReadVirtualGateways:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more virtual gateways.
                    items:
                        $ref: '#/components/schemas/VirtualGateway'
                    type: array
            type: object
        ReadVms:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more VMs.
                    items:
                        $ref: '#/components/schemas/Vm'
                    type: array
            type: object
        ReadVmsHealth:
            additionalProperties: false
            properties:
                backendVmHealth:
                    description: Information about the health of one or more back-end VMs.
                    items:
                        $ref: '#/components/schemas/BackendVmHealth'
                    type: array
            type: object
        ReadVmsState:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more VM states.
                    items:
                        $ref: '#/components/schemas/VmStates'
                    type: array
            type: object
        ReadVolumes:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more volumes.
                    items:
                        $ref: '#/components/schemas/Volume'
                    type: array
            type: object
        ReadVpcAccessPoints:
            additionalProperties: false
            properties:
                items:
                    description: One or more Net access points.
                    items:
                        $ref: '#/components/schemas/VpcAccessPoint'
                    type: array
            type: object
        ReadVpcPeerings:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more Net peerings.
                    items:
                        $ref: '#/components/schemas/VpcPeering'
                    type: array
            type: object
        ReadVpcs:
            additionalProperties: false
            properties:
                items:
                    description: Information about the described Nets.
                    items:
                        $ref: '#/components/schemas/Vpc'
                    type: array
            type: object
        ReadVpnConnections:
            additionalProperties: false
            properties:
                items:
                    description: Information about one or more VPN connections.
                    items:
                        $ref: '#/components/schemas/VpnConnection'
                    type: array
            type: object
        ResourceLoadBalancerTag:
            additionalProperties: false
            description: Information about the tag.
            properties:
                key:
                    description: The key of the tag, with a minimum of 1 character.
                    type: string
            type: object
        ResourceTag:
            additionalProperties: false
            description: Information about the tag.
            properties:
                key:
                    description: The key of the tag, with a minimum of 1 character.
                    type: string
                value:
                    description: The value of the tag, between 0 and 255 characters.
                    type: string
            required:
                - key
                - value
            type: object
        Route:
            additionalProperties: false
            description: Information about the route.
            properties:
                creationMethod:
                    description: The method used to create the route.
                    type: string
                destinationIpRange:
                    description: The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
                    type: string
                destinationServiceId:
                    description: The ID of the OUTSCALE service.
                    type: string
                gatewayId:
                    description: The ID of the Internet service or virtual gateway attached to the Net.
                    type: string
                natGatewayId:
                    description: The ID of a NAT service attached to the Net.
                    type: string
                nicId:
                    description: The ID of the NIC.
                    type: string
                state:
                    description: 'The state of a route in the route table (always `active`). '
                    type: string
                vmAccountId:
                    description: The account ID of the owner of the VM.
                    type: string
                vmId:
                    description: The ID of a VM specified in a route in the table.
                    type: string
                vpcAccessPointId:
                    description: The ID of the Net access point.
                    type: string
                vpcPeeringId:
                    description: The ID of the Net peering.
                    type: string
            type: object
        RouteLight:
            additionalProperties: false
            description: Information about the route.
            properties:
                destinationIpRange:
                    description: The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
                    type: string
                routeType:
                    description: The type of route (always `static`).
                    type: string
                state:
                    description: The current state of the static route (`pending` \| `available` \| `deleting` \| `deleted`).
                    type: string
            type: object
        RoutePropagatingVirtualGateway:
            additionalProperties: false
            description: Information about the route propagating virtual gateway.
            properties:
                virtualGatewayId:
                    description: The ID of the virtual gateway.
                    type: string
            type: object
        RouteTable:
            additionalProperties: false
            description: Information about the route table.
            properties:
                id:
                    description: The ID of the route table.
                    type: string
                linkRouteTables:
                    description: One or more associations between the route table and Subnets.
                    items:
                        $ref: '#/components/schemas/LinkRouteTable'
                    type: array
                routePropagatingVirtualGateways:
                    description: Information about virtual gateways propagating routes.
                    items:
                        $ref: '#/components/schemas/RoutePropagatingVirtualGateway'
                    type: array
                routes:
                    description: One or more routes in the route table.
                    items:
                        $ref: '#/components/schemas/Route'
                    type: array
                tags:
                    description: One or more tags associated with the route table.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                vpcId:
                    description: The ID of the Net for the route table.
                    type: string
            type: object
        SecurityGroup:
            additionalProperties: false
            description: Information about the security group.
            properties:
                description:
                    description: The description of the security group.
                    type: string
                id:
                    description: The ID of the security group.
                    type: string
                inboundRules:
                    description: The inbound rules associated with the security group.
                    items:
                        $ref: '#/components/schemas/SecurityGroupRule'
                    type: array
                name:
                    description: The name of the security group.
                    type: string
                outboundRules:
                    description: The outbound rules associated with the security group.
                    items:
                        $ref: '#/components/schemas/SecurityGroupRule'
                    type: array
                tags:
                    description: One or more tags associated with the security group.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                vpcId:
                    description: The ID of the Net for the security group.
                    type: string
            type: object
        SecurityGroupLight:
            additionalProperties: false
            description: Information about the security group.
            properties:
                securityGroupId:
                    description: The ID of the security group.
                    type: string
                securityGroupName:
                    description: The name of the security group.
                    type: string
            type: object
        SecurityGroupRule:
            additionalProperties: false
            description: Information about the security group rule.
            properties:
                fromPortRange:
                    description: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
                    type: integer
                ipProtocol:
                    description: The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
                    type: string
                ipRanges:
                    description: One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
                    items:
                        type: string
                    type: array
                securityGroupsMembers:
                    description: Information about one or more source or destination security groups.
                    items:
                        $ref: '#/components/schemas/SecurityGroupsMember'
                    type: array
                serviceIds:
                    description: One or more service IDs to allow traffic from a Net to access the corresponding OUTSCALE services. For more information, see [ReadNetAccessPointServices](#readnetaccesspointservices).
                    items:
                        type: string
                    type: array
                toPortRange:
                    description: The end of the port range for the TCP and UDP protocols, or an ICMP code number.
                    type: integer
            type: object
        SecurityGroupsMember:
            additionalProperties: false
            description: Information about a source or destination security group.
            properties:
                securityGroupId:
                    description: The ID of a source or destination security group that you want to link to the security group of the rule.
                    type: string
                securityGroupName:
                    description: (Public Cloud only) The name of a source or destination security group that you want to link to the security group of the rule.
                    type: string
            type: object
        Snapshot:
            additionalProperties: false
            description: Information about the snapshot.
            properties:
                access:
                    $ref: '#/components/schemas/Access'
                creationDate:
                    description: The date and time of creation of the snapshot.
                    format: date-time
                    type: string
                description:
                    description: The description of the snapshot.
                    type: string
                id:
                    description: The ID of the snapshot.
                    type: string
                progress:
                    description: The progress of the snapshot, as a percentage.
                    type: integer
                state:
                    description: The state of the snapshot (`in-queue` \| `completed` \| `error`).
                    type: string
                tags:
                    description: One or more tags associated with the snapshot.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                volumeId:
                    description: The ID of the volume used to create the snapshot.
                    type: string
                volumeSize:
                    description: The size of the volume used to create the snapshot, in gibibytes (GiB).
                    type: integer
            type: object
        SourceSecurityGroup:
            additionalProperties: false
            description: |-
                Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
                To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
            properties:
                securityGroupAccountId:
                    description: The account ID of the owner of the security group.
                    type: string
                securityGroupName:
                    description: The name of the security group.
                    type: string
            type: object
        SourceVpc:
            additionalProperties: false
            description: Information about the source Net.
            properties:
                ipRange:
                    description: The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
                    type: string
                vpcId:
                    description: The ID of the source Net.
                    type: string
            type: object
        StateComment:
            additionalProperties: false
            description: Information about the change of state.
            properties:
                stateCode:
                    description: The code of the change of state.
                    type: string
                stateMessage:
                    description: A message explaining the change of state.
                    type: string
            type: object
        StopVm:
            additionalProperties: false
            properties:
                forceStop:
                    description: Forces the VM to stop.
                    type: boolean
            required: []
            type: object
        Subnet:
            additionalProperties: false
            description: Information about the Subnet.
            properties:
                availabilityZoneName:
                    description: The name of the Subregion in which the Subnet is located.
                    type: string
                availableIpsCount:
                    description: The number of available IPs in the Subnets.
                    type: integer
                id:
                    description: The ID of the Subnet.
                    type: string
                ipRange:
                    description: The IP range in the Subnet, in CIDR notation (for example, `10.0.0.0/16`).
                    type: string
                mapPublicIpOnLaunch:
                    description: If true, a public IP is assigned to the network interface cards (NICs) created in the specified Subnet.
                    type: boolean
                state:
                    description: The state of the Subnet (`pending` \| `available` \| `deleted`).
                    type: string
                tags:
                    description: One or more tags associated with the Subnet.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                vpcId:
                    description: The ID of the Net in which the Subnet is.
                    type: string
            type: object
        Tag:
            additionalProperties: false
            description: Information about the tag.
            properties:
                key:
                    description: The key of the tag, with a minimum of 1 character.
                    type: string
                resourceId:
                    description: The ID of the resource.
                    type: string
                resourceType:
                    description: The type of the resource.
                    type: string
                value:
                    description: The value of the tag, between 0 and 255 characters.
                    type: string
            type: object
        UnlinkInternetGateway:
            additionalProperties: false
            properties:
                vpcId:
                    description: The ID of the Net from which you want to detach the Internet service.
                    type: string
            required:
                - vpcId
            type: object
        UnlinkLoadBalancerBackendMachines:
            additionalProperties: false
            properties:
                backendIps:
                    description: ' One or more public IPs of back-end VMs.'
                    items:
                        type: string
                    type: array
                backendVmIds:
                    description: ' One or more IDs of back-end VMs.'
                    items:
                        type: string
                    type: array
            required: []
            type: object
        UnlinkNic:
            additionalProperties: false
            properties:
                linkNicId:
                    description: The ID of the attachment operation.
                    type: string
            required:
                - linkNicId
            type: object
        UnlinkPrivateIps:
            additionalProperties: false
            properties:
                privateIps:
                    description: One or more secondary private IPs you want to unassign from the NIC.
                    items:
                        type: string
                    type: array
            required:
                - privateIps
            type: object
        UnlinkPublicIp:
            additionalProperties: false
            properties:
                linkPublicIpId:
                    description: The ID representing the association of the public IP with the VM or the NIC. This parameter is required unless you use the `PublicIp` parameter.
                    type: string
            type: object
        UnlinkRouteTable:
            additionalProperties: false
            properties:
                linkRouteTableId:
                    description: The ID of the association between the route table and the Subnet.
                    type: string
            required:
                - linkRouteTableId
            type: object
        UnlinkVirtualGatewayToVpc:
            additionalProperties: false
            properties:
                vpcId:
                    description: The ID of the Net from which you want to detach the virtual gateway.
                    type: string
            required:
                - vpcId
            type: object
        UnlinkVolume:
            additionalProperties: false
            properties:
                forceUnlink:
                    description: 'Forces the detachment of the volume in case of previous failure. Important: This action may damage your data or file systems.'
                    type: boolean
            required: []
            type: object
        UpdateDirectLinkInterface:
            additionalProperties: false
            properties:
                mtu:
                    description: The maximum transmission unit (MTU) of the DirectLink interface, in bytes (always `1500`).
                    enum:
                        - 1500
                    type: integer
            required:
                - mtu
            type: object
        UpdateFlexibleGpu:
            additionalProperties: false
            properties:
                deleteOnVmDeletion:
                    description: If true, the fGPU is deleted when the VM is terminated.
                    type: boolean
            required: []
            type: object
        UpdateImage:
            additionalProperties: false
            properties:
                accessCreation:
                    $ref: '#/components/schemas/AccessCreation'
            required:
                - accessCreation
            type: object
        UpdateListenerRule:
            additionalProperties: false
            properties:
                hostPattern:
                    description: A host-name pattern for the rule, with a maximum length of 128 characters. This host-name pattern supports maximum three wildcards, and must not contain any special characters except [-.?].
                    nullable: true
                    type: string
                pathPattern:
                    description: A path pattern for the rule, with a maximum length of 128 characters. This path pattern supports maximum three wildcards, and must not contain any special characters except [_-.$/~&quot;'@:+?].
                    nullable: true
                    type: string
            required: []
            type: object
        UpdateLoadBalancer:
            additionalProperties: false
            properties:
                healthCheck:
                    $ref: '#/components/schemas/HealthCheck'
                loadBalancerPort:
                    description: The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
                    type: integer
                policyNames:
                    description: The name of the policy you want to enable for the listener.
                    items:
                        type: string
                    type: array
                publicIp:
                    description: (internet-facing only) The public IP you want to associate with the load balancer. The former public IP of the load balancer is then disassociated. If you specify an empty string and the former public IP belonged to you, it is disassociated and replaced by a public IP owned by 3DS OUTSCALE.
                    type: string
                securedCookies:
                    description: If true, secure cookies are enabled for the load balancer.
                    type: boolean
                securityGroups:
                    description: (Net only) One or more IDs of security groups you want to assign to the load balancer. You need to specify the already assigned security groups that you want to keep along with the new ones you are assigning. If the list is empty, the default security group of the Net is assigned to the load balancer.
                    items:
                        type: string
                    type: array
            required: []
            type: object
        UpdateNic:
            additionalProperties: false
            properties:
                description:
                    description: A new description for the NIC.
                    type: string
                linkNic:
                    $ref: '#/components/schemas/LinkNicToUpdate'
                securityGroupIds:
                    description: |-
                        One or more IDs of security groups for the NIC.<br />
                        You must specify at least one group, even if you use the default security group in the Net.
                    items:
                        type: string
                    type: array
            required: []
            type: object
        UpdateRoute:
            additionalProperties: false
            properties:
                destinationIpRange:
                    description: The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
                    type: string
                gatewayId:
                    description: The ID of an Internet service or virtual gateway attached to your Net.
                    type: string
                natGatewayId:
                    description: The ID of a NAT service.
                    type: string
                nicId:
                    description: The ID of a network interface card (NIC).
                    type: string
                vmId:
                    description: The ID of a NAT VM in your Net.
                    type: string
                vpcPeeringId:
                    description: The ID of a Net peering.
                    type: string
            required:
                - destinationIpRange
            type: object
        UpdateRouteTableRoutePropagation:
            additionalProperties: false
            properties:
                enable:
                    description: If true, a virtual gateway can propagate routes to a specified route table of a Net. If false, the propagation is disabled.
                    type: boolean
                virtualGatewayId:
                    description: The ID of the virtual gateway.
                    type: string
            required:
                - enable
                - virtualGatewayId
            type: object
        UpdateSubnet:
            additionalProperties: false
            properties:
                mapPublicIpOnLaunch:
                    description: If true, a public IP is assigned to the network interface cards (NICs) created in the specified Subnet.
                    type: boolean
            required:
                - mapPublicIpOnLaunch
            type: object
        UpdateVm:
            additionalProperties: false
            properties:
                blockDeviceMappings:
                    description: One or more block device mappings of the VM.
                    items:
                        $ref: '#/components/schemas/BlockDeviceMappingVmUpdate'
                    type: array
                bsuOptimized:
                    description: This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
                    type: boolean
                deletionProtection:
                    description: If true, you cannot delete the VM unless you change this parameter back to false.
                    type: boolean
                isSourceDestChecked:
                    description: (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
                    type: boolean
                keypairName:
                    description: |-
                        The name of a keypair you want to associate with the VM.<br />
                        When you replace the keypair of a VM with another one, the metadata of the VM is modified to reflect the new public key, but the replacement is still not effective in the operating system of the VM. To complete the replacement and effectively apply the new keypair, you need to perform other actions inside the VM. For more information, see [Modifying the Keypair of a VM](https://docs.outscale.com/en/userguide/Modifying-the-Keypair-of-a-VM.html).
                    type: string
                nestedVirtualization:
                    description: (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
                    type: boolean
                performance:
                    description: The performance of the VM (`medium` \| `high` \|  `highest`).
                    enum:
                        - medium
                        - high
                        - highest
                    type: string
                securityGroupIds:
                    description: One or more IDs of security groups for the VM.
                    items:
                        type: string
                    type: array
                type:
                    description: The type of VM. For more information, see [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
                    type: string
                userData:
                    description: The Base64-encoded MIME user data, limited to 500 kibibytes (KiB).
                    type: string
                vmInitiatedShutdownBehavior:
                    description: The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
                    type: string
            required: []
            type: object
        UpdateVolume:
            additionalProperties: false
            properties:
                iops:
                    description: |-
                        **Cold volume**: the new number of I/O operations per second (IOPS). This parameter can be specified only if you update an `io1` volume or if you change the type of the volume for an `io1`. This modification is instantaneous. <br />
                        **Hot volume**: the new number of I/O operations per second (IOPS). This parameter can be specified only if you update an `io1` volume. This modification is not instantaneous. <br /><br />
                         The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
                    type: integer
                size:
                    description: |-
                        **Cold volume**: the new size of the volume, in gibibytes (GiB). This value must be equal to or greater than the current size of the volume. This modification is not instantaneous. <br />
                        **Hot volume**: you cannot change the size of a hot volume.
                    type: integer
                volumeType:
                    description: |-
                        **Cold volume**: the new type of the volume (`standard` \ | `io1` \| `gp2`). This modification is instantaneous. If you update to an `io1` volume, you must also specify the `Iops` parameter.<br />
                         **Hot volume**: you cannot change the type of a hot volume.
                    type: string
            required: []
            type: object
        UpdateVpc:
            additionalProperties: false
            properties:
                dhcpOptionsSetId:
                    description: The ID of the DHCP options set (or `default` if you want to associate the default one).
                    type: string
            required:
                - dhcpOptionsSetId
            type: object
        UpdateVpcAccessPoint:
            additionalProperties: false
            properties:
                addRouteTableIds:
                    description: One or more IDs of route tables to associate with the specified Net access point.
                    items:
                        type: string
                    type: array
                removeRouteTableIds:
                    description: One or more IDs of route tables to disassociate from the specified Net access point.
                    items:
                        type: string
                    type: array
            required: []
            type: object
        UpdateVpnConnection:
            additionalProperties: false
            properties:
                clientGatewayId:
                    description: The ID of the client gateway.
                    type: string
                virtualGatewayId:
                    description: The ID of the virtual gateway.
                    type: string
                vpnOptions:
                    $ref: '#/components/schemas/VpnOptionsToUpdate'
            required: []
            type: object
        Url:
            $schema: https://json-schema.org/draft/2020-12/schema
            example: https://domain.org/path/
            format: uri
            title: Url
            type: string
        VgwTelemetry:
            additionalProperties: false
            description: Information about the current state of a VPN tunnel.
            properties:
                acceptedRouteCount:
                    description: The number of routes accepted through BGP (Border Gateway Protocol) route exchanges.
                    type: integer
                lastStateChangeDate:
                    description: The date and time (UTC) of the latest state update.
                    format: date-time
                    type: string
                outsideIpAddress:
                    description: The IP on the OUTSCALE side of the tunnel.
                    type: string
                state:
                    description: The state of the IPSEC tunnel (`UP` \| `DOWN`).
                    type: string
                stateDescription:
                    description: A description of the current state of the tunnel.
                    type: string
            type: object
        VirtualGateway:
            additionalProperties: false
            description: Information about the virtual gateway.
            properties:
                connectionType:
                    description: The type of VPN connection supported by the virtual gateway (only `ipsec.1` is supported).
                    type: string
                id:
                    description: The ID of the virtual gateway.
                    type: string
                state:
                    description: The state of the virtual gateway (`pending` \| `available` \| `deleting` \| `deleted`).
                    type: string
                tags:
                    description: One or more tags associated with the virtual gateway.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                vpcToVirtualGatewayLinks:
                    description: The Net to which the virtual gateway is attached.
                    items:
                        $ref: '#/components/schemas/VpcToVirtualGatewayLink'
                    type: array
            type: object
        Vm:
            additionalProperties: false
            description: Information about the VM.
            properties:
                architecture:
                    description: The architecture of the VM (`i386` \| `x86_64`).
                    type: string
                blockDeviceMappings:
                    description: The block device mapping of the VM.
                    items:
                        $ref: '#/components/schemas/BlockDeviceMappingCreated'
                    type: array
                bsuOptimized:
                    description: This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
                    type: boolean
                clientToken:
                    description: The idempotency token provided when launching the VM.
                    type: string
                creationDate:
                    description: The date and time of creation of the VM.
                    format: date-time
                    type: string
                deletionProtection:
                    description: If true, you cannot delete the VM unless you change this parameter back to false.
                    type: boolean
                hypervisor:
                    description: The hypervisor type of the VMs (`ovm` \| `xen`).
                    type: string
                id:
                    description: The ID of the VM.
                    type: string
                imageId:
                    description: The ID of the OMI used to create the VM.
                    type: string
                initiatedShutdownBehavior:
                    description: The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.
                    type: string
                isSourceDestChecked:
                    description: (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
                    type: boolean
                keypairName:
                    description: The name of the keypair used when launching the VM.
                    type: string
                launchNumber:
                    description: The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
                    type: integer
                nestedVirtualization:
                    description: If true, nested virtualization is enabled. If false, it is disabled.
                    type: boolean
                nics:
                    description: (Net only) The network interface cards (NICs) the VMs are attached to.
                    items:
                        $ref: '#/components/schemas/NicLight'
                    type: array
                osFamily:
                    description: Indicates the operating system (OS) of the VM.
                    type: string
                performance:
                    description: The performance of the VM (`medium` \| `high` \|  `highest`).
                    type: string
                placement:
                    $ref: '#/components/schemas/Placement'
                privateDnsName:
                    description: The name of the private DNS.
                    type: string
                privateIp:
                    description: The primary private IP of the VM.
                    type: string
                productCodes:
                    description: The product codes associated with the OMI used to create the VM.
                    items:
                        type: string
                    type: array
                publicDnsName:
                    description: The name of the public DNS.
                    type: string
                publicIp:
                    description: The public IP of the VM.
                    type: string
                reservationId:
                    description: The reservation ID of the VM.
                    type: string
                rootDeviceName:
                    description: The name of the root device for the VM (for example, `/dev/sda1`).
                    type: string
                rootDeviceType:
                    description: The type of root device used by the VM (always `bsu`).
                    type: string
                securityGroups:
                    description: One or more security groups associated with the VM.
                    items:
                        $ref: '#/components/schemas/SecurityGroupLight'
                    type: array
                state:
                    description: The state of the VM (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
                    type: string
                stateReason:
                    description: The reason explaining the current state of the VM.
                    type: string
                subnetId:
                    description: The ID of the Subnet for the VM.
                    type: string
                tags:
                    description: One or more tags associated with the VM.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                type:
                    description: The type of VM. For more information, see [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
                    type: string
                userData:
                    description: The Base64-encoded MIME user data.
                    type: string
                vpcId:
                    description: The ID of the Net in which the VM is running.
                    type: string
            type: object
        VmState:
            additionalProperties: false
            description: Information about the state of the VM.
            properties:
                currentState:
                    description: The current state of the VM (`InService` \| `OutOfService` \| `Unknown`).
                    type: string
                id:
                    description: The ID of the VM.
                    type: string
                previousState:
                    description: The previous state of the VM (`InService` \| `OutOfService` \| `Unknown`).
                    type: string
            type: object
        VmStates:
            additionalProperties: false
            description: Information about the states of the VMs.
            properties:
                availabilityZoneName:
                    description: The name of the Subregion of the VM.
                    type: string
                id:
                    description: The ID of the VM.
                    type: string
                maintenanceEvents:
                    description: One or more scheduled events associated with the VM.
                    items:
                        $ref: '#/components/schemas/MaintenanceEvent'
                    type: array
                vmState:
                    description: The state of the VM (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
                    type: string
            type: object
        Volume:
            additionalProperties: false
            description: Information about the volume.
            properties:
                availabilityZoneName:
                    description: The Subregion in which the volume was created.
                    type: string
                creationDate:
                    description: The date and time of creation of the volume.
                    format: date-time
                    type: string
                id:
                    description: The ID of the volume.
                    type: string
                iops:
                    description: |-
                        The number of I/O operations per second (IOPS):<br />
                        - For `io1` volumes, the number of provisioned IOPS<br />
                        - For `gp2` volumes, the baseline performance of the volume
                    type: integer
                linkedVolumes:
                    description: Information about your volume attachment.
                    items:
                        $ref: '#/components/schemas/LinkedVolume'
                    type: array
                size:
                    description: The size of the volume, in gibibytes (GiB).
                    type: integer
                snapshotId:
                    description: The snapshot from which the volume was created.
                    type: string
                state:
                    description: The state of the volume (`creating` \| `available` \| `in-use` \| `updating` \| `deleting` \| `error`).
                    type: string
                tags:
                    description: One or more tags associated with the volume.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                type:
                    description: The type of the volume (`standard` \| `gp2` \| `io1`).
                    type: string
            type: object
        Vpc:
            additionalProperties: false
            description: Information about the Net.
            properties:
                dhcpOptionsSetId:
                    description: The ID of the DHCP options set (or `default` if you want to associate the default one).
                    type: string
                id:
                    description: The ID of the Net.
                    type: string
                ipRange:
                    description: The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
                    type: string
                state:
                    description: The state of the Net (`pending` \| `available` \| `deleting`).
                    type: string
                tags:
                    description: One or more tags associated with the Net.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                tenancy:
                    description: The VM tenancy in a Net.
                    type: string
            type: object
        VpcAccessPoint:
            additionalProperties: false
            description: Information about the Net access point.
            properties:
                id:
                    description: The ID of the Net access point.
                    type: string
                routeTableIds:
                    description: The ID of the route tables associated with the Net access point.
                    items:
                        type: string
                    type: array
                serviceName:
                    description: The name of the service with which the Net access point is associated.
                    type: string
                state:
                    description: The state of the Net access point (`pending` \| `available` \| `deleting` \| `deleted`).
                    type: string
                tags:
                    description: One or more tags associated with the Net access point.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                vpcId:
                    description: The ID of the Net with which the Net access point is associated.
                    type: string
            type: object
        VpcPeering:
            additionalProperties: false
            description: Information about the Net peering.
            properties:
                accepterVpc:
                    $ref: '#/components/schemas/AccepterVpc'
                expirationDate:
                    description: The date and time at which the Net peerings expire.
                    format: date-time
                    nullable: true
                    type: string
                id:
                    description: The ID of the Net peering.
                    type: string
                sourceVpc:
                    $ref: '#/components/schemas/SourceVpc'
                state:
                    $ref: '#/components/schemas/VpcPeeringState'
                tags:
                    description: One or more tags associated with the Net peering.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
            type: object
        VpcPeeringState:
            additionalProperties: false
            description: Information about the state of the Net peering.
            properties:
                message:
                    description: Additional information about the state of the Net peering.
                    type: string
                name:
                    description: The state of the Net peering (`pending-acceptance` \| `active` \| `rejected` \| `failed` \| `expired` \| `deleted`).
                    type: string
            type: object
        VpcToVirtualGatewayLink:
            additionalProperties: false
            description: Information about the attachment.
            properties:
                state:
                    description: The state of the attachment (`attaching` \| `attached` \| `detaching` \| `detached`).
                    type: string
                vpcId:
                    description: The ID of the Net to which the virtual gateway is attached.
                    type: string
            type: object
        VpnConnection:
            additionalProperties: false
            description: Information about a VPN connection.
            properties:
                clientGatewayConfiguration:
                    description: Example configuration for the client gateway.
                    type: string
                clientGatewayId:
                    description: The ID of the client gateway used on the client end of the connection.
                    type: string
                connectionType:
                    description: The type of VPN connection (always `ipsec.1`).
                    type: string
                id:
                    description: The ID of the VPN connection.
                    type: string
                routes:
                    description: Information about one or more static routes associated with the VPN connection, if any.
                    items:
                        $ref: '#/components/schemas/RouteLight'
                    type: array
                state:
                    description: The state of the VPN connection (`pending` \| `available` \| `deleting` \| `deleted`).
                    type: string
                staticRoutesOnly:
                    description: If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](#createvpnconnectionroute) and [DeleteVpnConnectionRoute](#deletevpnconnectionroute).
                    type: boolean
                tags:
                    description: One or more tags associated with the VPN connection.
                    items:
                        $ref: '#/components/schemas/ResourceTag'
                    type: array
                vgwTelemetries:
                    description: Information about the current state of one or more of the VPN tunnels.
                    items:
                        $ref: '#/components/schemas/VgwTelemetry'
                    type: array
                virtualGatewayId:
                    description: The ID of the virtual gateway used on the OUTSCALE end of the connection.
                    type: string
                vpnOptions:
                    $ref: '#/components/schemas/VpnOptions'
            type: object
        VpnOptions:
            additionalProperties: false
            description: Information about the VPN options.
            properties:
                phase1Options:
                    $ref: '#/components/schemas/Phase1Options'
                phase2Options:
                    $ref: '#/components/schemas/Phase2Options'
                tunnelInsideIpRange:
                    description: The range of inside IPs for the tunnel. This must be a /30 CIDR block from the 169.254.254.0/24 range.
                    type: string
            type: object
        VpnOptionsToUpdate:
            additionalProperties: false
            description: Information about the VPN options.
            properties:
                phase2Options:
                    $ref: '#/components/schemas/Phase2OptionsToUpdate'
                tunnelInsideIpRange:
                    description: The range of inside IPs for the tunnel. This must be a /30 CIDR block from the 169.254.254.0/24 range.
                    type: string
            type: object
    securitySchemes:
        BearerAuth:
            bearerFormat: JWT
            scheme: bearer
            type: http
