// Package objectstorage provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package objectstorage

import (
	"context"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AwsSigV4Scopes = "AwsSigV4.Scopes"
)

// Bucket defines model for Bucket.
type Bucket struct {
	CreationDate *CreationDate `json:"creationDate,omitempty"`
	Name         *BucketName   `json:"name,omitempty"`
}

// BucketAlreadyExists defines model for BucketAlreadyExists.
type BucketAlreadyExists = interface{}

// BucketAlreadyOwnedByYou defines model for BucketAlreadyOwnedByYou.
type BucketAlreadyOwnedByYou = interface{}

// BucketName defines model for BucketName.
type BucketName = string

// Buckets defines model for Buckets.
type Buckets = []struct {
	CreationDate *CreationDate `json:"creationDate,omitempty"`
	Name         *BucketName   `json:"name,omitempty"`
}

// CreateBucketOutput defines model for CreateBucketOutput.
type CreateBucketOutput = map[string]interface{}

// CreationDate defines model for CreationDate.
type CreationDate = time.Time

// ListBucketsOutput defines model for ListBucketsOutput.
type ListBucketsOutput struct {
	Buckets *Buckets `json:"buckets,omitempty"`
}

// SpaceId defines model for SpaceId.
type SpaceId = openapi_types.UUID

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListBuckets request
	ListBuckets(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBucket request
	DeleteBucket(ctx context.Context, spaceId SpaceId, bucket string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBucket request
	CreateBucket(ctx context.Context, spaceId SpaceId, bucket string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListBuckets(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBucketsRequest(c.Server, spaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBucket(ctx context.Context, spaceId SpaceId, bucket string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBucketRequest(c.Server, spaceId, bucket)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBucket(ctx context.Context, spaceId SpaceId, bucket string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBucketRequest(c.Server, spaceId, bucket)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListBucketsRequest generates requests for ListBuckets
func NewListBucketsRequest(server string, spaceId SpaceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteBucketRequest generates requests for DeleteBucket
func NewDeleteBucketRequest(server string, spaceId SpaceId, bucket string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBucketRequest generates requests for CreateBucket
func NewCreateBucketRequest(server string, spaceId SpaceId, bucket string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bucket", runtime.ParamLocationPath, bucket)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListBucketsWithResponse request
	ListBucketsWithResponse(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*ListBucketsResponse, error)

	// DeleteBucketWithResponse request
	DeleteBucketWithResponse(ctx context.Context, spaceId SpaceId, bucket string, reqEditors ...RequestEditorFn) (*DeleteBucketResponse, error)

	// CreateBucketWithResponse request
	CreateBucketWithResponse(ctx context.Context, spaceId SpaceId, bucket string, reqEditors ...RequestEditorFn) (*CreateBucketResponse, error)
}

type ListBucketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	XML200       *ListBuckets200Response
}

// Status returns HTTPResponse.Status
func (r ListBucketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBucketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBucketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	XML200       *CreateBucket200Response
}

// Status returns HTTPResponse.Status
func (r CreateBucketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBucketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListBucketsWithResponse request returning *ListBucketsResponse
func (c *ClientWithResponses) ListBucketsWithResponse(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*ListBucketsResponse, error) {
	rsp, err := c.ListBuckets(ctx, spaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBucketsResponse(rsp)
}

// DeleteBucketWithResponse request returning *DeleteBucketResponse
func (c *ClientWithResponses) DeleteBucketWithResponse(ctx context.Context, spaceId SpaceId, bucket string, reqEditors ...RequestEditorFn) (*DeleteBucketResponse, error) {
	rsp, err := c.DeleteBucket(ctx, spaceId, bucket, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBucketResponse(rsp)
}

// CreateBucketWithResponse request returning *CreateBucketResponse
func (c *ClientWithResponses) CreateBucketWithResponse(ctx context.Context, spaceId SpaceId, bucket string, reqEditors ...RequestEditorFn) (*CreateBucketResponse, error) {
	rsp, err := c.CreateBucket(ctx, spaceId, bucket, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBucketResponse(rsp)
}

// ParseListBucketsResponse parses an HTTP response from a ListBucketsWithResponse call
func ParseListBucketsResponse(rsp *http.Response) (*ListBucketsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBucketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest ListBuckets200Response
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseDeleteBucketResponse parses an HTTP response from a DeleteBucketWithResponse call
func ParseDeleteBucketResponse(rsp *http.Response) (*DeleteBucketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateBucketResponse parses an HTTP response from a CreateBucketWithResponse call
func ParseCreateBucketResponse(rsp *http.Response) (*CreateBucketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBucketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest CreateBucket200Response
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}
