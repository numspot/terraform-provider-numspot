// Package conns provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package conns

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Error For HTTP errors, we implement the https://www.rfc-editor.org/rfc/rfc7807#section-3.1[RFC 7807]
type Error struct {
	// Code Specific error code
	Code interface{} `json:"code"`

	// Detail Detailed explanation of error
	Detail string `json:"detail"`

	// Instance Resource on which error is applied
	Instance string `json:"instance"`

	// Status HTTP status code
	Status int32 `json:"status"`

	// Title HTTP error title
	Title string `json:"title"`

	// Type Documentation URL
	Type string `json:"type"`
}

// AddRouteReq defines model for add-route-req.
type AddRouteReq struct {
	DestinationIpRange string `json:"destinationIpRange"`
	Target             string `json:"target"`
	TargetType         string `json:"targetType"`
}

// AssociateReq defines model for associate-req.
type AssociateReq struct {
	SubnetId string `json:"subnetId"`
}

// AssociateReq2 defines model for associate-req-2.
type AssociateReq2 struct {
	DeviceNumber int    `json:"deviceNumber"`
	VmId         string `json:"vmId"`
}

// AssociateSuccessRes defines model for associate-success-res.
type AssociateSuccessRes struct {
	AssociationId *string `json:"associationId,omitempty"`
}

// Association defines model for association.
type Association struct {
	AssociationId string `json:"associationId"`
}

// Attachment defines model for attachment.
type Attachment struct {
	VirtualPrivateCloudId string `json:"virtualPrivateCloudId"`
}

// CreateDhcpOptionsSetReq defines model for create-dhcp-options-set-req.
type CreateDhcpOptionsSetReq struct {
	DomainName        *string   `json:"domainName,omitempty"`
	DomainNameServers *[]string `json:"domainNameServers,omitempty"`
	LogServers        *[]string `json:"logServers,omitempty"`
	NtpServers        *[]string `json:"ntpServers,omitempty"`
}

// CreateReq defines model for create-req.
type CreateReq struct {
	AvailabilityZone string  `json:"availabilityZone"`
	Iops             *string `json:"iops,omitempty"`
	Size             *int    `json:"size,omitempty"`
	SnapshotId       *string `json:"snapshotId,omitempty"`

	// VolumeType Block Storage Volume type.
	// Can be:
	// - io1
	// - gp2
	// - standard
	VolumeType *string `json:"volumeType,omitempty"`
}

// CreateReq2 defines model for create-req-2.
type CreateReq2 struct {
	Description           *string `json:"description,omitempty"`
	SecurityGroupName     *string `json:"securityGroupName,omitempty"`
	VirtualPrivateCloudId string  `json:"virtualPrivateCloudId"`
}

// CreateReq3 defines model for create-req-3.
type CreateReq3 struct {
	VirtualPrivateCloudId string `json:"virtualPrivateCloudId"`
}

// CreateReq4 defines model for create-req-4.
type CreateReq4 struct {
	// AvailabilityZone The name of the region in which the NunSpot subnet is located
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	// IpRange The list of network prefixes used by the NumSpot subnet
	IpRange string `json:"ipRange"`

	// VirtualPrivateCloudId The id of the parent NumSpot VPC in which the Subnet is
	VirtualPrivateCloudId string `json:"virtualPrivateCloudId"`
}

// CreateRes defines model for create-res.
type CreateRes struct {
	Description *string `json:"description,omitempty"`

	// PrivateIps List of Private IP
	PrivateIps       *PrivateIpsLight `json:"privateIps,omitempty"`
	SecurityGroupIds *[]string        `json:"securityGroupIds,omitempty"`
	SubnetId         string           `json:"subnetId"`
}

// CreateSuccessRes defines model for create-success-res.
type CreateSuccessRes struct {
	AvailabilityZone    *string `json:"availabilityZone,omitempty"`
	Description         *string `json:"description,omitempty"`
	Id                  *string `json:"id,omitempty"`
	IsSourceDestChecked *bool   `json:"isSourceDestChecked,omitempty"`
	MacAddress          *string `json:"macAddress,omitempty"`
	PrivateDnsName      *string `json:"privateDnsName,omitempty"`

	// PrivateIps List of Private IP
	PrivateIps *PrivateIps `json:"privateIps,omitempty"`

	// SecurityGroups List of Security Group
	SecurityGroups *SecurityGroupRef `json:"securityGroups,omitempty"`
	State          *string           `json:"state,omitempty"`
	SubnetId       *string           `json:"subnetId,omitempty"`

	// Tags One or more tags associated with the resource.
	Tags                  *Tag    `json:"tags,omitempty"`
	VirtualPrivateCloudId *string `json:"virtualPrivateCloudId,omitempty"`
}

// CreateSuccessRes2 defines model for create-success-res-2.
type CreateSuccessRes2 struct {
	// AvailabilityZone The name of the region in which the NunSpot subnet is located
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	// AvailableIpsCount The number of available IPs in the Subnets
	AvailableIpsCount *int `json:"availableIpsCount,omitempty"`

	// Id The NumSpot subnet resource ID
	Id *string `json:"id,omitempty"`

	// IpRange The list of network prefixes used by the NumSpot subnet
	IpRange string `json:"ipRange"`

	// MapPublicIpOnLaunch If true, a public IP is assigned to the network interface cards (NICs) created in the NumSpot Subnet
	MapPublicIpOnLaunch *bool `json:"mapPublicIpOnLaunch,omitempty"`

	// State The state of the NumSpot subnet
	State *string `json:"state,omitempty"`

	// Tags One or more tags associated with the resource.
	Tags *Tag `json:"tags,omitempty"`

	// VirtualPrivateCloudId The id of the parent NumSpot VPC in which the Subnet is
	VirtualPrivateCloudId *string `json:"virtualPrivateCloudId,omitempty"`
}

// DeleteRouteReq defines model for delete-route-req.
type DeleteRouteReq struct {
	DestinationIpRange string `json:"destinationIpRange"`
}

// DhcpOptionsSet defines model for dhcp-options-set.
type DhcpOptionsSet struct {
	DomainName        *string   `json:"domainName,omitempty"`
	DomainNameServers *[]string `json:"domainNameServers,omitempty"`
	Id                *string   `json:"id,omitempty"`
	LogServers        *[]string `json:"logServers,omitempty"`
	NtpServers        *[]string `json:"ntpServers,omitempty"`
}

// DisassociateReq defines model for disassociate-req.
type DisassociateReq struct {
	AssociationId string `json:"associationId"`
}

// InternetGatewayId defines model for internet-gateway-id.
type InternetGatewayId = string

// InternetGateway defines model for internetGateway.
type InternetGateway struct {
	// Id Internet Gateway ID
	Id *string `json:"id,omitempty"`

	// VirtualPrivateCloudId Virtual Private Cloud ID
	VirtualPrivateCloudId *string `json:"virtualPrivateCloudId,omitempty"`
}

// LinkRouteTable defines model for link-route-table.
type LinkRouteTable struct {
	Id           string  `json:"id"`
	Main         bool    `json:"main"`
	RouteTableId string  `json:"routeTableId"`
	SubnetId     *string `json:"subnetId,omitempty"`
}

// ListRes defines model for list-res.
type ListRes struct {
	Items *[]InternetGateway `json:"items,omitempty"`
}

// ListRes2 defines model for list-res-2.
type ListRes2 struct {
	Items *[]SecurityGroup `json:"items,omitempty"`
}

// ListRes3 defines model for list-res-3.
type ListRes3 struct {
	Items []RouteTable `json:"items"`
}

// ListRes4 defines model for list-res-4.
type ListRes4 struct {
	Items *[]Subnet `json:"items,omitempty"`
}

// ListSuccessRes defines model for list-success-res.
type ListSuccessRes struct {
	Items *[]DhcpOptionsSet `json:"items,omitempty"`
}

// ListSuccessRes2 defines model for list-success-res-2.
type ListSuccessRes2 = interface{}

// PrivateIps List of Private IP
type PrivateIps = []struct {
	IsPrimary      *bool   `json:"isPrimary,omitempty"`
	PrivateDnsName *string `json:"privateDnsName,omitempty"`
	PrivateIp      *string `json:"privateIp,omitempty"`
}

// PrivateIpsLight List of Private IP
type PrivateIpsLight = []struct {
	IsPrimary *bool   `json:"isPrimary,omitempty"`
	PrivateIp *string `json:"privateIp,omitempty"`
}

// PublicIp defines model for public-ip.
type PublicIp struct {
	Id       *string        `json:"id,omitempty"`
	PublicIp *string        `json:"publicIp,omitempty"`
	Tags     *[]interface{} `json:"tags,omitempty"`
}

// ReqCreate defines model for req-create.
type ReqCreate struct {
	Name string `json:"name"`
}

// ReqImport defines model for req-import.
type ReqImport struct {
	Name      string `json:"name"`
	PublicKey string `json:"publicKey"`
}

// ResCreate defines model for res-create.
type ResCreate struct {
	Fingerprint *string `json:"fingerprint,omitempty"`
	Name        *string `json:"name,omitempty"`
	PrivateKey  *string `json:"privateKey,omitempty"`
}

// ResImport defines model for res-import.
type ResImport struct {
	Fingerprint *string `json:"fingerprint,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ResList defines model for res-list.
type ResList struct {
	Items *[]struct {
		Fingerprint *string `json:"fingerprint,omitempty"`
		Name        *string `json:"name,omitempty"`
	} `json:"items,omitempty"`
}

// Route defines model for route.
type Route struct {
	DestinationIpRange string `json:"destinationIpRange"`
	Target             string `json:"target"`
	TargetType         string `json:"targetType"`
}

// RoutePropagatingVirtualGateway defines model for route-propagating-virtual-gateway.
type RoutePropagatingVirtualGateway struct {
	Id string `json:"id"`
}

// RouteTable defines model for route-table.
type RouteTable struct {
	Id                              string                           `json:"id"`
	LinkRouteTables                 []LinkRouteTable                 `json:"linkRouteTables"`
	RoutePropagatingVirtualGateways []RoutePropagatingVirtualGateway `json:"routePropagatingVirtualGateways"`
	Routes                          []Route                          `json:"routes"`
	VirtualPrivateCloudId           string                           `json:"virtualPrivateCloudId"`
}

// RuleReq defines model for rule-req.
type RuleReq struct {
	Flow          string  `json:"flow"`
	FromPortRange int32   `json:"fromPortRange"`
	IpProtocol    *string `json:"ipProtocol,omitempty"`
	Target        struct {
		IpRange *string `json:"ipRange,omitempty"`
	} `json:"target"`
	TargetType  string `json:"targetType"`
	ToPortRange int32  `json:"toPortRange"`
}

// SecurityGroup defines model for security-group.
type SecurityGroup struct {
	Description  *string `json:"description,omitempty"`
	Id           *string `json:"id,omitempty"`
	InboundRules *[]struct {
		FromPortRange         *int      `json:"fromPortRange,omitempty"`
		IpProtocol            *string   `json:"ipProtocol,omitempty"`
		IpRanges              *[]string `json:"ipRanges,omitempty"`
		SecurityGroupsMembers *[]struct {
			AccountId         *string `json:"accountId,omitempty"`
			SecurityGroupId   *string `json:"securityGroupId,omitempty"`
			SecurityGroupName *string `json:"securityGroupName,omitempty"`
		} `json:"securityGroupsMembers,omitempty"`
		ServiceIds  *string `json:"serviceIds,omitempty"`
		ToPortRange *int    `json:"toPortRange,omitempty"`
	} `json:"inboundRules,omitempty"`
	OutboundRules *[]struct {
		FromPortRange         *int      `json:"fromPortRange,omitempty"`
		IpProtocol            *string   `json:"ipProtocol,omitempty"`
		IpRanges              *[]string `json:"ipRanges,omitempty"`
		SecurityGroupsMembers *[]struct {
			AccountId         *string `json:"accountId,omitempty"`
			SecurityGroupId   *string `json:"securityGroupId,omitempty"`
			SecurityGroupName *string `json:"securityGroupName,omitempty"`
		} `json:"securityGroupsMembers,omitempty"`
		ServiceIds  *string `json:"serviceIds,omitempty"`
		ToPortRange *int    `json:"toPortRange,omitempty"`
	} `json:"outboundRules,omitempty"`
	SecurityGroupName     *string `json:"securityGroupName,omitempty"`
	VirtualPrivateCloudId *string `json:"virtualPrivateCloudId,omitempty"`
}

// SecurityGroupRef List of Security Group
type SecurityGroupRef = []struct {
	SecurityGroupId   *string `json:"securityGroupId,omitempty"`
	SecurityGroupName *string `json:"securityGroupName,omitempty"`
}

// Snapshot defines model for snapshot.
type Snapshot struct {
	CreationDate *openapi_types.Date `json:"creationDate,omitempty"`
	Description  *string             `json:"description,omitempty"`
	Id           *string             `json:"id,omitempty"`
	Progress     *int                `json:"progress,omitempty"`
	State        *interface{}        `json:"state,omitempty"`

	// Tags One or more tags associated with the resource.
	Tags       *Tag    `json:"tags,omitempty"`
	VolumeId   *string `json:"volumeId,omitempty"`
	VolumeSize *int    `json:"volumeSize,omitempty"`
}

// SnapshotSource defines model for snapshot-source.
type SnapshotSource struct {
	// RegionName Region name of the source snapshot
	RegionName *string `json:"regionName,omitempty"`

	// SnapshotId ID of the source snapshot
	SnapshotId *string `json:"snapshotId,omitempty"`

	// VolumeId ID of the source volume
	VolumeId *string `json:"volumeId,omitempty"`
}

// Subnet defines model for subnet.
type Subnet struct {
	// AvailabilityZone The name of the region in which the NunSpot subnet is located
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	// AvailableIpsCount The number of available IPs in the Subnets
	AvailableIpsCount *int `json:"availableIpsCount,omitempty"`

	// Id The NumSpot subnet resource ID
	Id *string `json:"id,omitempty"`

	// IpRange The list of network prefixes used by the NumSpot subnet
	IpRange string `json:"ipRange"`

	// MapPublicIpOnLaunch If true, a public IP is assigned to the network interface cards (NICs) created in the NumSpot Subnet
	MapPublicIpOnLaunch *bool `json:"mapPublicIpOnLaunch,omitempty"`

	// State The state of the NumSpot subnet
	State *string `json:"state,omitempty"`

	// Tags One or more tags associated with the resource.
	Tags *Tag `json:"tags,omitempty"`

	// VirtualPrivateCloudId The id of the parent NumSpot VPC in which the Subnet is
	VirtualPrivateCloudId *string `json:"virtualPrivateCloudId,omitempty"`
}

// Tag One or more tags associated with the resource.
type Tag = []struct {
	// Key The key of the tag.
	Key string `json:"key"`

	// Value The value of the tag.
	Value string `json:"value"`
}

// VpcReqCreate defines model for vpc-req-create.
type VpcReqCreate struct {
	IpRange string  `json:"ipRange"`
	Tenancy *string `json:"tenancy,omitempty"`
}

// VpcResCreate defines model for vpc-res-create.
type VpcResCreate struct {
	DhcpOptionsSetId *string `json:"dhcpOptionsSetId,omitempty"`
	Id               *string `json:"id,omitempty"`
	IpRange          *string `json:"ipRange,omitempty"`
	State            *string `json:"state,omitempty"`
	Tenancy          *string `json:"tenancy,omitempty"`
}

// VpcResList defines model for vpc-res-list.
type VpcResList struct {
	Items *[]struct {
		DhcpOptionsSetId *string `json:"dhcpOptionsSetId,omitempty"`
		Id               *string `json:"id,omitempty"`
		IpRange          *string `json:"ipRange,omitempty"`
		State            *string `json:"state,omitempty"`
		Tenancy          *string `json:"tenancy,omitempty"`
	} `json:"items,omitempty"`
}

// DhcpOptionsSetIdPart defines model for dhcp-options-set-id.part.
type DhcpOptionsSetIdPart = string

// KeyPairNamePart defines model for key-pair-name.part.
type KeyPairNamePart = string

// NetworkInterfaceCardIdPart defines model for network-interface-card-id.part.
type NetworkInterfaceCardIdPart = string

// RouteTableIdPart defines model for route-table-id.part.
type RouteTableIdPart = string

// SecurityGroupIdPart defines model for security-group-id.part.
type SecurityGroupIdPart = string

// SnapshotIdPart defines model for snapshot-id.part.
type SnapshotIdPart = string

// SubnetIdPart defines model for subnet-id.part.
type SubnetIdPart = string

// N400Part For HTTP errors, we implement the https://www.rfc-editor.org/rfc/rfc7807#section-3.1[RFC 7807]
type N400Part = Error

// N401Part For HTTP errors, we implement the https://www.rfc-editor.org/rfc/rfc7807#section-3.1[RFC 7807]
type N401Part = Error

// N403Part For HTTP errors, we implement the https://www.rfc-editor.org/rfc/rfc7807#section-3.1[RFC 7807]
type N403Part = Error

// N404Part For HTTP errors, we implement the https://www.rfc-editor.org/rfc/rfc7807#section-3.1[RFC 7807]
type N404Part = Error

// N405Part For HTTP errors, we implement the https://www.rfc-editor.org/rfc/rfc7807#section-3.1[RFC 7807]
type N405Part = Error

// N409Part For HTTP errors, we implement the https://www.rfc-editor.org/rfc/rfc7807#section-3.1[RFC 7807]
type N409Part = Error

// N500Part For HTTP errors, we implement the https://www.rfc-editor.org/rfc/rfc7807#section-3.1[RFC 7807]
type N500Part = Error

// AddRouteSuccessPart defines model for add-route-success.part.
type AddRouteSuccessPart = Route

// AddRuleSuccessPart defines model for add-rule-success.part.
type AddRuleSuccessPart = SecurityGroup

// AssociateRouteTableSuccessPart defines model for associate-route-table-success.part.
type AssociateRouteTableSuccessPart = Association

// AssociateSuccessPart defines model for associate-success.part.
type AssociateSuccessPart = AssociateSuccessRes

// CreateSuccessResPart defines model for create-success-res.part.
type CreateSuccessResPart = CreateSuccessRes2

// CreateSuccessPart defines model for create-success.part.
type CreateSuccessPart = InternetGateway

// CreateSuccessPart2 defines model for create-success.part-2.
type CreateSuccessPart2 = ResCreate

// CreateSuccessPart3 defines model for create-success.part-3.
type CreateSuccessPart3 = SecurityGroup

// CreateSuccessPart4 defines model for create-success.part-4.
type CreateSuccessPart4 = DhcpOptionsSet

// CreateSuccessPart5 defines model for create-success.part-5.
type CreateSuccessPart5 = PublicIp

// CreateSuccessPart6 defines model for create-success.part-6.
type CreateSuccessPart6 = RouteTable

// CreateSuccessPart7 defines model for create-success.part-7.
type CreateSuccessPart7 = Snapshot

// CreateSuccessPart8 defines model for create-success.part-8.
type CreateSuccessPart8 = CreateSuccessRes

// DeleteRouteSuccessPart defines model for delete-route-success.part.
type DeleteRouteSuccessPart = RouteTable

// ListSuccessPart defines model for list-success.part.
type ListSuccessPart = ListRes

// ListSuccessPart2 defines model for list-success.part-2.
type ListSuccessPart2 = ListRes2

// ListSuccessPart3 defines model for list-success.part-3.
type ListSuccessPart3 = ListSuccessRes

// ListSuccessPart4 defines model for list-success.part-4.
type ListSuccessPart4 = ListRes3

// ListSuccessPart5 defines model for list-success.part-5.
type ListSuccessPart5 = ListSuccessRes2

// ListSuccessPart6 defines model for list-success.part-6.
type ListSuccessPart6 = ListRes4

// RemoveRuleSuccessPart defines model for remove-rule-success.part.
type RemoveRuleSuccessPart = SecurityGroup

// VpcCreateSuccessPart defines model for vpc-create-success.part.
type VpcCreateSuccessPart = VpcResCreate

// VpcListSuccessPart defines model for vpc-list-success.part.
type VpcListSuccessPart = VpcResList

// AddRoutePart defines model for add-route.part.
type AddRoutePart = AddRouteReq

// AssociatePart defines model for associate.part.
type AssociatePart = AssociateReq

// AssociatePart2 defines model for associate.part-2.
type AssociatePart2 = AssociateReq2

// CreateKeyPairPart defines model for create-key-pair.part.
type CreateKeyPairPart = ReqCreate

// CreatePart defines model for create.part.
type CreatePart = CreateReq

// CreatePart2 defines model for create.part-2.
type CreatePart2 = CreateReq2

// CreatePart3 defines model for create.part-3.
type CreatePart3 = CreateReq3

// CreatePart4 defines model for create.part-4.
type CreatePart4 struct {
	Description *string        `json:"description,omitempty"`
	Source      SnapshotSource `json:"source"`
	SourceType  string         `json:"sourceType"`
}

// CreatePart5 defines model for create.part-5.
type CreatePart5 = CreateRes

// CreatePart6 defines model for create.part-6.
type CreatePart6 = CreateReq4

// DeleteRoutePart defines model for delete-route.part.
type DeleteRoutePart = DeleteRouteReq

// DhcpOptionsSetCreatePart defines model for dhcp-options-set-create.part.
type DhcpOptionsSetCreatePart = CreateDhcpOptionsSetReq

// DisassociatePart defines model for disassociate.part.
type DisassociatePart = DisassociateReq

// RulePart defines model for rule.part.
type RulePart = RuleReq

// VpcCreatePart defines model for vpc-create.part.
type VpcCreatePart = VpcReqCreate

// CreateSnapshotJSONBody defines parameters for CreateSnapshot.
type CreateSnapshotJSONBody struct {
	Description *string        `json:"description,omitempty"`
	Source      SnapshotSource `json:"source"`
	SourceType  string         `json:"sourceType"`
}

// CreateVolumeJSONRequestBody defines body for CreateVolume for application/json ContentType.
type CreateVolumeJSONRequestBody = CreateReq

// CreateDhcpOptionsSetJSONRequestBody defines body for CreateDhcpOptionsSet for application/json ContentType.
type CreateDhcpOptionsSetJSONRequestBody = CreateDhcpOptionsSetReq

// AttachInternetGatewayJSONRequestBody defines body for AttachInternetGateway for application/json ContentType.
type AttachInternetGatewayJSONRequestBody = Attachment

// DetachInternetGatewayJSONRequestBody defines body for DetachInternetGateway for application/json ContentType.
type DetachInternetGatewayJSONRequestBody = Attachment

// CreateKeyPairJSONRequestBody defines body for CreateKeyPair for application/json ContentType.
type CreateKeyPairJSONRequestBody = ReqCreate

// ImportKeyPairJSONRequestBody defines body for ImportKeyPair for application/json ContentType.
type ImportKeyPairJSONRequestBody = ReqImport

// CreateNetworkInterfaceCardJSONRequestBody defines body for CreateNetworkInterfaceCard for application/json ContentType.
type CreateNetworkInterfaceCardJSONRequestBody = CreateRes

// AssociateNICJSONRequestBody defines body for AssociateNIC for application/json ContentType.
type AssociateNICJSONRequestBody = AssociateReq2

// CreateRouteTableJSONRequestBody defines body for CreateRouteTable for application/json ContentType.
type CreateRouteTableJSONRequestBody = CreateReq3

// AddRouteJSONRequestBody defines body for AddRoute for application/json ContentType.
type AddRouteJSONRequestBody = AddRouteReq

// AssociateRouteTableJSONRequestBody defines body for AssociateRouteTable for application/json ContentType.
type AssociateRouteTableJSONRequestBody = AssociateReq

// DeleteRouteFromRouteTableJSONRequestBody defines body for DeleteRouteFromRouteTable for application/json ContentType.
type DeleteRouteFromRouteTableJSONRequestBody = DeleteRouteReq

// DisassociateRouteTableJSONRequestBody defines body for DisassociateRouteTable for application/json ContentType.
type DisassociateRouteTableJSONRequestBody = DisassociateReq

// UpdateRouteJSONRequestBody defines body for UpdateRoute for application/json ContentType.
type UpdateRouteJSONRequestBody = AddRouteReq

// CreateSecurityGroupJSONRequestBody defines body for CreateSecurityGroup for application/json ContentType.
type CreateSecurityGroupJSONRequestBody = CreateReq2

// AddRuleSecurityGroupJSONRequestBody defines body for AddRuleSecurityGroup for application/json ContentType.
type AddRuleSecurityGroupJSONRequestBody = RuleReq

// RemoveRuleSecurityGroupJSONRequestBody defines body for RemoveRuleSecurityGroup for application/json ContentType.
type RemoveRuleSecurityGroupJSONRequestBody = RuleReq

// CreateSnapshotJSONRequestBody defines body for CreateSnapshot for application/json ContentType.
type CreateSnapshotJSONRequestBody CreateSnapshotJSONBody

// CreateSubnetJSONRequestBody defines body for CreateSubnet for application/json ContentType.
type CreateSubnetJSONRequestBody = CreateReq4

// CreateVPCJSONRequestBody defines body for CreateVPC for application/json ContentType.
type CreateVPCJSONRequestBody = VpcReqCreate

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateVolumeWithBody request with any body
	CreateVolumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVolume(ctx context.Context, body CreateVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBlockStorageVolume request
	DeleteBlockStorageVolume(ctx context.Context, blockStorageVolumeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDhcpOptionsSet request
	GetDhcpOptionsSet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDhcpOptionsSetWithBody request with any body
	CreateDhcpOptionsSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDhcpOptionsSet(ctx context.Context, body CreateDhcpOptionsSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDhcpOptionsSet request
	DeleteDhcpOptionsSet(ctx context.Context, dhcpOptionsSetId DhcpOptionsSetIdPart, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInternetGateway request
	ListInternetGateway(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInternetGateway request
	CreateInternetGateway(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInternetGateway request
	DeleteInternetGateway(ctx context.Context, internetGatewayId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachInternetGatewayWithBody request with any body
	AttachInternetGatewayWithBody(ctx context.Context, internetGatewayId InternetGatewayId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AttachInternetGateway(ctx context.Context, internetGatewayId InternetGatewayId, body AttachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DetachInternetGatewayWithBody request with any body
	DetachInternetGatewayWithBody(ctx context.Context, internetGatewayId InternetGatewayId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DetachInternetGateway(ctx context.Context, internetGatewayId InternetGatewayId, body DetachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeyPairs request
	GetKeyPairs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateKeyPairWithBody request with any body
	CreateKeyPairWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateKeyPair(ctx context.Context, body CreateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportKeyPairWithBody request with any body
	ImportKeyPairWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ImportKeyPair(ctx context.Context, body ImportKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKeyPair request
	DeleteKeyPair(ctx context.Context, keyPairName KeyPairNamePart, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListNetworkInterfaceCard request
	ListNetworkInterfaceCard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNetworkInterfaceCardWithBody request with any body
	CreateNetworkInterfaceCardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNetworkInterfaceCard(ctx context.Context, body CreateNetworkInterfaceCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNetworkInterfaceCard request
	DeleteNetworkInterfaceCard(ctx context.Context, networkInterfaceCardId NetworkInterfaceCardIdPart, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssociateNICWithBody request with any body
	AssociateNICWithBody(ctx context.Context, networkInterfaceCardId NetworkInterfaceCardIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssociateNIC(ctx context.Context, networkInterfaceCardId NetworkInterfaceCardIdPart, body AssociateNICJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePublicIp request
	CreatePublicIp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePublicIp request
	DeletePublicIp(ctx context.Context, publicIpId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRouteTables request
	ListRouteTables(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRouteTableWithBody request with any body
	CreateRouteTableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRouteTable(ctx context.Context, body CreateRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRouteTable request
	DeleteRouteTable(ctx context.Context, routeTableId RouteTableIdPart, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddRouteWithBody request with any body
	AddRouteWithBody(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddRoute(ctx context.Context, routeTableId RouteTableIdPart, body AddRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssociateRouteTableWithBody request with any body
	AssociateRouteTableWithBody(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssociateRouteTable(ctx context.Context, routeTableId RouteTableIdPart, body AssociateRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRouteFromRouteTableWithBody request with any body
	DeleteRouteFromRouteTableWithBody(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRouteFromRouteTable(ctx context.Context, routeTableId RouteTableIdPart, body DeleteRouteFromRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisassociateRouteTableWithBody request with any body
	DisassociateRouteTableWithBody(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DisassociateRouteTable(ctx context.Context, routeTableId RouteTableIdPart, body DisassociateRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRouteWithBody request with any body
	UpdateRouteWithBody(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRoute(ctx context.Context, routeTableId RouteTableIdPart, body UpdateRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecurityGroups request
	GetSecurityGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSecurityGroupWithBody request with any body
	CreateSecurityGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSecurityGroup(ctx context.Context, body CreateSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecurityGroup request
	DeleteSecurityGroup(ctx context.Context, securityGroupId SecurityGroupIdPart, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddRuleSecurityGroupWithBody request with any body
	AddRuleSecurityGroupWithBody(ctx context.Context, securityGroupId SecurityGroupIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddRuleSecurityGroup(ctx context.Context, securityGroupId SecurityGroupIdPart, body AddRuleSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveRuleSecurityGroupWithBody request with any body
	RemoveRuleSecurityGroupWithBody(ctx context.Context, securityGroupId SecurityGroupIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveRuleSecurityGroup(ctx context.Context, securityGroupId SecurityGroupIdPart, body RemoveRuleSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSnapshotWithBody request with any body
	CreateSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSnapshot(ctx context.Context, body CreateSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSnapshot request
	DeleteSnapshot(ctx context.Context, snapshotId SnapshotIdPart, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubnets request
	GetSubnets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSubnetWithBody request with any body
	CreateSubnetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSubnet(ctx context.Context, body CreateSubnetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSubnet request
	DeleteSubnet(ctx context.Context, subnetId SubnetIdPart, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVPC request
	GetVPC(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVPCWithBody request with any body
	CreateVPCWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVPC(ctx context.Context, body CreateVPCJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVPC request
	DeleteVPC(ctx context.Context, virtualPrivateCloudId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateVolumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVolumeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVolume(ctx context.Context, body CreateVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVolumeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBlockStorageVolume(ctx context.Context, blockStorageVolumeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBlockStorageVolumeRequest(c.Server, blockStorageVolumeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDhcpOptionsSet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDhcpOptionsSetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDhcpOptionsSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDhcpOptionsSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDhcpOptionsSet(ctx context.Context, body CreateDhcpOptionsSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDhcpOptionsSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDhcpOptionsSet(ctx context.Context, dhcpOptionsSetId DhcpOptionsSetIdPart, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDhcpOptionsSetRequest(c.Server, dhcpOptionsSetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInternetGateway(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInternetGatewayRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInternetGateway(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInternetGatewayRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInternetGateway(ctx context.Context, internetGatewayId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInternetGatewayRequest(c.Server, internetGatewayId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachInternetGatewayWithBody(ctx context.Context, internetGatewayId InternetGatewayId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachInternetGatewayRequestWithBody(c.Server, internetGatewayId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachInternetGateway(ctx context.Context, internetGatewayId InternetGatewayId, body AttachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachInternetGatewayRequest(c.Server, internetGatewayId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DetachInternetGatewayWithBody(ctx context.Context, internetGatewayId InternetGatewayId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDetachInternetGatewayRequestWithBody(c.Server, internetGatewayId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DetachInternetGateway(ctx context.Context, internetGatewayId InternetGatewayId, body DetachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDetachInternetGatewayRequest(c.Server, internetGatewayId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeyPairs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeyPairsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateKeyPairWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateKeyPairRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateKeyPair(ctx context.Context, body CreateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateKeyPairRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportKeyPairWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportKeyPairRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportKeyPair(ctx context.Context, body ImportKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportKeyPairRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKeyPair(ctx context.Context, keyPairName KeyPairNamePart, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKeyPairRequest(c.Server, keyPairName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListNetworkInterfaceCard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListNetworkInterfaceCardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNetworkInterfaceCardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNetworkInterfaceCardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNetworkInterfaceCard(ctx context.Context, body CreateNetworkInterfaceCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNetworkInterfaceCardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNetworkInterfaceCard(ctx context.Context, networkInterfaceCardId NetworkInterfaceCardIdPart, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNetworkInterfaceCardRequest(c.Server, networkInterfaceCardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssociateNICWithBody(ctx context.Context, networkInterfaceCardId NetworkInterfaceCardIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssociateNICRequestWithBody(c.Server, networkInterfaceCardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssociateNIC(ctx context.Context, networkInterfaceCardId NetworkInterfaceCardIdPart, body AssociateNICJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssociateNICRequest(c.Server, networkInterfaceCardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePublicIp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePublicIpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePublicIp(ctx context.Context, publicIpId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePublicIpRequest(c.Server, publicIpId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRouteTables(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRouteTablesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRouteTableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRouteTableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRouteTable(ctx context.Context, body CreateRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRouteTableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRouteTable(ctx context.Context, routeTableId RouteTableIdPart, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRouteTableRequest(c.Server, routeTableId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRouteWithBody(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRouteRequestWithBody(c.Server, routeTableId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRoute(ctx context.Context, routeTableId RouteTableIdPart, body AddRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRouteRequest(c.Server, routeTableId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssociateRouteTableWithBody(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssociateRouteTableRequestWithBody(c.Server, routeTableId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssociateRouteTable(ctx context.Context, routeTableId RouteTableIdPart, body AssociateRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssociateRouteTableRequest(c.Server, routeTableId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRouteFromRouteTableWithBody(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRouteFromRouteTableRequestWithBody(c.Server, routeTableId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRouteFromRouteTable(ctx context.Context, routeTableId RouteTableIdPart, body DeleteRouteFromRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRouteFromRouteTableRequest(c.Server, routeTableId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisassociateRouteTableWithBody(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisassociateRouteTableRequestWithBody(c.Server, routeTableId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisassociateRouteTable(ctx context.Context, routeTableId RouteTableIdPart, body DisassociateRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisassociateRouteTableRequest(c.Server, routeTableId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRouteWithBody(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRouteRequestWithBody(c.Server, routeTableId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoute(ctx context.Context, routeTableId RouteTableIdPart, body UpdateRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRouteRequest(c.Server, routeTableId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecurityGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecurityGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSecurityGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSecurityGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSecurityGroup(ctx context.Context, body CreateSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSecurityGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecurityGroup(ctx context.Context, securityGroupId SecurityGroupIdPart, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecurityGroupRequest(c.Server, securityGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRuleSecurityGroupWithBody(ctx context.Context, securityGroupId SecurityGroupIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRuleSecurityGroupRequestWithBody(c.Server, securityGroupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRuleSecurityGroup(ctx context.Context, securityGroupId SecurityGroupIdPart, body AddRuleSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRuleSecurityGroupRequest(c.Server, securityGroupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveRuleSecurityGroupWithBody(ctx context.Context, securityGroupId SecurityGroupIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveRuleSecurityGroupRequestWithBody(c.Server, securityGroupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveRuleSecurityGroup(ctx context.Context, securityGroupId SecurityGroupIdPart, body RemoveRuleSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveRuleSecurityGroupRequest(c.Server, securityGroupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSnapshotWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSnapshotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSnapshot(ctx context.Context, body CreateSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSnapshotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSnapshot(ctx context.Context, snapshotId SnapshotIdPart, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSnapshotRequest(c.Server, snapshotId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubnets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubnetsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubnetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubnetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubnet(ctx context.Context, body CreateSubnetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubnetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSubnet(ctx context.Context, subnetId SubnetIdPart, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSubnetRequest(c.Server, subnetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVPC(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVPCRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVPCWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVPCRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVPC(ctx context.Context, body CreateVPCJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVPCRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVPC(ctx context.Context, virtualPrivateCloudId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVPCRequest(c.Server, virtualPrivateCloudId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateVolumeRequest calls the generic CreateVolume builder with application/json body
func NewCreateVolumeRequest(server string, body CreateVolumeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVolumeRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVolumeRequestWithBody generates requests for CreateVolume with any type of body
func NewCreateVolumeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blockStorageVolume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBlockStorageVolumeRequest generates requests for DeleteBlockStorageVolume
func NewDeleteBlockStorageVolumeRequest(server string, blockStorageVolumeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "blockStorageVolumeId", runtime.ParamLocationPath, blockStorageVolumeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blockStorageVolumes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDhcpOptionsSetRequest generates requests for GetDhcpOptionsSet
func NewGetDhcpOptionsSetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dhcpOptionsSets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDhcpOptionsSetRequest calls the generic CreateDhcpOptionsSet builder with application/json body
func NewCreateDhcpOptionsSetRequest(server string, body CreateDhcpOptionsSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDhcpOptionsSetRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDhcpOptionsSetRequestWithBody generates requests for CreateDhcpOptionsSet with any type of body
func NewCreateDhcpOptionsSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dhcpOptionsSets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDhcpOptionsSetRequest generates requests for DeleteDhcpOptionsSet
func NewDeleteDhcpOptionsSetRequest(server string, dhcpOptionsSetId DhcpOptionsSetIdPart) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dhcpOptionsSetId", runtime.ParamLocationPath, dhcpOptionsSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dhcpOptionsSets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInternetGatewayRequest generates requests for ListInternetGateway
func NewListInternetGatewayRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internetGateways")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInternetGatewayRequest generates requests for CreateInternetGateway
func NewCreateInternetGatewayRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internetGateways")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteInternetGatewayRequest generates requests for DeleteInternetGateway
func NewDeleteInternetGatewayRequest(server string, internetGatewayId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "internetGatewayId", runtime.ParamLocationPath, internetGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internetGateways/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachInternetGatewayRequest calls the generic AttachInternetGateway builder with application/json body
func NewAttachInternetGatewayRequest(server string, internetGatewayId InternetGatewayId, body AttachInternetGatewayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAttachInternetGatewayRequestWithBody(server, internetGatewayId, "application/json", bodyReader)
}

// NewAttachInternetGatewayRequestWithBody generates requests for AttachInternetGateway with any type of body
func NewAttachInternetGatewayRequestWithBody(server string, internetGatewayId InternetGatewayId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "internetGatewayId", runtime.ParamLocationPath, internetGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internetGateways/%s/attach", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDetachInternetGatewayRequest calls the generic DetachInternetGateway builder with application/json body
func NewDetachInternetGatewayRequest(server string, internetGatewayId InternetGatewayId, body DetachInternetGatewayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDetachInternetGatewayRequestWithBody(server, internetGatewayId, "application/json", bodyReader)
}

// NewDetachInternetGatewayRequestWithBody generates requests for DetachInternetGateway with any type of body
func NewDetachInternetGatewayRequestWithBody(server string, internetGatewayId InternetGatewayId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "internetGatewayId", runtime.ParamLocationPath, internetGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internetGateways/%s/detach", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKeyPairsRequest generates requests for GetKeyPairs
func NewGetKeyPairsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keyPairs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateKeyPairRequest calls the generic CreateKeyPair builder with application/json body
func NewCreateKeyPairRequest(server string, body CreateKeyPairJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateKeyPairRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateKeyPairRequestWithBody generates requests for CreateKeyPair with any type of body
func NewCreateKeyPairRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keyPairs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImportKeyPairRequest calls the generic ImportKeyPair builder with application/json body
func NewImportKeyPairRequest(server string, body ImportKeyPairJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImportKeyPairRequestWithBody(server, "application/json", bodyReader)
}

// NewImportKeyPairRequestWithBody generates requests for ImportKeyPair with any type of body
func NewImportKeyPairRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keyPairs/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteKeyPairRequest generates requests for DeleteKeyPair
func NewDeleteKeyPairRequest(server string, keyPairName KeyPairNamePart) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPairName", runtime.ParamLocationPath, keyPairName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keyPairs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListNetworkInterfaceCardRequest generates requests for ListNetworkInterfaceCard
func NewListNetworkInterfaceCardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/networkInterfaceCards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNetworkInterfaceCardRequest calls the generic CreateNetworkInterfaceCard builder with application/json body
func NewCreateNetworkInterfaceCardRequest(server string, body CreateNetworkInterfaceCardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNetworkInterfaceCardRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNetworkInterfaceCardRequestWithBody generates requests for CreateNetworkInterfaceCard with any type of body
func NewCreateNetworkInterfaceCardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/networkInterfaceCards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNetworkInterfaceCardRequest generates requests for DeleteNetworkInterfaceCard
func NewDeleteNetworkInterfaceCardRequest(server string, networkInterfaceCardId NetworkInterfaceCardIdPart) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "networkInterfaceCardId", runtime.ParamLocationPath, networkInterfaceCardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/networkInterfaceCards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssociateNICRequest calls the generic AssociateNIC builder with application/json body
func NewAssociateNICRequest(server string, networkInterfaceCardId NetworkInterfaceCardIdPart, body AssociateNICJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssociateNICRequestWithBody(server, networkInterfaceCardId, "application/json", bodyReader)
}

// NewAssociateNICRequestWithBody generates requests for AssociateNIC with any type of body
func NewAssociateNICRequestWithBody(server string, networkInterfaceCardId NetworkInterfaceCardIdPart, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "networkInterfaceCardId", runtime.ParamLocationPath, networkInterfaceCardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/networkInterfaceCards/%s/associate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreatePublicIpRequest generates requests for CreatePublicIp
func NewCreatePublicIpRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publicIps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePublicIpRequest generates requests for DeletePublicIp
func NewDeletePublicIpRequest(server string, publicIpId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "publicIpId", runtime.ParamLocationPath, publicIpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publicIps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRouteTablesRequest generates requests for ListRouteTables
func NewListRouteTablesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/routeTables")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRouteTableRequest calls the generic CreateRouteTable builder with application/json body
func NewCreateRouteTableRequest(server string, body CreateRouteTableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRouteTableRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRouteTableRequestWithBody generates requests for CreateRouteTable with any type of body
func NewCreateRouteTableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/routeTables")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRouteTableRequest generates requests for DeleteRouteTable
func NewDeleteRouteTableRequest(server string, routeTableId RouteTableIdPart) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "routeTableId", runtime.ParamLocationPath, routeTableId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/routeTables/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddRouteRequest calls the generic AddRoute builder with application/json body
func NewAddRouteRequest(server string, routeTableId RouteTableIdPart, body AddRouteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddRouteRequestWithBody(server, routeTableId, "application/json", bodyReader)
}

// NewAddRouteRequestWithBody generates requests for AddRoute with any type of body
func NewAddRouteRequestWithBody(server string, routeTableId RouteTableIdPart, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "routeTableId", runtime.ParamLocationPath, routeTableId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/routeTables/%s/addRoute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAssociateRouteTableRequest calls the generic AssociateRouteTable builder with application/json body
func NewAssociateRouteTableRequest(server string, routeTableId RouteTableIdPart, body AssociateRouteTableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssociateRouteTableRequestWithBody(server, routeTableId, "application/json", bodyReader)
}

// NewAssociateRouteTableRequestWithBody generates requests for AssociateRouteTable with any type of body
func NewAssociateRouteTableRequestWithBody(server string, routeTableId RouteTableIdPart, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "routeTableId", runtime.ParamLocationPath, routeTableId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/routeTables/%s/associate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRouteFromRouteTableRequest calls the generic DeleteRouteFromRouteTable builder with application/json body
func NewDeleteRouteFromRouteTableRequest(server string, routeTableId RouteTableIdPart, body DeleteRouteFromRouteTableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRouteFromRouteTableRequestWithBody(server, routeTableId, "application/json", bodyReader)
}

// NewDeleteRouteFromRouteTableRequestWithBody generates requests for DeleteRouteFromRouteTable with any type of body
func NewDeleteRouteFromRouteTableRequestWithBody(server string, routeTableId RouteTableIdPart, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "routeTableId", runtime.ParamLocationPath, routeTableId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/routeTables/%s/deleteRoute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDisassociateRouteTableRequest calls the generic DisassociateRouteTable builder with application/json body
func NewDisassociateRouteTableRequest(server string, routeTableId RouteTableIdPart, body DisassociateRouteTableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDisassociateRouteTableRequestWithBody(server, routeTableId, "application/json", bodyReader)
}

// NewDisassociateRouteTableRequestWithBody generates requests for DisassociateRouteTable with any type of body
func NewDisassociateRouteTableRequestWithBody(server string, routeTableId RouteTableIdPart, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "routeTableId", runtime.ParamLocationPath, routeTableId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/routeTables/%s/disassociate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateRouteRequest calls the generic UpdateRoute builder with application/json body
func NewUpdateRouteRequest(server string, routeTableId RouteTableIdPart, body UpdateRouteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRouteRequestWithBody(server, routeTableId, "application/json", bodyReader)
}

// NewUpdateRouteRequestWithBody generates requests for UpdateRoute with any type of body
func NewUpdateRouteRequestWithBody(server string, routeTableId RouteTableIdPart, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "routeTableId", runtime.ParamLocationPath, routeTableId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/routeTables/%s/updateRoute", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSecurityGroupsRequest generates requests for GetSecurityGroups
func NewGetSecurityGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/securityGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSecurityGroupRequest calls the generic CreateSecurityGroup builder with application/json body
func NewCreateSecurityGroupRequest(server string, body CreateSecurityGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSecurityGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSecurityGroupRequestWithBody generates requests for CreateSecurityGroup with any type of body
func NewCreateSecurityGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/securityGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSecurityGroupRequest generates requests for DeleteSecurityGroup
func NewDeleteSecurityGroupRequest(server string, securityGroupId SecurityGroupIdPart) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "securityGroupId", runtime.ParamLocationPath, securityGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/securityGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddRuleSecurityGroupRequest calls the generic AddRuleSecurityGroup builder with application/json body
func NewAddRuleSecurityGroupRequest(server string, securityGroupId SecurityGroupIdPart, body AddRuleSecurityGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddRuleSecurityGroupRequestWithBody(server, securityGroupId, "application/json", bodyReader)
}

// NewAddRuleSecurityGroupRequestWithBody generates requests for AddRuleSecurityGroup with any type of body
func NewAddRuleSecurityGroupRequestWithBody(server string, securityGroupId SecurityGroupIdPart, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "securityGroupId", runtime.ParamLocationPath, securityGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/securityGroups/%s/addRule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveRuleSecurityGroupRequest calls the generic RemoveRuleSecurityGroup builder with application/json body
func NewRemoveRuleSecurityGroupRequest(server string, securityGroupId SecurityGroupIdPart, body RemoveRuleSecurityGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveRuleSecurityGroupRequestWithBody(server, securityGroupId, "application/json", bodyReader)
}

// NewRemoveRuleSecurityGroupRequestWithBody generates requests for RemoveRuleSecurityGroup with any type of body
func NewRemoveRuleSecurityGroupRequestWithBody(server string, securityGroupId SecurityGroupIdPart, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "securityGroupId", runtime.ParamLocationPath, securityGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/securityGroups/%s/removeRule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSnapshotRequest calls the generic CreateSnapshot builder with application/json body
func NewCreateSnapshotRequest(server string, body CreateSnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSnapshotRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSnapshotRequestWithBody generates requests for CreateSnapshot with any type of body
func NewCreateSnapshotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snapshots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSnapshotRequest generates requests for DeleteSnapshot
func NewDeleteSnapshotRequest(server string, snapshotId SnapshotIdPart) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snapshotId", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snapshots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubnetsRequest generates requests for GetSubnets
func NewGetSubnetsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subnets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSubnetRequest calls the generic CreateSubnet builder with application/json body
func NewCreateSubnetRequest(server string, body CreateSubnetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSubnetRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSubnetRequestWithBody generates requests for CreateSubnet with any type of body
func NewCreateSubnetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subnets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSubnetRequest generates requests for DeleteSubnet
func NewDeleteSubnetRequest(server string, subnetId SubnetIdPart) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subnetId", runtime.ParamLocationPath, subnetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subnets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVPCRequest generates requests for GetVPC
func NewGetVPCRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/virtualPrivateClouds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateVPCRequest calls the generic CreateVPC builder with application/json body
func NewCreateVPCRequest(server string, body CreateVPCJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVPCRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVPCRequestWithBody generates requests for CreateVPC with any type of body
func NewCreateVPCRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/virtualPrivateClouds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVPCRequest generates requests for DeleteVPC
func NewDeleteVPCRequest(server string, virtualPrivateCloudId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualPrivateCloudId", runtime.ParamLocationPath, virtualPrivateCloudId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/virtualPrivateClouds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateVolumeWithBodyWithResponse request with any body
	CreateVolumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVolumeResponse, error)

	CreateVolumeWithResponse(ctx context.Context, body CreateVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVolumeResponse, error)

	// DeleteBlockStorageVolumeWithResponse request
	DeleteBlockStorageVolumeWithResponse(ctx context.Context, blockStorageVolumeId string, reqEditors ...RequestEditorFn) (*DeleteBlockStorageVolumeResponse, error)

	// GetDhcpOptionsSetWithResponse request
	GetDhcpOptionsSetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDhcpOptionsSetResponse, error)

	// CreateDhcpOptionsSetWithBodyWithResponse request with any body
	CreateDhcpOptionsSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDhcpOptionsSetResponse, error)

	CreateDhcpOptionsSetWithResponse(ctx context.Context, body CreateDhcpOptionsSetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDhcpOptionsSetResponse, error)

	// DeleteDhcpOptionsSetWithResponse request
	DeleteDhcpOptionsSetWithResponse(ctx context.Context, dhcpOptionsSetId DhcpOptionsSetIdPart, reqEditors ...RequestEditorFn) (*DeleteDhcpOptionsSetResponse, error)

	// ListInternetGatewayWithResponse request
	ListInternetGatewayWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListInternetGatewayResponse, error)

	// CreateInternetGatewayWithResponse request
	CreateInternetGatewayWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateInternetGatewayResponse, error)

	// DeleteInternetGatewayWithResponse request
	DeleteInternetGatewayWithResponse(ctx context.Context, internetGatewayId string, reqEditors ...RequestEditorFn) (*DeleteInternetGatewayResponse, error)

	// AttachInternetGatewayWithBodyWithResponse request with any body
	AttachInternetGatewayWithBodyWithResponse(ctx context.Context, internetGatewayId InternetGatewayId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachInternetGatewayResponse, error)

	AttachInternetGatewayWithResponse(ctx context.Context, internetGatewayId InternetGatewayId, body AttachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*AttachInternetGatewayResponse, error)

	// DetachInternetGatewayWithBodyWithResponse request with any body
	DetachInternetGatewayWithBodyWithResponse(ctx context.Context, internetGatewayId InternetGatewayId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DetachInternetGatewayResponse, error)

	DetachInternetGatewayWithResponse(ctx context.Context, internetGatewayId InternetGatewayId, body DetachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*DetachInternetGatewayResponse, error)

	// GetKeyPairsWithResponse request
	GetKeyPairsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKeyPairsResponse, error)

	// CreateKeyPairWithBodyWithResponse request with any body
	CreateKeyPairWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateKeyPairResponse, error)

	CreateKeyPairWithResponse(ctx context.Context, body CreateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateKeyPairResponse, error)

	// ImportKeyPairWithBodyWithResponse request with any body
	ImportKeyPairWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportKeyPairResponse, error)

	ImportKeyPairWithResponse(ctx context.Context, body ImportKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportKeyPairResponse, error)

	// DeleteKeyPairWithResponse request
	DeleteKeyPairWithResponse(ctx context.Context, keyPairName KeyPairNamePart, reqEditors ...RequestEditorFn) (*DeleteKeyPairResponse, error)

	// ListNetworkInterfaceCardWithResponse request
	ListNetworkInterfaceCardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListNetworkInterfaceCardResponse, error)

	// CreateNetworkInterfaceCardWithBodyWithResponse request with any body
	CreateNetworkInterfaceCardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNetworkInterfaceCardResponse, error)

	CreateNetworkInterfaceCardWithResponse(ctx context.Context, body CreateNetworkInterfaceCardJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNetworkInterfaceCardResponse, error)

	// DeleteNetworkInterfaceCardWithResponse request
	DeleteNetworkInterfaceCardWithResponse(ctx context.Context, networkInterfaceCardId NetworkInterfaceCardIdPart, reqEditors ...RequestEditorFn) (*DeleteNetworkInterfaceCardResponse, error)

	// AssociateNICWithBodyWithResponse request with any body
	AssociateNICWithBodyWithResponse(ctx context.Context, networkInterfaceCardId NetworkInterfaceCardIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssociateNICResponse, error)

	AssociateNICWithResponse(ctx context.Context, networkInterfaceCardId NetworkInterfaceCardIdPart, body AssociateNICJSONRequestBody, reqEditors ...RequestEditorFn) (*AssociateNICResponse, error)

	// CreatePublicIpWithResponse request
	CreatePublicIpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreatePublicIpResponse, error)

	// DeletePublicIpWithResponse request
	DeletePublicIpWithResponse(ctx context.Context, publicIpId string, reqEditors ...RequestEditorFn) (*DeletePublicIpResponse, error)

	// ListRouteTablesWithResponse request
	ListRouteTablesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRouteTablesResponse, error)

	// CreateRouteTableWithBodyWithResponse request with any body
	CreateRouteTableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRouteTableResponse, error)

	CreateRouteTableWithResponse(ctx context.Context, body CreateRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRouteTableResponse, error)

	// DeleteRouteTableWithResponse request
	DeleteRouteTableWithResponse(ctx context.Context, routeTableId RouteTableIdPart, reqEditors ...RequestEditorFn) (*DeleteRouteTableResponse, error)

	// AddRouteWithBodyWithResponse request with any body
	AddRouteWithBodyWithResponse(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRouteResponse, error)

	AddRouteWithResponse(ctx context.Context, routeTableId RouteTableIdPart, body AddRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRouteResponse, error)

	// AssociateRouteTableWithBodyWithResponse request with any body
	AssociateRouteTableWithBodyWithResponse(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssociateRouteTableResponse, error)

	AssociateRouteTableWithResponse(ctx context.Context, routeTableId RouteTableIdPart, body AssociateRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*AssociateRouteTableResponse, error)

	// DeleteRouteFromRouteTableWithBodyWithResponse request with any body
	DeleteRouteFromRouteTableWithBodyWithResponse(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRouteFromRouteTableResponse, error)

	DeleteRouteFromRouteTableWithResponse(ctx context.Context, routeTableId RouteTableIdPart, body DeleteRouteFromRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRouteFromRouteTableResponse, error)

	// DisassociateRouteTableWithBodyWithResponse request with any body
	DisassociateRouteTableWithBodyWithResponse(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DisassociateRouteTableResponse, error)

	DisassociateRouteTableWithResponse(ctx context.Context, routeTableId RouteTableIdPart, body DisassociateRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*DisassociateRouteTableResponse, error)

	// UpdateRouteWithBodyWithResponse request with any body
	UpdateRouteWithBodyWithResponse(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRouteResponse, error)

	UpdateRouteWithResponse(ctx context.Context, routeTableId RouteTableIdPart, body UpdateRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRouteResponse, error)

	// GetSecurityGroupsWithResponse request
	GetSecurityGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSecurityGroupsResponse, error)

	// CreateSecurityGroupWithBodyWithResponse request with any body
	CreateSecurityGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSecurityGroupResponse, error)

	CreateSecurityGroupWithResponse(ctx context.Context, body CreateSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSecurityGroupResponse, error)

	// DeleteSecurityGroupWithResponse request
	DeleteSecurityGroupWithResponse(ctx context.Context, securityGroupId SecurityGroupIdPart, reqEditors ...RequestEditorFn) (*DeleteSecurityGroupResponse, error)

	// AddRuleSecurityGroupWithBodyWithResponse request with any body
	AddRuleSecurityGroupWithBodyWithResponse(ctx context.Context, securityGroupId SecurityGroupIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRuleSecurityGroupResponse, error)

	AddRuleSecurityGroupWithResponse(ctx context.Context, securityGroupId SecurityGroupIdPart, body AddRuleSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRuleSecurityGroupResponse, error)

	// RemoveRuleSecurityGroupWithBodyWithResponse request with any body
	RemoveRuleSecurityGroupWithBodyWithResponse(ctx context.Context, securityGroupId SecurityGroupIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveRuleSecurityGroupResponse, error)

	RemoveRuleSecurityGroupWithResponse(ctx context.Context, securityGroupId SecurityGroupIdPart, body RemoveRuleSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveRuleSecurityGroupResponse, error)

	// CreateSnapshotWithBodyWithResponse request with any body
	CreateSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSnapshotResponse, error)

	CreateSnapshotWithResponse(ctx context.Context, body CreateSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSnapshotResponse, error)

	// DeleteSnapshotWithResponse request
	DeleteSnapshotWithResponse(ctx context.Context, snapshotId SnapshotIdPart, reqEditors ...RequestEditorFn) (*DeleteSnapshotResponse, error)

	// GetSubnetsWithResponse request
	GetSubnetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSubnetsResponse, error)

	// CreateSubnetWithBodyWithResponse request with any body
	CreateSubnetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubnetResponse, error)

	CreateSubnetWithResponse(ctx context.Context, body CreateSubnetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubnetResponse, error)

	// DeleteSubnetWithResponse request
	DeleteSubnetWithResponse(ctx context.Context, subnetId SubnetIdPart, reqEditors ...RequestEditorFn) (*DeleteSubnetResponse, error)

	// GetVPCWithResponse request
	GetVPCWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVPCResponse, error)

	// CreateVPCWithBodyWithResponse request with any body
	CreateVPCWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVPCResponse, error)

	CreateVPCWithResponse(ctx context.Context, body CreateVPCJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVPCResponse, error)

	// DeleteVPCWithResponse request
	DeleteVPCWithResponse(ctx context.Context, virtualPrivateCloudId string, reqEditors ...RequestEditorFn) (*DeleteVPCResponse, error)
}

type CreateVolumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateVolumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVolumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBlockStorageVolumeResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r DeleteBlockStorageVolumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBlockStorageVolumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDhcpOptionsSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSuccessPart3
}

// Status returns HTTPResponse.Status
func (r GetDhcpOptionsSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDhcpOptionsSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDhcpOptionsSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateSuccessPart4
}

// Status returns HTTPResponse.Status
func (r CreateDhcpOptionsSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDhcpOptionsSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDhcpOptionsSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDhcpOptionsSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDhcpOptionsSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInternetGatewayResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListSuccessPart
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r ListInternetGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInternetGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInternetGatewayResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *CreateSuccessPart
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r CreateInternetGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInternetGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInternetGatewayResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r DeleteInternetGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInternetGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachInternetGatewayResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r AttachInternetGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachInternetGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DetachInternetGatewayResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r DetachInternetGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DetachInternetGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeyPairsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResList
}

// Status returns HTTPResponse.Status
func (r GetKeyPairsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeyPairsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateKeyPairResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *CreateSuccessPart2
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON409 *N409Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r CreateKeyPairResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateKeyPairResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportKeyPairResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *ResImport
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON409 *N409Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r ImportKeyPairResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportKeyPairResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKeyPairResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON404 *N404Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r DeleteKeyPairResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKeyPairResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListNetworkInterfaceCardResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListSuccessPart5
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r ListNetworkInterfaceCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNetworkInterfaceCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNetworkInterfaceCardResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *CreateSuccessPart8
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r CreateNetworkInterfaceCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNetworkInterfaceCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNetworkInterfaceCardResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON409 *N409Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r DeleteNetworkInterfaceCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNetworkInterfaceCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssociateNICResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AssociateSuccessPart
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r AssociateNICResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssociateNICResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePublicIpResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *CreateSuccessPart5
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON409 *N409Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r CreatePublicIpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePublicIpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePublicIpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePublicIpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePublicIpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRouteTablesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListSuccessPart4
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r ListRouteTablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRouteTablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRouteTableResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *CreateSuccessPart6
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r CreateRouteTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRouteTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRouteTableResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON404 *N404Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r DeleteRouteTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRouteTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRouteResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AddRouteSuccessPart
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON404 *N404Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r AddRouteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRouteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssociateRouteTableResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AssociateRouteTableSuccessPart
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON404 *N404Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r AssociateRouteTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssociateRouteTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRouteFromRouteTableResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *DeleteRouteSuccessPart
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON404 *N404Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r DeleteRouteFromRouteTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRouteFromRouteTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisassociateRouteTableResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON404 *N404Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r DisassociateRouteTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisassociateRouteTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRouteResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AddRouteSuccessPart
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON404 *N403Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r UpdateRouteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRouteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecurityGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSuccessPart2
}

// Status returns HTTPResponse.Status
func (r GetSecurityGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecurityGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSecurityGroupResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *CreateSuccessPart3
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON409 *N409Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r CreateSecurityGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSecurityGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecurityGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSecurityGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecurityGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRuleSecurityGroupResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *AddRuleSuccessPart
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON409 *N409Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r AddRuleSecurityGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRuleSecurityGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveRuleSecurityGroupResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *RemoveRuleSuccessPart
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON409 *N409Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r RemoveRuleSecurityGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveRuleSecurityGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSnapshotResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *CreateSuccessPart7
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r CreateSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSnapshotResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON404 *N404Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r DeleteSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubnetsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListSuccessPart6
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r GetSubnetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubnetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSubnetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *CreateSuccessResPart
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r CreateSubnetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSubnetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSubnetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON401 *N401Part
	ApplicationproblemJSON403 *N403Part
	ApplicationproblemJSON404 *N404Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r DeleteSubnetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSubnetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVPCResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VpcListSuccessPart
}

// Status returns HTTPResponse.Status
func (r GetVPCResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVPCResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVPCResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *VpcCreateSuccessPart
	ApplicationproblemJSON400 *N400Part
	ApplicationproblemJSON405 *N405Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r CreateVPCResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVPCResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVPCResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON404 *N404Part
	ApplicationproblemJSON409 *N409Part
	ApplicationproblemJSON500 *N500Part
}

// Status returns HTTPResponse.Status
func (r DeleteVPCResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVPCResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateVolumeWithBodyWithResponse request with arbitrary body returning *CreateVolumeResponse
func (c *ClientWithResponses) CreateVolumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVolumeResponse, error) {
	rsp, err := c.CreateVolumeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVolumeResponse(rsp)
}

func (c *ClientWithResponses) CreateVolumeWithResponse(ctx context.Context, body CreateVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVolumeResponse, error) {
	rsp, err := c.CreateVolume(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVolumeResponse(rsp)
}

// DeleteBlockStorageVolumeWithResponse request returning *DeleteBlockStorageVolumeResponse
func (c *ClientWithResponses) DeleteBlockStorageVolumeWithResponse(ctx context.Context, blockStorageVolumeId string, reqEditors ...RequestEditorFn) (*DeleteBlockStorageVolumeResponse, error) {
	rsp, err := c.DeleteBlockStorageVolume(ctx, blockStorageVolumeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBlockStorageVolumeResponse(rsp)
}

// GetDhcpOptionsSetWithResponse request returning *GetDhcpOptionsSetResponse
func (c *ClientWithResponses) GetDhcpOptionsSetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDhcpOptionsSetResponse, error) {
	rsp, err := c.GetDhcpOptionsSet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDhcpOptionsSetResponse(rsp)
}

// CreateDhcpOptionsSetWithBodyWithResponse request with arbitrary body returning *CreateDhcpOptionsSetResponse
func (c *ClientWithResponses) CreateDhcpOptionsSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDhcpOptionsSetResponse, error) {
	rsp, err := c.CreateDhcpOptionsSetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDhcpOptionsSetResponse(rsp)
}

func (c *ClientWithResponses) CreateDhcpOptionsSetWithResponse(ctx context.Context, body CreateDhcpOptionsSetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDhcpOptionsSetResponse, error) {
	rsp, err := c.CreateDhcpOptionsSet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDhcpOptionsSetResponse(rsp)
}

// DeleteDhcpOptionsSetWithResponse request returning *DeleteDhcpOptionsSetResponse
func (c *ClientWithResponses) DeleteDhcpOptionsSetWithResponse(ctx context.Context, dhcpOptionsSetId DhcpOptionsSetIdPart, reqEditors ...RequestEditorFn) (*DeleteDhcpOptionsSetResponse, error) {
	rsp, err := c.DeleteDhcpOptionsSet(ctx, dhcpOptionsSetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDhcpOptionsSetResponse(rsp)
}

// ListInternetGatewayWithResponse request returning *ListInternetGatewayResponse
func (c *ClientWithResponses) ListInternetGatewayWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListInternetGatewayResponse, error) {
	rsp, err := c.ListInternetGateway(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInternetGatewayResponse(rsp)
}

// CreateInternetGatewayWithResponse request returning *CreateInternetGatewayResponse
func (c *ClientWithResponses) CreateInternetGatewayWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateInternetGatewayResponse, error) {
	rsp, err := c.CreateInternetGateway(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInternetGatewayResponse(rsp)
}

// DeleteInternetGatewayWithResponse request returning *DeleteInternetGatewayResponse
func (c *ClientWithResponses) DeleteInternetGatewayWithResponse(ctx context.Context, internetGatewayId string, reqEditors ...RequestEditorFn) (*DeleteInternetGatewayResponse, error) {
	rsp, err := c.DeleteInternetGateway(ctx, internetGatewayId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInternetGatewayResponse(rsp)
}

// AttachInternetGatewayWithBodyWithResponse request with arbitrary body returning *AttachInternetGatewayResponse
func (c *ClientWithResponses) AttachInternetGatewayWithBodyWithResponse(ctx context.Context, internetGatewayId InternetGatewayId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachInternetGatewayResponse, error) {
	rsp, err := c.AttachInternetGatewayWithBody(ctx, internetGatewayId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachInternetGatewayResponse(rsp)
}

func (c *ClientWithResponses) AttachInternetGatewayWithResponse(ctx context.Context, internetGatewayId InternetGatewayId, body AttachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*AttachInternetGatewayResponse, error) {
	rsp, err := c.AttachInternetGateway(ctx, internetGatewayId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachInternetGatewayResponse(rsp)
}

// DetachInternetGatewayWithBodyWithResponse request with arbitrary body returning *DetachInternetGatewayResponse
func (c *ClientWithResponses) DetachInternetGatewayWithBodyWithResponse(ctx context.Context, internetGatewayId InternetGatewayId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DetachInternetGatewayResponse, error) {
	rsp, err := c.DetachInternetGatewayWithBody(ctx, internetGatewayId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDetachInternetGatewayResponse(rsp)
}

func (c *ClientWithResponses) DetachInternetGatewayWithResponse(ctx context.Context, internetGatewayId InternetGatewayId, body DetachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*DetachInternetGatewayResponse, error) {
	rsp, err := c.DetachInternetGateway(ctx, internetGatewayId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDetachInternetGatewayResponse(rsp)
}

// GetKeyPairsWithResponse request returning *GetKeyPairsResponse
func (c *ClientWithResponses) GetKeyPairsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKeyPairsResponse, error) {
	rsp, err := c.GetKeyPairs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeyPairsResponse(rsp)
}

// CreateKeyPairWithBodyWithResponse request with arbitrary body returning *CreateKeyPairResponse
func (c *ClientWithResponses) CreateKeyPairWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateKeyPairResponse, error) {
	rsp, err := c.CreateKeyPairWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateKeyPairResponse(rsp)
}

func (c *ClientWithResponses) CreateKeyPairWithResponse(ctx context.Context, body CreateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateKeyPairResponse, error) {
	rsp, err := c.CreateKeyPair(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateKeyPairResponse(rsp)
}

// ImportKeyPairWithBodyWithResponse request with arbitrary body returning *ImportKeyPairResponse
func (c *ClientWithResponses) ImportKeyPairWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportKeyPairResponse, error) {
	rsp, err := c.ImportKeyPairWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportKeyPairResponse(rsp)
}

func (c *ClientWithResponses) ImportKeyPairWithResponse(ctx context.Context, body ImportKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportKeyPairResponse, error) {
	rsp, err := c.ImportKeyPair(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportKeyPairResponse(rsp)
}

// DeleteKeyPairWithResponse request returning *DeleteKeyPairResponse
func (c *ClientWithResponses) DeleteKeyPairWithResponse(ctx context.Context, keyPairName KeyPairNamePart, reqEditors ...RequestEditorFn) (*DeleteKeyPairResponse, error) {
	rsp, err := c.DeleteKeyPair(ctx, keyPairName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKeyPairResponse(rsp)
}

// ListNetworkInterfaceCardWithResponse request returning *ListNetworkInterfaceCardResponse
func (c *ClientWithResponses) ListNetworkInterfaceCardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListNetworkInterfaceCardResponse, error) {
	rsp, err := c.ListNetworkInterfaceCard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListNetworkInterfaceCardResponse(rsp)
}

// CreateNetworkInterfaceCardWithBodyWithResponse request with arbitrary body returning *CreateNetworkInterfaceCardResponse
func (c *ClientWithResponses) CreateNetworkInterfaceCardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNetworkInterfaceCardResponse, error) {
	rsp, err := c.CreateNetworkInterfaceCardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNetworkInterfaceCardResponse(rsp)
}

func (c *ClientWithResponses) CreateNetworkInterfaceCardWithResponse(ctx context.Context, body CreateNetworkInterfaceCardJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNetworkInterfaceCardResponse, error) {
	rsp, err := c.CreateNetworkInterfaceCard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNetworkInterfaceCardResponse(rsp)
}

// DeleteNetworkInterfaceCardWithResponse request returning *DeleteNetworkInterfaceCardResponse
func (c *ClientWithResponses) DeleteNetworkInterfaceCardWithResponse(ctx context.Context, networkInterfaceCardId NetworkInterfaceCardIdPart, reqEditors ...RequestEditorFn) (*DeleteNetworkInterfaceCardResponse, error) {
	rsp, err := c.DeleteNetworkInterfaceCard(ctx, networkInterfaceCardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNetworkInterfaceCardResponse(rsp)
}

// AssociateNICWithBodyWithResponse request with arbitrary body returning *AssociateNICResponse
func (c *ClientWithResponses) AssociateNICWithBodyWithResponse(ctx context.Context, networkInterfaceCardId NetworkInterfaceCardIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssociateNICResponse, error) {
	rsp, err := c.AssociateNICWithBody(ctx, networkInterfaceCardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssociateNICResponse(rsp)
}

func (c *ClientWithResponses) AssociateNICWithResponse(ctx context.Context, networkInterfaceCardId NetworkInterfaceCardIdPart, body AssociateNICJSONRequestBody, reqEditors ...RequestEditorFn) (*AssociateNICResponse, error) {
	rsp, err := c.AssociateNIC(ctx, networkInterfaceCardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssociateNICResponse(rsp)
}

// CreatePublicIpWithResponse request returning *CreatePublicIpResponse
func (c *ClientWithResponses) CreatePublicIpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreatePublicIpResponse, error) {
	rsp, err := c.CreatePublicIp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePublicIpResponse(rsp)
}

// DeletePublicIpWithResponse request returning *DeletePublicIpResponse
func (c *ClientWithResponses) DeletePublicIpWithResponse(ctx context.Context, publicIpId string, reqEditors ...RequestEditorFn) (*DeletePublicIpResponse, error) {
	rsp, err := c.DeletePublicIp(ctx, publicIpId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePublicIpResponse(rsp)
}

// ListRouteTablesWithResponse request returning *ListRouteTablesResponse
func (c *ClientWithResponses) ListRouteTablesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRouteTablesResponse, error) {
	rsp, err := c.ListRouteTables(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRouteTablesResponse(rsp)
}

// CreateRouteTableWithBodyWithResponse request with arbitrary body returning *CreateRouteTableResponse
func (c *ClientWithResponses) CreateRouteTableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRouteTableResponse, error) {
	rsp, err := c.CreateRouteTableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRouteTableResponse(rsp)
}

func (c *ClientWithResponses) CreateRouteTableWithResponse(ctx context.Context, body CreateRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRouteTableResponse, error) {
	rsp, err := c.CreateRouteTable(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRouteTableResponse(rsp)
}

// DeleteRouteTableWithResponse request returning *DeleteRouteTableResponse
func (c *ClientWithResponses) DeleteRouteTableWithResponse(ctx context.Context, routeTableId RouteTableIdPart, reqEditors ...RequestEditorFn) (*DeleteRouteTableResponse, error) {
	rsp, err := c.DeleteRouteTable(ctx, routeTableId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRouteTableResponse(rsp)
}

// AddRouteWithBodyWithResponse request with arbitrary body returning *AddRouteResponse
func (c *ClientWithResponses) AddRouteWithBodyWithResponse(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRouteResponse, error) {
	rsp, err := c.AddRouteWithBody(ctx, routeTableId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRouteResponse(rsp)
}

func (c *ClientWithResponses) AddRouteWithResponse(ctx context.Context, routeTableId RouteTableIdPart, body AddRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRouteResponse, error) {
	rsp, err := c.AddRoute(ctx, routeTableId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRouteResponse(rsp)
}

// AssociateRouteTableWithBodyWithResponse request with arbitrary body returning *AssociateRouteTableResponse
func (c *ClientWithResponses) AssociateRouteTableWithBodyWithResponse(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssociateRouteTableResponse, error) {
	rsp, err := c.AssociateRouteTableWithBody(ctx, routeTableId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssociateRouteTableResponse(rsp)
}

func (c *ClientWithResponses) AssociateRouteTableWithResponse(ctx context.Context, routeTableId RouteTableIdPart, body AssociateRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*AssociateRouteTableResponse, error) {
	rsp, err := c.AssociateRouteTable(ctx, routeTableId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssociateRouteTableResponse(rsp)
}

// DeleteRouteFromRouteTableWithBodyWithResponse request with arbitrary body returning *DeleteRouteFromRouteTableResponse
func (c *ClientWithResponses) DeleteRouteFromRouteTableWithBodyWithResponse(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRouteFromRouteTableResponse, error) {
	rsp, err := c.DeleteRouteFromRouteTableWithBody(ctx, routeTableId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRouteFromRouteTableResponse(rsp)
}

func (c *ClientWithResponses) DeleteRouteFromRouteTableWithResponse(ctx context.Context, routeTableId RouteTableIdPart, body DeleteRouteFromRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRouteFromRouteTableResponse, error) {
	rsp, err := c.DeleteRouteFromRouteTable(ctx, routeTableId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRouteFromRouteTableResponse(rsp)
}

// DisassociateRouteTableWithBodyWithResponse request with arbitrary body returning *DisassociateRouteTableResponse
func (c *ClientWithResponses) DisassociateRouteTableWithBodyWithResponse(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DisassociateRouteTableResponse, error) {
	rsp, err := c.DisassociateRouteTableWithBody(ctx, routeTableId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisassociateRouteTableResponse(rsp)
}

func (c *ClientWithResponses) DisassociateRouteTableWithResponse(ctx context.Context, routeTableId RouteTableIdPart, body DisassociateRouteTableJSONRequestBody, reqEditors ...RequestEditorFn) (*DisassociateRouteTableResponse, error) {
	rsp, err := c.DisassociateRouteTable(ctx, routeTableId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisassociateRouteTableResponse(rsp)
}

// UpdateRouteWithBodyWithResponse request with arbitrary body returning *UpdateRouteResponse
func (c *ClientWithResponses) UpdateRouteWithBodyWithResponse(ctx context.Context, routeTableId RouteTableIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRouteResponse, error) {
	rsp, err := c.UpdateRouteWithBody(ctx, routeTableId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRouteResponse(rsp)
}

func (c *ClientWithResponses) UpdateRouteWithResponse(ctx context.Context, routeTableId RouteTableIdPart, body UpdateRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRouteResponse, error) {
	rsp, err := c.UpdateRoute(ctx, routeTableId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRouteResponse(rsp)
}

// GetSecurityGroupsWithResponse request returning *GetSecurityGroupsResponse
func (c *ClientWithResponses) GetSecurityGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSecurityGroupsResponse, error) {
	rsp, err := c.GetSecurityGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecurityGroupsResponse(rsp)
}

// CreateSecurityGroupWithBodyWithResponse request with arbitrary body returning *CreateSecurityGroupResponse
func (c *ClientWithResponses) CreateSecurityGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSecurityGroupResponse, error) {
	rsp, err := c.CreateSecurityGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSecurityGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateSecurityGroupWithResponse(ctx context.Context, body CreateSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSecurityGroupResponse, error) {
	rsp, err := c.CreateSecurityGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSecurityGroupResponse(rsp)
}

// DeleteSecurityGroupWithResponse request returning *DeleteSecurityGroupResponse
func (c *ClientWithResponses) DeleteSecurityGroupWithResponse(ctx context.Context, securityGroupId SecurityGroupIdPart, reqEditors ...RequestEditorFn) (*DeleteSecurityGroupResponse, error) {
	rsp, err := c.DeleteSecurityGroup(ctx, securityGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecurityGroupResponse(rsp)
}

// AddRuleSecurityGroupWithBodyWithResponse request with arbitrary body returning *AddRuleSecurityGroupResponse
func (c *ClientWithResponses) AddRuleSecurityGroupWithBodyWithResponse(ctx context.Context, securityGroupId SecurityGroupIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRuleSecurityGroupResponse, error) {
	rsp, err := c.AddRuleSecurityGroupWithBody(ctx, securityGroupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRuleSecurityGroupResponse(rsp)
}

func (c *ClientWithResponses) AddRuleSecurityGroupWithResponse(ctx context.Context, securityGroupId SecurityGroupIdPart, body AddRuleSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRuleSecurityGroupResponse, error) {
	rsp, err := c.AddRuleSecurityGroup(ctx, securityGroupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRuleSecurityGroupResponse(rsp)
}

// RemoveRuleSecurityGroupWithBodyWithResponse request with arbitrary body returning *RemoveRuleSecurityGroupResponse
func (c *ClientWithResponses) RemoveRuleSecurityGroupWithBodyWithResponse(ctx context.Context, securityGroupId SecurityGroupIdPart, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveRuleSecurityGroupResponse, error) {
	rsp, err := c.RemoveRuleSecurityGroupWithBody(ctx, securityGroupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveRuleSecurityGroupResponse(rsp)
}

func (c *ClientWithResponses) RemoveRuleSecurityGroupWithResponse(ctx context.Context, securityGroupId SecurityGroupIdPart, body RemoveRuleSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveRuleSecurityGroupResponse, error) {
	rsp, err := c.RemoveRuleSecurityGroup(ctx, securityGroupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveRuleSecurityGroupResponse(rsp)
}

// CreateSnapshotWithBodyWithResponse request with arbitrary body returning *CreateSnapshotResponse
func (c *ClientWithResponses) CreateSnapshotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSnapshotResponse, error) {
	rsp, err := c.CreateSnapshotWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSnapshotResponse(rsp)
}

func (c *ClientWithResponses) CreateSnapshotWithResponse(ctx context.Context, body CreateSnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSnapshotResponse, error) {
	rsp, err := c.CreateSnapshot(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSnapshotResponse(rsp)
}

// DeleteSnapshotWithResponse request returning *DeleteSnapshotResponse
func (c *ClientWithResponses) DeleteSnapshotWithResponse(ctx context.Context, snapshotId SnapshotIdPart, reqEditors ...RequestEditorFn) (*DeleteSnapshotResponse, error) {
	rsp, err := c.DeleteSnapshot(ctx, snapshotId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSnapshotResponse(rsp)
}

// GetSubnetsWithResponse request returning *GetSubnetsResponse
func (c *ClientWithResponses) GetSubnetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSubnetsResponse, error) {
	rsp, err := c.GetSubnets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubnetsResponse(rsp)
}

// CreateSubnetWithBodyWithResponse request with arbitrary body returning *CreateSubnetResponse
func (c *ClientWithResponses) CreateSubnetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubnetResponse, error) {
	rsp, err := c.CreateSubnetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubnetResponse(rsp)
}

func (c *ClientWithResponses) CreateSubnetWithResponse(ctx context.Context, body CreateSubnetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubnetResponse, error) {
	rsp, err := c.CreateSubnet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubnetResponse(rsp)
}

// DeleteSubnetWithResponse request returning *DeleteSubnetResponse
func (c *ClientWithResponses) DeleteSubnetWithResponse(ctx context.Context, subnetId SubnetIdPart, reqEditors ...RequestEditorFn) (*DeleteSubnetResponse, error) {
	rsp, err := c.DeleteSubnet(ctx, subnetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSubnetResponse(rsp)
}

// GetVPCWithResponse request returning *GetVPCResponse
func (c *ClientWithResponses) GetVPCWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVPCResponse, error) {
	rsp, err := c.GetVPC(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVPCResponse(rsp)
}

// CreateVPCWithBodyWithResponse request with arbitrary body returning *CreateVPCResponse
func (c *ClientWithResponses) CreateVPCWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVPCResponse, error) {
	rsp, err := c.CreateVPCWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVPCResponse(rsp)
}

func (c *ClientWithResponses) CreateVPCWithResponse(ctx context.Context, body CreateVPCJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVPCResponse, error) {
	rsp, err := c.CreateVPC(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVPCResponse(rsp)
}

// DeleteVPCWithResponse request returning *DeleteVPCResponse
func (c *ClientWithResponses) DeleteVPCWithResponse(ctx context.Context, virtualPrivateCloudId string, reqEditors ...RequestEditorFn) (*DeleteVPCResponse, error) {
	rsp, err := c.DeleteVPC(ctx, virtualPrivateCloudId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVPCResponse(rsp)
}

// ParseCreateVolumeResponse parses an HTTP response from a CreateVolumeWithResponse call
func ParseCreateVolumeResponse(rsp *http.Response) (*CreateVolumeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVolumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteBlockStorageVolumeResponse parses an HTTP response from a DeleteBlockStorageVolumeWithResponse call
func ParseDeleteBlockStorageVolumeResponse(rsp *http.Response) (*DeleteBlockStorageVolumeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBlockStorageVolumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetDhcpOptionsSetResponse parses an HTTP response from a GetDhcpOptionsSetWithResponse call
func ParseGetDhcpOptionsSetResponse(rsp *http.Response) (*GetDhcpOptionsSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDhcpOptionsSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSuccessPart3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDhcpOptionsSetResponse parses an HTTP response from a CreateDhcpOptionsSetWithResponse call
func ParseCreateDhcpOptionsSetResponse(rsp *http.Response) (*CreateDhcpOptionsSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDhcpOptionsSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateSuccessPart4
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteDhcpOptionsSetResponse parses an HTTP response from a DeleteDhcpOptionsSetWithResponse call
func ParseDeleteDhcpOptionsSetResponse(rsp *http.Response) (*DeleteDhcpOptionsSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDhcpOptionsSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListInternetGatewayResponse parses an HTTP response from a ListInternetGatewayWithResponse call
func ParseListInternetGatewayResponse(rsp *http.Response) (*ListInternetGatewayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInternetGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSuccessPart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateInternetGatewayResponse parses an HTTP response from a CreateInternetGatewayWithResponse call
func ParseCreateInternetGatewayResponse(rsp *http.Response) (*CreateInternetGatewayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateInternetGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateSuccessPart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteInternetGatewayResponse parses an HTTP response from a DeleteInternetGatewayWithResponse call
func ParseDeleteInternetGatewayResponse(rsp *http.Response) (*DeleteInternetGatewayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInternetGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseAttachInternetGatewayResponse parses an HTTP response from a AttachInternetGatewayWithResponse call
func ParseAttachInternetGatewayResponse(rsp *http.Response) (*AttachInternetGatewayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AttachInternetGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDetachInternetGatewayResponse parses an HTTP response from a DetachInternetGatewayWithResponse call
func ParseDetachInternetGatewayResponse(rsp *http.Response) (*DetachInternetGatewayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DetachInternetGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetKeyPairsResponse parses an HTTP response from a GetKeyPairsWithResponse call
func ParseGetKeyPairsResponse(rsp *http.Response) (*GetKeyPairsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeyPairsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateKeyPairResponse parses an HTTP response from a CreateKeyPairWithResponse call
func ParseCreateKeyPairResponse(rsp *http.Response) (*CreateKeyPairResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateKeyPairResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateSuccessPart2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseImportKeyPairResponse parses an HTTP response from a ImportKeyPairWithResponse call
func ParseImportKeyPairResponse(rsp *http.Response) (*ImportKeyPairResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportKeyPairResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ResImport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteKeyPairResponse parses an HTTP response from a DeleteKeyPairWithResponse call
func ParseDeleteKeyPairResponse(rsp *http.Response) (*DeleteKeyPairResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteKeyPairResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseListNetworkInterfaceCardResponse parses an HTTP response from a ListNetworkInterfaceCardWithResponse call
func ParseListNetworkInterfaceCardResponse(rsp *http.Response) (*ListNetworkInterfaceCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNetworkInterfaceCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSuccessPart5
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateNetworkInterfaceCardResponse parses an HTTP response from a CreateNetworkInterfaceCardWithResponse call
func ParseCreateNetworkInterfaceCardResponse(rsp *http.Response) (*CreateNetworkInterfaceCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNetworkInterfaceCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateSuccessPart8
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteNetworkInterfaceCardResponse parses an HTTP response from a DeleteNetworkInterfaceCardWithResponse call
func ParseDeleteNetworkInterfaceCardResponse(rsp *http.Response) (*DeleteNetworkInterfaceCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNetworkInterfaceCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseAssociateNICResponse parses an HTTP response from a AssociateNICWithResponse call
func ParseAssociateNICResponse(rsp *http.Response) (*AssociateNICResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssociateNICResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssociateSuccessPart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreatePublicIpResponse parses an HTTP response from a CreatePublicIpWithResponse call
func ParseCreatePublicIpResponse(rsp *http.Response) (*CreatePublicIpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePublicIpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateSuccessPart5
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeletePublicIpResponse parses an HTTP response from a DeletePublicIpWithResponse call
func ParseDeletePublicIpResponse(rsp *http.Response) (*DeletePublicIpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePublicIpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListRouteTablesResponse parses an HTTP response from a ListRouteTablesWithResponse call
func ParseListRouteTablesResponse(rsp *http.Response) (*ListRouteTablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRouteTablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSuccessPart4
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateRouteTableResponse parses an HTTP response from a CreateRouteTableWithResponse call
func ParseCreateRouteTableResponse(rsp *http.Response) (*CreateRouteTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRouteTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateSuccessPart6
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteRouteTableResponse parses an HTTP response from a DeleteRouteTableWithResponse call
func ParseDeleteRouteTableResponse(rsp *http.Response) (*DeleteRouteTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRouteTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseAddRouteResponse parses an HTTP response from a AddRouteWithResponse call
func ParseAddRouteResponse(rsp *http.Response) (*AddRouteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRouteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddRouteSuccessPart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseAssociateRouteTableResponse parses an HTTP response from a AssociateRouteTableWithResponse call
func ParseAssociateRouteTableResponse(rsp *http.Response) (*AssociateRouteTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssociateRouteTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssociateRouteTableSuccessPart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteRouteFromRouteTableResponse parses an HTTP response from a DeleteRouteFromRouteTableWithResponse call
func ParseDeleteRouteFromRouteTableResponse(rsp *http.Response) (*DeleteRouteFromRouteTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRouteFromRouteTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteRouteSuccessPart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDisassociateRouteTableResponse parses an HTTP response from a DisassociateRouteTableWithResponse call
func ParseDisassociateRouteTableResponse(rsp *http.Response) (*DisassociateRouteTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisassociateRouteTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateRouteResponse parses an HTTP response from a UpdateRouteWithResponse call
func ParseUpdateRouteResponse(rsp *http.Response) (*UpdateRouteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRouteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddRouteSuccessPart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetSecurityGroupsResponse parses an HTTP response from a GetSecurityGroupsWithResponse call
func ParseGetSecurityGroupsResponse(rsp *http.Response) (*GetSecurityGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecurityGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSuccessPart2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSecurityGroupResponse parses an HTTP response from a CreateSecurityGroupWithResponse call
func ParseCreateSecurityGroupResponse(rsp *http.Response) (*CreateSecurityGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSecurityGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateSuccessPart3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSecurityGroupResponse parses an HTTP response from a DeleteSecurityGroupWithResponse call
func ParseDeleteSecurityGroupResponse(rsp *http.Response) (*DeleteSecurityGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecurityGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddRuleSecurityGroupResponse parses an HTTP response from a AddRuleSecurityGroupWithResponse call
func ParseAddRuleSecurityGroupResponse(rsp *http.Response) (*AddRuleSecurityGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRuleSecurityGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AddRuleSuccessPart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseRemoveRuleSecurityGroupResponse parses an HTTP response from a RemoveRuleSecurityGroupWithResponse call
func ParseRemoveRuleSecurityGroupResponse(rsp *http.Response) (*RemoveRuleSecurityGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveRuleSecurityGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RemoveRuleSuccessPart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateSnapshotResponse parses an HTTP response from a CreateSnapshotWithResponse call
func ParseCreateSnapshotResponse(rsp *http.Response) (*CreateSnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateSuccessPart7
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSnapshotResponse parses an HTTP response from a DeleteSnapshotWithResponse call
func ParseDeleteSnapshotResponse(rsp *http.Response) (*DeleteSnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetSubnetsResponse parses an HTTP response from a GetSubnetsWithResponse call
func ParseGetSubnetsResponse(rsp *http.Response) (*GetSubnetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubnetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSuccessPart6
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateSubnetResponse parses an HTTP response from a CreateSubnetWithResponse call
func ParseCreateSubnetResponse(rsp *http.Response) (*CreateSubnetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSubnetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateSuccessResPart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSubnetResponse parses an HTTP response from a DeleteSubnetWithResponse call
func ParseDeleteSubnetResponse(rsp *http.Response) (*DeleteSubnetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSubnetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetVPCResponse parses an HTTP response from a GetVPCWithResponse call
func ParseGetVPCResponse(rsp *http.Response) (*GetVPCResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVPCResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VpcListSuccessPart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateVPCResponse parses an HTTP response from a CreateVPCWithResponse call
func ParseCreateVPCResponse(rsp *http.Response) (*CreateVPCResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVPCResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest VpcCreateSuccessPart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest N405Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteVPCResponse parses an HTTP response from a DeleteVPCWithResponse call
func ParseDeleteVPCResponse(rsp *http.Response) (*DeleteVPCResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVPCResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500Part
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}
