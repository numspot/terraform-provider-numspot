// Package conns provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package conns

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// DhcpOptionsSetItem defines model for DhcpOptionsSetItem.
type DhcpOptionsSetItem struct {
	DomainName        *string   `json:"domainName,omitempty"`
	DomainNameServers *[]string `json:"domainNameServers,omitempty"`
	Id                *string   `json:"id,omitempty"`
	LogServers        *[]string `json:"logServers,omitempty"`
	NtpServers        *[]string `json:"ntpServers,omitempty"`
}

// InternetGateway defines model for InternetGateway.
type InternetGateway struct {
	// Id Internet Gateway ID
	Id *string `json:"id,omitempty"`

	// Tags Tags
	Tags *struct {
		Key   *string `json:"key,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"tags,omitempty"`

	// VirtualPrivateCloudId Virtual Private Cloud ID
	VirtualPrivateCloudId *string `json:"virtualPrivateCloudId,omitempty"`
}

// NumSpotError defines model for NumSpotError.
type NumSpotError struct {
	Code     string `json:"code"`
	Detail   string `json:"detail"`
	Instance string `json:"instance"`
	Status   int    `json:"status"`
	Title    string `json:"title"`
	Type     string `json:"type"`
}

// SecurityGroupItem defines model for SecurityGroupItem.
type SecurityGroupItem struct {
	AccountId    *string `json:"accountId,omitempty"`
	Description  *string `json:"description,omitempty"`
	Id           *string `json:"id,omitempty"`
	InboundRules *[]struct {
		FromPortRange         *int      `json:"fromPortRange,omitempty"`
		IpProtocol            *string   `json:"ipProtocol,omitempty"`
		IpRanges              *[]string `json:"ipRanges,omitempty"`
		SecurityGroupsMembers *[]struct {
			AccountId         *string `json:"accountId,omitempty"`
			SecurityGroupId   *string `json:"securityGroupId,omitempty"`
			SecurityGroupName *string `json:"securityGroupName,omitempty"`
		} `json:"securityGroupsMembers,omitempty"`
		ServiceIds  *string `json:"serviceIds,omitempty"`
		ToPortRange *int    `json:"toPortRange,omitempty"`
	} `json:"inboundRules,omitempty"`
	OutboundRules *[]struct {
		FromPortRange         *int      `json:"fromPortRange,omitempty"`
		IpProtocol            *string   `json:"ipProtocol,omitempty"`
		IpRanges              *[]string `json:"ipRanges,omitempty"`
		SecurityGroupsMembers *[]struct {
			AccountId         *string `json:"accountId,omitempty"`
			SecurityGroupId   *string `json:"securityGroupId,omitempty"`
			SecurityGroupName *string `json:"securityGroupName,omitempty"`
		} `json:"securityGroupsMembers,omitempty"`
		ServiceIds  *string `json:"serviceIds,omitempty"`
		ToPortRange *int    `json:"toPortRange,omitempty"`
	} `json:"outboundRules,omitempty"`
	SecurityGroupName *string `json:"securityGroupName,omitempty"`
}

// Subnet defines model for Subnet.
type Subnet struct {
	// AvailabilityZone The name of the region in which the NunSpot subnet is located
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	// AvailableIpsCount The number of available IPs in the Subnets
	AvailableIpsCount *int `json:"availableIpsCount,omitempty"`

	// Id The NumSpot subnet resource ID
	Id *string `json:"id,omitempty"`

	// IpRange The list of network prefixes used by the NumSpot subnet
	IpRange string `json:"ipRange"`

	// MapPublicIpOnLaunch If true, a public IP is assigned to the network interface cards (NICs) created in the NumSpot Subnet
	MapPublicIpOnLaunch *bool `json:"mapPublicIpOnLaunch,omitempty"`

	// State The state of the NumSpot subnet
	State *string `json:"state,omitempty"`

	// Tags One or more tags associated with the resource.
	Tags *Tags `json:"tags,omitempty"`

	// VirtualPrivateCloudId The id of the parent NumSpot VPC in which the Subnet is
	VirtualPrivateCloudId *string `json:"virtualPrivateCloudId,omitempty"`
}

// Tag defines model for Tag.
type Tag struct {
	// Key The key of the tag.
	Key string `json:"key"`

	// Value The value of the tag.
	Value string `json:"value"`
}

// Tags One or more tags associated with the resource.
type Tags = []Tag

// N400 defines model for 400.
type N400 = NumSpotError

// N404 defines model for 404.
type N404 = NumSpotError

// N405 defines model for 405.
type N405 = NumSpotError

// N409 defines model for 409.
type N409 = NumSpotError

// N500 defines model for 500.
type N500 = NumSpotError

// CreateDhcpOptionsSetJSONBody defines parameters for CreateDhcpOptionsSet.
type CreateDhcpOptionsSetJSONBody struct {
	DomainName        *string   `json:"domainName,omitempty"`
	DomainNameServers *[]string `json:"domainNameServers,omitempty"`
	LogServers        *[]string `json:"logServers,omitempty"`
	NtpServers        *[]string `json:"ntpServers,omitempty"`
}

// AttachInternetGatewayJSONBody defines parameters for AttachInternetGateway.
type AttachInternetGatewayJSONBody struct {
	VirtualPrivateCloudId string `json:"virtualPrivateCloudId"`
}

// DetachInternetGatewayJSONBody defines parameters for DetachInternetGateway.
type DetachInternetGatewayJSONBody struct {
	VirtualPrivateCloudId string `json:"virtualPrivateCloudId"`
}

// CreateKeyPairJSONBody defines parameters for CreateKeyPair.
type CreateKeyPairJSONBody struct {
	Name string `json:"name"`
}

// ImportKeyPairJSONBody defines parameters for ImportKeyPair.
type ImportKeyPairJSONBody struct {
	Name      string `json:"name"`
	PublicKey string `json:"publicKey"`
}

// CreateSecurityGroupJSONBody defines parameters for CreateSecurityGroup.
type CreateSecurityGroupJSONBody struct {
	Description           *string `json:"description,omitempty"`
	SecurityGroupName     *string `json:"securityGroupName,omitempty"`
	VirtualPrivateCloudId string  `json:"virtualPrivateCloudId"`
}

// CreateSubnetJSONBody defines parameters for CreateSubnet.
type CreateSubnetJSONBody struct {
	// AvailabilityZone The name of the region in which the NunSpot subnet is located
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	// IpRange The list of network prefixes used by the NumSpot subnet
	IpRange string `json:"ipRange"`

	// VirtualPrivateCloudId The id of the parent NumSpot VPC in which the Subnet is
	VirtualPrivateCloudId string `json:"virtualPrivateCloudId"`
}

// CreateVPCJSONBody defines parameters for CreateVPC.
type CreateVPCJSONBody struct {
	IpRange string  `json:"ipRange"`
	Tenancy *string `json:"tenancy,omitempty"`
}

// CreateDhcpOptionsSetJSONRequestBody defines body for CreateDhcpOptionsSet for application/json ContentType.
type CreateDhcpOptionsSetJSONRequestBody CreateDhcpOptionsSetJSONBody

// AttachInternetGatewayJSONRequestBody defines body for AttachInternetGateway for application/json ContentType.
type AttachInternetGatewayJSONRequestBody AttachInternetGatewayJSONBody

// DetachInternetGatewayJSONRequestBody defines body for DetachInternetGateway for application/json ContentType.
type DetachInternetGatewayJSONRequestBody DetachInternetGatewayJSONBody

// CreateKeyPairJSONRequestBody defines body for CreateKeyPair for application/json ContentType.
type CreateKeyPairJSONRequestBody CreateKeyPairJSONBody

// ImportKeyPairJSONRequestBody defines body for ImportKeyPair for application/json ContentType.
type ImportKeyPairJSONRequestBody ImportKeyPairJSONBody

// CreateSecurityGroupJSONRequestBody defines body for CreateSecurityGroup for application/json ContentType.
type CreateSecurityGroupJSONRequestBody CreateSecurityGroupJSONBody

// CreateSubnetJSONRequestBody defines body for CreateSubnet for application/json ContentType.
type CreateSubnetJSONRequestBody CreateSubnetJSONBody

// CreateVPCJSONRequestBody defines body for CreateVPC for application/json ContentType.
type CreateVPCJSONRequestBody CreateVPCJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDhcpOptionsSet request
	GetDhcpOptionsSet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDhcpOptionsSetWithBody request with any body
	CreateDhcpOptionsSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDhcpOptionsSet(ctx context.Context, body CreateDhcpOptionsSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDhcpOptionsSet request
	DeleteDhcpOptionsSet(ctx context.Context, dhcpOptionsSetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInternetGateways request
	GetInternetGateways(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInternetGateway request
	CreateInternetGateway(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInternetGateway request
	DeleteInternetGateway(ctx context.Context, internetGatewayId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachInternetGatewayWithBody request with any body
	AttachInternetGatewayWithBody(ctx context.Context, internetGatewayId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AttachInternetGateway(ctx context.Context, internetGatewayId string, body AttachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DetachInternetGatewayWithBody request with any body
	DetachInternetGatewayWithBody(ctx context.Context, internetGatewayId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DetachInternetGateway(ctx context.Context, internetGatewayId string, body DetachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKeyPairs request
	GetKeyPairs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateKeyPairWithBody request with any body
	CreateKeyPairWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateKeyPair(ctx context.Context, body CreateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportKeyPairWithBody request with any body
	ImportKeyPairWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ImportKeyPair(ctx context.Context, body ImportKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKeyPair request
	DeleteKeyPair(ctx context.Context, keyPairName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePublicIp request
	CreatePublicIp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePublicIp request
	DeletePublicIp(ctx context.Context, publicIpId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecurityGroups request
	GetSecurityGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSecurityGroupWithBody request with any body
	CreateSecurityGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSecurityGroup(ctx context.Context, body CreateSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecurityGroup request
	DeleteSecurityGroup(ctx context.Context, securityGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubnets request
	GetSubnets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSubnetWithBody request with any body
	CreateSubnetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSubnet(ctx context.Context, body CreateSubnetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSubnet request
	DeleteSubnet(ctx context.Context, subnetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVPC request
	GetVPC(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVPCWithBody request with any body
	CreateVPCWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVPC(ctx context.Context, body CreateVPCJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVPC request
	DeleteVPC(ctx context.Context, virtualPrivateCloudId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDhcpOptionsSet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDhcpOptionsSetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDhcpOptionsSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDhcpOptionsSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDhcpOptionsSet(ctx context.Context, body CreateDhcpOptionsSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDhcpOptionsSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDhcpOptionsSet(ctx context.Context, dhcpOptionsSetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDhcpOptionsSetRequest(c.Server, dhcpOptionsSetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInternetGateways(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInternetGatewaysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInternetGateway(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInternetGatewayRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInternetGateway(ctx context.Context, internetGatewayId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInternetGatewayRequest(c.Server, internetGatewayId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachInternetGatewayWithBody(ctx context.Context, internetGatewayId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachInternetGatewayRequestWithBody(c.Server, internetGatewayId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachInternetGateway(ctx context.Context, internetGatewayId string, body AttachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachInternetGatewayRequest(c.Server, internetGatewayId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DetachInternetGatewayWithBody(ctx context.Context, internetGatewayId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDetachInternetGatewayRequestWithBody(c.Server, internetGatewayId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DetachInternetGateway(ctx context.Context, internetGatewayId string, body DetachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDetachInternetGatewayRequest(c.Server, internetGatewayId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKeyPairs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKeyPairsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateKeyPairWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateKeyPairRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateKeyPair(ctx context.Context, body CreateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateKeyPairRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportKeyPairWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportKeyPairRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportKeyPair(ctx context.Context, body ImportKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportKeyPairRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKeyPair(ctx context.Context, keyPairName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKeyPairRequest(c.Server, keyPairName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePublicIp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePublicIpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePublicIp(ctx context.Context, publicIpId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePublicIpRequest(c.Server, publicIpId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecurityGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecurityGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSecurityGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSecurityGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSecurityGroup(ctx context.Context, body CreateSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSecurityGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecurityGroup(ctx context.Context, securityGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecurityGroupRequest(c.Server, securityGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubnets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubnetsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubnetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubnetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubnet(ctx context.Context, body CreateSubnetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubnetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSubnet(ctx context.Context, subnetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSubnetRequest(c.Server, subnetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVPC(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVPCRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVPCWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVPCRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVPC(ctx context.Context, body CreateVPCJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVPCRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVPC(ctx context.Context, virtualPrivateCloudId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVPCRequest(c.Server, virtualPrivateCloudId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDhcpOptionsSetRequest generates requests for GetDhcpOptionsSet
func NewGetDhcpOptionsSetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dhcpOptionsSets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDhcpOptionsSetRequest calls the generic CreateDhcpOptionsSet builder with application/json body
func NewCreateDhcpOptionsSetRequest(server string, body CreateDhcpOptionsSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDhcpOptionsSetRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDhcpOptionsSetRequestWithBody generates requests for CreateDhcpOptionsSet with any type of body
func NewCreateDhcpOptionsSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dhcpOptionsSets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDhcpOptionsSetRequest generates requests for DeleteDhcpOptionsSet
func NewDeleteDhcpOptionsSetRequest(server string, dhcpOptionsSetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dhcpOptionsSetId", runtime.ParamLocationPath, dhcpOptionsSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dhcpOptionsSets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInternetGatewaysRequest generates requests for GetInternetGateways
func NewGetInternetGatewaysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internetGateways")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInternetGatewayRequest generates requests for CreateInternetGateway
func NewCreateInternetGatewayRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internetGateways")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteInternetGatewayRequest generates requests for DeleteInternetGateway
func NewDeleteInternetGatewayRequest(server string, internetGatewayId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "internetGatewayId", runtime.ParamLocationPath, internetGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internetGateways/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachInternetGatewayRequest calls the generic AttachInternetGateway builder with application/json body
func NewAttachInternetGatewayRequest(server string, internetGatewayId string, body AttachInternetGatewayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAttachInternetGatewayRequestWithBody(server, internetGatewayId, "application/json", bodyReader)
}

// NewAttachInternetGatewayRequestWithBody generates requests for AttachInternetGateway with any type of body
func NewAttachInternetGatewayRequestWithBody(server string, internetGatewayId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "internetGatewayId", runtime.ParamLocationPath, internetGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internetGateways/%s/attach", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDetachInternetGatewayRequest calls the generic DetachInternetGateway builder with application/json body
func NewDetachInternetGatewayRequest(server string, internetGatewayId string, body DetachInternetGatewayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDetachInternetGatewayRequestWithBody(server, internetGatewayId, "application/json", bodyReader)
}

// NewDetachInternetGatewayRequestWithBody generates requests for DetachInternetGateway with any type of body
func NewDetachInternetGatewayRequestWithBody(server string, internetGatewayId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "internetGatewayId", runtime.ParamLocationPath, internetGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internetGateways/%s/detach", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKeyPairsRequest generates requests for GetKeyPairs
func NewGetKeyPairsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keyPairs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateKeyPairRequest calls the generic CreateKeyPair builder with application/json body
func NewCreateKeyPairRequest(server string, body CreateKeyPairJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateKeyPairRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateKeyPairRequestWithBody generates requests for CreateKeyPair with any type of body
func NewCreateKeyPairRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keyPairs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImportKeyPairRequest calls the generic ImportKeyPair builder with application/json body
func NewImportKeyPairRequest(server string, body ImportKeyPairJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImportKeyPairRequestWithBody(server, "application/json", bodyReader)
}

// NewImportKeyPairRequestWithBody generates requests for ImportKeyPair with any type of body
func NewImportKeyPairRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keyPairs/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteKeyPairRequest generates requests for DeleteKeyPair
func NewDeleteKeyPairRequest(server string, keyPairName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyPairName", runtime.ParamLocationPath, keyPairName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keyPairs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePublicIpRequest generates requests for CreatePublicIp
func NewCreatePublicIpRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publicIps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePublicIpRequest generates requests for DeletePublicIp
func NewDeletePublicIpRequest(server string, publicIpId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "publicIpId", runtime.ParamLocationPath, publicIpId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publicIps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSecurityGroupsRequest generates requests for GetSecurityGroups
func NewGetSecurityGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/securityGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSecurityGroupRequest calls the generic CreateSecurityGroup builder with application/json body
func NewCreateSecurityGroupRequest(server string, body CreateSecurityGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSecurityGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSecurityGroupRequestWithBody generates requests for CreateSecurityGroup with any type of body
func NewCreateSecurityGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/securityGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSecurityGroupRequest generates requests for DeleteSecurityGroup
func NewDeleteSecurityGroupRequest(server string, securityGroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "securityGroupId", runtime.ParamLocationPath, securityGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/securityGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubnetsRequest generates requests for GetSubnets
func NewGetSubnetsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subnets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSubnetRequest calls the generic CreateSubnet builder with application/json body
func NewCreateSubnetRequest(server string, body CreateSubnetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSubnetRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSubnetRequestWithBody generates requests for CreateSubnet with any type of body
func NewCreateSubnetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subnets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSubnetRequest generates requests for DeleteSubnet
func NewDeleteSubnetRequest(server string, subnetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subnetId", runtime.ParamLocationPath, subnetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subnets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVPCRequest generates requests for GetVPC
func NewGetVPCRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/virtualPrivateClouds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateVPCRequest calls the generic CreateVPC builder with application/json body
func NewCreateVPCRequest(server string, body CreateVPCJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVPCRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVPCRequestWithBody generates requests for CreateVPC with any type of body
func NewCreateVPCRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/virtualPrivateClouds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVPCRequest generates requests for DeleteVPC
func NewDeleteVPCRequest(server string, virtualPrivateCloudId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualPrivateCloudId", runtime.ParamLocationPath, virtualPrivateCloudId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/virtualPrivateClouds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDhcpOptionsSetWithResponse request
	GetDhcpOptionsSetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDhcpOptionsSetResponse, error)

	// CreateDhcpOptionsSetWithBodyWithResponse request with any body
	CreateDhcpOptionsSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDhcpOptionsSetResponse, error)

	CreateDhcpOptionsSetWithResponse(ctx context.Context, body CreateDhcpOptionsSetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDhcpOptionsSetResponse, error)

	// DeleteDhcpOptionsSetWithResponse request
	DeleteDhcpOptionsSetWithResponse(ctx context.Context, dhcpOptionsSetId string, reqEditors ...RequestEditorFn) (*DeleteDhcpOptionsSetResponse, error)

	// GetInternetGatewaysWithResponse request
	GetInternetGatewaysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInternetGatewaysResponse, error)

	// CreateInternetGatewayWithResponse request
	CreateInternetGatewayWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateInternetGatewayResponse, error)

	// DeleteInternetGatewayWithResponse request
	DeleteInternetGatewayWithResponse(ctx context.Context, internetGatewayId string, reqEditors ...RequestEditorFn) (*DeleteInternetGatewayResponse, error)

	// AttachInternetGatewayWithBodyWithResponse request with any body
	AttachInternetGatewayWithBodyWithResponse(ctx context.Context, internetGatewayId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachInternetGatewayResponse, error)

	AttachInternetGatewayWithResponse(ctx context.Context, internetGatewayId string, body AttachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*AttachInternetGatewayResponse, error)

	// DetachInternetGatewayWithBodyWithResponse request with any body
	DetachInternetGatewayWithBodyWithResponse(ctx context.Context, internetGatewayId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DetachInternetGatewayResponse, error)

	DetachInternetGatewayWithResponse(ctx context.Context, internetGatewayId string, body DetachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*DetachInternetGatewayResponse, error)

	// GetKeyPairsWithResponse request
	GetKeyPairsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKeyPairsResponse, error)

	// CreateKeyPairWithBodyWithResponse request with any body
	CreateKeyPairWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateKeyPairResponse, error)

	CreateKeyPairWithResponse(ctx context.Context, body CreateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateKeyPairResponse, error)

	// ImportKeyPairWithBodyWithResponse request with any body
	ImportKeyPairWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportKeyPairResponse, error)

	ImportKeyPairWithResponse(ctx context.Context, body ImportKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportKeyPairResponse, error)

	// DeleteKeyPairWithResponse request
	DeleteKeyPairWithResponse(ctx context.Context, keyPairName string, reqEditors ...RequestEditorFn) (*DeleteKeyPairResponse, error)

	// CreatePublicIpWithResponse request
	CreatePublicIpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreatePublicIpResponse, error)

	// DeletePublicIpWithResponse request
	DeletePublicIpWithResponse(ctx context.Context, publicIpId string, reqEditors ...RequestEditorFn) (*DeletePublicIpResponse, error)

	// GetSecurityGroupsWithResponse request
	GetSecurityGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSecurityGroupsResponse, error)

	// CreateSecurityGroupWithBodyWithResponse request with any body
	CreateSecurityGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSecurityGroupResponse, error)

	CreateSecurityGroupWithResponse(ctx context.Context, body CreateSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSecurityGroupResponse, error)

	// DeleteSecurityGroupWithResponse request
	DeleteSecurityGroupWithResponse(ctx context.Context, securityGroupId string, reqEditors ...RequestEditorFn) (*DeleteSecurityGroupResponse, error)

	// GetSubnetsWithResponse request
	GetSubnetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSubnetsResponse, error)

	// CreateSubnetWithBodyWithResponse request with any body
	CreateSubnetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubnetResponse, error)

	CreateSubnetWithResponse(ctx context.Context, body CreateSubnetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubnetResponse, error)

	// DeleteSubnetWithResponse request
	DeleteSubnetWithResponse(ctx context.Context, subnetId string, reqEditors ...RequestEditorFn) (*DeleteSubnetResponse, error)

	// GetVPCWithResponse request
	GetVPCWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVPCResponse, error)

	// CreateVPCWithBodyWithResponse request with any body
	CreateVPCWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVPCResponse, error)

	CreateVPCWithResponse(ctx context.Context, body CreateVPCJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVPCResponse, error)

	// DeleteVPCWithResponse request
	DeleteVPCWithResponse(ctx context.Context, virtualPrivateCloudId string, reqEditors ...RequestEditorFn) (*DeleteVPCResponse, error)
}

type GetDhcpOptionsSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]DhcpOptionsSetItem `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDhcpOptionsSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDhcpOptionsSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDhcpOptionsSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DhcpOptionsSetItem
}

// Status returns HTTPResponse.Status
func (r CreateDhcpOptionsSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDhcpOptionsSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDhcpOptionsSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDhcpOptionsSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDhcpOptionsSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInternetGatewaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]InternetGateway
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetInternetGatewaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInternetGatewaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInternetGatewayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InternetGateway
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r CreateInternetGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInternetGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInternetGatewayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteInternetGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInternetGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachInternetGatewayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r AttachInternetGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachInternetGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DetachInternetGatewayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DetachInternetGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DetachInternetGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKeyPairsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			Fingerprint *string `json:"fingerprint,omitempty"`
			Name        *string `json:"name,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetKeyPairsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeyPairsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateKeyPairResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Fingerprint *string `json:"fingerprint,omitempty"`
		Name        *string `json:"name,omitempty"`
		PrivateKey  *string `json:"privateKey,omitempty"`
	}
	JSON400 *N400
	JSON409 *N409
	JSON500 *N500
}

// Status returns HTTPResponse.Status
func (r CreateKeyPairResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateKeyPairResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportKeyPairResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Fingerprint *string `json:"fingerprint,omitempty"`
		Name        *string `json:"name,omitempty"`
	}
	JSON400 *N400
	JSON409 *N409
	JSON500 *N500
}

// Status returns HTTPResponse.Status
func (r ImportKeyPairResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportKeyPairResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKeyPairResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteKeyPairResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKeyPairResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePublicIpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id       *string        `json:"id,omitempty"`
		PublicIp *string        `json:"publicIp,omitempty"`
		Tags     *[]interface{} `json:"tags,omitempty"`
	}
	JSON400 *N400
	JSON409 *N409
	JSON500 *N500
}

// Status returns HTTPResponse.Status
func (r CreatePublicIpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePublicIpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePublicIpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePublicIpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePublicIpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecurityGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]SecurityGroupItem `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSecurityGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecurityGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSecurityGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SecurityGroupItem
	JSON400      *N400
	JSON409      *N409
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r CreateSecurityGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSecurityGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecurityGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSecurityGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecurityGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubnetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]Subnet `json:"items,omitempty"`
	}
	JSON500 *N500
}

// Status returns HTTPResponse.Status
func (r GetSubnetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubnetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSubnetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Subnet
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r CreateSubnetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSubnetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSubnetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteSubnetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSubnetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVPCResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			DhcpOptionsSetId *string `json:"dhcpOptionsSetId,omitempty"`
			Id               *string `json:"id,omitempty"`
			IpRange          *string `json:"ipRange,omitempty"`
			State            *string `json:"state,omitempty"`
			Tenancy          *string `json:"tenancy,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVPCResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVPCResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVPCResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		DhcpOptionsSetId *string `json:"dhcpOptionsSetId,omitempty"`
		Id               *string `json:"id,omitempty"`
		IpRange          *string `json:"ipRange,omitempty"`
		State            *string `json:"state,omitempty"`
		Tenancy          *string `json:"tenancy,omitempty"`
	}
	JSON400 *N400
	JSON405 *N405
	JSON500 *N500
}

// Status returns HTTPResponse.Status
func (r CreateVPCResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVPCResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVPCResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *N404
	JSON409      *N409
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteVPCResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVPCResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDhcpOptionsSetWithResponse request returning *GetDhcpOptionsSetResponse
func (c *ClientWithResponses) GetDhcpOptionsSetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDhcpOptionsSetResponse, error) {
	rsp, err := c.GetDhcpOptionsSet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDhcpOptionsSetResponse(rsp)
}

// CreateDhcpOptionsSetWithBodyWithResponse request with arbitrary body returning *CreateDhcpOptionsSetResponse
func (c *ClientWithResponses) CreateDhcpOptionsSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDhcpOptionsSetResponse, error) {
	rsp, err := c.CreateDhcpOptionsSetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDhcpOptionsSetResponse(rsp)
}

func (c *ClientWithResponses) CreateDhcpOptionsSetWithResponse(ctx context.Context, body CreateDhcpOptionsSetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDhcpOptionsSetResponse, error) {
	rsp, err := c.CreateDhcpOptionsSet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDhcpOptionsSetResponse(rsp)
}

// DeleteDhcpOptionsSetWithResponse request returning *DeleteDhcpOptionsSetResponse
func (c *ClientWithResponses) DeleteDhcpOptionsSetWithResponse(ctx context.Context, dhcpOptionsSetId string, reqEditors ...RequestEditorFn) (*DeleteDhcpOptionsSetResponse, error) {
	rsp, err := c.DeleteDhcpOptionsSet(ctx, dhcpOptionsSetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDhcpOptionsSetResponse(rsp)
}

// GetInternetGatewaysWithResponse request returning *GetInternetGatewaysResponse
func (c *ClientWithResponses) GetInternetGatewaysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInternetGatewaysResponse, error) {
	rsp, err := c.GetInternetGateways(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInternetGatewaysResponse(rsp)
}

// CreateInternetGatewayWithResponse request returning *CreateInternetGatewayResponse
func (c *ClientWithResponses) CreateInternetGatewayWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateInternetGatewayResponse, error) {
	rsp, err := c.CreateInternetGateway(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInternetGatewayResponse(rsp)
}

// DeleteInternetGatewayWithResponse request returning *DeleteInternetGatewayResponse
func (c *ClientWithResponses) DeleteInternetGatewayWithResponse(ctx context.Context, internetGatewayId string, reqEditors ...RequestEditorFn) (*DeleteInternetGatewayResponse, error) {
	rsp, err := c.DeleteInternetGateway(ctx, internetGatewayId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInternetGatewayResponse(rsp)
}

// AttachInternetGatewayWithBodyWithResponse request with arbitrary body returning *AttachInternetGatewayResponse
func (c *ClientWithResponses) AttachInternetGatewayWithBodyWithResponse(ctx context.Context, internetGatewayId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachInternetGatewayResponse, error) {
	rsp, err := c.AttachInternetGatewayWithBody(ctx, internetGatewayId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachInternetGatewayResponse(rsp)
}

func (c *ClientWithResponses) AttachInternetGatewayWithResponse(ctx context.Context, internetGatewayId string, body AttachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*AttachInternetGatewayResponse, error) {
	rsp, err := c.AttachInternetGateway(ctx, internetGatewayId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachInternetGatewayResponse(rsp)
}

// DetachInternetGatewayWithBodyWithResponse request with arbitrary body returning *DetachInternetGatewayResponse
func (c *ClientWithResponses) DetachInternetGatewayWithBodyWithResponse(ctx context.Context, internetGatewayId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DetachInternetGatewayResponse, error) {
	rsp, err := c.DetachInternetGatewayWithBody(ctx, internetGatewayId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDetachInternetGatewayResponse(rsp)
}

func (c *ClientWithResponses) DetachInternetGatewayWithResponse(ctx context.Context, internetGatewayId string, body DetachInternetGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*DetachInternetGatewayResponse, error) {
	rsp, err := c.DetachInternetGateway(ctx, internetGatewayId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDetachInternetGatewayResponse(rsp)
}

// GetKeyPairsWithResponse request returning *GetKeyPairsResponse
func (c *ClientWithResponses) GetKeyPairsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetKeyPairsResponse, error) {
	rsp, err := c.GetKeyPairs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKeyPairsResponse(rsp)
}

// CreateKeyPairWithBodyWithResponse request with arbitrary body returning *CreateKeyPairResponse
func (c *ClientWithResponses) CreateKeyPairWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateKeyPairResponse, error) {
	rsp, err := c.CreateKeyPairWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateKeyPairResponse(rsp)
}

func (c *ClientWithResponses) CreateKeyPairWithResponse(ctx context.Context, body CreateKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateKeyPairResponse, error) {
	rsp, err := c.CreateKeyPair(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateKeyPairResponse(rsp)
}

// ImportKeyPairWithBodyWithResponse request with arbitrary body returning *ImportKeyPairResponse
func (c *ClientWithResponses) ImportKeyPairWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportKeyPairResponse, error) {
	rsp, err := c.ImportKeyPairWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportKeyPairResponse(rsp)
}

func (c *ClientWithResponses) ImportKeyPairWithResponse(ctx context.Context, body ImportKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportKeyPairResponse, error) {
	rsp, err := c.ImportKeyPair(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportKeyPairResponse(rsp)
}

// DeleteKeyPairWithResponse request returning *DeleteKeyPairResponse
func (c *ClientWithResponses) DeleteKeyPairWithResponse(ctx context.Context, keyPairName string, reqEditors ...RequestEditorFn) (*DeleteKeyPairResponse, error) {
	rsp, err := c.DeleteKeyPair(ctx, keyPairName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKeyPairResponse(rsp)
}

// CreatePublicIpWithResponse request returning *CreatePublicIpResponse
func (c *ClientWithResponses) CreatePublicIpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreatePublicIpResponse, error) {
	rsp, err := c.CreatePublicIp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePublicIpResponse(rsp)
}

// DeletePublicIpWithResponse request returning *DeletePublicIpResponse
func (c *ClientWithResponses) DeletePublicIpWithResponse(ctx context.Context, publicIpId string, reqEditors ...RequestEditorFn) (*DeletePublicIpResponse, error) {
	rsp, err := c.DeletePublicIp(ctx, publicIpId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePublicIpResponse(rsp)
}

// GetSecurityGroupsWithResponse request returning *GetSecurityGroupsResponse
func (c *ClientWithResponses) GetSecurityGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSecurityGroupsResponse, error) {
	rsp, err := c.GetSecurityGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecurityGroupsResponse(rsp)
}

// CreateSecurityGroupWithBodyWithResponse request with arbitrary body returning *CreateSecurityGroupResponse
func (c *ClientWithResponses) CreateSecurityGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSecurityGroupResponse, error) {
	rsp, err := c.CreateSecurityGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSecurityGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateSecurityGroupWithResponse(ctx context.Context, body CreateSecurityGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSecurityGroupResponse, error) {
	rsp, err := c.CreateSecurityGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSecurityGroupResponse(rsp)
}

// DeleteSecurityGroupWithResponse request returning *DeleteSecurityGroupResponse
func (c *ClientWithResponses) DeleteSecurityGroupWithResponse(ctx context.Context, securityGroupId string, reqEditors ...RequestEditorFn) (*DeleteSecurityGroupResponse, error) {
	rsp, err := c.DeleteSecurityGroup(ctx, securityGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecurityGroupResponse(rsp)
}

// GetSubnetsWithResponse request returning *GetSubnetsResponse
func (c *ClientWithResponses) GetSubnetsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSubnetsResponse, error) {
	rsp, err := c.GetSubnets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubnetsResponse(rsp)
}

// CreateSubnetWithBodyWithResponse request with arbitrary body returning *CreateSubnetResponse
func (c *ClientWithResponses) CreateSubnetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubnetResponse, error) {
	rsp, err := c.CreateSubnetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubnetResponse(rsp)
}

func (c *ClientWithResponses) CreateSubnetWithResponse(ctx context.Context, body CreateSubnetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubnetResponse, error) {
	rsp, err := c.CreateSubnet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubnetResponse(rsp)
}

// DeleteSubnetWithResponse request returning *DeleteSubnetResponse
func (c *ClientWithResponses) DeleteSubnetWithResponse(ctx context.Context, subnetId string, reqEditors ...RequestEditorFn) (*DeleteSubnetResponse, error) {
	rsp, err := c.DeleteSubnet(ctx, subnetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSubnetResponse(rsp)
}

// GetVPCWithResponse request returning *GetVPCResponse
func (c *ClientWithResponses) GetVPCWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVPCResponse, error) {
	rsp, err := c.GetVPC(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVPCResponse(rsp)
}

// CreateVPCWithBodyWithResponse request with arbitrary body returning *CreateVPCResponse
func (c *ClientWithResponses) CreateVPCWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVPCResponse, error) {
	rsp, err := c.CreateVPCWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVPCResponse(rsp)
}

func (c *ClientWithResponses) CreateVPCWithResponse(ctx context.Context, body CreateVPCJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVPCResponse, error) {
	rsp, err := c.CreateVPC(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVPCResponse(rsp)
}

// DeleteVPCWithResponse request returning *DeleteVPCResponse
func (c *ClientWithResponses) DeleteVPCWithResponse(ctx context.Context, virtualPrivateCloudId string, reqEditors ...RequestEditorFn) (*DeleteVPCResponse, error) {
	rsp, err := c.DeleteVPC(ctx, virtualPrivateCloudId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVPCResponse(rsp)
}

// ParseGetDhcpOptionsSetResponse parses an HTTP response from a GetDhcpOptionsSetWithResponse call
func ParseGetDhcpOptionsSetResponse(rsp *http.Response) (*GetDhcpOptionsSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDhcpOptionsSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]DhcpOptionsSetItem `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDhcpOptionsSetResponse parses an HTTP response from a CreateDhcpOptionsSetWithResponse call
func ParseCreateDhcpOptionsSetResponse(rsp *http.Response) (*CreateDhcpOptionsSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDhcpOptionsSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DhcpOptionsSetItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteDhcpOptionsSetResponse parses an HTTP response from a DeleteDhcpOptionsSetWithResponse call
func ParseDeleteDhcpOptionsSetResponse(rsp *http.Response) (*DeleteDhcpOptionsSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDhcpOptionsSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInternetGatewaysResponse parses an HTTP response from a GetInternetGatewaysWithResponse call
func ParseGetInternetGatewaysResponse(rsp *http.Response) (*GetInternetGatewaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInternetGatewaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []InternetGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateInternetGatewayResponse parses an HTTP response from a CreateInternetGatewayWithResponse call
func ParseCreateInternetGatewayResponse(rsp *http.Response) (*CreateInternetGatewayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateInternetGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InternetGateway
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteInternetGatewayResponse parses an HTTP response from a DeleteInternetGatewayWithResponse call
func ParseDeleteInternetGatewayResponse(rsp *http.Response) (*DeleteInternetGatewayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInternetGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAttachInternetGatewayResponse parses an HTTP response from a AttachInternetGatewayWithResponse call
func ParseAttachInternetGatewayResponse(rsp *http.Response) (*AttachInternetGatewayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AttachInternetGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDetachInternetGatewayResponse parses an HTTP response from a DetachInternetGatewayWithResponse call
func ParseDetachInternetGatewayResponse(rsp *http.Response) (*DetachInternetGatewayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DetachInternetGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetKeyPairsResponse parses an HTTP response from a GetKeyPairsWithResponse call
func ParseGetKeyPairsResponse(rsp *http.Response) (*GetKeyPairsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKeyPairsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				Fingerprint *string `json:"fingerprint,omitempty"`
				Name        *string `json:"name,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateKeyPairResponse parses an HTTP response from a CreateKeyPairWithResponse call
func ParseCreateKeyPairResponse(rsp *http.Response) (*CreateKeyPairResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateKeyPairResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Fingerprint *string `json:"fingerprint,omitempty"`
			Name        *string `json:"name,omitempty"`
			PrivateKey  *string `json:"privateKey,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseImportKeyPairResponse parses an HTTP response from a ImportKeyPairWithResponse call
func ParseImportKeyPairResponse(rsp *http.Response) (*ImportKeyPairResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportKeyPairResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Fingerprint *string `json:"fingerprint,omitempty"`
			Name        *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteKeyPairResponse parses an HTTP response from a DeleteKeyPairWithResponse call
func ParseDeleteKeyPairResponse(rsp *http.Response) (*DeleteKeyPairResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteKeyPairResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePublicIpResponse parses an HTTP response from a CreatePublicIpWithResponse call
func ParseCreatePublicIpResponse(rsp *http.Response) (*CreatePublicIpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePublicIpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id       *string        `json:"id,omitempty"`
			PublicIp *string        `json:"publicIp,omitempty"`
			Tags     *[]interface{} `json:"tags,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePublicIpResponse parses an HTTP response from a DeletePublicIpWithResponse call
func ParseDeletePublicIpResponse(rsp *http.Response) (*DeletePublicIpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePublicIpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSecurityGroupsResponse parses an HTTP response from a GetSecurityGroupsWithResponse call
func ParseGetSecurityGroupsResponse(rsp *http.Response) (*GetSecurityGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecurityGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]SecurityGroupItem `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSecurityGroupResponse parses an HTTP response from a CreateSecurityGroupWithResponse call
func ParseCreateSecurityGroupResponse(rsp *http.Response) (*CreateSecurityGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSecurityGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SecurityGroupItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSecurityGroupResponse parses an HTTP response from a DeleteSecurityGroupWithResponse call
func ParseDeleteSecurityGroupResponse(rsp *http.Response) (*DeleteSecurityGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecurityGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSubnetsResponse parses an HTTP response from a GetSubnetsWithResponse call
func ParseGetSubnetsResponse(rsp *http.Response) (*GetSubnetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubnetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]Subnet `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSubnetResponse parses an HTTP response from a CreateSubnetWithResponse call
func ParseCreateSubnetResponse(rsp *http.Response) (*CreateSubnetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSubnetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Subnet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSubnetResponse parses an HTTP response from a DeleteSubnetWithResponse call
func ParseDeleteSubnetResponse(rsp *http.Response) (*DeleteSubnetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSubnetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetVPCResponse parses an HTTP response from a GetVPCWithResponse call
func ParseGetVPCResponse(rsp *http.Response) (*GetVPCResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVPCResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				DhcpOptionsSetId *string `json:"dhcpOptionsSetId,omitempty"`
				Id               *string `json:"id,omitempty"`
				IpRange          *string `json:"ipRange,omitempty"`
				State            *string `json:"state,omitempty"`
				Tenancy          *string `json:"tenancy,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateVPCResponse parses an HTTP response from a CreateVPCWithResponse call
func ParseCreateVPCResponse(rsp *http.Response) (*CreateVPCResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVPCResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			DhcpOptionsSetId *string `json:"dhcpOptionsSetId,omitempty"`
			Id               *string `json:"id,omitempty"`
			IpRange          *string `json:"ipRange,omitempty"`
			State            *string `json:"state,omitempty"`
			Tenancy          *string `json:"tenancy,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest N405
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteVPCResponse parses an HTTP response from a DeleteVPCWithResponse call
func ParseDeleteVPCResponse(rsp *http.Response) (*DeleteVPCResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVPCResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
