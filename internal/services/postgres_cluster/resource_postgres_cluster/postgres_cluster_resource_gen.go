// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_postgres_cluster

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func PostgresClusterResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"allowed_ip_ranges": schema.ListAttribute{
				ElementType: types.StringType,
				Required:    true,
				Validators: []validator.List{
					listvalidator.SizeBetween(1, 50),
				},
			},
			"automatic_backup": schema.BoolAttribute{
				Required:            true,
				Description:         "Whether automatic backup is enabled for this cluster.",
				MarkdownDescription: "Whether automatic backup is enabled for this cluster.",
			},
			"available_operations": schema.ListAttribute{
				ElementType:         types.StringType,
				Computed:            true,
				Description:         "List of operation names",
				MarkdownDescription: "List of operation names",
			},
			"created_on": schema.StringAttribute{
				Computed:            true,
				Description:         "When the cluster has been created.",
				MarkdownDescription: "When the cluster has been created.",
			},
			"error_reason": schema.StringAttribute{
				Computed:            true,
				Description:         "Detailed information regarding what went wrong, available when status is Error.",
				MarkdownDescription: "Detailed information regarding what went wrong, available when status is Error.",
			},
			"host": schema.StringAttribute{
				Computed:            true,
				Description:         "Where connections to the cluster must be made to.",
				MarkdownDescription: "Where connections to the cluster must be made to.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "A cluster unique identifier.",
				MarkdownDescription: "A cluster unique identifier.",
			},
			"is_public": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether public exposition is enabled for this cluster.",
				MarkdownDescription: "Whether public exposition is enabled for this cluster.",
			},
			"last_operation_name": schema.StringAttribute{
				Computed:            true,
				Description:         "Name of an operation",
				MarkdownDescription: "Name of an operation",
			},
			"last_operation_result": schema.StringAttribute{
				Computed:            true,
				Description:         "Result of an operation",
				MarkdownDescription: "Result of an operation",
			},
			"maintenance_schedule": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"begin_at": schema.StringAttribute{
						Computed:            true,
						Description:         "The start date and time of the maintenance window, in ISO 8601 format.",
						MarkdownDescription: "The start date and time of the maintenance window, in ISO 8601 format.",
					},
					"end_at": schema.StringAttribute{
						Computed:            true,
						Description:         "The end date and time of the maintenance window, in ISO 8601 format.",
						MarkdownDescription: "The end date and time of the maintenance window, in ISO 8601 format.",
					},
					"potential_impact": schema.StringAttribute{
						Computed:            true,
						Description:         "A description of the potential impact on the cluster's availability and performance during the maintenance window.",
						MarkdownDescription: "A description of the potential impact on the cluster's availability and performance during the maintenance window.",
					},
					"type": schema.StringAttribute{
						Computed:            true,
						Description:         "The type of maintenance operation being performed (e.g., software upgrade, hardware replacement).",
						MarkdownDescription: "The type of maintenance operation being performed (e.g., software upgrade, hardware replacement).",
					},
				},
				CustomType: MaintenanceScheduleType{
					ObjectType: types.ObjectType{
						AttrTypes: MaintenanceScheduleValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Postgres maintenance schedule object. It describes the upcoming maintenance operation for a PostgreSQL cluster, including its timing, type, and potential impact.",
				MarkdownDescription: "Postgres maintenance schedule object. It describes the upcoming maintenance operation for a PostgreSQL cluster, including its timing, type, and potential impact.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "A strict slug: starts and ends with an alphanumeric character, allows hyphens or underscores in between but not consecutively or at the edges.",
				MarkdownDescription: "A strict slug: starts and ends with an alphanumeric character, allows hyphens or underscores in between but not consecutively or at the edges.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9]+(?:[-_][a-zA-Z0-9]+)*$"), ""),
				},
			},
			"node_configuration": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"memory_size_gi_b": schema.Int64Attribute{
						Required:            true,
						Description:         "The allocated memory size, in GiB.",
						MarkdownDescription: "The allocated memory size, in GiB.",
						Validators: []validator.Int64{
							int64validator.Between(1, 1039),
						},
					},
					"performance_level": schema.StringAttribute{
						Required:            true,
						Description:         "The performance level of the VCPUs.\n\n- HIGHEST: for computationally intensive applications\n- HIGH: the performance level may fluctuate slightly over time\n- MEDIUM: the performance level may fluctuate moderately over time",
						MarkdownDescription: "The performance level of the VCPUs.\n\n- HIGHEST: for computationally intensive applications\n- HIGH: the performance level may fluctuate slightly over time\n- MEDIUM: the performance level may fluctuate moderately over time",
						Validators: []validator.String{
							stringvalidator.OneOf(
								"HIGHEST",
								"HIGH",
								"MEDIUM",
							),
						},
					},
					"vcpu_count": schema.Int64Attribute{
						Required:            true,
						Description:         "The number of Virtual CPU provisioned.",
						MarkdownDescription: "The number of Virtual CPU provisioned.",
						Validators: []validator.Int64{
							int64validator.Between(1, 78),
						},
					},
				},
				CustomType: NodeConfigurationType{
					ObjectType: types.ObjectType{
						AttrTypes: NodeConfigurationValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "The configuration used to provision the cluster nodes.",
				MarkdownDescription: "The configuration used to provision the cluster nodes.",
			},
			"port": schema.Int64Attribute{
				Computed:            true,
				Description:         "On which port connections to the host must be made.",
				MarkdownDescription: "On which port connections to the host must be made.",
			},
			"private_host": schema.StringAttribute{
				Computed:            true,
				Description:         "Where connections to the cluster must be made for interconnected services.",
				MarkdownDescription: "Where connections to the cluster must be made for interconnected services.",
			},
			"source_backup_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "A backup unique identifier.",
				MarkdownDescription: "A backup unique identifier.",
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "The last known status of a cluster.\n\n- CREATING: means the cluster is being created.\n- CONFIGURING: means the cluster is being configured according to requested changes.\n- READY: means the cluster is available and accepts connections.\n- FAILED: means that the cluster creation has failed, see errorMessage for details.\n- DELETING: means the cluster has been marked for deletion, it will be deleted soon.\n- DELETED: means the cluster has been deleted successfully, it will disappear from query and search results soon.\n- ERROR: means that an operation went wrong on the cluster, see errorMessage for details.",
				MarkdownDescription: "The last known status of a cluster.\n\n- CREATING: means the cluster is being created.\n- CONFIGURING: means the cluster is being configured according to requested changes.\n- READY: means the cluster is available and accepts connections.\n- FAILED: means that the cluster creation has failed, see errorMessage for details.\n- DELETING: means the cluster has been marked for deletion, it will be deleted soon.\n- DELETED: means the cluster has been deleted successfully, it will disappear from query and search results soon.\n- ERROR: means that an operation went wrong on the cluster, see errorMessage for details.",
			},
			"tags": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required:            true,
							Description:         "The key for the tag, must be unique amongst all tags associated with a given resource.",
							MarkdownDescription: "The key for the tag, must be unique amongst all tags associated with a given resource.",
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile("^[-_a-zA-Z0-9]{1,40}$"), ""),
							},
						},
						"value": schema.StringAttribute{
							Required:            true,
							Description:         "The value associated with the tag.",
							MarkdownDescription: "The value associated with the tag.",
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile("^[-_a-zA-Z0-9]{1,40}$"), ""),
							},
						},
					},
					CustomType: TagsType{
						ObjectType: types.ObjectType{
							AttrTypes: TagsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Tags to identify resources",
				MarkdownDescription: "Tags to identify resources",
			},
			"user": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the user with administration privileges on the cluster.",
				MarkdownDescription: "The name of the user with administration privileges on the cluster.",
			},
			"volume": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"iops": schema.Int64Attribute{
						Optional:            true,
						Computed:            true,
						Description:         "The number of IOPS to allocate to the volume.",
						MarkdownDescription: "The number of IOPS to allocate to the volume.",
						Validators: []validator.Int64{
							int64validator.Between(100, 13000),
						},
					},
					"size_gi_b": schema.Int64Attribute{
						Required:            true,
						Description:         "The size of the volume in GiB.",
						MarkdownDescription: "The size of the volume in GiB.",
						Validators: []validator.Int64{
							int64validator.Between(10, 500),
						},
					},
					"type": schema.StringAttribute{
						Required:            true,
						Description:         "The type of the volume.",
						MarkdownDescription: "The type of the volume.",
						Validators: []validator.String{
							stringvalidator.OneOf(
								"IO1",
								"GP2",
							),
						},
					},
				},
				CustomType: VolumeType{
					ObjectType: types.ObjectType{
						AttrTypes: VolumeValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "Common properties to all volume types.",
				MarkdownDescription: "Common properties to all volume types.",
			},
			"vpc_cidr": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The CIDR of the network where the cluster will be created.\n\n**Warning**: The CIDR must be in the following three blocks:\n- 10.*.0.0/16\n- 172.(16-31).0.0/16\n- 192.168.0.0/16\nThe mask mut not be greater than /24.",
				MarkdownDescription: "The CIDR of the network where the cluster will be created.\n\n**Warning**: The CIDR must be in the following three blocks:\n- 10.*.0.0/16\n- 172.(16-31).0.0/16\n- 192.168.0.0/16\nThe mask mut not be greater than /24.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^(?:10\\.(?:25[0-5]|2[0-4]\\d|1?\\d\\d?)\\.(?:25[0-5]|2[0-4]\\d|1?\\d\\d?)|172\\.(?:1[6-9]|2\\d|3[01])\\.(?:25[0-5]|2[0-4]\\d|1?\\d\\d?)|192\\.168\\.(?:25[0-5]|2[0-4]\\d|1?\\d\\d?))\\.0/(?:1[6-9]|2[0-4])$"), ""),
				},
				Default: stringdefault.StaticString("10.10.0.0/16"),
			},
		},
	}
}

type PostgresClusterModel struct {
	AllowedIpRanges     types.List               `tfsdk:"allowed_ip_ranges"`
	AutomaticBackup     types.Bool               `tfsdk:"automatic_backup"`
	AvailableOperations types.List               `tfsdk:"available_operations"`
	CreatedOn           types.String             `tfsdk:"created_on"`
	ErrorReason         types.String             `tfsdk:"error_reason"`
	Host                types.String             `tfsdk:"host"`
	Id                  types.String             `tfsdk:"id"`
	IsPublic            types.Bool               `tfsdk:"is_public"`
	LastOperationName   types.String             `tfsdk:"last_operation_name"`
	LastOperationResult types.String             `tfsdk:"last_operation_result"`
	MaintenanceSchedule MaintenanceScheduleValue `tfsdk:"maintenance_schedule"`
	Name                types.String             `tfsdk:"name"`
	NodeConfiguration   NodeConfigurationValue   `tfsdk:"node_configuration"`
	Port                types.Int64              `tfsdk:"port"`
	PrivateHost         types.String             `tfsdk:"private_host"`
	SourceBackupId      types.String             `tfsdk:"source_backup_id"`
	Status              types.String             `tfsdk:"status"`
	Tags                types.List               `tfsdk:"tags"`
	User                types.String             `tfsdk:"user"`
	Volume              VolumeValue              `tfsdk:"volume"`
	VpcCidr             types.String             `tfsdk:"vpc_cidr"`
}

var _ basetypes.ObjectTypable = MaintenanceScheduleType{}

type MaintenanceScheduleType struct {
	basetypes.ObjectType
}

func (t MaintenanceScheduleType) Equal(o attr.Type) bool {
	other, ok := o.(MaintenanceScheduleType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MaintenanceScheduleType) String() string {
	return "MaintenanceScheduleType"
}

func (t MaintenanceScheduleType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	beginAtAttribute, ok := attributes["begin_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`begin_at is missing from object`)

		return nil, diags
	}

	beginAtVal, ok := beginAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`begin_at expected to be basetypes.StringValue, was: %T`, beginAtAttribute))
	}

	endAtAttribute, ok := attributes["end_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`end_at is missing from object`)

		return nil, diags
	}

	endAtVal, ok := endAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`end_at expected to be basetypes.StringValue, was: %T`, endAtAttribute))
	}

	potentialImpactAttribute, ok := attributes["potential_impact"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`potential_impact is missing from object`)

		return nil, diags
	}

	potentialImpactVal, ok := potentialImpactAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`potential_impact expected to be basetypes.StringValue, was: %T`, potentialImpactAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MaintenanceScheduleValue{
		BeginAt:                 beginAtVal,
		EndAt:                   endAtVal,
		PotentialImpact:         potentialImpactVal,
		MaintenanceScheduleType: typeVal,
		state:                   attr.ValueStateKnown,
	}, diags
}

func NewMaintenanceScheduleValueNull() MaintenanceScheduleValue {
	return MaintenanceScheduleValue{
		state: attr.ValueStateNull,
	}
}

func NewMaintenanceScheduleValueUnknown() MaintenanceScheduleValue {
	return MaintenanceScheduleValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMaintenanceScheduleValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MaintenanceScheduleValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MaintenanceScheduleValue Attribute Value",
				"While creating a MaintenanceScheduleValue value, a missing attribute value was detected. "+
					"A MaintenanceScheduleValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MaintenanceScheduleValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MaintenanceScheduleValue Attribute Type",
				"While creating a MaintenanceScheduleValue value, an invalid attribute value was detected. "+
					"A MaintenanceScheduleValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MaintenanceScheduleValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MaintenanceScheduleValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MaintenanceScheduleValue Attribute Value",
				"While creating a MaintenanceScheduleValue value, an extra attribute value was detected. "+
					"A MaintenanceScheduleValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MaintenanceScheduleValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMaintenanceScheduleValueUnknown(), diags
	}

	beginAtAttribute, ok := attributes["begin_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`begin_at is missing from object`)

		return NewMaintenanceScheduleValueUnknown(), diags
	}

	beginAtVal, ok := beginAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`begin_at expected to be basetypes.StringValue, was: %T`, beginAtAttribute))
	}

	endAtAttribute, ok := attributes["end_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`end_at is missing from object`)

		return NewMaintenanceScheduleValueUnknown(), diags
	}

	endAtVal, ok := endAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`end_at expected to be basetypes.StringValue, was: %T`, endAtAttribute))
	}

	potentialImpactAttribute, ok := attributes["potential_impact"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`potential_impact is missing from object`)

		return NewMaintenanceScheduleValueUnknown(), diags
	}

	potentialImpactVal, ok := potentialImpactAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`potential_impact expected to be basetypes.StringValue, was: %T`, potentialImpactAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewMaintenanceScheduleValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewMaintenanceScheduleValueUnknown(), diags
	}

	return MaintenanceScheduleValue{
		BeginAt:                 beginAtVal,
		EndAt:                   endAtVal,
		PotentialImpact:         potentialImpactVal,
		MaintenanceScheduleType: typeVal,
		state:                   attr.ValueStateKnown,
	}, diags
}

func NewMaintenanceScheduleValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MaintenanceScheduleValue {
	object, diags := NewMaintenanceScheduleValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMaintenanceScheduleValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MaintenanceScheduleType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMaintenanceScheduleValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMaintenanceScheduleValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMaintenanceScheduleValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMaintenanceScheduleValueMust(MaintenanceScheduleValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MaintenanceScheduleType) ValueType(ctx context.Context) attr.Value {
	return MaintenanceScheduleValue{}
}

var _ basetypes.ObjectValuable = MaintenanceScheduleValue{}

type MaintenanceScheduleValue struct {
	BeginAt                 basetypes.StringValue `tfsdk:"begin_at"`
	EndAt                   basetypes.StringValue `tfsdk:"end_at"`
	PotentialImpact         basetypes.StringValue `tfsdk:"potential_impact"`
	MaintenanceScheduleType basetypes.StringValue `tfsdk:"type"`
	state                   attr.ValueState
}

func (v MaintenanceScheduleValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["begin_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["end_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["potential_impact"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.BeginAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["begin_at"] = val

		val, err = v.EndAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["end_at"] = val

		val, err = v.PotentialImpact.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["potential_impact"] = val

		val, err = v.MaintenanceScheduleType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MaintenanceScheduleValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MaintenanceScheduleValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MaintenanceScheduleValue) String() string {
	return "MaintenanceScheduleValue"
}

func (v MaintenanceScheduleValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"begin_at":         basetypes.StringType{},
		"end_at":           basetypes.StringType{},
		"potential_impact": basetypes.StringType{},
		"type":             basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"begin_at":         v.BeginAt,
			"end_at":           v.EndAt,
			"potential_impact": v.PotentialImpact,
			"type":             v.MaintenanceScheduleType,
		})

	return objVal, diags
}

func (v MaintenanceScheduleValue) Equal(o attr.Value) bool {
	other, ok := o.(MaintenanceScheduleValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.BeginAt.Equal(other.BeginAt) {
		return false
	}

	if !v.EndAt.Equal(other.EndAt) {
		return false
	}

	if !v.PotentialImpact.Equal(other.PotentialImpact) {
		return false
	}

	if !v.MaintenanceScheduleType.Equal(other.MaintenanceScheduleType) {
		return false
	}

	return true
}

func (v MaintenanceScheduleValue) Type(ctx context.Context) attr.Type {
	return MaintenanceScheduleType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MaintenanceScheduleValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"begin_at":         basetypes.StringType{},
		"end_at":           basetypes.StringType{},
		"potential_impact": basetypes.StringType{},
		"type":             basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = NodeConfigurationType{}

type NodeConfigurationType struct {
	basetypes.ObjectType
}

func (t NodeConfigurationType) Equal(o attr.Type) bool {
	other, ok := o.(NodeConfigurationType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t NodeConfigurationType) String() string {
	return "NodeConfigurationType"
}

func (t NodeConfigurationType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	memorySizeGiBAttribute, ok := attributes["memory_size_gi_b"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`memory_size_gi_b is missing from object`)

		return nil, diags
	}

	memorySizeGiBVal, ok := memorySizeGiBAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`memory_size_gi_b expected to be basetypes.Int64Value, was: %T`, memorySizeGiBAttribute))
	}

	performanceLevelAttribute, ok := attributes["performance_level"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`performance_level is missing from object`)

		return nil, diags
	}

	performanceLevelVal, ok := performanceLevelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`performance_level expected to be basetypes.StringValue, was: %T`, performanceLevelAttribute))
	}

	vcpuCountAttribute, ok := attributes["vcpu_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcpu_count is missing from object`)

		return nil, diags
	}

	vcpuCountVal, ok := vcpuCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcpu_count expected to be basetypes.Int64Value, was: %T`, vcpuCountAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return NodeConfigurationValue{
		MemorySizeGiB:    memorySizeGiBVal,
		PerformanceLevel: performanceLevelVal,
		VcpuCount:        vcpuCountVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewNodeConfigurationValueNull() NodeConfigurationValue {
	return NodeConfigurationValue{
		state: attr.ValueStateNull,
	}
}

func NewNodeConfigurationValueUnknown() NodeConfigurationValue {
	return NodeConfigurationValue{
		state: attr.ValueStateUnknown,
	}
}

func NewNodeConfigurationValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (NodeConfigurationValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing NodeConfigurationValue Attribute Value",
				"While creating a NodeConfigurationValue value, a missing attribute value was detected. "+
					"A NodeConfigurationValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NodeConfigurationValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid NodeConfigurationValue Attribute Type",
				"While creating a NodeConfigurationValue value, an invalid attribute value was detected. "+
					"A NodeConfigurationValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NodeConfigurationValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("NodeConfigurationValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra NodeConfigurationValue Attribute Value",
				"While creating a NodeConfigurationValue value, an extra attribute value was detected. "+
					"A NodeConfigurationValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra NodeConfigurationValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewNodeConfigurationValueUnknown(), diags
	}

	memorySizeGiBAttribute, ok := attributes["memory_size_gi_b"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`memory_size_gi_b is missing from object`)

		return NewNodeConfigurationValueUnknown(), diags
	}

	memorySizeGiBVal, ok := memorySizeGiBAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`memory_size_gi_b expected to be basetypes.Int64Value, was: %T`, memorySizeGiBAttribute))
	}

	performanceLevelAttribute, ok := attributes["performance_level"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`performance_level is missing from object`)

		return NewNodeConfigurationValueUnknown(), diags
	}

	performanceLevelVal, ok := performanceLevelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`performance_level expected to be basetypes.StringValue, was: %T`, performanceLevelAttribute))
	}

	vcpuCountAttribute, ok := attributes["vcpu_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcpu_count is missing from object`)

		return NewNodeConfigurationValueUnknown(), diags
	}

	vcpuCountVal, ok := vcpuCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcpu_count expected to be basetypes.Int64Value, was: %T`, vcpuCountAttribute))
	}

	if diags.HasError() {
		return NewNodeConfigurationValueUnknown(), diags
	}

	return NodeConfigurationValue{
		MemorySizeGiB:    memorySizeGiBVal,
		PerformanceLevel: performanceLevelVal,
		VcpuCount:        vcpuCountVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewNodeConfigurationValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) NodeConfigurationValue {
	object, diags := NewNodeConfigurationValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewNodeConfigurationValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t NodeConfigurationType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewNodeConfigurationValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewNodeConfigurationValueUnknown(), nil
	}

	if in.IsNull() {
		return NewNodeConfigurationValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewNodeConfigurationValueMust(NodeConfigurationValue{}.AttributeTypes(ctx), attributes), nil
}

func (t NodeConfigurationType) ValueType(ctx context.Context) attr.Value {
	return NodeConfigurationValue{}
}

var _ basetypes.ObjectValuable = NodeConfigurationValue{}

type NodeConfigurationValue struct {
	MemorySizeGiB    basetypes.Int64Value  `tfsdk:"memory_size_gi_b"`
	PerformanceLevel basetypes.StringValue `tfsdk:"performance_level"`
	VcpuCount        basetypes.Int64Value  `tfsdk:"vcpu_count"`
	state            attr.ValueState
}

func (v NodeConfigurationValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["memory_size_gi_b"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["performance_level"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vcpu_count"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.MemorySizeGiB.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["memory_size_gi_b"] = val

		val, err = v.PerformanceLevel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["performance_level"] = val

		val, err = v.VcpuCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vcpu_count"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v NodeConfigurationValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v NodeConfigurationValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v NodeConfigurationValue) String() string {
	return "NodeConfigurationValue"
}

func (v NodeConfigurationValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"memory_size_gi_b":  basetypes.Int64Type{},
		"performance_level": basetypes.StringType{},
		"vcpu_count":        basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"memory_size_gi_b":  v.MemorySizeGiB,
			"performance_level": v.PerformanceLevel,
			"vcpu_count":        v.VcpuCount,
		})

	return objVal, diags
}

func (v NodeConfigurationValue) Equal(o attr.Value) bool {
	other, ok := o.(NodeConfigurationValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.MemorySizeGiB.Equal(other.MemorySizeGiB) {
		return false
	}

	if !v.PerformanceLevel.Equal(other.PerformanceLevel) {
		return false
	}

	if !v.VcpuCount.Equal(other.VcpuCount) {
		return false
	}

	return true
}

func (v NodeConfigurationValue) Type(ctx context.Context) attr.Type {
	return NodeConfigurationType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v NodeConfigurationValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"memory_size_gi_b":  basetypes.Int64Type{},
		"performance_level": basetypes.StringType{},
		"vcpu_count":        basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = TagsType{}

type TagsType struct {
	basetypes.ObjectType
}

func (t TagsType) Equal(o attr.Type) bool {
	other, ok := o.(TagsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TagsType) String() string {
	return "TagsType"
}

func (t TagsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TagsValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewTagsValueNull() TagsValue {
	return TagsValue{
		state: attr.ValueStateNull,
	}
}

func NewTagsValueUnknown() TagsValue {
	return TagsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTagsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TagsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TagsValue Attribute Value",
				"While creating a TagsValue value, a missing attribute value was detected. "+
					"A TagsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TagsValue Attribute Type",
				"While creating a TagsValue value, an invalid attribute value was detected. "+
					"A TagsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TagsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TagsValue Attribute Value",
				"While creating a TagsValue value, an extra attribute value was detected. "+
					"A TagsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TagsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	return TagsValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewTagsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TagsValue {
	object, diags := NewTagsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTagsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TagsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTagsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTagsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTagsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTagsValueMust(TagsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TagsType) ValueType(ctx context.Context) attr.Value {
	return TagsValue{}
}

var _ basetypes.ObjectValuable = TagsValue{}

type TagsValue struct {
	Key   basetypes.StringValue `tfsdk:"key"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v TagsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TagsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TagsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TagsValue) String() string {
	return "TagsValue"
}

func (v TagsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"key":   v.Key,
			"value": v.Value,
		})

	return objVal, diags
}

func (v TagsValue) Equal(o attr.Value) bool {
	other, ok := o.(TagsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v TagsValue) Type(ctx context.Context) attr.Type {
	return TagsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TagsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = VolumeType{}

type VolumeType struct {
	basetypes.ObjectType
}

func (t VolumeType) Equal(o attr.Type) bool {
	other, ok := o.(VolumeType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t VolumeType) String() string {
	return "VolumeType"
}

func (t VolumeType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	iopsAttribute, ok := attributes["iops"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`iops is missing from object`)

		return nil, diags
	}

	iopsVal, ok := iopsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`iops expected to be basetypes.Int64Value, was: %T`, iopsAttribute))
	}

	sizeGiBAttribute, ok := attributes["size_gi_b"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`size_gi_b is missing from object`)

		return nil, diags
	}

	sizeGiBVal, ok := sizeGiBAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`size_gi_b expected to be basetypes.Int64Value, was: %T`, sizeGiBAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return VolumeValue{
		Iops:       iopsVal,
		SizeGiB:    sizeGiBVal,
		VolumeType: typeVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewVolumeValueNull() VolumeValue {
	return VolumeValue{
		state: attr.ValueStateNull,
	}
}

func NewVolumeValueUnknown() VolumeValue {
	return VolumeValue{
		state: attr.ValueStateUnknown,
	}
}

func NewVolumeValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (VolumeValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing VolumeValue Attribute Value",
				"While creating a VolumeValue value, a missing attribute value was detected. "+
					"A VolumeValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VolumeValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid VolumeValue Attribute Type",
				"While creating a VolumeValue value, an invalid attribute value was detected. "+
					"A VolumeValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VolumeValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("VolumeValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra VolumeValue Attribute Value",
				"While creating a VolumeValue value, an extra attribute value was detected. "+
					"A VolumeValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra VolumeValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewVolumeValueUnknown(), diags
	}

	iopsAttribute, ok := attributes["iops"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`iops is missing from object`)

		return NewVolumeValueUnknown(), diags
	}

	iopsVal, ok := iopsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`iops expected to be basetypes.Int64Value, was: %T`, iopsAttribute))
	}

	sizeGiBAttribute, ok := attributes["size_gi_b"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`size_gi_b is missing from object`)

		return NewVolumeValueUnknown(), diags
	}

	sizeGiBVal, ok := sizeGiBAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`size_gi_b expected to be basetypes.Int64Value, was: %T`, sizeGiBAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewVolumeValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewVolumeValueUnknown(), diags
	}

	return VolumeValue{
		Iops:       iopsVal,
		SizeGiB:    sizeGiBVal,
		VolumeType: typeVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewVolumeValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) VolumeValue {
	object, diags := NewVolumeValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewVolumeValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t VolumeType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewVolumeValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewVolumeValueUnknown(), nil
	}

	if in.IsNull() {
		return NewVolumeValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewVolumeValueMust(VolumeValue{}.AttributeTypes(ctx), attributes), nil
}

func (t VolumeType) ValueType(ctx context.Context) attr.Value {
	return VolumeValue{}
}

var _ basetypes.ObjectValuable = VolumeValue{}

type VolumeValue struct {
	Iops       basetypes.Int64Value  `tfsdk:"iops"`
	SizeGiB    basetypes.Int64Value  `tfsdk:"size_gi_b"`
	VolumeType basetypes.StringValue `tfsdk:"type"`
	state      attr.ValueState
}

func (v VolumeValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["iops"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["size_gi_b"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Iops.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["iops"] = val

		val, err = v.SizeGiB.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["size_gi_b"] = val

		val, err = v.VolumeType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v VolumeValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v VolumeValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v VolumeValue) String() string {
	return "VolumeValue"
}

func (v VolumeValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"iops":      basetypes.Int64Type{},
		"size_gi_b": basetypes.Int64Type{},
		"type":      basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"iops":      v.Iops,
			"size_gi_b": v.SizeGiB,
			"type":      v.VolumeType,
		})

	return objVal, diags
}

func (v VolumeValue) Equal(o attr.Value) bool {
	other, ok := o.(VolumeValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Iops.Equal(other.Iops) {
		return false
	}

	if !v.SizeGiB.Equal(other.SizeGiB) {
		return false
	}

	if !v.VolumeType.Equal(other.VolumeType) {
		return false
	}

	return true
}

func (v VolumeValue) Type(ctx context.Context) attr.Type {
	return VolumeType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v VolumeValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"iops":      basetypes.Int64Type{},
		"size_gi_b": basetypes.Int64Type{},
		"type":      basetypes.StringType{},
	}
}
