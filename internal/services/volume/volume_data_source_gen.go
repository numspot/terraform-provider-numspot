// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package volume

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func VolumeDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"items": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"availability_zone_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The Subregion in which the volume was created.",
							MarkdownDescription: "The Subregion in which the volume was created.",
						},
						"creation_date": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time of creation of the volume.",
							MarkdownDescription: "The date and time of creation of the volume.",
						},
						"id": schema.StringAttribute{
							Required:            true,
							Description:         "ID for ReadVolumes",
							MarkdownDescription: "ID for ReadVolumes",
						},
						"iops": schema.Int64Attribute{
							Computed:            true,
							Description:         "The number of I/O operations per second (IOPS):<br />\n- For `io1` volumes, the number of provisioned IOPS<br />\n- For `gp2` volumes, the baseline performance of the volume",
							MarkdownDescription: "The number of I/O operations per second (IOPS):<br />\n- For `io1` volumes, the number of provisioned IOPS<br />\n- For `gp2` volumes, the baseline performance of the volume",
						},
						"linked_volumes": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"delete_on_vm_deletion": schema.BoolAttribute{
										Computed:            true,
										Description:         "If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.",
										MarkdownDescription: "If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.",
									},
									"device_name": schema.StringAttribute{
										Computed:            true,
										Description:         "The name of the device.",
										MarkdownDescription: "The name of the device.",
									},
									"id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the volume.",
										MarkdownDescription: "The ID of the volume.",
									},
									"state": schema.StringAttribute{
										Computed:            true,
										Description:         "The state of the attachment of the volume (`attaching` \\| `detaching` \\| `attached` \\| `detached`).",
										MarkdownDescription: "The state of the attachment of the volume (`attaching` \\| `detaching` \\| `attached` \\| `detached`).",
									},
									"vm_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the VM.",
										MarkdownDescription: "The ID of the VM.",
									},
								},
								CustomType: LinkedVolumesType{
									ObjectType: types.ObjectType{
										AttrTypes: LinkedVolumesValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "Information about your volume attachment.",
							MarkdownDescription: "Information about your volume attachment.",
						},
						"size": schema.Int64Attribute{
							Computed:            true,
							Description:         "The size of the volume, in gibibytes (GiB).",
							MarkdownDescription: "The size of the volume, in gibibytes (GiB).",
						},
						"snapshot_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The snapshot from which the volume was created.",
							MarkdownDescription: "The snapshot from which the volume was created.",
						},
						"state": schema.StringAttribute{
							Computed:            true,
							Description:         "The state of the volume (`creating` \\| `available` \\| `in-use` \\| `updating` \\| `deleting` \\| `error`).",
							MarkdownDescription: "The state of the volume (`creating` \\| `available` \\| `in-use` \\| `updating` \\| `deleting` \\| `error`).",
						},
						"type": schema.StringAttribute{
							Computed:            true,
							Description:         "The type of the volume (`standard` \\| `gp2` \\| `io1`).",
							MarkdownDescription: "The type of the volume (`standard` \\| `gp2` \\| `io1`).",
						},
					},
				},
			},
			"creation_dates": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The dates and times of creation of the volumes.",
				MarkdownDescription: "The dates and times of creation of the volumes, in ISO 8601 date-time format (for example, 2020-06-30T00:00:00.000Z).",
			},
			"link_volume_delete_on_vm_deletion": schema.BoolAttribute{
				Optional:            true,
				Description:         "Whether the volumes are deleted or not when terminating the VMs.",
				MarkdownDescription: "Whether the volumes are deleted or not when terminating the VMs.",
			},
			"link_volume_device_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The VM device names.",
				MarkdownDescription: "The VM device names.",
			},
			"link_volume_link_dates": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The dates and times of creation of the volumes.",
				MarkdownDescription: "The dates and times of creation of the volumes, in ISO 8601 date-time format (for example, 2020-06-30T00:00:00.000Z).",
			},
			"link_volume_link_states": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The attachment states of the volumes (attaching | detaching | attached | detached).",
				MarkdownDescription: "The attachment states of the volumes (attaching | detaching | attached | detached).",
			},
			"link_volume_vm_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "One or more IDs of VMs.",
				MarkdownDescription: "One or more IDs of VMs.",
			},
			"snapshot_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The snapshots from which the volumes were created.",
				MarkdownDescription: "The snapshots from which the volumes were created.",
			},
			"volume_sizes": schema.ListAttribute{
				ElementType:         types.Int64Type,
				Optional:            true,
				Description:         "The sizes of the volumes, in gibibytes (GiB).",
				MarkdownDescription: "The sizes of the volumes, in gibibytes (GiB).",
			},
			"volume_states": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The states of the volumes (creating | available | in-use | updating | deleting | error).",
				MarkdownDescription: "The states of the volumes (creating | available | in-use | updating | deleting | error).",
			},
			"volume_types": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The types of the volumes (standard | gp2 | io1).",
				MarkdownDescription: "The types of the volumes (standard | gp2 | io1).",
			},
			"availability_zone_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The names of the Subregions in which the volumes were created.",
				MarkdownDescription: "The names of the Subregions in which the volumes were created.",
			},
			"ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The IDs of the volumes.",
				MarkdownDescription: "The IDs of the volumes.",
			},
		},
		DeprecationMessage: "Managing IAAS services with Terraform is deprecated",
	}
}
