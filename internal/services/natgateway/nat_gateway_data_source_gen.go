// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package natgateway

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"gitlab.numspot.cloud/cloud/terraform-provider-numspot/internal/services/tags"
)

func NatGatewayDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"items": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Required:            true,
							Description:         "ID for ReadNatServices",
							MarkdownDescription: "ID for ReadNatServices",
						},
						"public_ip_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The allocation ID of the public IP to associate with the NAT service.<br />\nIf the public IP is already associated with another resource, you must first disassociate it.",
							MarkdownDescription: "The allocation ID of the public IP to associate with the NAT service.<br />\nIf the public IP is already associated with another resource, you must first disassociate it.",
						},
						"public_ips": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"public_ip": schema.StringAttribute{
										Computed:            true,
										Description:         "The public IP associated with the NAT service.",
										MarkdownDescription: "The public IP associated with the NAT service.",
									},
									"public_ip_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The allocation ID of the public IP associated with the NAT service.",
										MarkdownDescription: "The allocation ID of the public IP associated with the NAT service.",
									},
								},
								CustomType: PublicIpsType{
									ObjectType: types.ObjectType{
										AttrTypes: PublicIpsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "Information about the public IP or IPs associated with the NAT service.",
							MarkdownDescription: "Information about the public IP or IPs associated with the NAT service.",
						},
						"state": schema.StringAttribute{
							Computed:            true,
							Description:         "The state of the NAT service (`pending` \\| `available` \\| `deleting` \\| `deleted`).",
							MarkdownDescription: "The state of the NAT service (`pending` \\| `available` \\| `deleting` \\| `deleted`).",
						},
						"subnet_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Subnet in which the NAT service is.",
							MarkdownDescription: "The ID of the Subnet in which the NAT service is.",
						},
						"tags": tags.TagsSchema(ctx),
						"vpc_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Net in which the NAT service is.",
							MarkdownDescription: "The ID of the Net in which the NAT service is.",
						},
					},
				},
			},
			"ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The IDs of the NAT services.",
				MarkdownDescription: "The IDs of the NAT services.",
			},
			"states": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The states of the NAT services (pending | available | deleting | deleted).",
				MarkdownDescription: "The states of the NAT services (pending | available | deleting | deleted).",
			},
			"subnet_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The IDs of the Subnets in which the NAT services are.",
				MarkdownDescription: "The IDs of the Subnets in which the NAT services are.",
			},
			"tag_keys": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The keys of the tags associated with the NAT services.",
				MarkdownDescription: "The keys of the tags associated with the NAT services.",
			},
			"tag_values": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The values of the tags associated with the NAT services.",
				MarkdownDescription: "The values of the tags associated with the NAT services.",
			},
			"tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         `The key/value combination of the tags associated with the NAT services, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.`,
				MarkdownDescription: `The key/value combination of the tags associated with the NAT services, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.`,
			},
			"vpc_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The IDs of the Nets in which the NAT services are.",
				MarkdownDescription: "The IDs of the Nets in which the NAT services are.",
			},
		},
		DeprecationMessage: "Managing IAAS services with Terraform is deprecated",
	}
}
