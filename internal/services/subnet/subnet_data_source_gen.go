// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package subnet

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"gitlab.numspot.cloud/cloud/terraform-provider-numspot/internal/services/tags"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func SubnetDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"items": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"availability_zone_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the Subregion in which the Subnet is located.",
							MarkdownDescription: "The name of the Subregion in which the Subnet is located.",
						},
						"available_ips_count": schema.Int64Attribute{
							Computed:            true,
							Description:         "The number of available IPs in the Subnets.",
							MarkdownDescription: "The number of available IPs in the Subnets.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Subnet.",
							MarkdownDescription: "The ID of the Subnet.",
						},
						"ip_range": schema.StringAttribute{
							Computed:            true,
							Description:         "The IP range in the Subnet, in CIDR notation (for example, `10.0.0.0/16`).",
							MarkdownDescription: "The IP range in the Subnet, in CIDR notation (for example, `10.0.0.0/16`).",
						},
						"map_public_ip_on_launch": schema.BoolAttribute{
							Computed:            true,
							Description:         "If true, a public IP is assigned to the network interface cards (NICs) created in the specified Subnet.",
							MarkdownDescription: "If true, a public IP is assigned to the network interface cards (NICs) created in the specified Subnet.",
						},
						"state": schema.StringAttribute{
							Computed:            true,
							Description:         "The state of the Subnet (`pending` \\| `available` \\| `deleted`).",
							MarkdownDescription: "The state of the Subnet (`pending` \\| `available` \\| `deleted`).",
						},
						"tags": tags.TagsSchema(ctx),
						"vpc_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Vpc in which the Subnet is.",
							MarkdownDescription: "The ID of the Vpc in which the Subnet is.",
						},
					},
				},
				Computed:            true,
				Description:         "Information about one or more Subnets.",
				MarkdownDescription: "Information about one or more Subnets.",
			},
			"availability_zone_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The names of the Subregions in which the Subnets are located.",
				MarkdownDescription: "The names of the Subregions in which the Subnets are located.",
			},
			"available_ips_counts": schema.ListAttribute{
				ElementType:         types.Int64Type,
				Optional:            true,
				Computed:            true,
				Description:         "The number of available IPs.",
				MarkdownDescription: "The number of available IPs.",
			},
			"ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Subnets.",
				MarkdownDescription: "The IDs of the Subnets.",
			},
			"ip_ranges": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IP ranges in the Subnets, in CIDR notation (for example, `10.0.0.0/16`).",
				MarkdownDescription: "The IP ranges in the Subnets, in CIDR notation (for example, `10.0.0.0/16`).",
			},
			"states": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The states of the Subnets (`pending` \\| `available` \\| `deleted`).",
				MarkdownDescription: "The states of the Subnets (`pending` \\| `available` \\| `deleted`).",
			},
			"tag_keys": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The keys of the tags associated with the Subnets.",
				MarkdownDescription: "The keys of the tags associated with the Subnets.",
			},
			"tag_values": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The values of the tags associated with the Subnets.",
				MarkdownDescription: "The values of the tags associated with the Subnets.",
			},
			"tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The key/value combination of the tags associated with the Subnets, in the following format: \"Filters\":{\"Tags\":[\"TAGKEY=TAGVALUE\"]}.",
				MarkdownDescription: "The key/value combination of the tags associated with the Subnets, in the following format: \"Filters\":{\"Tags\":[\"TAGKEY=TAGVALUE\"]}.",
			},
			"vpc_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Vpcs in which the Subnets are.",
				MarkdownDescription: "The IDs of the Vpcs in which the Subnets are.",
			},
		},
		DeprecationMessage: "Managing IAAS services with Terraform is deprecated",
	}
}
