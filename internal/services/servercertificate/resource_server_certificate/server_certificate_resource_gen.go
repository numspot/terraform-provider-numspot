// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_server_certificate

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ServerCertificateResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"body": schema.StringAttribute{
				Required:            true,
				Description:         "The PEM-encoded X509 certificate.",
				MarkdownDescription: "The PEM-encoded X509 certificate.",
			},
			"chain": schema.StringAttribute{
				Optional:            true,
				Description:         "The PEM-encoded intermediate certification authorities.",
				MarkdownDescription: "The PEM-encoded intermediate certification authorities.",
			},
			"expiration_date": schema.StringAttribute{
				Computed:            true,
				Description:         "The date on which the server certificate expires.",
				MarkdownDescription: "The date on which the server certificate expires.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the server certificate.",
				MarkdownDescription: "The ID of the server certificate.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "A unique name for the certificate, with a maximum length of 32 alphanumeric characters and dashes (-)",
				MarkdownDescription: "A unique name for the certificate, with a maximum length of 32 alphanumeric characters and dashes (-)",
				Validators: []validator.String{
					stringvalidator.LengthAtMost(32),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9-]+$"), ""),
				},
			},
			"path": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The path to the server certificate, set to a slash (/) if not specified.",
				MarkdownDescription: "The path to the server certificate, set to a slash (/) if not specified.",
			},
			"private_key": schema.StringAttribute{
				Required:            true,
				Description:         "The PEM-encoded private key matching the certificate.",
				MarkdownDescription: "The PEM-encoded private key matching the certificate.",
			},
			"upload_date": schema.StringAttribute{
				Computed:            true,
				Description:         "The date on which the server certificate has been uploaded.",
				MarkdownDescription: "The date on which the server certificate has been uploaded.",
			},
		},
	}
}

type ServerCertificateModel struct {
	Body           types.String `tfsdk:"body"`
	Chain          types.String `tfsdk:"chain"`
	ExpirationDate types.String `tfsdk:"expiration_date"`
	Id             types.String `tfsdk:"id"`
	Name           types.String `tfsdk:"name"`
	Path           types.String `tfsdk:"path"`
	PrivateKey     types.String `tfsdk:"private_key"`
	UploadDate     types.String `tfsdk:"upload_date"`
}
