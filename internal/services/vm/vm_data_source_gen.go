// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package vm

import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"gitlab.numspot.cloud/cloud/terraform-provider-numspot/internal/services/tags"
)

func VmDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"architectures": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The architectures of the VMs (`i386` \\| `x86_64`).",
				MarkdownDescription: "The architectures of the VMs (`i386` \\| `x86_64`).",
			},
			//"creation_date": schema.StringAttribute{
			//	Computed:            true,
			//	Description:         "The date and time of creation of the VM.",
			//	MarkdownDescription: "The date and time of creation of the VM.",
			//},
			"availability_zone_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The names of the Subregions of the VMs.",
				MarkdownDescription: "The names of the Subregions of the VMs.",
			},
			"block_device_mapping_delete_on_vm_deletion": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether the BSU volumes are deleted when terminating the VMs.",
				MarkdownDescription: "Whether the BSU volumes are deleted when terminating the VMs.",
			},
			"block_device_mapping_device_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The device names for the BSU volumes (in the format `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX`).",
				MarkdownDescription: "The device names for the BSU volumes (in the format `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX`).",
			},
			"block_device_mapping_states": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The states for the BSU volumes (`attaching` \\| `attached` \\| `detaching` \\| `detached`).",
				MarkdownDescription: "The states for the BSU volumes (`attaching` \\| `attached` \\| `detaching` \\| `detached`).",
			},
			"block_device_mapping_volume_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The volume IDs of the BSU volumes.",
				MarkdownDescription: "The volume IDs of the BSU volumes.",
			},
			"client_tokens": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The idempotency tokens provided when launching the VMs.",
				MarkdownDescription: "The idempotency tokens provided when launching the VMs.",
			},
			"ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "One or more IDs of VMs.",
				MarkdownDescription: "One or more IDs of VMs.",
			},
			"image_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the OMIs used to launch the VMs.",
				MarkdownDescription: "The IDs of the OMIs used to launch the VMs.",
			},
			"is_source_dest_checked": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether the source/destination checking is enabled (true) or disabled (false).",
				MarkdownDescription: "Whether the source/destination checking is enabled (true) or disabled (false).",
			},
			"items": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"architecture": schema.StringAttribute{
							Computed:            true,
							Description:         "The architecture of the VM (`i386` \\| `x86_64`).",
							MarkdownDescription: "The architecture of the VM (`i386` \\| `x86_64`).",
						},
						"block_device_mappings": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"bsu": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{
											"delete_on_vm_deletion": schema.BoolAttribute{
												Computed:            true,
												Description:         "If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.",
												MarkdownDescription: "If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.",
											},
											"link_date": schema.StringAttribute{
												Computed:            true,
												Description:         "The date and time of attachment of the volume to the VM, in ISO 8601 date-time format.",
												MarkdownDescription: "The date and time of attachment of the volume to the VM, in ISO 8601 date-time format.",
											},
											"state": schema.StringAttribute{
												Computed:            true,
												Description:         "The state of the volume.",
												MarkdownDescription: "The state of the volume.",
											},
											"volume_id": schema.StringAttribute{
												Computed:            true,
												Description:         "The ID of the volume.",
												MarkdownDescription: "The ID of the volume.",
											},
										},
										CustomType: BsuDataSourceType{
											ObjectType: types.ObjectType{
												AttrTypes: BsuDataSourceValue{}.AttributeTypes(ctx),
											},
										},
										Computed:            true,
										Description:         "Information about the created BSU volume.",
										MarkdownDescription: "Information about the created BSU volume.",
									},
									"device_name": schema.StringAttribute{
										Computed:            true,
										Description:         "The name of the device.",
										MarkdownDescription: "The name of the device.",
									},
								},
								CustomType: BlockDeviceMappingsDataSourceType{
									ObjectType: types.ObjectType{
										AttrTypes: BlockDeviceMappingsDataSourceValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "The block device mapping of the VM.",
							MarkdownDescription: "The block device mapping of the VM.",
						},
						"bsu_optimized": schema.BoolAttribute{
							Computed:            true,
							Description:         "This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.",
							MarkdownDescription: "This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.",
						},
						"client_token": schema.StringAttribute{
							Computed:            true,
							Description:         "The idempotency token provided when launching the VM.",
							MarkdownDescription: "The idempotency token provided when launching the VM.",
						},
						"creation_date": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time of creation of the VM.",
							MarkdownDescription: "The date and time of creation of the VM.",
						},
						"deletion_protection": schema.BoolAttribute{
							Computed:            true,
							Description:         "If true, you cannot delete the VM unless you change this parameter back to false.",
							MarkdownDescription: "If true, you cannot delete the VM unless you change this parameter back to false.",
						},
						"hypervisor": schema.StringAttribute{
							Computed:            true,
							Description:         "The hypervisor type of the VMs (`ovm` \\| `xen`).",
							MarkdownDescription: "The hypervisor type of the VMs (`ovm` \\| `xen`).",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the VM.",
							MarkdownDescription: "The ID of the VM.",
						},
						"image_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the OMI used to create the VM.",
							MarkdownDescription: "The ID of the OMI used to create the VM.",
						},
						"initiated_shutdown_behavior": schema.StringAttribute{
							Computed:            true,
							Description:         "The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.",
							MarkdownDescription: "The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.",
						},
						"is_source_dest_checked": schema.BoolAttribute{
							Computed:            true,
							Description:         "(Vpc only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Vpc.",
							MarkdownDescription: "(Vpc only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Vpc.",
						},
						"keypair_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the keypair used when launching the VM.",
							MarkdownDescription: "The name of the keypair used when launching the VM.",
						},
						"launch_number": schema.Int64Attribute{
							Computed:            true,
							Description:         "The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).",
							MarkdownDescription: "The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).",
						},
						"nested_virtualization": schema.BoolAttribute{
							Computed:            true,
							Description:         "If true, nested virtualization is enabled. If false, it is disabled.",
							MarkdownDescription: "If true, nested virtualization is enabled. If false, it is disabled.",
						},
						"nics": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"description": schema.StringAttribute{
										Computed:            true,
										Description:         "The description of the NIC.",
										MarkdownDescription: "The description of the NIC.",
									},
									"is_source_dest_checked": schema.BoolAttribute{
										Computed:            true,
										Description:         "(Vpc only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Vpc.",
										MarkdownDescription: "(Vpc only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Vpc.",
									},
									"link_nic": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{
											"delete_on_vm_deletion": schema.BoolAttribute{
												Computed:            true,
												Description:         "If true, the NIC is deleted when the VM is terminated.",
												MarkdownDescription: "If true, the NIC is deleted when the VM is terminated.",
											},
											"device_number": schema.Int64Attribute{
												Computed:            true,
												Description:         "The device index for the NIC attachment (between `1` and `7`, both included).",
												MarkdownDescription: "The device index for the NIC attachment (between `1` and `7`, both included).",
											},
											"link_nic_id": schema.StringAttribute{
												Computed:            true,
												Description:         "The ID of the NIC to attach.",
												MarkdownDescription: "The ID of the NIC to attach.",
											},
											"state": schema.StringAttribute{
												Computed:            true,
												Description:         "The state of the attachment (`attaching` \\| `attached` \\| `detaching` \\| `detached`).",
												MarkdownDescription: "The state of the attachment (`attaching` \\| `attached` \\| `detaching` \\| `detached`).",
											},
										},
										CustomType: LinkNicType{
											ObjectType: types.ObjectType{
												AttrTypes: LinkNicValue{}.AttributeTypes(ctx),
											},
										},
										Computed:            true,
										Description:         "Information about the network interface card (NIC).",
										MarkdownDescription: "Information about the network interface card (NIC).",
									},
									"link_public_ip": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{
											"public_dns_name": schema.StringAttribute{
												Computed:            true,
												Description:         "The name of the public DNS.",
												MarkdownDescription: "The name of the public DNS.",
											},
											"public_ip": schema.StringAttribute{
												Computed:            true,
												Description:         "The public IP associated with the NIC.",
												MarkdownDescription: "The public IP associated with the NIC.",
											},
										},
										CustomType: LinkPublicIpType{
											ObjectType: types.ObjectType{
												AttrTypes: LinkPublicIpValue{}.AttributeTypes(ctx),
											},
										},
										Computed:            true,
										Description:         "Information about the public IP associated with the NIC.",
										MarkdownDescription: "Information about the public IP associated with the NIC.",
									},
									"mac_address": schema.StringAttribute{
										Computed:            true,
										Description:         "The Media Access Control (MAC) address of the NIC.",
										MarkdownDescription: "The Media Access Control (MAC) address of the NIC.",
									},
									"nic_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the NIC.",
										MarkdownDescription: "The ID of the NIC.",
									},
									"private_dns_name": schema.StringAttribute{
										Computed:            true,
										Description:         "The name of the private DNS.",
										MarkdownDescription: "The name of the private DNS.",
									},
									"private_ips": schema.ListNestedAttribute{
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"is_primary": schema.BoolAttribute{
													Computed:            true,
													Description:         "If true, the IP is the primary private IP of the NIC.",
													MarkdownDescription: "If true, the IP is the primary private IP of the NIC.",
												},
												"link_public_ip": schema.SingleNestedAttribute{
													Attributes: map[string]schema.Attribute{
														"public_dns_name": schema.StringAttribute{
															Computed:            true,
															Description:         "The name of the public DNS.",
															MarkdownDescription: "The name of the public DNS.",
														},
														"public_ip": schema.StringAttribute{
															Computed:            true,
															Description:         "The public IP associated with the NIC.",
															MarkdownDescription: "The public IP associated with the NIC.",
														},
													},
													CustomType: LinkPublicIpType{
														ObjectType: types.ObjectType{
															AttrTypes: LinkPublicIpValue{}.AttributeTypes(ctx),
														},
													},
													Computed:            true,
													Description:         "Information about the public IP associated with the NIC.",
													MarkdownDescription: "Information about the public IP associated with the NIC.",
												},
												"private_dns_name": schema.StringAttribute{
													Computed:            true,
													Description:         "The name of the private DNS.",
													MarkdownDescription: "The name of the private DNS.",
												},
												"private_ip": schema.StringAttribute{
													Computed:            true,
													Description:         "The private IP.",
													MarkdownDescription: "The private IP.",
												},
											},
											CustomType: PrivateIpsType{
												ObjectType: types.ObjectType{
													AttrTypes: PrivateIpsValue{}.AttributeTypes(ctx),
												},
											},
										},
										Computed:            true,
										Description:         "The private IP or IPs of the NIC.",
										MarkdownDescription: "The private IP or IPs of the NIC.",
									},
									"security_groups": schema.ListNestedAttribute{
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"security_group_id": schema.StringAttribute{
													Computed:            true,
													Description:         "The ID of the security group.",
													MarkdownDescription: "The ID of the security group.",
												},
												"security_group_name": schema.StringAttribute{
													Computed:            true,
													Description:         "The name of the security group.",
													MarkdownDescription: "The name of the security group.",
												},
											},
											CustomType: SecurityGroupsType{
												ObjectType: types.ObjectType{
													AttrTypes: SecurityGroupsValue{}.AttributeTypes(ctx),
												},
											},
										},
										Computed:            true,
										Description:         "One or more IDs of security groups for the NIC.",
										MarkdownDescription: "One or more IDs of security groups for the NIC.",
									},
									"state": schema.StringAttribute{
										Computed:            true,
										Description:         "The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).",
										MarkdownDescription: "The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).",
									},
									"subnet_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the Subnet for the NIC.",
										MarkdownDescription: "The ID of the Subnet for the NIC.",
									},
									"vpc_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the Vpc for the NIC.",
										MarkdownDescription: "The ID of the Vpc for the NIC.",
									},
								},
								CustomType: NicsType{
									ObjectType: types.ObjectType{
										AttrTypes: NicsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "(Vpc only) The network interface cards (NICs) the VMs are attached to.",
							MarkdownDescription: "(Vpc only) The network interface cards (NICs) the VMs are attached to.",
						},
						"os_family": schema.StringAttribute{
							Computed:            true,
							Description:         "Indicates the operating system (OS) of the VM.",
							MarkdownDescription: "Indicates the operating system (OS) of the VM.",
						},
						"performance": schema.StringAttribute{
							Computed:            true,
							Description:         "The performance of the VM (`medium` \\| `high` \\|  `highest`).",
							MarkdownDescription: "The performance of the VM (`medium` \\| `high` \\|  `highest`).",
						},
						"placement": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"availability_zone_name": schema.StringAttribute{
									Computed:            true,
									Description:         "The name of the Subregion. If you specify this parameter, you must not specify the `Nics` parameter.",
									MarkdownDescription: "The name of the Subregion. If you specify this parameter, you must not specify the `Nics` parameter.",
								},
								"tenancy": schema.StringAttribute{
									Computed:            true,
									Description:         "The tenancy of the VM (`default`, `dedicated`, or a dedicated group ID).",
									MarkdownDescription: "The tenancy of the VM (`default`, `dedicated`, or a dedicated group ID).",
								},
							},
							CustomType: PlacementType{
								ObjectType: types.ObjectType{
									AttrTypes: PlacementValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Information about the placement of the VM.",
							MarkdownDescription: "Information about the placement of the VM.",
						},
						"private_dns_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the private DNS.",
							MarkdownDescription: "The name of the private DNS.",
						},
						"private_ip": schema.StringAttribute{
							Computed:            true,
							Description:         "The primary private IP of the VM.",
							MarkdownDescription: "The primary private IP of the VM.",
						},
						"product_codes": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "The product codes associated with the OMI used to create the VM.",
							MarkdownDescription: "The product codes associated with the OMI used to create the VM.",
						},
						"public_dns_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the public DNS.",
							MarkdownDescription: "The name of the public DNS.",
						},
						"public_ip": schema.StringAttribute{
							Computed:            true,
							Description:         "The public IP of the VM.",
							MarkdownDescription: "The public IP of the VM.",
						},
						"reservation_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The reservation ID of the VM.",
							MarkdownDescription: "The reservation ID of the VM.",
						},
						"root_device_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the root device for the VM (for example, `/dev/sda1`).",
							MarkdownDescription: "The name of the root device for the VM (for example, `/dev/sda1`).",
						},
						"root_device_type": schema.StringAttribute{
							Computed:            true,
							Description:         "The type of root device used by the VM (always `bsu`).",
							MarkdownDescription: "The type of root device used by the VM (always `bsu`).",
						},
						"security_groups": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"security_group_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the security group.",
										MarkdownDescription: "The ID of the security group.",
									},
									"security_group_name": schema.StringAttribute{
										Computed:            true,
										Description:         "The name of the security group.",
										MarkdownDescription: "The name of the security group.",
									},
								},
								CustomType: SecurityGroupsType{
									ObjectType: types.ObjectType{
										AttrTypes: SecurityGroupsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "One or more security groups associated with the VM.",
							MarkdownDescription: "One or more security groups associated with the VM.",
						},
						"state": schema.StringAttribute{
							Computed:            true,
							Description:         "The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).",
							MarkdownDescription: "The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).",
						},
						"state_reason": schema.StringAttribute{
							Computed:            true,
							Description:         "The reason explaining the current state of the VM.",
							MarkdownDescription: "The reason explaining the current state of the VM.",
						},
						"subnet_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Subnet for the VM.",
							MarkdownDescription: "The ID of the Subnet for the VM.",
						},
						"tags": tags.TagsSchema(ctx), // MANUALLY EDITED : Use shared tags
						"type": schema.StringAttribute{
							Computed:            true,
							Description:         "The type of VM.",
							MarkdownDescription: "The type of VM.",
						},
						"user_data": schema.StringAttribute{
							Computed:            true,
							Description:         "The Base64-encoded MIME user data.",
							MarkdownDescription: "The Base64-encoded MIME user data.",
						},
						"vpc_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Vpc in which the VM is running.",
							MarkdownDescription: "The ID of the Vpc in which the VM is running.",
						},
					},
				}, // MANUALLY EDITED : Removed CustomType block
				Computed:            true,
				Description:         "Information about one or more VMs.",
				MarkdownDescription: "Information about one or more VMs.",
			},
			"keypair_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The names of the keypairs used when launching the VMs.",
				MarkdownDescription: "The names of the keypairs used when launching the VMs.",
			},
			"launch_numbers": schema.ListAttribute{
				ElementType:         types.Int64Type,
				Optional:            true,
				Computed:            true,
				Description:         "The numbers for the VMs when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).",
				MarkdownDescription: "The numbers for the VMs when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).",
			},
			"lifecycles": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "Whether the VMs are Spot Instances (spot).",
				MarkdownDescription: "Whether the VMs are Spot Instances (spot).",
			},
			"nic_availability_zone_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The Subregions where the NICs are located.",
				MarkdownDescription: "The Subregions where the NICs are located.",
			},
			"nic_descriptions": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The descriptions of the NICs.",
				MarkdownDescription: "The descriptions of the NICs.",
			},
			"nic_is_source_dest_checked": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether the source/destination checking is enabled (true) or disabled (false).",
				MarkdownDescription: "Whether the source/destination checking is enabled (true) or disabled (false).",
			},
			"nic_link_nic_delete_on_vm_deletion": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether the NICs are deleted when the VMs they are attached to are deleted.",
				MarkdownDescription: "Whether the NICs are deleted when the VMs they are attached to are deleted.",
			},
			"nic_link_nic_device_numbers": schema.ListAttribute{
				ElementType:         types.Int64Type,
				Optional:            true,
				Computed:            true,
				Description:         "The device numbers the NICs are attached to.",
				MarkdownDescription: "The device numbers the NICs are attached to.",
			},
			"nic_link_nic_link_nic_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the NIC attachments.",
				MarkdownDescription: "The IDs of the NIC attachments.",
			},
			"nic_link_nic_states": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The states of the attachments.",
				MarkdownDescription: "The states of the attachments.",
			},
			"nic_link_nic_vm_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the VMs the NICs are attached to.",
				MarkdownDescription: "The IDs of the VMs the NICs are attached to.",
			},
			"nic_link_public_ip_link_public_ip_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The association IDs returned when the public IPs were associated with the NICs.",
				MarkdownDescription: "The association IDs returned when the public IPs were associated with the NICs.",
			},
			"nic_link_public_ip_public_ip_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The allocation IDs returned when the public IPs were allocated to their accounts.",
				MarkdownDescription: "The allocation IDs returned when the public IPs were allocated to their accounts.",
			},
			"nic_link_public_ip_public_ips": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The public IPs associated with the NICs.",
				MarkdownDescription: "The public IPs associated with the NICs.",
			},
			"nic_mac_addresses": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The Media Access Control (MAC) addresses of the NICs.",
				MarkdownDescription: "The Media Access Control (MAC) addresses of the NICs.",
			},
			"nic_nic_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the NICs.",
				MarkdownDescription: "The IDs of the NICs.",
			},
			"nic_private_ips_link_public_ip_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The public IPs associated with the private IPs.",
				MarkdownDescription: "The public IPs associated with the private IPs.",
			},
			"nic_private_ips_primary_ip": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether the private IPs are the primary IPs associated with the NICs.",
				MarkdownDescription: "Whether the private IPs are the primary IPs associated with the NICs.",
			},
			"nic_private_ips_private_ips": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The private IPs of the NICs.",
				MarkdownDescription: "The private IPs of the NICs.",
			},
			"nic_security_group_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the security groups associated with the NICs.",
				MarkdownDescription: "The IDs of the security groups associated with the NICs.",
			},
			"nic_security_group_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The names of the security groups associated with the NICs.",
				MarkdownDescription: "The names of the security groups associated with the NICs.",
			},
			"nic_states": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The states of the NICs (`available` \\| `in-use`).",
				MarkdownDescription: "The states of the NICs (`available` \\| `in-use`).",
			},
			"nic_subnet_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Subnets for the NICs.",
				MarkdownDescription: "The IDs of the Subnets for the NICs.",
			},
			"nic_vpc_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Vpcs where the NICs are located.",
				MarkdownDescription: "The IDs of the Vpcs where the NICs are located.",
			},
			"platforms": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The platforms. Use windows if you have Windows VMs. Otherwise, leave this filter blank.",
				MarkdownDescription: "The platforms. Use windows if you have Windows VMs. Otherwise, leave this filter blank.",
			},
			"private_ips": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The private IPs of the VMs.",
				MarkdownDescription: "The private IPs of the VMs.",
			},
			"product_codes": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The product codes associated with the OMI used to create the VMs.",
				MarkdownDescription: "The product codes associated with the OMI used to create the VMs.",
			},
			"public_ips": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The public IPs of the VMs.",
				MarkdownDescription: "The public IPs of the VMs.",
			},
			"reservation_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the reservation of the VMs, created every time you launch VMs. These reservation IDs can be associated with several VMs when you lauch a group of VMs using the same launch request.",
				MarkdownDescription: "The IDs of the reservation of the VMs, created every time you launch VMs. These reservation IDs can be associated with several VMs when you lauch a group of VMs using the same launch request.",
			},
			"root_device_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The names of the root devices for the VMs (for example, `/dev/sda1`)",
				MarkdownDescription: "The names of the root devices for the VMs (for example, `/dev/sda1`)",
			},
			"root_device_types": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The root devices types used by the VMs (always `ebs`)",
				MarkdownDescription: "The root devices types used by the VMs (always `ebs`)",
			},
			"security_group_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the security groups for the VMs (only in the public Cloud).",
				MarkdownDescription: "The IDs of the security groups for the VMs (only in the public Cloud).",
			},
			"security_group_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The names of the security groups for the VMs (only in the public Cloud).",
				MarkdownDescription: "The names of the security groups for the VMs (only in the public Cloud).",
			},
			"state_reason_codes": schema.ListAttribute{
				ElementType:         types.Int64Type,
				Optional:            true,
				Computed:            true,
				Description:         "The reason codes for the state changes.",
				MarkdownDescription: "The reason codes for the state changes.",
			},
			"state_reason_messages": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The messages describing the state changes.",
				MarkdownDescription: "The messages describing the state changes.",
			},
			"state_reasons": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The reasons explaining the current states of the VMs. This filter is like the `StateReasonCodes` one.",
				MarkdownDescription: "The reasons explaining the current states of the VMs. This filter is like the `StateReasonCodes` one.",
			},
			"subnet_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Subnets for the VMs.",
				MarkdownDescription: "The IDs of the Subnets for the VMs.",
			},
			"tag_keys": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The keys of the tags associated with the VMs.",
				MarkdownDescription: "The keys of the tags associated with the VMs.",
			},
			"tag_values": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The values of the tags associated with the VMs.",
				MarkdownDescription: "The values of the tags associated with the VMs.",
			},
			"tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The key/value combination of the tags associated with the VMs, in the following format: \"Filters\":{\"Tags\":[\"TAGKEY=TAGVALUE\"]}.", // MANUALLY EDITED : replaced HTML encoded character
				MarkdownDescription: "The key/value combination of the tags associated with the VMs, in the following format: \"Filters\":{\"Tags\":[\"TAGKEY=TAGVALUE\"]}.", // MANUALLY EDITED : replaced HTML encoded character
			},
			"tenancies": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The tenancies of the VMs (`dedicated` \\| `default` \\| `host`).",
				MarkdownDescription: "The tenancies of the VMs (`dedicated` \\| `default` \\| `host`).",
			},
			"types": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The NumSpot VM types.",
				MarkdownDescription: "The NumSpot VM types.",
			},
			"vm_security_group_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the security groups for the VMs.",
				MarkdownDescription: "The IDs of the security groups for the VMs.",
			},
			"vm_security_group_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The names of the security group for the VMs.",
				MarkdownDescription: "The names of the security group for the VMs.",
			},
			"vm_state_codes": schema.ListAttribute{
				ElementType:         types.Int64Type,
				Optional:            true,
				Computed:            true,
				Description:         "The state codes of the VMs: `-1` (quarantine), `0` (pending), `16` (running), `32` (shutting-down), `48` (terminated), `64` (stopping), and `80` (stopped).",
				MarkdownDescription: "The state codes of the VMs: `-1` (quarantine), `0` (pending), `16` (running), `32` (shutting-down), `48` (terminated), `64` (stopping), and `80` (stopped).",
			},
			"vm_state_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The state names of the VMs (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).",
				MarkdownDescription: "The state names of the VMs (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).",
			},
			"vpc_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Vpcs in which the VMs are running.",
				MarkdownDescription: "The IDs of the Vpcs in which the VMs are running.",
			},
			// MANUALLY EDITED : spaceId removed
		},
	}
}

type VmsDataSourceModel struct {
	Items                                []VmModelItemDataSource `tfsdk:"items"`
	Architectures                        types.List              `tfsdk:"architectures"`
	AvailabilityZoneNames                types.List              `tfsdk:"availability_zone_names"`
	BlockDeviceMappingDeleteOnVmDeletion types.Bool              `tfsdk:"block_device_mapping_delete_on_vm_deletion"`
	BlockDeviceMappingDeviceNames        types.List              `tfsdk:"block_device_mapping_device_names"`
	BlockDeviceMappingsDataSourcetates   types.List              `tfsdk:"block_device_mapping_states"`
	BlockDeviceMappingVolumeIds          types.List              `tfsdk:"block_device_mapping_volume_ids"`
	ClientTokens                         types.List              `tfsdk:"client_tokens"`
	Ids                                  types.List              `tfsdk:"ids"`
	ImageIds                             types.List              `tfsdk:"image_ids"`
	IsSourceDestChecked                  types.Bool              `tfsdk:"is_source_dest_checked"`
	KeypairNames                         types.List              `tfsdk:"keypair_names"`
	LaunchNumbers                        types.List              `tfsdk:"launch_numbers"`
	Lifecycles                           types.List              `tfsdk:"lifecycles"`
	NicAvailabilityZoneNames             types.List              `tfsdk:"nic_availability_zone_names"`
	NicDescriptions                      types.List              `tfsdk:"nic_descriptions"`
	NicIsSourceDestChecked               types.Bool              `tfsdk:"nic_is_source_dest_checked"`
	NicLinkNicDeleteOnVmDeletion         types.Bool              `tfsdk:"nic_link_nic_delete_on_vm_deletion"`
	NicLinkNicDeviceNumbers              types.List              `tfsdk:"nic_link_nic_device_numbers"`
	NicLinkNicLinkNicIds                 types.List              `tfsdk:"nic_link_nic_link_nic_ids"`
	NicLinkNicStates                     types.List              `tfsdk:"nic_link_nic_states"`
	NicLinkNicVmIds                      types.List              `tfsdk:"nic_link_nic_vm_ids"`
	NicLinkPublicIpLinkPublicIpIds       types.List              `tfsdk:"nic_link_public_ip_link_public_ip_ids"`
	NicLinkPublicIpPublicIpIds           types.List              `tfsdk:"nic_link_public_ip_public_ip_ids"`
	NicLinkPublicIpPublicIps             types.List              `tfsdk:"nic_link_public_ip_public_ips"`
	NicMacAddresses                      types.List              `tfsdk:"nic_mac_addresses"`
	NicNicIds                            types.List              `tfsdk:"nic_nic_ids"`
	NicPrivateIpsLinkPublicIpIds         types.List              `tfsdk:"nic_private_ips_link_public_ip_ids"`
	NicPrivateIpsPrimaryIp               types.Bool              `tfsdk:"nic_private_ips_primary_ip"`
	NicPrivateIpsPrivateIps              types.List              `tfsdk:"nic_private_ips_private_ips"`
	NicSecurityGroupIds                  types.List              `tfsdk:"nic_security_group_ids"`
	NicSecurityGroupNames                types.List              `tfsdk:"nic_security_group_names"`
	NicStates                            types.List              `tfsdk:"nic_states"`
	NicSubnetIds                         types.List              `tfsdk:"nic_subnet_ids"`
	NicVpcIds                            types.List              `tfsdk:"nic_vpc_ids"`
	Platforms                            types.List              `tfsdk:"platforms"`
	PrivateIps                           types.List              `tfsdk:"private_ips"`
	ProductCodes                         types.List              `tfsdk:"product_codes"`
	PublicIps                            types.List              `tfsdk:"public_ips"`
	ReservationIds                       types.List              `tfsdk:"reservation_ids"`
	RootDeviceNames                      types.List              `tfsdk:"root_device_names"`
	RootDeviceTypes                      types.List              `tfsdk:"root_device_types"`
	SecurityGroupIds                     types.List              `tfsdk:"security_group_ids"`
	SecurityGroupNames                   types.List              `tfsdk:"security_group_names"`
	//SpaceId                              types.String `tfsdk:"space_id"`
	StateReasonCodes     types.List `tfsdk:"state_reason_codes"`
	StateReasonMessages  types.List `tfsdk:"state_reason_messages"`
	StateReasons         types.List `tfsdk:"state_reasons"`
	SubnetIds            types.List `tfsdk:"subnet_ids"`
	TagKeys              types.List `tfsdk:"tag_keys"`
	TagValues            types.List `tfsdk:"tag_values"`
	Tags                 types.List `tfsdk:"tags"`
	Tenancies            types.List `tfsdk:"tenancies"`
	Types                types.List `tfsdk:"types"`
	VmSecurityGroupIds   types.List `tfsdk:"vm_security_group_ids"`
	VmSecurityGroupNames types.List `tfsdk:"vm_security_group_names"`
	VmStateCodes         types.List `tfsdk:"vm_state_codes"`
	VmStateNames         types.List `tfsdk:"vm_state_names"`
	VpcIds               types.List `tfsdk:"vpc_ids"`
}

type VmModelItemDataSource struct {
	Architecture                  types.String `tfsdk:"architecture"`
	BlockDeviceMappingsDataSource types.List   `tfsdk:"block_device_mappings"`
	BsuOptimized                  types.Bool   `tfsdk:"bsu_optimized"`
	Performance                   types.String `tfsdk:"performance"`
	ClientToken                   types.String `tfsdk:"client_token"`
	CreationDate                  types.String `tfsdk:"creation_date"`
	DeletionProtection            types.Bool   `tfsdk:"deletion_protection"`
	Hypervisor                    types.String `tfsdk:"hypervisor"`
	Id                            types.String `tfsdk:"id"`
	ImageId                       types.String `tfsdk:"image_id"`
	InitiatedShutdownBehavior     types.String `tfsdk:"initiated_shutdown_behavior"`
	IsSourceDestChecked           types.Bool   `tfsdk:"is_source_dest_checked"`
	KeypairName                   types.String `tfsdk:"keypair_name"`
	LaunchNumber                  types.Int64  `tfsdk:"launch_number"`
	//MaxVmsCount               types.Int64    `tfsdk:"max_vms_count"`
	//MinVmsCount               types.Int64    `tfsdk:"min_vms_count"`
	NestedVirtualization types.Bool     `tfsdk:"nested_virtualization"`
	Nics                 types.List     `tfsdk:"nics"`
	OsFamily             types.String   `tfsdk:"os_family"`
	Placement            PlacementValue `tfsdk:"placement"`
	PrivateDnsName       types.String   `tfsdk:"private_dns_name"`
	PrivateIp            types.String   `tfsdk:"private_ip"`
	//PrivateIps           types.List     `tfsdk:"private_ips"`
	ProductCodes   types.List   `tfsdk:"product_codes"`
	PublicDnsName  types.String `tfsdk:"public_dns_name"`
	PublicIp       types.String `tfsdk:"public_ip"`
	ReservationId  types.String `tfsdk:"reservation_id"`
	RootDeviceName types.String `tfsdk:"root_device_name"`
	RootDeviceType types.String `tfsdk:"root_device_type"`
	//SecurityGroupIds     types.List     `tfsdk:"security_group_ids"`
	SecurityGroups types.List `tfsdk:"security_groups"`
	//SpaceId                     types.String   `tfsdk:"space_id"`
	State       types.String `tfsdk:"state"`
	StateReason types.String `tfsdk:"state_reason"`
	SubnetId    types.String `tfsdk:"subnet_id"`
	Tags        types.List   `tfsdk:"tags"`
	Type        types.String `tfsdk:"type"`
	UserData    types.String `tfsdk:"user_data"`
	//VmInitiatedShutdownBehavior types.String `tfsdk:"vm_initiated_shutdown_behavior"`
	VpcId types.String `tfsdk:"vpc_id"`
}

// MANUALLY EDITED : Model declaration removed

// MANUALLY EDITED : Functions associated with ItemsType / ItemsValue and Tags removed

var _ basetypes.ObjectTypable = BlockDeviceMappingsDataSourceType{}

type BlockDeviceMappingsDataSourceType struct {
	basetypes.ObjectType
}

func (t BlockDeviceMappingsDataSourceType) Equal(o attr.Type) bool {
	other, ok := o.(BlockDeviceMappingsDataSourceType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BlockDeviceMappingsDataSourceType) String() string {
	return "BlockDeviceMappingsDataSourceType"
}

func (t BlockDeviceMappingsDataSourceType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	bsuAttribute, ok := attributes["bsu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bsu is missing from object`)

		return nil, diags
	}

	bsuVal, ok := bsuAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bsu expected to be basetypes.ObjectValue, was: %T`, bsuAttribute))
	}

	deviceNameAttribute, ok := attributes["device_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_name is missing from object`)

		return nil, diags
	}

	deviceNameVal, ok := deviceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_name expected to be basetypes.StringValue, was: %T`, deviceNameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BlockDeviceMappingsDataSourceValue{
		Bsu:        bsuVal,
		DeviceName: deviceNameVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewBlockDeviceMappingsDataSourceValueNull() BlockDeviceMappingsDataSourceValue {
	return BlockDeviceMappingsDataSourceValue{
		state: attr.ValueStateNull,
	}
}

func NewBlockDeviceMappingsDataSourceValueUnknown() BlockDeviceMappingsDataSourceValue {
	return BlockDeviceMappingsDataSourceValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBlockDeviceMappingsDataSourceValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BlockDeviceMappingsDataSourceValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BlockDeviceMappingsDataSourceValue Attribute Value",
				"While creating a BlockDeviceMappingsDataSourceValue value, a missing attribute value was detected. "+
					"A BlockDeviceMappingsDataSourceValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BlockDeviceMappingsDataSourceValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BlockDeviceMappingsDataSourceValue Attribute Type",
				"While creating a BlockDeviceMappingsDataSourceValue value, an invalid attribute value was detected. "+
					"A BlockDeviceMappingsDataSourceValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BlockDeviceMappingsDataSourceValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BlockDeviceMappingsDataSourceValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BlockDeviceMappingsDataSourceValue Attribute Value",
				"While creating a BlockDeviceMappingsDataSourceValue value, an extra attribute value was detected. "+
					"A BlockDeviceMappingsDataSourceValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BlockDeviceMappingsDataSourceValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBlockDeviceMappingsDataSourceValueUnknown(), diags
	}

	bsuAttribute, ok := attributes["bsu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bsu is missing from object`)

		return NewBlockDeviceMappingsDataSourceValueUnknown(), diags
	}

	bsuVal, ok := bsuAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bsu expected to be basetypes.ObjectValue, was: %T`, bsuAttribute))
	}

	deviceNameAttribute, ok := attributes["device_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_name is missing from object`)

		return NewBlockDeviceMappingsDataSourceValueUnknown(), diags
	}

	deviceNameVal, ok := deviceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_name expected to be basetypes.StringValue, was: %T`, deviceNameAttribute))
	}

	return BlockDeviceMappingsDataSourceValue{
		Bsu:        bsuVal,
		DeviceName: deviceNameVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewBlockDeviceMappingsDataSourceValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BlockDeviceMappingsDataSourceValue {
	object, diags := NewBlockDeviceMappingsDataSourceValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBlockDeviceMappingsDataSourceValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BlockDeviceMappingsDataSourceType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBlockDeviceMappingsDataSourceValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBlockDeviceMappingsDataSourceValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBlockDeviceMappingsDataSourceValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBlockDeviceMappingsDataSourceValueMust(BlockDeviceMappingsDataSourceValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BlockDeviceMappingsDataSourceType) ValueType(ctx context.Context) attr.Value {
	return BlockDeviceMappingsDataSourceValue{}
}

var _ basetypes.ObjectValuable = BlockDeviceMappingsDataSourceValue{}

type BlockDeviceMappingsDataSourceValue struct {
	Bsu        basetypes.ObjectValue `tfsdk:"bsu"`
	DeviceName basetypes.StringValue `tfsdk:"device_name"`
	state      attr.ValueState
}

func (v BlockDeviceMappingsDataSourceValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["bsu"] = basetypes.ObjectType{
		AttrTypes: BsuDataSourceValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["device_name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Bsu.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bsu"] = val

		val, err = v.DeviceName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["device_name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BlockDeviceMappingsDataSourceValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BlockDeviceMappingsDataSourceValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BlockDeviceMappingsDataSourceValue) String() string {
	return "BlockDeviceMappingsDataSourceValue"
}

func (v BlockDeviceMappingsDataSourceValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var bsu basetypes.ObjectValue

	if v.Bsu.IsNull() {
		bsu = types.ObjectNull(
			BsuDataSourceValue{}.AttributeTypes(ctx),
		)
	}

	if v.Bsu.IsUnknown() {
		bsu = types.ObjectUnknown(
			BsuDataSourceValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Bsu.IsNull() && !v.Bsu.IsUnknown() {
		bsu = types.ObjectValueMust(
			BsuDataSourceValue{}.AttributeTypes(ctx),
			v.Bsu.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"bsu": basetypes.ObjectType{
			AttrTypes: BsuDataSourceValue{}.AttributeTypes(ctx),
		},
		"device_name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"bsu":         bsu,
			"device_name": v.DeviceName,
		})

	return objVal, diags
}

func (v BlockDeviceMappingsDataSourceValue) Equal(o attr.Value) bool {
	other, ok := o.(BlockDeviceMappingsDataSourceValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Bsu.Equal(other.Bsu) {
		return false
	}

	if !v.DeviceName.Equal(other.DeviceName) {
		return false
	}

	return true
}

func (v BlockDeviceMappingsDataSourceValue) Type(ctx context.Context) attr.Type {
	return BlockDeviceMappingsDataSourceType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BlockDeviceMappingsDataSourceValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bsu": basetypes.ObjectType{
			AttrTypes: BsuDataSourceValue{}.AttributeTypes(ctx),
		},
		"device_name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = BsuDataSourceType{}

type BsuDataSourceType struct {
	basetypes.ObjectType
}

func (t BsuDataSourceType) Equal(o attr.Type) bool {
	other, ok := o.(BsuDataSourceType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BsuDataSourceType) String() string {
	return "BsuDataSourceType"
}

func (t BsuDataSourceType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	deleteOnVmDeletionAttribute, ok := attributes["delete_on_vm_deletion"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delete_on_vm_deletion is missing from object`)

		return nil, diags
	}

	deleteOnVmDeletionVal, ok := deleteOnVmDeletionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delete_on_vm_deletion expected to be basetypes.BoolValue, was: %T`, deleteOnVmDeletionAttribute))
	}

	linkDateAttribute, ok := attributes["link_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_date is missing from object`)

		return nil, diags
	}

	linkDateVal, ok := linkDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_date expected to be basetypes.StringValue, was: %T`, linkDateAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	volumeIdAttribute, ok := attributes["volume_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_id is missing from object`)

		return nil, diags
	}

	volumeIdVal, ok := volumeIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_id expected to be basetypes.StringValue, was: %T`, volumeIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BsuDataSourceValue{
		DeleteOnVmDeletion: deleteOnVmDeletionVal,
		LinkDate:           linkDateVal,
		State:              stateVal,
		VolumeId:           volumeIdVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewBsuDataSourceValueNull() BsuDataSourceValue {
	return BsuDataSourceValue{
		state: attr.ValueStateNull,
	}
}

func NewBsuDataSourceValueUnknown() BsuDataSourceValue {
	return BsuDataSourceValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBsuDataSourceValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BsuDataSourceValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BsuDataSourceValue Attribute Value",
				"While creating a BsuDataSourceValue value, a missing attribute value was detected. "+
					"A BsuDataSourceValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BsuDataSourceValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BsuDataSourceValue Attribute Type",
				"While creating a BsuDataSourceValue value, an invalid attribute value was detected. "+
					"A BsuDataSourceValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BsuDataSourceValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BsuDataSourceValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BsuDataSourceValue Attribute Value",
				"While creating a BsuDataSourceValue value, an extra attribute value was detected. "+
					"A BsuDataSourceValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BsuDataSourceValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBsuDataSourceValueUnknown(), diags
	}

	deleteOnVmDeletionAttribute, ok := attributes["delete_on_vm_deletion"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delete_on_vm_deletion is missing from object`)

		return NewBsuDataSourceValueUnknown(), diags
	}

	deleteOnVmDeletionVal, ok := deleteOnVmDeletionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delete_on_vm_deletion expected to be basetypes.BoolValue, was: %T`, deleteOnVmDeletionAttribute))
	}

	linkDateAttribute, ok := attributes["link_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_date is missing from object`)

		return NewBsuDataSourceValueUnknown(), diags
	}

	linkDateVal, ok := linkDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_date expected to be basetypes.StringValue, was: %T`, linkDateAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewBsuDataSourceValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	volumeIdAttribute, ok := attributes["volume_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_id is missing from object`)

		return NewBsuDataSourceValueUnknown(), diags
	}

	volumeIdVal, ok := volumeIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_id expected to be basetypes.StringValue, was: %T`, volumeIdAttribute))
	}

	if diags.HasError() {
		return NewBsuDataSourceValueUnknown(), diags
	}

	return BsuDataSourceValue{
		DeleteOnVmDeletion: deleteOnVmDeletionVal,
		LinkDate:           linkDateVal,
		State:              stateVal,
		VolumeId:           volumeIdVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewBsuDataSourceValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BsuDataSourceValue {
	object, diags := NewBsuDataSourceValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBsuDataSourceValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BsuDataSourceType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBsuDataSourceValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBsuDataSourceValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBsuDataSourceValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBsuDataSourceValueMust(BsuDataSourceValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BsuDataSourceType) ValueType(ctx context.Context) attr.Value {
	return BsuDataSourceValue{}
}

var _ basetypes.ObjectValuable = BsuDataSourceValue{}

type BsuDataSourceValue struct {
	DeleteOnVmDeletion basetypes.BoolValue   `tfsdk:"delete_on_vm_deletion"`
	LinkDate           basetypes.StringValue `tfsdk:"link_date"`
	State              basetypes.StringValue `tfsdk:"state"`
	VolumeId           basetypes.StringValue `tfsdk:"volume_id"`
	state              attr.ValueState
}

func (v BsuDataSourceValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["delete_on_vm_deletion"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["link_date"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["volume_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.DeleteOnVmDeletion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["delete_on_vm_deletion"] = val

		val, err = v.LinkDate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["link_date"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.VolumeId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["volume_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BsuDataSourceValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BsuDataSourceValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BsuDataSourceValue) String() string {
	return "BsuDataSourceValue"
}

func (v BsuDataSourceValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"delete_on_vm_deletion": basetypes.BoolType{},
		"link_date":             basetypes.StringType{},
		"state":                 basetypes.StringType{},
		"volume_id":             basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"delete_on_vm_deletion": v.DeleteOnVmDeletion,
			"link_date":             v.LinkDate,
			"state":                 v.State,
			"volume_id":             v.VolumeId,
		})

	return objVal, diags
}

func (v BsuDataSourceValue) Equal(o attr.Value) bool {
	other, ok := o.(BsuDataSourceValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DeleteOnVmDeletion.Equal(other.DeleteOnVmDeletion) {
		return false
	}

	if !v.LinkDate.Equal(other.LinkDate) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.VolumeId.Equal(other.VolumeId) {
		return false
	}

	return true
}

func (v BsuDataSourceValue) Type(ctx context.Context) attr.Type {
	return BsuDataSourceType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BsuDataSourceValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"delete_on_vm_deletion": basetypes.BoolType{},
		"link_date":             basetypes.StringType{},
		"state":                 basetypes.StringType{},
		"volume_id":             basetypes.StringType{},
	}
}
