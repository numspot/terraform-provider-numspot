// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_vm

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func VmResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"architecture": schema.StringAttribute{
				Computed:            true,
				Description:         "The architecture of the VM (`i386` \\| `x86_64`).",
				MarkdownDescription: "The architecture of the VM (`i386` \\| `x86_64`).",
			},
			"block_device_mappings": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"bsu": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"delete_on_vm_deletion": schema.BoolAttribute{
									Computed:            true,
									Description:         "By default or if set to true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.",
									MarkdownDescription: "By default or if set to true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.",
								},
								"iops": schema.Int64Attribute{
									Computed:            true,
									Description:         "The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.",
									MarkdownDescription: "The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.",
								},
								"link_date": schema.StringAttribute{
									Computed:            true,
									Description:         "The date and time of attachment of the volume to the VM, in ISO 8601 date-time format.",
									MarkdownDescription: "The date and time of attachment of the volume to the VM, in ISO 8601 date-time format.",
								},
								"snapshot_id": schema.StringAttribute{
									Computed:            true,
									Description:         "The ID of the snapshot used to create the volume.",
									MarkdownDescription: "The ID of the snapshot used to create the volume.",
								},
								"state": schema.StringAttribute{
									Computed:            true,
									Description:         "The state of the volume.",
									MarkdownDescription: "The state of the volume.",
								},
								"volume_id": schema.StringAttribute{
									Computed:            true,
									Description:         "The ID of the volume.",
									MarkdownDescription: "The ID of the volume.",
								},
								"volume_size": schema.Int64Attribute{
									Computed:            true,
									Description:         "The size of the volume, in gibibytes (GiB).<br />\nIf you specify a snapshot ID, the volume size must be at least equal to the snapshot size.<br />\nIf you specify a snapshot ID but no volume size, the volume is created with a size similar to the snapshot one.",
									MarkdownDescription: "The size of the volume, in gibibytes (GiB).<br />\nIf you specify a snapshot ID, the volume size must be at least equal to the snapshot size.<br />\nIf you specify a snapshot ID but no volume size, the volume is created with a size similar to the snapshot one.",
								},
								"volume_type": schema.StringAttribute{
									Computed:            true,
									Description:         "The type of the volume (`standard` \\| `io1` \\| `gp2`). If not specified in the request, a `standard` volume is created.<br />",
									MarkdownDescription: "The type of the volume (`standard` \\| `io1` \\| `gp2`). If not specified in the request, a `standard` volume is created.<br />",
								},
							},
							CustomType: BsuType{
								ObjectType: types.ObjectType{
									AttrTypes: BsuValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Information about the BSU volume to create.",
							MarkdownDescription: "Information about the BSU volume to create.",
						},
						"device_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).",
							MarkdownDescription: "The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).",
						},
						"no_device": schema.StringAttribute{
							Computed:            true,
							Description:         "Removes the device which is included in the block device mapping of the Image.",
							MarkdownDescription: "Removes the device which is included in the block device mapping of the Image.",
						},
						"virtual_device_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the virtual device (`ephemeralN`).",
							MarkdownDescription: "The name of the virtual device (`ephemeralN`).",
						},
					},
					CustomType: BlockDeviceMappingsType{
						ObjectType: types.ObjectType{
							AttrTypes: BlockDeviceMappingsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "One or more block device mappings.",
				MarkdownDescription: "One or more block device mappings.",
			},
			"client_token": schema.StringAttribute{
				Computed:            true,
				Description:         "A unique identifier which enables you to manage the idempotency.",
				MarkdownDescription: "A unique identifier which enables you to manage the idempotency.",
			},
			"creation_date": schema.StringAttribute{
				Computed:            true,
				Description:         "The date and time of creation of the VM.",
				MarkdownDescription: "The date and time of creation of the VM.",
			},
			"deletion_protection": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If true, you cannot delete the VM unless you change this parameter back to false.",
				MarkdownDescription: "If true, you cannot delete the VM unless you change this parameter back to false.",
			},
			"hypervisor": schema.StringAttribute{
				Computed:            true,
				Description:         "The hypervisor type of the VMs (`ovm` \\| `xen`).",
				MarkdownDescription: "The hypervisor type of the VMs (`ovm` \\| `xen`).",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the VM.",
				MarkdownDescription: "The ID of the VM.",
			},
			"image_id": schema.StringAttribute{
				Required:            true,
				Description:         "The ID of the Image used to create the VM. You can find the list of OMIs by calling the [ReadImages](#readimages) method.",
				MarkdownDescription: "The ID of the Image used to create the VM. You can find the list of OMIs by calling the [ReadImages](#readimages) method.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
			},
			"initiated_shutdown_behavior": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.",
				MarkdownDescription: "The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.",
				Default:             stringdefault.StaticString("stop"),
			},
			"is_source_dest_checked": schema.BoolAttribute{
				Computed:            true,
				Description:         "(Vpc only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Vpc.",
				MarkdownDescription: "(Vpc only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Vpc.",
			},
			"keypair_name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The name of the keypair.",
				MarkdownDescription: "The name of the keypair.",
			},
			"launch_number": schema.Int64Attribute{
				Computed:            true,
				Description:         "The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).",
				MarkdownDescription: "The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).",
			},
			"nested_virtualization": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "(dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.",
				MarkdownDescription: "(dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.",
				Default:             booldefault.StaticBool(false),
			},
			"nics": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"description": schema.StringAttribute{
							Computed:            true,
							Description:         "The description of the NIC.",
							MarkdownDescription: "The description of the NIC.",
						},
						"is_source_dest_checked": schema.BoolAttribute{
							Computed:            true,
							Description:         "(Vpc only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Vpc.",
							MarkdownDescription: "(Vpc only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Vpc.",
						},
						"link_nic": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"delete_on_vm_deletion": schema.BoolAttribute{
									Computed:            true,
									Description:         "If true, the NIC is deleted when the VM is terminated.",
									MarkdownDescription: "If true, the NIC is deleted when the VM is terminated.",
								},
								"device_number": schema.Int64Attribute{
									Computed:            true,
									Description:         "The device index for the NIC attachment (between `1` and `7`, both included).",
									MarkdownDescription: "The device index for the NIC attachment (between `1` and `7`, both included).",
								},
								"link_nic_id": schema.StringAttribute{
									Computed:            true,
									Description:         "The ID of the NIC to attach.",
									MarkdownDescription: "The ID of the NIC to attach.",
								},
								"state": schema.StringAttribute{
									Computed:            true,
									Description:         "The state of the attachment (`attaching` \\| `attached` \\| `detaching` \\| `detached`).",
									MarkdownDescription: "The state of the attachment (`attaching` \\| `attached` \\| `detaching` \\| `detached`).",
								},
							},
							CustomType: LinkNicType{
								ObjectType: types.ObjectType{
									AttrTypes: LinkNicValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Information about the network interface card (NIC).",
							MarkdownDescription: "Information about the network interface card (NIC).",
						},
						"mac_address": schema.StringAttribute{
							Computed:            true,
							Description:         "The Media Access Control (MAC) address of the NIC.",
							MarkdownDescription: "The Media Access Control (MAC) address of the NIC.",
						},
						"nic_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the NIC.",
							MarkdownDescription: "The ID of the NIC.",
						},
						"nic_link_public_ip": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"public_dns_name": schema.StringAttribute{
									Computed:            true,
									Description:         "The name of the public DNS.",
									MarkdownDescription: "The name of the public DNS.",
								},
								"public_ip": schema.StringAttribute{
									Computed:            true,
									Description:         "The public IP associated with the NIC.",
									MarkdownDescription: "The public IP associated with the NIC.",
								},
							},
							CustomType: NicLinkPublicIpType{
								ObjectType: types.ObjectType{
									AttrTypes: NicLinkPublicIpValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Information about the public IP associated with the NIC.",
							MarkdownDescription: "Information about the public IP associated with the NIC.",
						},
						"nic_security_groups": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"security_group_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the security group.",
										MarkdownDescription: "The ID of the security group.",
									},
									"security_group_name": schema.StringAttribute{
										Computed:            true,
										Description:         "The name of the security group.",
										MarkdownDescription: "The name of the security group.",
									},
								},
								CustomType: NicSecurityGroupsType{
									ObjectType: types.ObjectType{
										AttrTypes: NicSecurityGroupsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "One or more IDs of security groups for the NIC.",
							MarkdownDescription: "One or more IDs of security groups for the NIC.",
						},
						"private_dns_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the private DNS.",
							MarkdownDescription: "The name of the private DNS.",
						},
						"private_ips": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"is_primary": schema.BoolAttribute{
										Computed:            true,
										Description:         "If true, the IP is the primary private IP of the NIC.",
										MarkdownDescription: "If true, the IP is the primary private IP of the NIC.",
									},
									"private_dns_name": schema.StringAttribute{
										Computed:            true,
										Description:         "The name of the private DNS.",
										MarkdownDescription: "The name of the private DNS.",
									},
									"private_ip": schema.StringAttribute{
										Computed:            true,
										Description:         "The private IP.",
										MarkdownDescription: "The private IP.",
									},
									"private_ip_link_public_ip": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{
											"public_dns_name": schema.StringAttribute{
												Computed:            true,
												Description:         "The name of the public DNS.",
												MarkdownDescription: "The name of the public DNS.",
											},
											"public_ip": schema.StringAttribute{
												Computed:            true,
												Description:         "The public IP associated with the NIC.",
												MarkdownDescription: "The public IP associated with the NIC.",
											},
										},
										CustomType: PrivateIpLinkPublicIpType{
											ObjectType: types.ObjectType{
												AttrTypes: PrivateIpLinkPublicIpValue{}.AttributeTypes(ctx),
											},
										},
										Computed:            true,
										Description:         "Information about the public IP associated with the NIC.",
										MarkdownDescription: "Information about the public IP associated with the NIC.",
									},
								},
								CustomType: PrivateIpsType{
									ObjectType: types.ObjectType{
										AttrTypes: PrivateIpsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "The private IP or IPs of the NIC.",
							MarkdownDescription: "The private IP or IPs of the NIC.",
						},
						"state": schema.StringAttribute{
							Computed:            true,
							Description:         "The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).",
							MarkdownDescription: "The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).",
						},
						"subnet_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Subnet for the NIC.",
							MarkdownDescription: "The ID of the Subnet for the NIC.",
						},
						"vpc_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Vpc for the NIC.",
							MarkdownDescription: "The ID of the Vpc for the NIC.",
						},
					},
					CustomType: NicsType{
						ObjectType: types.ObjectType{
							AttrTypes: NicsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "(Vpc only) The network interface cards (NICs) the VMs are attached to.",
				MarkdownDescription: "(Vpc only) The network interface cards (NICs) the VMs are attached to.",
			},
			"os_family": schema.StringAttribute{
				Computed:            true,
				Description:         "Indicates the operating system (OS) of the VM.",
				MarkdownDescription: "Indicates the operating system (OS) of the VM.",
			},
			"placement": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"availability_zone_name": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The name of the Subregion. If you specify this parameter, you must not specify the `Nics` parameter.",
						MarkdownDescription: "The name of the Subregion. If you specify this parameter, you must not specify the `Nics` parameter.",
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
					},
					"tenancy": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The tenancy of the VM (`default`, `dedicated`, or a dedicated group ID).",
						MarkdownDescription: "The tenancy of the VM (`default`, `dedicated`, or a dedicated group ID).",
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
						},
					},
				},
				CustomType: PlacementType{
					ObjectType: types.ObjectType{
						AttrTypes: PlacementValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Information about the placement of the VM.",
				MarkdownDescription: "Information about the placement of the VM.",
			},
			"private_dns_name": schema.StringAttribute{
				Computed:            true,
				Description:         "The name of the private DNS.",
				MarkdownDescription: "The name of the private DNS.",
			},
			"private_ip": schema.StringAttribute{
				Computed:            true,
				Description:         "The primary private IP of the VM.",
				MarkdownDescription: "The primary private IP of the VM.",
			},
			"private_ips": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "One or more private IPs of the VM.",
				MarkdownDescription: "One or more private IPs of the VM.",
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
			},
			"product_codes": schema.ListAttribute{
				ElementType:         types.StringType,
				Computed:            true,
				Description:         "The product codes associated with the Image used to create the VM.",
				MarkdownDescription: "The product codes associated with the Image used to create the VM.",
			},
			"public_dns_name": schema.StringAttribute{
				Computed:            true,
				Description:         "The name of the public DNS.",
				MarkdownDescription: "The name of the public DNS.",
			},
			"public_ip": schema.StringAttribute{
				Computed:            true,
				Description:         "The public IP of the VM.",
				MarkdownDescription: "The public IP of the VM.",
			},
			"reservation_id": schema.StringAttribute{
				Computed:            true,
				Description:         "The reservation ID of the VM.",
				MarkdownDescription: "The reservation ID of the VM.",
			},
			"root_device_name": schema.StringAttribute{
				Computed:            true,
				Description:         "The name of the root device for the VM (for example, `/dev/sda1`).",
				MarkdownDescription: "The name of the root device for the VM (for example, `/dev/sda1`).",
			},
			"root_device_type": schema.StringAttribute{
				Computed:            true,
				Description:         "The type of root device used by the VM (always `bsu`).",
				MarkdownDescription: "The type of root device used by the VM (always `bsu`).",
			},
			"security_group_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "One or more IDs of security group for the VMs.",
				MarkdownDescription: "One or more IDs of security group for the VMs.",
			},
			"security_groups": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "One or more names of security groups for the VMs.",
				MarkdownDescription: "One or more names of security groups for the VMs.",
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
			},
			"state": schema.StringAttribute{
				Computed:            true,
				Description:         "The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).",
				MarkdownDescription: "The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).",
			},
			"state_reason": schema.StringAttribute{
				Computed:            true,
				Description:         "The reason explaining the current state of the VM.",
				MarkdownDescription: "The reason explaining the current state of the VM.",
			},
			"subnet_id": schema.StringAttribute{
				Required:            true,
				Description:         "The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `Nics` parameter.",
				MarkdownDescription: "The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `Nics` parameter.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
			},
			"tags": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required:            true,
							Description:         "The key of the tag, with a minimum of 1 character.",
							MarkdownDescription: "The key of the tag, with a minimum of 1 character.",
						},
						"value": schema.StringAttribute{
							Required:            true,
							Description:         "The value of the tag, between 0 and 255 characters.",
							MarkdownDescription: "The value of the tag, between 0 and 255 characters.",
						},
					},
					CustomType: TagsType{
						ObjectType: types.ObjectType{
							AttrTypes: TagsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "One or more tags associated with the VM.",
				MarkdownDescription: "One or more tags associated with the VM.",
			},
			"type": schema.StringAttribute{
				Required:            true,
				Description:         "The type of VM.",
				MarkdownDescription: "The type of VM.",
			},
			"user_data": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Data or script used to add a specific configuration to the VM. It must be Base64-encoded and is limited to 500 kibibytes (KiB).",
				MarkdownDescription: "Data or script used to add a specific configuration to the VM. It must be Base64-encoded and is limited to 500 kibibytes (KiB).",
			},
			"vm_initiated_shutdown_behavior": schema.StringAttribute{
				Computed:            true,
				Description:         "The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.",
				MarkdownDescription: "The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.",
			},
			"vpc_id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the Vpc in which the VM is running.",
				MarkdownDescription: "The ID of the Vpc in which the VM is running.",
			},
		},
	}
}

type VmModel struct {
	Architecture                types.String   `tfsdk:"architecture"`
	BlockDeviceMappings         types.List     `tfsdk:"block_device_mappings"`
	ClientToken                 types.String   `tfsdk:"client_token"`
	CreationDate                types.String   `tfsdk:"creation_date"`
	DeletionProtection          types.Bool     `tfsdk:"deletion_protection"`
	Hypervisor                  types.String   `tfsdk:"hypervisor"`
	Id                          types.String   `tfsdk:"id"`
	ImageId                     types.String   `tfsdk:"image_id"`
	InitiatedShutdownBehavior   types.String   `tfsdk:"initiated_shutdown_behavior"`
	IsSourceDestChecked         types.Bool     `tfsdk:"is_source_dest_checked"`
	KeypairName                 types.String   `tfsdk:"keypair_name"`
	LaunchNumber                types.Int64    `tfsdk:"launch_number"`
	NestedVirtualization        types.Bool     `tfsdk:"nested_virtualization"`
	Nics                        types.List     `tfsdk:"nics"`
	OsFamily                    types.String   `tfsdk:"os_family"`
	Placement                   PlacementValue `tfsdk:"placement"`
	PrivateDnsName              types.String   `tfsdk:"private_dns_name"`
	PrivateIp                   types.String   `tfsdk:"private_ip"`
	PrivateIps                  types.List     `tfsdk:"private_ips"`
	ProductCodes                types.List     `tfsdk:"product_codes"`
	PublicDnsName               types.String   `tfsdk:"public_dns_name"`
	PublicIp                    types.String   `tfsdk:"public_ip"`
	ReservationId               types.String   `tfsdk:"reservation_id"`
	RootDeviceName              types.String   `tfsdk:"root_device_name"`
	RootDeviceType              types.String   `tfsdk:"root_device_type"`
	SecurityGroupIds            types.List     `tfsdk:"security_group_ids"`
	SecurityGroups              types.List     `tfsdk:"security_groups"`
	State                       types.String   `tfsdk:"state"`
	StateReason                 types.String   `tfsdk:"state_reason"`
	SubnetId                    types.String   `tfsdk:"subnet_id"`
	Tags                        types.Set      `tfsdk:"tags"`
	Type                        types.String   `tfsdk:"type"`
	UserData                    types.String   `tfsdk:"user_data"`
	VmInitiatedShutdownBehavior types.String   `tfsdk:"vm_initiated_shutdown_behavior"`
	VpcId                       types.String   `tfsdk:"vpc_id"`
}

var _ basetypes.ObjectTypable = BlockDeviceMappingsType{}

type BlockDeviceMappingsType struct {
	basetypes.ObjectType
}

func (t BlockDeviceMappingsType) Equal(o attr.Type) bool {
	other, ok := o.(BlockDeviceMappingsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BlockDeviceMappingsType) String() string {
	return "BlockDeviceMappingsType"
}

func (t BlockDeviceMappingsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	bsuAttribute, ok := attributes["bsu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bsu is missing from object`)

		return nil, diags
	}

	bsuVal, ok := bsuAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bsu expected to be basetypes.ObjectValue, was: %T`, bsuAttribute))
	}

	deviceNameAttribute, ok := attributes["device_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_name is missing from object`)

		return nil, diags
	}

	deviceNameVal, ok := deviceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_name expected to be basetypes.StringValue, was: %T`, deviceNameAttribute))
	}

	noDeviceAttribute, ok := attributes["no_device"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`no_device is missing from object`)

		return nil, diags
	}

	noDeviceVal, ok := noDeviceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`no_device expected to be basetypes.StringValue, was: %T`, noDeviceAttribute))
	}

	virtualDeviceNameAttribute, ok := attributes["virtual_device_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`virtual_device_name is missing from object`)

		return nil, diags
	}

	virtualDeviceNameVal, ok := virtualDeviceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`virtual_device_name expected to be basetypes.StringValue, was: %T`, virtualDeviceNameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BlockDeviceMappingsValue{
		Bsu:               bsuVal,
		DeviceName:        deviceNameVal,
		NoDevice:          noDeviceVal,
		VirtualDeviceName: virtualDeviceNameVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewBlockDeviceMappingsValueNull() BlockDeviceMappingsValue {
	return BlockDeviceMappingsValue{
		state: attr.ValueStateNull,
	}
}

func NewBlockDeviceMappingsValueUnknown() BlockDeviceMappingsValue {
	return BlockDeviceMappingsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBlockDeviceMappingsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BlockDeviceMappingsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BlockDeviceMappingsValue Attribute Value",
				"While creating a BlockDeviceMappingsValue value, a missing attribute value was detected. "+
					"A BlockDeviceMappingsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BlockDeviceMappingsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BlockDeviceMappingsValue Attribute Type",
				"While creating a BlockDeviceMappingsValue value, an invalid attribute value was detected. "+
					"A BlockDeviceMappingsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BlockDeviceMappingsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BlockDeviceMappingsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BlockDeviceMappingsValue Attribute Value",
				"While creating a BlockDeviceMappingsValue value, an extra attribute value was detected. "+
					"A BlockDeviceMappingsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BlockDeviceMappingsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBlockDeviceMappingsValueUnknown(), diags
	}

	bsuAttribute, ok := attributes["bsu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bsu is missing from object`)

		return NewBlockDeviceMappingsValueUnknown(), diags
	}

	bsuVal, ok := bsuAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bsu expected to be basetypes.ObjectValue, was: %T`, bsuAttribute))
	}

	deviceNameAttribute, ok := attributes["device_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_name is missing from object`)

		return NewBlockDeviceMappingsValueUnknown(), diags
	}

	deviceNameVal, ok := deviceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_name expected to be basetypes.StringValue, was: %T`, deviceNameAttribute))
	}

	noDeviceAttribute, ok := attributes["no_device"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`no_device is missing from object`)

		return NewBlockDeviceMappingsValueUnknown(), diags
	}

	noDeviceVal, ok := noDeviceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`no_device expected to be basetypes.StringValue, was: %T`, noDeviceAttribute))
	}

	virtualDeviceNameAttribute, ok := attributes["virtual_device_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`virtual_device_name is missing from object`)

		return NewBlockDeviceMappingsValueUnknown(), diags
	}

	virtualDeviceNameVal, ok := virtualDeviceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`virtual_device_name expected to be basetypes.StringValue, was: %T`, virtualDeviceNameAttribute))
	}

	if diags.HasError() {
		return NewBlockDeviceMappingsValueUnknown(), diags
	}

	return BlockDeviceMappingsValue{
		Bsu:               bsuVal,
		DeviceName:        deviceNameVal,
		NoDevice:          noDeviceVal,
		VirtualDeviceName: virtualDeviceNameVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewBlockDeviceMappingsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BlockDeviceMappingsValue {
	object, diags := NewBlockDeviceMappingsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBlockDeviceMappingsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BlockDeviceMappingsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBlockDeviceMappingsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBlockDeviceMappingsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBlockDeviceMappingsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBlockDeviceMappingsValueMust(BlockDeviceMappingsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BlockDeviceMappingsType) ValueType(ctx context.Context) attr.Value {
	return BlockDeviceMappingsValue{}
}

var _ basetypes.ObjectValuable = BlockDeviceMappingsValue{}

type BlockDeviceMappingsValue struct {
	Bsu               basetypes.ObjectValue `tfsdk:"bsu"`
	DeviceName        basetypes.StringValue `tfsdk:"device_name"`
	NoDevice          basetypes.StringValue `tfsdk:"no_device"`
	VirtualDeviceName basetypes.StringValue `tfsdk:"virtual_device_name"`
	state             attr.ValueState
}

func (v BlockDeviceMappingsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["bsu"] = basetypes.ObjectType{
		AttrTypes: BsuValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["device_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["no_device"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["virtual_device_name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Bsu.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bsu"] = val

		val, err = v.DeviceName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["device_name"] = val

		val, err = v.NoDevice.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["no_device"] = val

		val, err = v.VirtualDeviceName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["virtual_device_name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BlockDeviceMappingsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BlockDeviceMappingsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BlockDeviceMappingsValue) String() string {
	return "BlockDeviceMappingsValue"
}

func (v BlockDeviceMappingsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var bsu basetypes.ObjectValue

	if v.Bsu.IsNull() {
		bsu = types.ObjectNull(
			BsuValue{}.AttributeTypes(ctx),
		)
	}

	if v.Bsu.IsUnknown() {
		bsu = types.ObjectUnknown(
			BsuValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Bsu.IsNull() && !v.Bsu.IsUnknown() {
		bsu = types.ObjectValueMust(
			BsuValue{}.AttributeTypes(ctx),
			v.Bsu.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"bsu": basetypes.ObjectType{
			AttrTypes: BsuValue{}.AttributeTypes(ctx),
		},
		"device_name":         basetypes.StringType{},
		"no_device":           basetypes.StringType{},
		"virtual_device_name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"bsu":                 bsu,
			"device_name":         v.DeviceName,
			"no_device":           v.NoDevice,
			"virtual_device_name": v.VirtualDeviceName,
		})

	return objVal, diags
}

func (v BlockDeviceMappingsValue) Equal(o attr.Value) bool {
	other, ok := o.(BlockDeviceMappingsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Bsu.Equal(other.Bsu) {
		return false
	}

	if !v.DeviceName.Equal(other.DeviceName) {
		return false
	}

	if !v.NoDevice.Equal(other.NoDevice) {
		return false
	}

	if !v.VirtualDeviceName.Equal(other.VirtualDeviceName) {
		return false
	}

	return true
}

func (v BlockDeviceMappingsValue) Type(ctx context.Context) attr.Type {
	return BlockDeviceMappingsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BlockDeviceMappingsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bsu": basetypes.ObjectType{
			AttrTypes: BsuValue{}.AttributeTypes(ctx),
		},
		"device_name":         basetypes.StringType{},
		"no_device":           basetypes.StringType{},
		"virtual_device_name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = BsuType{}

type BsuType struct {
	basetypes.ObjectType
}

func (t BsuType) Equal(o attr.Type) bool {
	other, ok := o.(BsuType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BsuType) String() string {
	return "BsuType"
}

func (t BsuType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	deleteOnVmDeletionAttribute, ok := attributes["delete_on_vm_deletion"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delete_on_vm_deletion is missing from object`)

		return nil, diags
	}

	deleteOnVmDeletionVal, ok := deleteOnVmDeletionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delete_on_vm_deletion expected to be basetypes.BoolValue, was: %T`, deleteOnVmDeletionAttribute))
	}

	iopsAttribute, ok := attributes["iops"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`iops is missing from object`)

		return nil, diags
	}

	iopsVal, ok := iopsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`iops expected to be basetypes.Int64Value, was: %T`, iopsAttribute))
	}

	linkDateAttribute, ok := attributes["link_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_date is missing from object`)

		return nil, diags
	}

	linkDateVal, ok := linkDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_date expected to be basetypes.StringValue, was: %T`, linkDateAttribute))
	}

	snapshotIdAttribute, ok := attributes["snapshot_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`snapshot_id is missing from object`)

		return nil, diags
	}

	snapshotIdVal, ok := snapshotIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`snapshot_id expected to be basetypes.StringValue, was: %T`, snapshotIdAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	volumeIdAttribute, ok := attributes["volume_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_id is missing from object`)

		return nil, diags
	}

	volumeIdVal, ok := volumeIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_id expected to be basetypes.StringValue, was: %T`, volumeIdAttribute))
	}

	volumeSizeAttribute, ok := attributes["volume_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_size is missing from object`)

		return nil, diags
	}

	volumeSizeVal, ok := volumeSizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_size expected to be basetypes.Int64Value, was: %T`, volumeSizeAttribute))
	}

	volumeTypeAttribute, ok := attributes["volume_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_type is missing from object`)

		return nil, diags
	}

	volumeTypeVal, ok := volumeTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_type expected to be basetypes.StringValue, was: %T`, volumeTypeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BsuValue{
		DeleteOnVmDeletion: deleteOnVmDeletionVal,
		Iops:               iopsVal,
		LinkDate:           linkDateVal,
		SnapshotId:         snapshotIdVal,
		State:              stateVal,
		VolumeId:           volumeIdVal,
		VolumeSize:         volumeSizeVal,
		VolumeType:         volumeTypeVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewBsuValueNull() BsuValue {
	return BsuValue{
		state: attr.ValueStateNull,
	}
}

func NewBsuValueUnknown() BsuValue {
	return BsuValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBsuValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BsuValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BsuValue Attribute Value",
				"While creating a BsuValue value, a missing attribute value was detected. "+
					"A BsuValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BsuValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BsuValue Attribute Type",
				"While creating a BsuValue value, an invalid attribute value was detected. "+
					"A BsuValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BsuValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BsuValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BsuValue Attribute Value",
				"While creating a BsuValue value, an extra attribute value was detected. "+
					"A BsuValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BsuValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBsuValueUnknown(), diags
	}

	deleteOnVmDeletionAttribute, ok := attributes["delete_on_vm_deletion"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delete_on_vm_deletion is missing from object`)

		return NewBsuValueUnknown(), diags
	}

	deleteOnVmDeletionVal, ok := deleteOnVmDeletionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delete_on_vm_deletion expected to be basetypes.BoolValue, was: %T`, deleteOnVmDeletionAttribute))
	}

	iopsAttribute, ok := attributes["iops"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`iops is missing from object`)

		return NewBsuValueUnknown(), diags
	}

	iopsVal, ok := iopsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`iops expected to be basetypes.Int64Value, was: %T`, iopsAttribute))
	}

	linkDateAttribute, ok := attributes["link_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_date is missing from object`)

		return NewBsuValueUnknown(), diags
	}

	linkDateVal, ok := linkDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_date expected to be basetypes.StringValue, was: %T`, linkDateAttribute))
	}

	snapshotIdAttribute, ok := attributes["snapshot_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`snapshot_id is missing from object`)

		return NewBsuValueUnknown(), diags
	}

	snapshotIdVal, ok := snapshotIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`snapshot_id expected to be basetypes.StringValue, was: %T`, snapshotIdAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewBsuValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	volumeIdAttribute, ok := attributes["volume_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_id is missing from object`)

		return NewBsuValueUnknown(), diags
	}

	volumeIdVal, ok := volumeIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_id expected to be basetypes.StringValue, was: %T`, volumeIdAttribute))
	}

	volumeSizeAttribute, ok := attributes["volume_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_size is missing from object`)

		return NewBsuValueUnknown(), diags
	}

	volumeSizeVal, ok := volumeSizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_size expected to be basetypes.Int64Value, was: %T`, volumeSizeAttribute))
	}

	volumeTypeAttribute, ok := attributes["volume_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volume_type is missing from object`)

		return NewBsuValueUnknown(), diags
	}

	volumeTypeVal, ok := volumeTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volume_type expected to be basetypes.StringValue, was: %T`, volumeTypeAttribute))
	}

	if diags.HasError() {
		return NewBsuValueUnknown(), diags
	}

	return BsuValue{
		DeleteOnVmDeletion: deleteOnVmDeletionVal,
		Iops:               iopsVal,
		LinkDate:           linkDateVal,
		SnapshotId:         snapshotIdVal,
		State:              stateVal,
		VolumeId:           volumeIdVal,
		VolumeSize:         volumeSizeVal,
		VolumeType:         volumeTypeVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewBsuValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BsuValue {
	object, diags := NewBsuValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBsuValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BsuType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBsuValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBsuValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBsuValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBsuValueMust(BsuValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BsuType) ValueType(ctx context.Context) attr.Value {
	return BsuValue{}
}

var _ basetypes.ObjectValuable = BsuValue{}

type BsuValue struct {
	DeleteOnVmDeletion basetypes.BoolValue   `tfsdk:"delete_on_vm_deletion"`
	Iops               basetypes.Int64Value  `tfsdk:"iops"`
	LinkDate           basetypes.StringValue `tfsdk:"link_date"`
	SnapshotId         basetypes.StringValue `tfsdk:"snapshot_id"`
	State              basetypes.StringValue `tfsdk:"state"`
	VolumeId           basetypes.StringValue `tfsdk:"volume_id"`
	VolumeSize         basetypes.Int64Value  `tfsdk:"volume_size"`
	VolumeType         basetypes.StringValue `tfsdk:"volume_type"`
	state              attr.ValueState
}

func (v BsuValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 8)

	var val tftypes.Value
	var err error

	attrTypes["delete_on_vm_deletion"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["iops"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["link_date"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["snapshot_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["volume_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["volume_size"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["volume_type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 8)

		val, err = v.DeleteOnVmDeletion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["delete_on_vm_deletion"] = val

		val, err = v.Iops.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["iops"] = val

		val, err = v.LinkDate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["link_date"] = val

		val, err = v.SnapshotId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["snapshot_id"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.VolumeId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["volume_id"] = val

		val, err = v.VolumeSize.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["volume_size"] = val

		val, err = v.VolumeType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["volume_type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BsuValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BsuValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BsuValue) String() string {
	return "BsuValue"
}

func (v BsuValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"delete_on_vm_deletion": basetypes.BoolType{},
		"iops":                  basetypes.Int64Type{},
		"link_date":             basetypes.StringType{},
		"snapshot_id":           basetypes.StringType{},
		"state":                 basetypes.StringType{},
		"volume_id":             basetypes.StringType{},
		"volume_size":           basetypes.Int64Type{},
		"volume_type":           basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"delete_on_vm_deletion": v.DeleteOnVmDeletion,
			"iops":                  v.Iops,
			"link_date":             v.LinkDate,
			"snapshot_id":           v.SnapshotId,
			"state":                 v.State,
			"volume_id":             v.VolumeId,
			"volume_size":           v.VolumeSize,
			"volume_type":           v.VolumeType,
		})

	return objVal, diags
}

func (v BsuValue) Equal(o attr.Value) bool {
	other, ok := o.(BsuValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DeleteOnVmDeletion.Equal(other.DeleteOnVmDeletion) {
		return false
	}

	if !v.Iops.Equal(other.Iops) {
		return false
	}

	if !v.LinkDate.Equal(other.LinkDate) {
		return false
	}

	if !v.SnapshotId.Equal(other.SnapshotId) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.VolumeId.Equal(other.VolumeId) {
		return false
	}

	if !v.VolumeSize.Equal(other.VolumeSize) {
		return false
	}

	if !v.VolumeType.Equal(other.VolumeType) {
		return false
	}

	return true
}

func (v BsuValue) Type(ctx context.Context) attr.Type {
	return BsuType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BsuValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"delete_on_vm_deletion": basetypes.BoolType{},
		"iops":                  basetypes.Int64Type{},
		"link_date":             basetypes.StringType{},
		"snapshot_id":           basetypes.StringType{},
		"state":                 basetypes.StringType{},
		"volume_id":             basetypes.StringType{},
		"volume_size":           basetypes.Int64Type{},
		"volume_type":           basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = NicsType{}

type NicsType struct {
	basetypes.ObjectType
}

func (t NicsType) Equal(o attr.Type) bool {
	other, ok := o.(NicsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t NicsType) String() string {
	return "NicsType"
}

func (t NicsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	isSourceDestCheckedAttribute, ok := attributes["is_source_dest_checked"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_source_dest_checked is missing from object`)

		return nil, diags
	}

	isSourceDestCheckedVal, ok := isSourceDestCheckedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_source_dest_checked expected to be basetypes.BoolValue, was: %T`, isSourceDestCheckedAttribute))
	}

	linkNicAttribute, ok := attributes["link_nic"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_nic is missing from object`)

		return nil, diags
	}

	linkNicVal, ok := linkNicAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_nic expected to be basetypes.ObjectValue, was: %T`, linkNicAttribute))
	}

	macAddressAttribute, ok := attributes["mac_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac_address is missing from object`)

		return nil, diags
	}

	macAddressVal, ok := macAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac_address expected to be basetypes.StringValue, was: %T`, macAddressAttribute))
	}

	nicIdAttribute, ok := attributes["nic_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nic_id is missing from object`)

		return nil, diags
	}

	nicIdVal, ok := nicIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nic_id expected to be basetypes.StringValue, was: %T`, nicIdAttribute))
	}

	nicLinkPublicIpAttribute, ok := attributes["nic_link_public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nic_link_public_ip is missing from object`)

		return nil, diags
	}

	nicLinkPublicIpVal, ok := nicLinkPublicIpAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nic_link_public_ip expected to be basetypes.ObjectValue, was: %T`, nicLinkPublicIpAttribute))
	}

	nicSecurityGroupsAttribute, ok := attributes["nic_security_groups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nic_security_groups is missing from object`)

		return nil, diags
	}

	nicSecurityGroupsVal, ok := nicSecurityGroupsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nic_security_groups expected to be basetypes.ListValue, was: %T`, nicSecurityGroupsAttribute))
	}

	privateDnsNameAttribute, ok := attributes["private_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_dns_name is missing from object`)

		return nil, diags
	}

	privateDnsNameVal, ok := privateDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_dns_name expected to be basetypes.StringValue, was: %T`, privateDnsNameAttribute))
	}

	privateIpsAttribute, ok := attributes["private_ips"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_ips is missing from object`)

		return nil, diags
	}

	privateIpsVal, ok := privateIpsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_ips expected to be basetypes.ListValue, was: %T`, privateIpsAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	subnetIdAttribute, ok := attributes["subnet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subnet_id is missing from object`)

		return nil, diags
	}

	subnetIdVal, ok := subnetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subnet_id expected to be basetypes.StringValue, was: %T`, subnetIdAttribute))
	}

	vpcIdAttribute, ok := attributes["vpc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vpc_id is missing from object`)

		return nil, diags
	}

	vpcIdVal, ok := vpcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vpc_id expected to be basetypes.StringValue, was: %T`, vpcIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return NicsValue{
		Description:         descriptionVal,
		IsSourceDestChecked: isSourceDestCheckedVal,
		LinkNic:             linkNicVal,
		MacAddress:          macAddressVal,
		NicId:               nicIdVal,
		NicLinkPublicIp:     nicLinkPublicIpVal,
		NicSecurityGroups:   nicSecurityGroupsVal,
		PrivateDnsName:      privateDnsNameVal,
		PrivateIps:          privateIpsVal,
		State:               stateVal,
		SubnetId:            subnetIdVal,
		VpcId:               vpcIdVal,
		state:               attr.ValueStateKnown,
	}, diags
}

func NewNicsValueNull() NicsValue {
	return NicsValue{
		state: attr.ValueStateNull,
	}
}

func NewNicsValueUnknown() NicsValue {
	return NicsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewNicsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (NicsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing NicsValue Attribute Value",
				"While creating a NicsValue value, a missing attribute value was detected. "+
					"A NicsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NicsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid NicsValue Attribute Type",
				"While creating a NicsValue value, an invalid attribute value was detected. "+
					"A NicsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NicsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("NicsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra NicsValue Attribute Value",
				"While creating a NicsValue value, an extra attribute value was detected. "+
					"A NicsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra NicsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewNicsValueUnknown(), diags
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewNicsValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	isSourceDestCheckedAttribute, ok := attributes["is_source_dest_checked"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_source_dest_checked is missing from object`)

		return NewNicsValueUnknown(), diags
	}

	isSourceDestCheckedVal, ok := isSourceDestCheckedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_source_dest_checked expected to be basetypes.BoolValue, was: %T`, isSourceDestCheckedAttribute))
	}

	linkNicAttribute, ok := attributes["link_nic"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_nic is missing from object`)

		return NewNicsValueUnknown(), diags
	}

	linkNicVal, ok := linkNicAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_nic expected to be basetypes.ObjectValue, was: %T`, linkNicAttribute))
	}

	macAddressAttribute, ok := attributes["mac_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac_address is missing from object`)

		return NewNicsValueUnknown(), diags
	}

	macAddressVal, ok := macAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac_address expected to be basetypes.StringValue, was: %T`, macAddressAttribute))
	}

	nicIdAttribute, ok := attributes["nic_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nic_id is missing from object`)

		return NewNicsValueUnknown(), diags
	}

	nicIdVal, ok := nicIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nic_id expected to be basetypes.StringValue, was: %T`, nicIdAttribute))
	}

	nicLinkPublicIpAttribute, ok := attributes["nic_link_public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nic_link_public_ip is missing from object`)

		return NewNicsValueUnknown(), diags
	}

	nicLinkPublicIpVal, ok := nicLinkPublicIpAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nic_link_public_ip expected to be basetypes.ObjectValue, was: %T`, nicLinkPublicIpAttribute))
	}

	nicSecurityGroupsAttribute, ok := attributes["nic_security_groups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nic_security_groups is missing from object`)

		return NewNicsValueUnknown(), diags
	}

	nicSecurityGroupsVal, ok := nicSecurityGroupsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nic_security_groups expected to be basetypes.ListValue, was: %T`, nicSecurityGroupsAttribute))
	}

	privateDnsNameAttribute, ok := attributes["private_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_dns_name is missing from object`)

		return NewNicsValueUnknown(), diags
	}

	privateDnsNameVal, ok := privateDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_dns_name expected to be basetypes.StringValue, was: %T`, privateDnsNameAttribute))
	}

	privateIpsAttribute, ok := attributes["private_ips"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_ips is missing from object`)

		return NewNicsValueUnknown(), diags
	}

	privateIpsVal, ok := privateIpsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_ips expected to be basetypes.ListValue, was: %T`, privateIpsAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewNicsValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	subnetIdAttribute, ok := attributes["subnet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subnet_id is missing from object`)

		return NewNicsValueUnknown(), diags
	}

	subnetIdVal, ok := subnetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subnet_id expected to be basetypes.StringValue, was: %T`, subnetIdAttribute))
	}

	vpcIdAttribute, ok := attributes["vpc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vpc_id is missing from object`)

		return NewNicsValueUnknown(), diags
	}

	vpcIdVal, ok := vpcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vpc_id expected to be basetypes.StringValue, was: %T`, vpcIdAttribute))
	}

	if diags.HasError() {
		return NewNicsValueUnknown(), diags
	}

	return NicsValue{
		Description:         descriptionVal,
		IsSourceDestChecked: isSourceDestCheckedVal,
		LinkNic:             linkNicVal,
		MacAddress:          macAddressVal,
		NicId:               nicIdVal,
		NicLinkPublicIp:     nicLinkPublicIpVal,
		NicSecurityGroups:   nicSecurityGroupsVal,
		PrivateDnsName:      privateDnsNameVal,
		PrivateIps:          privateIpsVal,
		State:               stateVal,
		SubnetId:            subnetIdVal,
		VpcId:               vpcIdVal,
		state:               attr.ValueStateKnown,
	}, diags
}

func NewNicsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) NicsValue {
	object, diags := NewNicsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewNicsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t NicsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewNicsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewNicsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewNicsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewNicsValueMust(NicsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t NicsType) ValueType(ctx context.Context) attr.Value {
	return NicsValue{}
}

var _ basetypes.ObjectValuable = NicsValue{}

type NicsValue struct {
	Description         basetypes.StringValue `tfsdk:"description"`
	IsSourceDestChecked basetypes.BoolValue   `tfsdk:"is_source_dest_checked"`
	LinkNic             basetypes.ObjectValue `tfsdk:"link_nic"`
	MacAddress          basetypes.StringValue `tfsdk:"mac_address"`
	NicId               basetypes.StringValue `tfsdk:"nic_id"`
	NicLinkPublicIp     basetypes.ObjectValue `tfsdk:"nic_link_public_ip"`
	NicSecurityGroups   basetypes.ListValue   `tfsdk:"nic_security_groups"`
	PrivateDnsName      basetypes.StringValue `tfsdk:"private_dns_name"`
	PrivateIps          basetypes.ListValue   `tfsdk:"private_ips"`
	State               basetypes.StringValue `tfsdk:"state"`
	SubnetId            basetypes.StringValue `tfsdk:"subnet_id"`
	VpcId               basetypes.StringValue `tfsdk:"vpc_id"`
	state               attr.ValueState
}

func (v NicsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 12)

	var val tftypes.Value
	var err error

	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["is_source_dest_checked"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["link_nic"] = basetypes.ObjectType{
		AttrTypes: LinkNicValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["mac_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["nic_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["nic_link_public_ip"] = basetypes.ObjectType{
		AttrTypes: NicLinkPublicIpValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["nic_security_groups"] = basetypes.ListType{
		ElemType: NicSecurityGroupsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["private_dns_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["private_ips"] = basetypes.ListType{
		ElemType: PrivateIpsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["subnet_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vpc_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 12)

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.IsSourceDestChecked.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_source_dest_checked"] = val

		val, err = v.LinkNic.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["link_nic"] = val

		val, err = v.MacAddress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mac_address"] = val

		val, err = v.NicId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["nic_id"] = val

		val, err = v.NicLinkPublicIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["nic_link_public_ip"] = val

		val, err = v.NicSecurityGroups.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["nic_security_groups"] = val

		val, err = v.PrivateDnsName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_dns_name"] = val

		val, err = v.PrivateIps.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_ips"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.SubnetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subnet_id"] = val

		val, err = v.VpcId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vpc_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v NicsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v NicsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v NicsValue) String() string {
	return "NicsValue"
}

func (v NicsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var linkNic basetypes.ObjectValue

	if v.LinkNic.IsNull() {
		linkNic = types.ObjectNull(
			LinkNicValue{}.AttributeTypes(ctx),
		)
	}

	if v.LinkNic.IsUnknown() {
		linkNic = types.ObjectUnknown(
			LinkNicValue{}.AttributeTypes(ctx),
		)
	}

	if !v.LinkNic.IsNull() && !v.LinkNic.IsUnknown() {
		linkNic = types.ObjectValueMust(
			LinkNicValue{}.AttributeTypes(ctx),
			v.LinkNic.Attributes(),
		)
	}

	var nicLinkPublicIp basetypes.ObjectValue

	if v.NicLinkPublicIp.IsNull() {
		nicLinkPublicIp = types.ObjectNull(
			NicLinkPublicIpValue{}.AttributeTypes(ctx),
		)
	}

	if v.NicLinkPublicIp.IsUnknown() {
		nicLinkPublicIp = types.ObjectUnknown(
			NicLinkPublicIpValue{}.AttributeTypes(ctx),
		)
	}

	if !v.NicLinkPublicIp.IsNull() && !v.NicLinkPublicIp.IsUnknown() {
		nicLinkPublicIp = types.ObjectValueMust(
			NicLinkPublicIpValue{}.AttributeTypes(ctx),
			v.NicLinkPublicIp.Attributes(),
		)
	}

	nicSecurityGroups := types.ListValueMust(
		NicSecurityGroupsType{
			basetypes.ObjectType{
				AttrTypes: NicSecurityGroupsValue{}.AttributeTypes(ctx),
			},
		},
		v.NicSecurityGroups.Elements(),
	)

	if v.NicSecurityGroups.IsNull() {
		nicSecurityGroups = types.ListNull(
			NicSecurityGroupsType{
				basetypes.ObjectType{
					AttrTypes: NicSecurityGroupsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.NicSecurityGroups.IsUnknown() {
		nicSecurityGroups = types.ListUnknown(
			NicSecurityGroupsType{
				basetypes.ObjectType{
					AttrTypes: NicSecurityGroupsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	privateIps := types.ListValueMust(
		PrivateIpsType{
			basetypes.ObjectType{
				AttrTypes: PrivateIpsValue{}.AttributeTypes(ctx),
			},
		},
		v.PrivateIps.Elements(),
	)

	if v.PrivateIps.IsNull() {
		privateIps = types.ListNull(
			PrivateIpsType{
				basetypes.ObjectType{
					AttrTypes: PrivateIpsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.PrivateIps.IsUnknown() {
		privateIps = types.ListUnknown(
			PrivateIpsType{
				basetypes.ObjectType{
					AttrTypes: PrivateIpsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"description":            basetypes.StringType{},
		"is_source_dest_checked": basetypes.BoolType{},
		"link_nic": basetypes.ObjectType{
			AttrTypes: LinkNicValue{}.AttributeTypes(ctx),
		},
		"mac_address": basetypes.StringType{},
		"nic_id":      basetypes.StringType{},
		"nic_link_public_ip": basetypes.ObjectType{
			AttrTypes: NicLinkPublicIpValue{}.AttributeTypes(ctx),
		},
		"nic_security_groups": basetypes.ListType{
			ElemType: NicSecurityGroupsValue{}.Type(ctx),
		},
		"private_dns_name": basetypes.StringType{},
		"private_ips": basetypes.ListType{
			ElemType: PrivateIpsValue{}.Type(ctx),
		},
		"state":     basetypes.StringType{},
		"subnet_id": basetypes.StringType{},
		"vpc_id":    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"description":            v.Description,
			"is_source_dest_checked": v.IsSourceDestChecked,
			"link_nic":               linkNic,
			"mac_address":            v.MacAddress,
			"nic_id":                 v.NicId,
			"nic_link_public_ip":     nicLinkPublicIp,
			"nic_security_groups":    nicSecurityGroups,
			"private_dns_name":       v.PrivateDnsName,
			"private_ips":            privateIps,
			"state":                  v.State,
			"subnet_id":              v.SubnetId,
			"vpc_id":                 v.VpcId,
		})

	return objVal, diags
}

func (v NicsValue) Equal(o attr.Value) bool {
	other, ok := o.(NicsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.IsSourceDestChecked.Equal(other.IsSourceDestChecked) {
		return false
	}

	if !v.LinkNic.Equal(other.LinkNic) {
		return false
	}

	if !v.MacAddress.Equal(other.MacAddress) {
		return false
	}

	if !v.NicId.Equal(other.NicId) {
		return false
	}

	if !v.NicLinkPublicIp.Equal(other.NicLinkPublicIp) {
		return false
	}

	if !v.NicSecurityGroups.Equal(other.NicSecurityGroups) {
		return false
	}

	if !v.PrivateDnsName.Equal(other.PrivateDnsName) {
		return false
	}

	if !v.PrivateIps.Equal(other.PrivateIps) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.SubnetId.Equal(other.SubnetId) {
		return false
	}

	if !v.VpcId.Equal(other.VpcId) {
		return false
	}

	return true
}

func (v NicsValue) Type(ctx context.Context) attr.Type {
	return NicsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v NicsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"description":            basetypes.StringType{},
		"is_source_dest_checked": basetypes.BoolType{},
		"link_nic": basetypes.ObjectType{
			AttrTypes: LinkNicValue{}.AttributeTypes(ctx),
		},
		"mac_address": basetypes.StringType{},
		"nic_id":      basetypes.StringType{},
		"nic_link_public_ip": basetypes.ObjectType{
			AttrTypes: NicLinkPublicIpValue{}.AttributeTypes(ctx),
		},
		"nic_security_groups": basetypes.ListType{
			ElemType: NicSecurityGroupsValue{}.Type(ctx),
		},
		"private_dns_name": basetypes.StringType{},
		"private_ips": basetypes.ListType{
			ElemType: PrivateIpsValue{}.Type(ctx),
		},
		"state":     basetypes.StringType{},
		"subnet_id": basetypes.StringType{},
		"vpc_id":    basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = LinkNicType{}

type LinkNicType struct {
	basetypes.ObjectType
}

func (t LinkNicType) Equal(o attr.Type) bool {
	other, ok := o.(LinkNicType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LinkNicType) String() string {
	return "LinkNicType"
}

func (t LinkNicType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	deleteOnVmDeletionAttribute, ok := attributes["delete_on_vm_deletion"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delete_on_vm_deletion is missing from object`)

		return nil, diags
	}

	deleteOnVmDeletionVal, ok := deleteOnVmDeletionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delete_on_vm_deletion expected to be basetypes.BoolValue, was: %T`, deleteOnVmDeletionAttribute))
	}

	deviceNumberAttribute, ok := attributes["device_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_number is missing from object`)

		return nil, diags
	}

	deviceNumberVal, ok := deviceNumberAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_number expected to be basetypes.Int64Value, was: %T`, deviceNumberAttribute))
	}

	linkNicIdAttribute, ok := attributes["link_nic_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_nic_id is missing from object`)

		return nil, diags
	}

	linkNicIdVal, ok := linkNicIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_nic_id expected to be basetypes.StringValue, was: %T`, linkNicIdAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LinkNicValue{
		DeleteOnVmDeletion: deleteOnVmDeletionVal,
		DeviceNumber:       deviceNumberVal,
		LinkNicId:          linkNicIdVal,
		State:              stateVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewLinkNicValueNull() LinkNicValue {
	return LinkNicValue{
		state: attr.ValueStateNull,
	}
}

func NewLinkNicValueUnknown() LinkNicValue {
	return LinkNicValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLinkNicValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LinkNicValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LinkNicValue Attribute Value",
				"While creating a LinkNicValue value, a missing attribute value was detected. "+
					"A LinkNicValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinkNicValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LinkNicValue Attribute Type",
				"While creating a LinkNicValue value, an invalid attribute value was detected. "+
					"A LinkNicValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinkNicValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LinkNicValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LinkNicValue Attribute Value",
				"While creating a LinkNicValue value, an extra attribute value was detected. "+
					"A LinkNicValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LinkNicValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLinkNicValueUnknown(), diags
	}

	deleteOnVmDeletionAttribute, ok := attributes["delete_on_vm_deletion"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delete_on_vm_deletion is missing from object`)

		return NewLinkNicValueUnknown(), diags
	}

	deleteOnVmDeletionVal, ok := deleteOnVmDeletionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delete_on_vm_deletion expected to be basetypes.BoolValue, was: %T`, deleteOnVmDeletionAttribute))
	}

	deviceNumberAttribute, ok := attributes["device_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_number is missing from object`)

		return NewLinkNicValueUnknown(), diags
	}

	deviceNumberVal, ok := deviceNumberAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_number expected to be basetypes.Int64Value, was: %T`, deviceNumberAttribute))
	}

	linkNicIdAttribute, ok := attributes["link_nic_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_nic_id is missing from object`)

		return NewLinkNicValueUnknown(), diags
	}

	linkNicIdVal, ok := linkNicIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_nic_id expected to be basetypes.StringValue, was: %T`, linkNicIdAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewLinkNicValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	if diags.HasError() {
		return NewLinkNicValueUnknown(), diags
	}

	return LinkNicValue{
		DeleteOnVmDeletion: deleteOnVmDeletionVal,
		DeviceNumber:       deviceNumberVal,
		LinkNicId:          linkNicIdVal,
		State:              stateVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewLinkNicValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LinkNicValue {
	object, diags := NewLinkNicValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLinkNicValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LinkNicType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLinkNicValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLinkNicValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLinkNicValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLinkNicValueMust(LinkNicValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LinkNicType) ValueType(ctx context.Context) attr.Value {
	return LinkNicValue{}
}

var _ basetypes.ObjectValuable = LinkNicValue{}

type LinkNicValue struct {
	DeleteOnVmDeletion basetypes.BoolValue   `tfsdk:"delete_on_vm_deletion"`
	DeviceNumber       basetypes.Int64Value  `tfsdk:"device_number"`
	LinkNicId          basetypes.StringValue `tfsdk:"link_nic_id"`
	State              basetypes.StringValue `tfsdk:"state"`
	state              attr.ValueState
}

func (v LinkNicValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["delete_on_vm_deletion"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["device_number"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["link_nic_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.DeleteOnVmDeletion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["delete_on_vm_deletion"] = val

		val, err = v.DeviceNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["device_number"] = val

		val, err = v.LinkNicId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["link_nic_id"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LinkNicValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LinkNicValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LinkNicValue) String() string {
	return "LinkNicValue"
}

func (v LinkNicValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"delete_on_vm_deletion": basetypes.BoolType{},
		"device_number":         basetypes.Int64Type{},
		"link_nic_id":           basetypes.StringType{},
		"state":                 basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"delete_on_vm_deletion": v.DeleteOnVmDeletion,
			"device_number":         v.DeviceNumber,
			"link_nic_id":           v.LinkNicId,
			"state":                 v.State,
		})

	return objVal, diags
}

func (v LinkNicValue) Equal(o attr.Value) bool {
	other, ok := o.(LinkNicValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DeleteOnVmDeletion.Equal(other.DeleteOnVmDeletion) {
		return false
	}

	if !v.DeviceNumber.Equal(other.DeviceNumber) {
		return false
	}

	if !v.LinkNicId.Equal(other.LinkNicId) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	return true
}

func (v LinkNicValue) Type(ctx context.Context) attr.Type {
	return LinkNicType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LinkNicValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"delete_on_vm_deletion": basetypes.BoolType{},
		"device_number":         basetypes.Int64Type{},
		"link_nic_id":           basetypes.StringType{},
		"state":                 basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = NicLinkPublicIpType{}

type NicLinkPublicIpType struct {
	basetypes.ObjectType
}

func (t NicLinkPublicIpType) Equal(o attr.Type) bool {
	other, ok := o.(NicLinkPublicIpType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t NicLinkPublicIpType) String() string {
	return "NicLinkPublicIpType"
}

func (t NicLinkPublicIpType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	publicDnsNameAttribute, ok := attributes["public_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_dns_name is missing from object`)

		return nil, diags
	}

	publicDnsNameVal, ok := publicDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_dns_name expected to be basetypes.StringValue, was: %T`, publicDnsNameAttribute))
	}

	publicIpAttribute, ok := attributes["public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_ip is missing from object`)

		return nil, diags
	}

	publicIpVal, ok := publicIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_ip expected to be basetypes.StringValue, was: %T`, publicIpAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return NicLinkPublicIpValue{
		PublicDnsName: publicDnsNameVal,
		PublicIp:      publicIpVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewNicLinkPublicIpValueNull() NicLinkPublicIpValue {
	return NicLinkPublicIpValue{
		state: attr.ValueStateNull,
	}
}

func NewNicLinkPublicIpValueUnknown() NicLinkPublicIpValue {
	return NicLinkPublicIpValue{
		state: attr.ValueStateUnknown,
	}
}

func NewNicLinkPublicIpValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (NicLinkPublicIpValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing NicLinkPublicIpValue Attribute Value",
				"While creating a NicLinkPublicIpValue value, a missing attribute value was detected. "+
					"A NicLinkPublicIpValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NicLinkPublicIpValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid NicLinkPublicIpValue Attribute Type",
				"While creating a NicLinkPublicIpValue value, an invalid attribute value was detected. "+
					"A NicLinkPublicIpValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NicLinkPublicIpValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("NicLinkPublicIpValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra NicLinkPublicIpValue Attribute Value",
				"While creating a NicLinkPublicIpValue value, an extra attribute value was detected. "+
					"A NicLinkPublicIpValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra NicLinkPublicIpValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewNicLinkPublicIpValueUnknown(), diags
	}

	publicDnsNameAttribute, ok := attributes["public_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_dns_name is missing from object`)

		return NewNicLinkPublicIpValueUnknown(), diags
	}

	publicDnsNameVal, ok := publicDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_dns_name expected to be basetypes.StringValue, was: %T`, publicDnsNameAttribute))
	}

	publicIpAttribute, ok := attributes["public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_ip is missing from object`)

		return NewNicLinkPublicIpValueUnknown(), diags
	}

	publicIpVal, ok := publicIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_ip expected to be basetypes.StringValue, was: %T`, publicIpAttribute))
	}

	if diags.HasError() {
		return NewNicLinkPublicIpValueUnknown(), diags
	}

	return NicLinkPublicIpValue{
		PublicDnsName: publicDnsNameVal,
		PublicIp:      publicIpVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewNicLinkPublicIpValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) NicLinkPublicIpValue {
	object, diags := NewNicLinkPublicIpValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewNicLinkPublicIpValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t NicLinkPublicIpType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewNicLinkPublicIpValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewNicLinkPublicIpValueUnknown(), nil
	}

	if in.IsNull() {
		return NewNicLinkPublicIpValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewNicLinkPublicIpValueMust(NicLinkPublicIpValue{}.AttributeTypes(ctx), attributes), nil
}

func (t NicLinkPublicIpType) ValueType(ctx context.Context) attr.Value {
	return NicLinkPublicIpValue{}
}

var _ basetypes.ObjectValuable = NicLinkPublicIpValue{}

type NicLinkPublicIpValue struct {
	PublicDnsName basetypes.StringValue `tfsdk:"public_dns_name"`
	PublicIp      basetypes.StringValue `tfsdk:"public_ip"`
	state         attr.ValueState
}

func (v NicLinkPublicIpValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["public_dns_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["public_ip"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.PublicDnsName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["public_dns_name"] = val

		val, err = v.PublicIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["public_ip"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v NicLinkPublicIpValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v NicLinkPublicIpValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v NicLinkPublicIpValue) String() string {
	return "NicLinkPublicIpValue"
}

func (v NicLinkPublicIpValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"public_dns_name": basetypes.StringType{},
		"public_ip":       basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"public_dns_name": v.PublicDnsName,
			"public_ip":       v.PublicIp,
		})

	return objVal, diags
}

func (v NicLinkPublicIpValue) Equal(o attr.Value) bool {
	other, ok := o.(NicLinkPublicIpValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.PublicDnsName.Equal(other.PublicDnsName) {
		return false
	}

	if !v.PublicIp.Equal(other.PublicIp) {
		return false
	}

	return true
}

func (v NicLinkPublicIpValue) Type(ctx context.Context) attr.Type {
	return NicLinkPublicIpType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v NicLinkPublicIpValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"public_dns_name": basetypes.StringType{},
		"public_ip":       basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = NicSecurityGroupsType{}

type NicSecurityGroupsType struct {
	basetypes.ObjectType
}

func (t NicSecurityGroupsType) Equal(o attr.Type) bool {
	other, ok := o.(NicSecurityGroupsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t NicSecurityGroupsType) String() string {
	return "NicSecurityGroupsType"
}

func (t NicSecurityGroupsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	securityGroupIdAttribute, ok := attributes["security_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_id is missing from object`)

		return nil, diags
	}

	securityGroupIdVal, ok := securityGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_id expected to be basetypes.StringValue, was: %T`, securityGroupIdAttribute))
	}

	securityGroupNameAttribute, ok := attributes["security_group_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_name is missing from object`)

		return nil, diags
	}

	securityGroupNameVal, ok := securityGroupNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_name expected to be basetypes.StringValue, was: %T`, securityGroupNameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return NicSecurityGroupsValue{
		SecurityGroupId:   securityGroupIdVal,
		SecurityGroupName: securityGroupNameVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewNicSecurityGroupsValueNull() NicSecurityGroupsValue {
	return NicSecurityGroupsValue{
		state: attr.ValueStateNull,
	}
}

func NewNicSecurityGroupsValueUnknown() NicSecurityGroupsValue {
	return NicSecurityGroupsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewNicSecurityGroupsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (NicSecurityGroupsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing NicSecurityGroupsValue Attribute Value",
				"While creating a NicSecurityGroupsValue value, a missing attribute value was detected. "+
					"A NicSecurityGroupsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NicSecurityGroupsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid NicSecurityGroupsValue Attribute Type",
				"While creating a NicSecurityGroupsValue value, an invalid attribute value was detected. "+
					"A NicSecurityGroupsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NicSecurityGroupsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("NicSecurityGroupsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra NicSecurityGroupsValue Attribute Value",
				"While creating a NicSecurityGroupsValue value, an extra attribute value was detected. "+
					"A NicSecurityGroupsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra NicSecurityGroupsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewNicSecurityGroupsValueUnknown(), diags
	}

	securityGroupIdAttribute, ok := attributes["security_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_id is missing from object`)

		return NewNicSecurityGroupsValueUnknown(), diags
	}

	securityGroupIdVal, ok := securityGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_id expected to be basetypes.StringValue, was: %T`, securityGroupIdAttribute))
	}

	securityGroupNameAttribute, ok := attributes["security_group_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_name is missing from object`)

		return NewNicSecurityGroupsValueUnknown(), diags
	}

	securityGroupNameVal, ok := securityGroupNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_name expected to be basetypes.StringValue, was: %T`, securityGroupNameAttribute))
	}

	if diags.HasError() {
		return NewNicSecurityGroupsValueUnknown(), diags
	}

	return NicSecurityGroupsValue{
		SecurityGroupId:   securityGroupIdVal,
		SecurityGroupName: securityGroupNameVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewNicSecurityGroupsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) NicSecurityGroupsValue {
	object, diags := NewNicSecurityGroupsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewNicSecurityGroupsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t NicSecurityGroupsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewNicSecurityGroupsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewNicSecurityGroupsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewNicSecurityGroupsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewNicSecurityGroupsValueMust(NicSecurityGroupsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t NicSecurityGroupsType) ValueType(ctx context.Context) attr.Value {
	return NicSecurityGroupsValue{}
}

var _ basetypes.ObjectValuable = NicSecurityGroupsValue{}

type NicSecurityGroupsValue struct {
	SecurityGroupId   basetypes.StringValue `tfsdk:"security_group_id"`
	SecurityGroupName basetypes.StringValue `tfsdk:"security_group_name"`
	state             attr.ValueState
}

func (v NicSecurityGroupsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["security_group_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["security_group_name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.SecurityGroupId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["security_group_id"] = val

		val, err = v.SecurityGroupName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["security_group_name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v NicSecurityGroupsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v NicSecurityGroupsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v NicSecurityGroupsValue) String() string {
	return "NicSecurityGroupsValue"
}

func (v NicSecurityGroupsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"security_group_id":   basetypes.StringType{},
		"security_group_name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"security_group_id":   v.SecurityGroupId,
			"security_group_name": v.SecurityGroupName,
		})

	return objVal, diags
}

func (v NicSecurityGroupsValue) Equal(o attr.Value) bool {
	other, ok := o.(NicSecurityGroupsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.SecurityGroupId.Equal(other.SecurityGroupId) {
		return false
	}

	if !v.SecurityGroupName.Equal(other.SecurityGroupName) {
		return false
	}

	return true
}

func (v NicSecurityGroupsValue) Type(ctx context.Context) attr.Type {
	return NicSecurityGroupsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v NicSecurityGroupsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"security_group_id":   basetypes.StringType{},
		"security_group_name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = PrivateIpsType{}

type PrivateIpsType struct {
	basetypes.ObjectType
}

func (t PrivateIpsType) Equal(o attr.Type) bool {
	other, ok := o.(PrivateIpsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PrivateIpsType) String() string {
	return "PrivateIpsType"
}

func (t PrivateIpsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	isPrimaryAttribute, ok := attributes["is_primary"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_primary is missing from object`)

		return nil, diags
	}

	isPrimaryVal, ok := isPrimaryAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_primary expected to be basetypes.BoolValue, was: %T`, isPrimaryAttribute))
	}

	privateDnsNameAttribute, ok := attributes["private_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_dns_name is missing from object`)

		return nil, diags
	}

	privateDnsNameVal, ok := privateDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_dns_name expected to be basetypes.StringValue, was: %T`, privateDnsNameAttribute))
	}

	privateIpAttribute, ok := attributes["private_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_ip is missing from object`)

		return nil, diags
	}

	privateIpVal, ok := privateIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_ip expected to be basetypes.StringValue, was: %T`, privateIpAttribute))
	}

	privateIpLinkPublicIpAttribute, ok := attributes["private_ip_link_public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_ip_link_public_ip is missing from object`)

		return nil, diags
	}

	privateIpLinkPublicIpVal, ok := privateIpLinkPublicIpAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_ip_link_public_ip expected to be basetypes.ObjectValue, was: %T`, privateIpLinkPublicIpAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PrivateIpsValue{
		IsPrimary:             isPrimaryVal,
		PrivateDnsName:        privateDnsNameVal,
		PrivateIp:             privateIpVal,
		PrivateIpLinkPublicIp: privateIpLinkPublicIpVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewPrivateIpsValueNull() PrivateIpsValue {
	return PrivateIpsValue{
		state: attr.ValueStateNull,
	}
}

func NewPrivateIpsValueUnknown() PrivateIpsValue {
	return PrivateIpsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPrivateIpsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PrivateIpsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PrivateIpsValue Attribute Value",
				"While creating a PrivateIpsValue value, a missing attribute value was detected. "+
					"A PrivateIpsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PrivateIpsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PrivateIpsValue Attribute Type",
				"While creating a PrivateIpsValue value, an invalid attribute value was detected. "+
					"A PrivateIpsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PrivateIpsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PrivateIpsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PrivateIpsValue Attribute Value",
				"While creating a PrivateIpsValue value, an extra attribute value was detected. "+
					"A PrivateIpsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PrivateIpsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPrivateIpsValueUnknown(), diags
	}

	isPrimaryAttribute, ok := attributes["is_primary"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_primary is missing from object`)

		return NewPrivateIpsValueUnknown(), diags
	}

	isPrimaryVal, ok := isPrimaryAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_primary expected to be basetypes.BoolValue, was: %T`, isPrimaryAttribute))
	}

	privateDnsNameAttribute, ok := attributes["private_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_dns_name is missing from object`)

		return NewPrivateIpsValueUnknown(), diags
	}

	privateDnsNameVal, ok := privateDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_dns_name expected to be basetypes.StringValue, was: %T`, privateDnsNameAttribute))
	}

	privateIpAttribute, ok := attributes["private_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_ip is missing from object`)

		return NewPrivateIpsValueUnknown(), diags
	}

	privateIpVal, ok := privateIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_ip expected to be basetypes.StringValue, was: %T`, privateIpAttribute))
	}

	privateIpLinkPublicIpAttribute, ok := attributes["private_ip_link_public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_ip_link_public_ip is missing from object`)

		return NewPrivateIpsValueUnknown(), diags
	}

	privateIpLinkPublicIpVal, ok := privateIpLinkPublicIpAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_ip_link_public_ip expected to be basetypes.ObjectValue, was: %T`, privateIpLinkPublicIpAttribute))
	}

	if diags.HasError() {
		return NewPrivateIpsValueUnknown(), diags
	}

	return PrivateIpsValue{
		IsPrimary:             isPrimaryVal,
		PrivateDnsName:        privateDnsNameVal,
		PrivateIp:             privateIpVal,
		PrivateIpLinkPublicIp: privateIpLinkPublicIpVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewPrivateIpsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PrivateIpsValue {
	object, diags := NewPrivateIpsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPrivateIpsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PrivateIpsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPrivateIpsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPrivateIpsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPrivateIpsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPrivateIpsValueMust(PrivateIpsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PrivateIpsType) ValueType(ctx context.Context) attr.Value {
	return PrivateIpsValue{}
}

var _ basetypes.ObjectValuable = PrivateIpsValue{}

type PrivateIpsValue struct {
	IsPrimary             basetypes.BoolValue   `tfsdk:"is_primary"`
	PrivateDnsName        basetypes.StringValue `tfsdk:"private_dns_name"`
	PrivateIp             basetypes.StringValue `tfsdk:"private_ip"`
	PrivateIpLinkPublicIp basetypes.ObjectValue `tfsdk:"private_ip_link_public_ip"`
	state                 attr.ValueState
}

func (v PrivateIpsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["is_primary"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["private_dns_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["private_ip"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["private_ip_link_public_ip"] = basetypes.ObjectType{
		AttrTypes: PrivateIpLinkPublicIpValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.IsPrimary.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_primary"] = val

		val, err = v.PrivateDnsName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_dns_name"] = val

		val, err = v.PrivateIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_ip"] = val

		val, err = v.PrivateIpLinkPublicIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_ip_link_public_ip"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PrivateIpsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PrivateIpsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PrivateIpsValue) String() string {
	return "PrivateIpsValue"
}

func (v PrivateIpsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var privateIpLinkPublicIp basetypes.ObjectValue

	if v.PrivateIpLinkPublicIp.IsNull() {
		privateIpLinkPublicIp = types.ObjectNull(
			PrivateIpLinkPublicIpValue{}.AttributeTypes(ctx),
		)
	}

	if v.PrivateIpLinkPublicIp.IsUnknown() {
		privateIpLinkPublicIp = types.ObjectUnknown(
			PrivateIpLinkPublicIpValue{}.AttributeTypes(ctx),
		)
	}

	if !v.PrivateIpLinkPublicIp.IsNull() && !v.PrivateIpLinkPublicIp.IsUnknown() {
		privateIpLinkPublicIp = types.ObjectValueMust(
			PrivateIpLinkPublicIpValue{}.AttributeTypes(ctx),
			v.PrivateIpLinkPublicIp.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"is_primary":       basetypes.BoolType{},
		"private_dns_name": basetypes.StringType{},
		"private_ip":       basetypes.StringType{},
		"private_ip_link_public_ip": basetypes.ObjectType{
			AttrTypes: PrivateIpLinkPublicIpValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"is_primary":                v.IsPrimary,
			"private_dns_name":          v.PrivateDnsName,
			"private_ip":                v.PrivateIp,
			"private_ip_link_public_ip": privateIpLinkPublicIp,
		})

	return objVal, diags
}

func (v PrivateIpsValue) Equal(o attr.Value) bool {
	other, ok := o.(PrivateIpsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IsPrimary.Equal(other.IsPrimary) {
		return false
	}

	if !v.PrivateDnsName.Equal(other.PrivateDnsName) {
		return false
	}

	if !v.PrivateIp.Equal(other.PrivateIp) {
		return false
	}

	if !v.PrivateIpLinkPublicIp.Equal(other.PrivateIpLinkPublicIp) {
		return false
	}

	return true
}

func (v PrivateIpsValue) Type(ctx context.Context) attr.Type {
	return PrivateIpsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PrivateIpsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"is_primary":       basetypes.BoolType{},
		"private_dns_name": basetypes.StringType{},
		"private_ip":       basetypes.StringType{},
		"private_ip_link_public_ip": basetypes.ObjectType{
			AttrTypes: PrivateIpLinkPublicIpValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = PrivateIpLinkPublicIpType{}

type PrivateIpLinkPublicIpType struct {
	basetypes.ObjectType
}

func (t PrivateIpLinkPublicIpType) Equal(o attr.Type) bool {
	other, ok := o.(PrivateIpLinkPublicIpType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PrivateIpLinkPublicIpType) String() string {
	return "PrivateIpLinkPublicIpType"
}

func (t PrivateIpLinkPublicIpType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	publicDnsNameAttribute, ok := attributes["public_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_dns_name is missing from object`)

		return nil, diags
	}

	publicDnsNameVal, ok := publicDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_dns_name expected to be basetypes.StringValue, was: %T`, publicDnsNameAttribute))
	}

	publicIpAttribute, ok := attributes["public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_ip is missing from object`)

		return nil, diags
	}

	publicIpVal, ok := publicIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_ip expected to be basetypes.StringValue, was: %T`, publicIpAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PrivateIpLinkPublicIpValue{
		PublicDnsName: publicDnsNameVal,
		PublicIp:      publicIpVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewPrivateIpLinkPublicIpValueNull() PrivateIpLinkPublicIpValue {
	return PrivateIpLinkPublicIpValue{
		state: attr.ValueStateNull,
	}
}

func NewPrivateIpLinkPublicIpValueUnknown() PrivateIpLinkPublicIpValue {
	return PrivateIpLinkPublicIpValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPrivateIpLinkPublicIpValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PrivateIpLinkPublicIpValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PrivateIpLinkPublicIpValue Attribute Value",
				"While creating a PrivateIpLinkPublicIpValue value, a missing attribute value was detected. "+
					"A PrivateIpLinkPublicIpValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PrivateIpLinkPublicIpValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PrivateIpLinkPublicIpValue Attribute Type",
				"While creating a PrivateIpLinkPublicIpValue value, an invalid attribute value was detected. "+
					"A PrivateIpLinkPublicIpValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PrivateIpLinkPublicIpValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PrivateIpLinkPublicIpValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PrivateIpLinkPublicIpValue Attribute Value",
				"While creating a PrivateIpLinkPublicIpValue value, an extra attribute value was detected. "+
					"A PrivateIpLinkPublicIpValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PrivateIpLinkPublicIpValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPrivateIpLinkPublicIpValueUnknown(), diags
	}

	publicDnsNameAttribute, ok := attributes["public_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_dns_name is missing from object`)

		return NewPrivateIpLinkPublicIpValueUnknown(), diags
	}

	publicDnsNameVal, ok := publicDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_dns_name expected to be basetypes.StringValue, was: %T`, publicDnsNameAttribute))
	}

	publicIpAttribute, ok := attributes["public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_ip is missing from object`)

		return NewPrivateIpLinkPublicIpValueUnknown(), diags
	}

	publicIpVal, ok := publicIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_ip expected to be basetypes.StringValue, was: %T`, publicIpAttribute))
	}

	if diags.HasError() {
		return NewPrivateIpLinkPublicIpValueUnknown(), diags
	}

	return PrivateIpLinkPublicIpValue{
		PublicDnsName: publicDnsNameVal,
		PublicIp:      publicIpVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewPrivateIpLinkPublicIpValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PrivateIpLinkPublicIpValue {
	object, diags := NewPrivateIpLinkPublicIpValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPrivateIpLinkPublicIpValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PrivateIpLinkPublicIpType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPrivateIpLinkPublicIpValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPrivateIpLinkPublicIpValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPrivateIpLinkPublicIpValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPrivateIpLinkPublicIpValueMust(PrivateIpLinkPublicIpValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PrivateIpLinkPublicIpType) ValueType(ctx context.Context) attr.Value {
	return PrivateIpLinkPublicIpValue{}
}

var _ basetypes.ObjectValuable = PrivateIpLinkPublicIpValue{}

type PrivateIpLinkPublicIpValue struct {
	PublicDnsName basetypes.StringValue `tfsdk:"public_dns_name"`
	PublicIp      basetypes.StringValue `tfsdk:"public_ip"`
	state         attr.ValueState
}

func (v PrivateIpLinkPublicIpValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["public_dns_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["public_ip"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.PublicDnsName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["public_dns_name"] = val

		val, err = v.PublicIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["public_ip"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PrivateIpLinkPublicIpValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PrivateIpLinkPublicIpValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PrivateIpLinkPublicIpValue) String() string {
	return "PrivateIpLinkPublicIpValue"
}

func (v PrivateIpLinkPublicIpValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"public_dns_name": basetypes.StringType{},
		"public_ip":       basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"public_dns_name": v.PublicDnsName,
			"public_ip":       v.PublicIp,
		})

	return objVal, diags
}

func (v PrivateIpLinkPublicIpValue) Equal(o attr.Value) bool {
	other, ok := o.(PrivateIpLinkPublicIpValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.PublicDnsName.Equal(other.PublicDnsName) {
		return false
	}

	if !v.PublicIp.Equal(other.PublicIp) {
		return false
	}

	return true
}

func (v PrivateIpLinkPublicIpValue) Type(ctx context.Context) attr.Type {
	return PrivateIpLinkPublicIpType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PrivateIpLinkPublicIpValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"public_dns_name": basetypes.StringType{},
		"public_ip":       basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = PlacementType{}

type PlacementType struct {
	basetypes.ObjectType
}

func (t PlacementType) Equal(o attr.Type) bool {
	other, ok := o.(PlacementType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PlacementType) String() string {
	return "PlacementType"
}

func (t PlacementType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	availabilityZoneNameAttribute, ok := attributes["availability_zone_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`availability_zone_name is missing from object`)

		return nil, diags
	}

	availabilityZoneNameVal, ok := availabilityZoneNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`availability_zone_name expected to be basetypes.StringValue, was: %T`, availabilityZoneNameAttribute))
	}

	tenancyAttribute, ok := attributes["tenancy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tenancy is missing from object`)

		return nil, diags
	}

	tenancyVal, ok := tenancyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tenancy expected to be basetypes.StringValue, was: %T`, tenancyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PlacementValue{
		AvailabilityZoneName: availabilityZoneNameVal,
		Tenancy:              tenancyVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewPlacementValueNull() PlacementValue {
	return PlacementValue{
		state: attr.ValueStateNull,
	}
}

func NewPlacementValueUnknown() PlacementValue {
	return PlacementValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPlacementValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PlacementValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PlacementValue Attribute Value",
				"While creating a PlacementValue value, a missing attribute value was detected. "+
					"A PlacementValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PlacementValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PlacementValue Attribute Type",
				"While creating a PlacementValue value, an invalid attribute value was detected. "+
					"A PlacementValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PlacementValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PlacementValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PlacementValue Attribute Value",
				"While creating a PlacementValue value, an extra attribute value was detected. "+
					"A PlacementValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PlacementValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPlacementValueUnknown(), diags
	}

	availabilityZoneNameAttribute, ok := attributes["availability_zone_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`availability_zone_name is missing from object`)

		return NewPlacementValueUnknown(), diags
	}

	availabilityZoneNameVal, ok := availabilityZoneNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`availability_zone_name expected to be basetypes.StringValue, was: %T`, availabilityZoneNameAttribute))
	}

	tenancyAttribute, ok := attributes["tenancy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tenancy is missing from object`)

		return NewPlacementValueUnknown(), diags
	}

	tenancyVal, ok := tenancyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tenancy expected to be basetypes.StringValue, was: %T`, tenancyAttribute))
	}

	if diags.HasError() {
		return NewPlacementValueUnknown(), diags
	}

	return PlacementValue{
		AvailabilityZoneName: availabilityZoneNameVal,
		Tenancy:              tenancyVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewPlacementValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PlacementValue {
	object, diags := NewPlacementValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPlacementValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PlacementType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPlacementValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPlacementValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPlacementValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPlacementValueMust(PlacementValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PlacementType) ValueType(ctx context.Context) attr.Value {
	return PlacementValue{}
}

var _ basetypes.ObjectValuable = PlacementValue{}

type PlacementValue struct {
	AvailabilityZoneName basetypes.StringValue `tfsdk:"availability_zone_name"`
	Tenancy              basetypes.StringValue `tfsdk:"tenancy"`
	state                attr.ValueState
}

func (v PlacementValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["availability_zone_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tenancy"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.AvailabilityZoneName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["availability_zone_name"] = val

		val, err = v.Tenancy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tenancy"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PlacementValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PlacementValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PlacementValue) String() string {
	return "PlacementValue"
}

func (v PlacementValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"availability_zone_name": basetypes.StringType{},
		"tenancy":                basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"availability_zone_name": v.AvailabilityZoneName,
			"tenancy":                v.Tenancy,
		})

	return objVal, diags
}

func (v PlacementValue) Equal(o attr.Value) bool {
	other, ok := o.(PlacementValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AvailabilityZoneName.Equal(other.AvailabilityZoneName) {
		return false
	}

	if !v.Tenancy.Equal(other.Tenancy) {
		return false
	}

	return true
}

func (v PlacementValue) Type(ctx context.Context) attr.Type {
	return PlacementType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PlacementValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"availability_zone_name": basetypes.StringType{},
		"tenancy":                basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TagsType{}

type TagsType struct {
	basetypes.ObjectType
}

func (t TagsType) Equal(o attr.Type) bool {
	other, ok := o.(TagsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TagsType) String() string {
	return "TagsType"
}

func (t TagsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TagsValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewTagsValueNull() TagsValue {
	return TagsValue{
		state: attr.ValueStateNull,
	}
}

func NewTagsValueUnknown() TagsValue {
	return TagsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTagsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TagsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TagsValue Attribute Value",
				"While creating a TagsValue value, a missing attribute value was detected. "+
					"A TagsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TagsValue Attribute Type",
				"While creating a TagsValue value, an invalid attribute value was detected. "+
					"A TagsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TagsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TagsValue Attribute Value",
				"While creating a TagsValue value, an extra attribute value was detected. "+
					"A TagsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TagsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	return TagsValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewTagsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TagsValue {
	object, diags := NewTagsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTagsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TagsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTagsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTagsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTagsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTagsValueMust(TagsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TagsType) ValueType(ctx context.Context) attr.Value {
	return TagsValue{}
}

var _ basetypes.ObjectValuable = TagsValue{}

type TagsValue struct {
	Key   basetypes.StringValue `tfsdk:"key"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v TagsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TagsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TagsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TagsValue) String() string {
	return "TagsValue"
}

func (v TagsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"key":   v.Key,
			"value": v.Value,
		})

	return objVal, diags
}

func (v TagsValue) Equal(o attr.Value) bool {
	other, ok := o.(TagsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v TagsValue) Type(ctx context.Context) attr.Type {
	return TagsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TagsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}
