// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_route_table

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func RouteTableDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the route tables.",
				MarkdownDescription: "The IDs of the route tables.",
			},
			"items": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the route table.",
							MarkdownDescription: "The ID of the route table.",
						},
						"link_route_tables": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the association between the route table and the Subnet.",
										MarkdownDescription: "The ID of the association between the route table and the Subnet.",
									},
									"main": schema.BoolAttribute{
										Computed:            true,
										Description:         "If true, the route table is the main one.",
										MarkdownDescription: "If true, the route table is the main one.",
									},
									"route_table_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the route table.",
										MarkdownDescription: "The ID of the route table.",
									},
									"subnet_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the Subnet.",
										MarkdownDescription: "The ID of the Subnet.",
									},
									"vpc_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the Vpc.",
										MarkdownDescription: "The ID of the Vpc.",
									},
								},
								CustomType: LinkRouteTablesType{
									ObjectType: types.ObjectType{
										AttrTypes: LinkRouteTablesValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "One or more associations between the route table and Subnets.",
							MarkdownDescription: "One or more associations between the route table and Subnets.",
						},
						"route_propagating_virtual_gateways": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"virtual_gateway_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the virtual gateway.",
										MarkdownDescription: "The ID of the virtual gateway.",
									},
								},
								CustomType: RoutePropagatingVirtualGatewaysType{
									ObjectType: types.ObjectType{
										AttrTypes: RoutePropagatingVirtualGatewaysValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "Information about virtual gateways propagating routes.",
							MarkdownDescription: "Information about virtual gateways propagating routes.",
						},
						"routes": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"creation_method": schema.StringAttribute{
										Computed:            true,
										Description:         "The method used to create the route.",
										MarkdownDescription: "The method used to create the route.",
									},
									"destination_ip_range": schema.StringAttribute{
										Computed:            true,
										Description:         "The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).",
										MarkdownDescription: "The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).",
									},
									"destination_service_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the NumSpot service.",
										MarkdownDescription: "The ID of the NumSpot service.",
									},
									"gateway_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the Internet gateway or virtual gateway attached to the Vpc.",
										MarkdownDescription: "The ID of the Internet gateway or virtual gateway attached to the Vpc.",
									},
									"nat_gateway_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of a NAT gateway attached to the Vpc.",
										MarkdownDescription: "The ID of a NAT gateway attached to the Vpc.",
									},
									"nic_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the NIC.",
										MarkdownDescription: "The ID of the NIC.",
									},
									"state": schema.StringAttribute{
										Computed:            true,
										Description:         "The state of a route in the route table (always `active`). ",
										MarkdownDescription: "The state of a route in the route table (always `active`). ",
									},
									"vm_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of a VM specified in a route in the table.",
										MarkdownDescription: "The ID of a VM specified in a route in the table.",
									},
									"vpc_peering_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the Vpc peering.",
										MarkdownDescription: "The ID of the Vpc peering.",
									},
								},
								CustomType: RoutesType{
									ObjectType: types.ObjectType{
										AttrTypes: RoutesValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "One or more routes in the route table.",
							MarkdownDescription: "One or more routes in the route table.",
						},
						"tags": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"key": schema.StringAttribute{
										Computed:            true,
										Description:         "The key of the tag, with a minimum of 1 character.",
										MarkdownDescription: "The key of the tag, with a minimum of 1 character.",
									},
									"value": schema.StringAttribute{
										Computed:            true,
										Description:         "The value of the tag, between 0 and 255 characters.",
										MarkdownDescription: "The value of the tag, between 0 and 255 characters.",
									},
								},
								CustomType: TagsType{
									ObjectType: types.ObjectType{
										AttrTypes: TagsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "One or more tags associated with the route table.",
							MarkdownDescription: "One or more tags associated with the route table.",
						},
						"vpc_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Vpc for the route table.",
							MarkdownDescription: "The ID of the Vpc for the route table.",
						},
					},
					CustomType: ItemsType{
						ObjectType: types.ObjectType{
							AttrTypes: ItemsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "Information about one or more route tables.",
				MarkdownDescription: "Information about one or more route tables.",
			},
			"link_route_table_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the route tables involved in the associations.",
				MarkdownDescription: "The IDs of the route tables involved in the associations.",
			},
			"link_route_table_link_route_table_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the associations between the route tables and the Subnets.",
				MarkdownDescription: "The IDs of the associations between the route tables and the Subnets.",
			},
			"link_route_table_main": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If true, the route tables are the main ones for their Vpcs.",
				MarkdownDescription: "If true, the route tables are the main ones for their Vpcs.",
			},
			"link_subnet_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Subnets involved in the associations.",
				MarkdownDescription: "The IDs of the Subnets involved in the associations.",
			},
			"route_creation_methods": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The methods used to create a route.",
				MarkdownDescription: "The methods used to create a route.",
			},
			"route_destination_ip_ranges": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IP ranges specified in routes in the tables.",
				MarkdownDescription: "The IP ranges specified in routes in the tables.",
			},
			"route_destination_service_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The service IDs specified in routes in the tables.",
				MarkdownDescription: "The service IDs specified in routes in the tables.",
			},
			"route_gateway_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the gateways specified in routes in the tables.",
				MarkdownDescription: "The IDs of the gateways specified in routes in the tables.",
			},
			"route_nat_gateway_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the NAT gateways specified in routes in the tables.",
				MarkdownDescription: "The IDs of the NAT gateways specified in routes in the tables.",
			},
			"route_states": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The states of routes in the route tables (always `active`).",
				MarkdownDescription: "The states of routes in the route tables (always `active`).",
			},
			"route_vm_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the VMs specified in routes in the tables.",
				MarkdownDescription: "The IDs of the VMs specified in routes in the tables.",
			},
			"route_vpc_peering_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Vpc peerings specified in routes in the tables.",
				MarkdownDescription: "The IDs of the Vpc peerings specified in routes in the tables.",
			},
			"tag_keys": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The keys of the tags associated with the route tables.",
				MarkdownDescription: "The keys of the tags associated with the route tables.",
			},
			"tag_values": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The values of the tags associated with the route tables.",
				MarkdownDescription: "The values of the tags associated with the route tables.",
			},
			"tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The key/value combination of the tags associated with the route tables, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.",
				MarkdownDescription: "The key/value combination of the tags associated with the route tables, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.",
			},
			"vpc_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Vpcs for the route tables.",
				MarkdownDescription: "The IDs of the Vpcs for the route tables.",
			},
		},
	}
}

type RouteTableModel struct {
	Ids                             types.List `tfsdk:"ids"`
	Items                           types.List `tfsdk:"items"`
	LinkRouteTableIds               types.List `tfsdk:"link_route_table_ids"`
	LinkRouteTableLinkRouteTableIds types.List `tfsdk:"link_route_table_link_route_table_ids"`
	LinkRouteTableMain              types.Bool `tfsdk:"link_route_table_main"`
	LinkSubnetIds                   types.List `tfsdk:"link_subnet_ids"`
	RouteCreationMethods            types.List `tfsdk:"route_creation_methods"`
	RouteDestinationIpRanges        types.List `tfsdk:"route_destination_ip_ranges"`
	RouteDestinationServiceIds      types.List `tfsdk:"route_destination_service_ids"`
	RouteGatewayIds                 types.List `tfsdk:"route_gateway_ids"`
	RouteNatGatewayIds              types.List `tfsdk:"route_nat_gateway_ids"`
	RouteStates                     types.List `tfsdk:"route_states"`
	RouteVmIds                      types.List `tfsdk:"route_vm_ids"`
	RouteVpcPeeringIds              types.List `tfsdk:"route_vpc_peering_ids"`
	TagKeys                         types.List `tfsdk:"tag_keys"`
	TagValues                       types.List `tfsdk:"tag_values"`
	Tags                            types.List `tfsdk:"tags"`
	VpcIds                          types.List `tfsdk:"vpc_ids"`
}

var _ basetypes.ObjectTypable = ItemsType{}

type ItemsType struct {
	basetypes.ObjectType
}

func (t ItemsType) Equal(o attr.Type) bool {
	other, ok := o.(ItemsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ItemsType) String() string {
	return "ItemsType"
}

func (t ItemsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	linkRouteTablesAttribute, ok := attributes["link_route_tables"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_route_tables is missing from object`)

		return nil, diags
	}

	linkRouteTablesVal, ok := linkRouteTablesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_route_tables expected to be basetypes.ListValue, was: %T`, linkRouteTablesAttribute))
	}

	routePropagatingVirtualGatewaysAttribute, ok := attributes["route_propagating_virtual_gateways"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_propagating_virtual_gateways is missing from object`)

		return nil, diags
	}

	routePropagatingVirtualGatewaysVal, ok := routePropagatingVirtualGatewaysAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_propagating_virtual_gateways expected to be basetypes.ListValue, was: %T`, routePropagatingVirtualGatewaysAttribute))
	}

	routesAttribute, ok := attributes["routes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`routes is missing from object`)

		return nil, diags
	}

	routesVal, ok := routesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`routes expected to be basetypes.ListValue, was: %T`, routesAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return nil, diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	vpcIdAttribute, ok := attributes["vpc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vpc_id is missing from object`)

		return nil, diags
	}

	vpcIdVal, ok := vpcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vpc_id expected to be basetypes.StringValue, was: %T`, vpcIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ItemsValue{
		Id:                              idVal,
		LinkRouteTables:                 linkRouteTablesVal,
		RoutePropagatingVirtualGateways: routePropagatingVirtualGatewaysVal,
		Routes:                          routesVal,
		Tags:                            tagsVal,
		VpcId:                           vpcIdVal,
		state:                           attr.ValueStateKnown,
	}, diags
}

func NewItemsValueNull() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateNull,
	}
}

func NewItemsValueUnknown() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewItemsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ItemsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ItemsValue Attribute Value",
				"While creating a ItemsValue value, a missing attribute value was detected. "+
					"A ItemsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ItemsValue Attribute Type",
				"While creating a ItemsValue value, an invalid attribute value was detected. "+
					"A ItemsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ItemsValue Attribute Value",
				"While creating a ItemsValue value, an extra attribute value was detected. "+
					"A ItemsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ItemsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	linkRouteTablesAttribute, ok := attributes["link_route_tables"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_route_tables is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	linkRouteTablesVal, ok := linkRouteTablesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_route_tables expected to be basetypes.ListValue, was: %T`, linkRouteTablesAttribute))
	}

	routePropagatingVirtualGatewaysAttribute, ok := attributes["route_propagating_virtual_gateways"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_propagating_virtual_gateways is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	routePropagatingVirtualGatewaysVal, ok := routePropagatingVirtualGatewaysAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_propagating_virtual_gateways expected to be basetypes.ListValue, was: %T`, routePropagatingVirtualGatewaysAttribute))
	}

	routesAttribute, ok := attributes["routes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`routes is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	routesVal, ok := routesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`routes expected to be basetypes.ListValue, was: %T`, routesAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	vpcIdAttribute, ok := attributes["vpc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vpc_id is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	vpcIdVal, ok := vpcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vpc_id expected to be basetypes.StringValue, was: %T`, vpcIdAttribute))
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	return ItemsValue{
		Id:                              idVal,
		LinkRouteTables:                 linkRouteTablesVal,
		RoutePropagatingVirtualGateways: routePropagatingVirtualGatewaysVal,
		Routes:                          routesVal,
		Tags:                            tagsVal,
		VpcId:                           vpcIdVal,
		state:                           attr.ValueStateKnown,
	}, diags
}

func NewItemsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ItemsValue {
	object, diags := NewItemsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewItemsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ItemsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewItemsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewItemsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewItemsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewItemsValueMust(ItemsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ItemsType) ValueType(ctx context.Context) attr.Value {
	return ItemsValue{}
}

var _ basetypes.ObjectValuable = ItemsValue{}

type ItemsValue struct {
	Id                              basetypes.StringValue `tfsdk:"id"`
	LinkRouteTables                 basetypes.ListValue   `tfsdk:"link_route_tables"`
	RoutePropagatingVirtualGateways basetypes.ListValue   `tfsdk:"route_propagating_virtual_gateways"`
	Routes                          basetypes.ListValue   `tfsdk:"routes"`
	Tags                            basetypes.ListValue   `tfsdk:"tags"`
	VpcId                           basetypes.StringValue `tfsdk:"vpc_id"`
	state                           attr.ValueState
}

func (v ItemsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["link_route_tables"] = basetypes.ListType{
		ElemType: LinkRouteTablesValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["route_propagating_virtual_gateways"] = basetypes.ListType{
		ElemType: RoutePropagatingVirtualGatewaysValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["routes"] = basetypes.ListType{
		ElemType: RoutesValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["tags"] = basetypes.ListType{
		ElemType: TagsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["vpc_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.LinkRouteTables.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["link_route_tables"] = val

		val, err = v.RoutePropagatingVirtualGateways.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["route_propagating_virtual_gateways"] = val

		val, err = v.Routes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["routes"] = val

		val, err = v.Tags.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tags"] = val

		val, err = v.VpcId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vpc_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ItemsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ItemsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ItemsValue) String() string {
	return "ItemsValue"
}

func (v ItemsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	linkRouteTables := types.ListValueMust(
		LinkRouteTablesType{
			basetypes.ObjectType{
				AttrTypes: LinkRouteTablesValue{}.AttributeTypes(ctx),
			},
		},
		v.LinkRouteTables.Elements(),
	)

	if v.LinkRouteTables.IsNull() {
		linkRouteTables = types.ListNull(
			LinkRouteTablesType{
				basetypes.ObjectType{
					AttrTypes: LinkRouteTablesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.LinkRouteTables.IsUnknown() {
		linkRouteTables = types.ListUnknown(
			LinkRouteTablesType{
				basetypes.ObjectType{
					AttrTypes: LinkRouteTablesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	routePropagatingVirtualGateways := types.ListValueMust(
		RoutePropagatingVirtualGatewaysType{
			basetypes.ObjectType{
				AttrTypes: RoutePropagatingVirtualGatewaysValue{}.AttributeTypes(ctx),
			},
		},
		v.RoutePropagatingVirtualGateways.Elements(),
	)

	if v.RoutePropagatingVirtualGateways.IsNull() {
		routePropagatingVirtualGateways = types.ListNull(
			RoutePropagatingVirtualGatewaysType{
				basetypes.ObjectType{
					AttrTypes: RoutePropagatingVirtualGatewaysValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.RoutePropagatingVirtualGateways.IsUnknown() {
		routePropagatingVirtualGateways = types.ListUnknown(
			RoutePropagatingVirtualGatewaysType{
				basetypes.ObjectType{
					AttrTypes: RoutePropagatingVirtualGatewaysValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	routes := types.ListValueMust(
		RoutesType{
			basetypes.ObjectType{
				AttrTypes: RoutesValue{}.AttributeTypes(ctx),
			},
		},
		v.Routes.Elements(),
	)

	if v.Routes.IsNull() {
		routes = types.ListNull(
			RoutesType{
				basetypes.ObjectType{
					AttrTypes: RoutesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Routes.IsUnknown() {
		routes = types.ListUnknown(
			RoutesType{
				basetypes.ObjectType{
					AttrTypes: RoutesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	tags := types.ListValueMust(
		TagsType{
			basetypes.ObjectType{
				AttrTypes: TagsValue{}.AttributeTypes(ctx),
			},
		},
		v.Tags.Elements(),
	)

	if v.Tags.IsNull() {
		tags = types.ListNull(
			TagsType{
				basetypes.ObjectType{
					AttrTypes: TagsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Tags.IsUnknown() {
		tags = types.ListUnknown(
			TagsType{
				basetypes.ObjectType{
					AttrTypes: TagsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"id": basetypes.StringType{},
		"link_route_tables": basetypes.ListType{
			ElemType: LinkRouteTablesValue{}.Type(ctx),
		},
		"route_propagating_virtual_gateways": basetypes.ListType{
			ElemType: RoutePropagatingVirtualGatewaysValue{}.Type(ctx),
		},
		"routes": basetypes.ListType{
			ElemType: RoutesValue{}.Type(ctx),
		},
		"tags": basetypes.ListType{
			ElemType: TagsValue{}.Type(ctx),
		},
		"vpc_id": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":                                 v.Id,
			"link_route_tables":                  linkRouteTables,
			"route_propagating_virtual_gateways": routePropagatingVirtualGateways,
			"routes":                             routes,
			"tags":                               tags,
			"vpc_id":                             v.VpcId,
		})

	return objVal, diags
}

func (v ItemsValue) Equal(o attr.Value) bool {
	other, ok := o.(ItemsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.LinkRouteTables.Equal(other.LinkRouteTables) {
		return false
	}

	if !v.RoutePropagatingVirtualGateways.Equal(other.RoutePropagatingVirtualGateways) {
		return false
	}

	if !v.Routes.Equal(other.Routes) {
		return false
	}

	if !v.Tags.Equal(other.Tags) {
		return false
	}

	if !v.VpcId.Equal(other.VpcId) {
		return false
	}

	return true
}

func (v ItemsValue) Type(ctx context.Context) attr.Type {
	return ItemsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ItemsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id": basetypes.StringType{},
		"link_route_tables": basetypes.ListType{
			ElemType: LinkRouteTablesValue{}.Type(ctx),
		},
		"route_propagating_virtual_gateways": basetypes.ListType{
			ElemType: RoutePropagatingVirtualGatewaysValue{}.Type(ctx),
		},
		"routes": basetypes.ListType{
			ElemType: RoutesValue{}.Type(ctx),
		},
		"tags": basetypes.ListType{
			ElemType: TagsValue{}.Type(ctx),
		},
		"vpc_id": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = LinkRouteTablesType{}

type LinkRouteTablesType struct {
	basetypes.ObjectType
}

func (t LinkRouteTablesType) Equal(o attr.Type) bool {
	other, ok := o.(LinkRouteTablesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LinkRouteTablesType) String() string {
	return "LinkRouteTablesType"
}

func (t LinkRouteTablesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	mainAttribute, ok := attributes["main"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`main is missing from object`)

		return nil, diags
	}

	mainVal, ok := mainAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`main expected to be basetypes.BoolValue, was: %T`, mainAttribute))
	}

	routeTableIdAttribute, ok := attributes["route_table_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_table_id is missing from object`)

		return nil, diags
	}

	routeTableIdVal, ok := routeTableIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_table_id expected to be basetypes.StringValue, was: %T`, routeTableIdAttribute))
	}

	subnetIdAttribute, ok := attributes["subnet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subnet_id is missing from object`)

		return nil, diags
	}

	subnetIdVal, ok := subnetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subnet_id expected to be basetypes.StringValue, was: %T`, subnetIdAttribute))
	}

	vpcIdAttribute, ok := attributes["vpc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vpc_id is missing from object`)

		return nil, diags
	}

	vpcIdVal, ok := vpcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vpc_id expected to be basetypes.StringValue, was: %T`, vpcIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LinkRouteTablesValue{
		Id:           idVal,
		Main:         mainVal,
		RouteTableId: routeTableIdVal,
		SubnetId:     subnetIdVal,
		VpcId:        vpcIdVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewLinkRouteTablesValueNull() LinkRouteTablesValue {
	return LinkRouteTablesValue{
		state: attr.ValueStateNull,
	}
}

func NewLinkRouteTablesValueUnknown() LinkRouteTablesValue {
	return LinkRouteTablesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLinkRouteTablesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LinkRouteTablesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LinkRouteTablesValue Attribute Value",
				"While creating a LinkRouteTablesValue value, a missing attribute value was detected. "+
					"A LinkRouteTablesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinkRouteTablesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LinkRouteTablesValue Attribute Type",
				"While creating a LinkRouteTablesValue value, an invalid attribute value was detected. "+
					"A LinkRouteTablesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinkRouteTablesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LinkRouteTablesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LinkRouteTablesValue Attribute Value",
				"While creating a LinkRouteTablesValue value, an extra attribute value was detected. "+
					"A LinkRouteTablesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LinkRouteTablesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLinkRouteTablesValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewLinkRouteTablesValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	mainAttribute, ok := attributes["main"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`main is missing from object`)

		return NewLinkRouteTablesValueUnknown(), diags
	}

	mainVal, ok := mainAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`main expected to be basetypes.BoolValue, was: %T`, mainAttribute))
	}

	routeTableIdAttribute, ok := attributes["route_table_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_table_id is missing from object`)

		return NewLinkRouteTablesValueUnknown(), diags
	}

	routeTableIdVal, ok := routeTableIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_table_id expected to be basetypes.StringValue, was: %T`, routeTableIdAttribute))
	}

	subnetIdAttribute, ok := attributes["subnet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subnet_id is missing from object`)

		return NewLinkRouteTablesValueUnknown(), diags
	}

	subnetIdVal, ok := subnetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subnet_id expected to be basetypes.StringValue, was: %T`, subnetIdAttribute))
	}

	vpcIdAttribute, ok := attributes["vpc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vpc_id is missing from object`)

		return NewLinkRouteTablesValueUnknown(), diags
	}

	vpcIdVal, ok := vpcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vpc_id expected to be basetypes.StringValue, was: %T`, vpcIdAttribute))
	}

	if diags.HasError() {
		return NewLinkRouteTablesValueUnknown(), diags
	}

	return LinkRouteTablesValue{
		Id:           idVal,
		Main:         mainVal,
		RouteTableId: routeTableIdVal,
		SubnetId:     subnetIdVal,
		VpcId:        vpcIdVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewLinkRouteTablesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LinkRouteTablesValue {
	object, diags := NewLinkRouteTablesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLinkRouteTablesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LinkRouteTablesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLinkRouteTablesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLinkRouteTablesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLinkRouteTablesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLinkRouteTablesValueMust(LinkRouteTablesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LinkRouteTablesType) ValueType(ctx context.Context) attr.Value {
	return LinkRouteTablesValue{}
}

var _ basetypes.ObjectValuable = LinkRouteTablesValue{}

type LinkRouteTablesValue struct {
	Id           basetypes.StringValue `tfsdk:"id"`
	Main         basetypes.BoolValue   `tfsdk:"main"`
	RouteTableId basetypes.StringValue `tfsdk:"route_table_id"`
	SubnetId     basetypes.StringValue `tfsdk:"subnet_id"`
	VpcId        basetypes.StringValue `tfsdk:"vpc_id"`
	state        attr.ValueState
}

func (v LinkRouteTablesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["main"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["route_table_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["subnet_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vpc_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Main.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["main"] = val

		val, err = v.RouteTableId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["route_table_id"] = val

		val, err = v.SubnetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subnet_id"] = val

		val, err = v.VpcId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vpc_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LinkRouteTablesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LinkRouteTablesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LinkRouteTablesValue) String() string {
	return "LinkRouteTablesValue"
}

func (v LinkRouteTablesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"id":             basetypes.StringType{},
		"main":           basetypes.BoolType{},
		"route_table_id": basetypes.StringType{},
		"subnet_id":      basetypes.StringType{},
		"vpc_id":         basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":             v.Id,
			"main":           v.Main,
			"route_table_id": v.RouteTableId,
			"subnet_id":      v.SubnetId,
			"vpc_id":         v.VpcId,
		})

	return objVal, diags
}

func (v LinkRouteTablesValue) Equal(o attr.Value) bool {
	other, ok := o.(LinkRouteTablesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Main.Equal(other.Main) {
		return false
	}

	if !v.RouteTableId.Equal(other.RouteTableId) {
		return false
	}

	if !v.SubnetId.Equal(other.SubnetId) {
		return false
	}

	if !v.VpcId.Equal(other.VpcId) {
		return false
	}

	return true
}

func (v LinkRouteTablesValue) Type(ctx context.Context) attr.Type {
	return LinkRouteTablesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LinkRouteTablesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":             basetypes.StringType{},
		"main":           basetypes.BoolType{},
		"route_table_id": basetypes.StringType{},
		"subnet_id":      basetypes.StringType{},
		"vpc_id":         basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = RoutePropagatingVirtualGatewaysType{}

type RoutePropagatingVirtualGatewaysType struct {
	basetypes.ObjectType
}

func (t RoutePropagatingVirtualGatewaysType) Equal(o attr.Type) bool {
	other, ok := o.(RoutePropagatingVirtualGatewaysType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RoutePropagatingVirtualGatewaysType) String() string {
	return "RoutePropagatingVirtualGatewaysType"
}

func (t RoutePropagatingVirtualGatewaysType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	virtualGatewayIdAttribute, ok := attributes["virtual_gateway_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`virtual_gateway_id is missing from object`)

		return nil, diags
	}

	virtualGatewayIdVal, ok := virtualGatewayIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`virtual_gateway_id expected to be basetypes.StringValue, was: %T`, virtualGatewayIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RoutePropagatingVirtualGatewaysValue{
		VirtualGatewayId: virtualGatewayIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewRoutePropagatingVirtualGatewaysValueNull() RoutePropagatingVirtualGatewaysValue {
	return RoutePropagatingVirtualGatewaysValue{
		state: attr.ValueStateNull,
	}
}

func NewRoutePropagatingVirtualGatewaysValueUnknown() RoutePropagatingVirtualGatewaysValue {
	return RoutePropagatingVirtualGatewaysValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRoutePropagatingVirtualGatewaysValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RoutePropagatingVirtualGatewaysValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RoutePropagatingVirtualGatewaysValue Attribute Value",
				"While creating a RoutePropagatingVirtualGatewaysValue value, a missing attribute value was detected. "+
					"A RoutePropagatingVirtualGatewaysValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RoutePropagatingVirtualGatewaysValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RoutePropagatingVirtualGatewaysValue Attribute Type",
				"While creating a RoutePropagatingVirtualGatewaysValue value, an invalid attribute value was detected. "+
					"A RoutePropagatingVirtualGatewaysValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RoutePropagatingVirtualGatewaysValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RoutePropagatingVirtualGatewaysValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RoutePropagatingVirtualGatewaysValue Attribute Value",
				"While creating a RoutePropagatingVirtualGatewaysValue value, an extra attribute value was detected. "+
					"A RoutePropagatingVirtualGatewaysValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RoutePropagatingVirtualGatewaysValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRoutePropagatingVirtualGatewaysValueUnknown(), diags
	}

	virtualGatewayIdAttribute, ok := attributes["virtual_gateway_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`virtual_gateway_id is missing from object`)

		return NewRoutePropagatingVirtualGatewaysValueUnknown(), diags
	}

	virtualGatewayIdVal, ok := virtualGatewayIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`virtual_gateway_id expected to be basetypes.StringValue, was: %T`, virtualGatewayIdAttribute))
	}

	if diags.HasError() {
		return NewRoutePropagatingVirtualGatewaysValueUnknown(), diags
	}

	return RoutePropagatingVirtualGatewaysValue{
		VirtualGatewayId: virtualGatewayIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewRoutePropagatingVirtualGatewaysValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RoutePropagatingVirtualGatewaysValue {
	object, diags := NewRoutePropagatingVirtualGatewaysValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRoutePropagatingVirtualGatewaysValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RoutePropagatingVirtualGatewaysType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRoutePropagatingVirtualGatewaysValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRoutePropagatingVirtualGatewaysValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRoutePropagatingVirtualGatewaysValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRoutePropagatingVirtualGatewaysValueMust(RoutePropagatingVirtualGatewaysValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RoutePropagatingVirtualGatewaysType) ValueType(ctx context.Context) attr.Value {
	return RoutePropagatingVirtualGatewaysValue{}
}

var _ basetypes.ObjectValuable = RoutePropagatingVirtualGatewaysValue{}

type RoutePropagatingVirtualGatewaysValue struct {
	VirtualGatewayId basetypes.StringValue `tfsdk:"virtual_gateway_id"`
	state            attr.ValueState
}

func (v RoutePropagatingVirtualGatewaysValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["virtual_gateway_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.VirtualGatewayId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["virtual_gateway_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RoutePropagatingVirtualGatewaysValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RoutePropagatingVirtualGatewaysValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RoutePropagatingVirtualGatewaysValue) String() string {
	return "RoutePropagatingVirtualGatewaysValue"
}

func (v RoutePropagatingVirtualGatewaysValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"virtual_gateway_id": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"virtual_gateway_id": v.VirtualGatewayId,
		})

	return objVal, diags
}

func (v RoutePropagatingVirtualGatewaysValue) Equal(o attr.Value) bool {
	other, ok := o.(RoutePropagatingVirtualGatewaysValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.VirtualGatewayId.Equal(other.VirtualGatewayId) {
		return false
	}

	return true
}

func (v RoutePropagatingVirtualGatewaysValue) Type(ctx context.Context) attr.Type {
	return RoutePropagatingVirtualGatewaysType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RoutePropagatingVirtualGatewaysValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"virtual_gateway_id": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = RoutesType{}

type RoutesType struct {
	basetypes.ObjectType
}

func (t RoutesType) Equal(o attr.Type) bool {
	other, ok := o.(RoutesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RoutesType) String() string {
	return "RoutesType"
}

func (t RoutesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	creationMethodAttribute, ok := attributes["creation_method"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`creation_method is missing from object`)

		return nil, diags
	}

	creationMethodVal, ok := creationMethodAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`creation_method expected to be basetypes.StringValue, was: %T`, creationMethodAttribute))
	}

	destinationIpRangeAttribute, ok := attributes["destination_ip_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`destination_ip_range is missing from object`)

		return nil, diags
	}

	destinationIpRangeVal, ok := destinationIpRangeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`destination_ip_range expected to be basetypes.StringValue, was: %T`, destinationIpRangeAttribute))
	}

	destinationServiceIdAttribute, ok := attributes["destination_service_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`destination_service_id is missing from object`)

		return nil, diags
	}

	destinationServiceIdVal, ok := destinationServiceIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`destination_service_id expected to be basetypes.StringValue, was: %T`, destinationServiceIdAttribute))
	}

	gatewayIdAttribute, ok := attributes["gateway_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gateway_id is missing from object`)

		return nil, diags
	}

	gatewayIdVal, ok := gatewayIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gateway_id expected to be basetypes.StringValue, was: %T`, gatewayIdAttribute))
	}

	natGatewayIdAttribute, ok := attributes["nat_gateway_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nat_gateway_id is missing from object`)

		return nil, diags
	}

	natGatewayIdVal, ok := natGatewayIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nat_gateway_id expected to be basetypes.StringValue, was: %T`, natGatewayIdAttribute))
	}

	nicIdAttribute, ok := attributes["nic_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nic_id is missing from object`)

		return nil, diags
	}

	nicIdVal, ok := nicIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nic_id expected to be basetypes.StringValue, was: %T`, nicIdAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	vmIdAttribute, ok := attributes["vm_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vm_id is missing from object`)

		return nil, diags
	}

	vmIdVal, ok := vmIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vm_id expected to be basetypes.StringValue, was: %T`, vmIdAttribute))
	}

	vpcPeeringIdAttribute, ok := attributes["vpc_peering_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vpc_peering_id is missing from object`)

		return nil, diags
	}

	vpcPeeringIdVal, ok := vpcPeeringIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vpc_peering_id expected to be basetypes.StringValue, was: %T`, vpcPeeringIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RoutesValue{
		CreationMethod:       creationMethodVal,
		DestinationIpRange:   destinationIpRangeVal,
		DestinationServiceId: destinationServiceIdVal,
		GatewayId:            gatewayIdVal,
		NatGatewayId:         natGatewayIdVal,
		NicId:                nicIdVal,
		State:                stateVal,
		VmId:                 vmIdVal,
		VpcPeeringId:         vpcPeeringIdVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewRoutesValueNull() RoutesValue {
	return RoutesValue{
		state: attr.ValueStateNull,
	}
}

func NewRoutesValueUnknown() RoutesValue {
	return RoutesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRoutesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RoutesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RoutesValue Attribute Value",
				"While creating a RoutesValue value, a missing attribute value was detected. "+
					"A RoutesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RoutesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RoutesValue Attribute Type",
				"While creating a RoutesValue value, an invalid attribute value was detected. "+
					"A RoutesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RoutesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RoutesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RoutesValue Attribute Value",
				"While creating a RoutesValue value, an extra attribute value was detected. "+
					"A RoutesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RoutesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRoutesValueUnknown(), diags
	}

	creationMethodAttribute, ok := attributes["creation_method"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`creation_method is missing from object`)

		return NewRoutesValueUnknown(), diags
	}

	creationMethodVal, ok := creationMethodAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`creation_method expected to be basetypes.StringValue, was: %T`, creationMethodAttribute))
	}

	destinationIpRangeAttribute, ok := attributes["destination_ip_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`destination_ip_range is missing from object`)

		return NewRoutesValueUnknown(), diags
	}

	destinationIpRangeVal, ok := destinationIpRangeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`destination_ip_range expected to be basetypes.StringValue, was: %T`, destinationIpRangeAttribute))
	}

	destinationServiceIdAttribute, ok := attributes["destination_service_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`destination_service_id is missing from object`)

		return NewRoutesValueUnknown(), diags
	}

	destinationServiceIdVal, ok := destinationServiceIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`destination_service_id expected to be basetypes.StringValue, was: %T`, destinationServiceIdAttribute))
	}

	gatewayIdAttribute, ok := attributes["gateway_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gateway_id is missing from object`)

		return NewRoutesValueUnknown(), diags
	}

	gatewayIdVal, ok := gatewayIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gateway_id expected to be basetypes.StringValue, was: %T`, gatewayIdAttribute))
	}

	natGatewayIdAttribute, ok := attributes["nat_gateway_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nat_gateway_id is missing from object`)

		return NewRoutesValueUnknown(), diags
	}

	natGatewayIdVal, ok := natGatewayIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nat_gateway_id expected to be basetypes.StringValue, was: %T`, natGatewayIdAttribute))
	}

	nicIdAttribute, ok := attributes["nic_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nic_id is missing from object`)

		return NewRoutesValueUnknown(), diags
	}

	nicIdVal, ok := nicIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nic_id expected to be basetypes.StringValue, was: %T`, nicIdAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewRoutesValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	vmIdAttribute, ok := attributes["vm_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vm_id is missing from object`)

		return NewRoutesValueUnknown(), diags
	}

	vmIdVal, ok := vmIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vm_id expected to be basetypes.StringValue, was: %T`, vmIdAttribute))
	}

	vpcPeeringIdAttribute, ok := attributes["vpc_peering_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vpc_peering_id is missing from object`)

		return NewRoutesValueUnknown(), diags
	}

	vpcPeeringIdVal, ok := vpcPeeringIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vpc_peering_id expected to be basetypes.StringValue, was: %T`, vpcPeeringIdAttribute))
	}

	if diags.HasError() {
		return NewRoutesValueUnknown(), diags
	}

	return RoutesValue{
		CreationMethod:       creationMethodVal,
		DestinationIpRange:   destinationIpRangeVal,
		DestinationServiceId: destinationServiceIdVal,
		GatewayId:            gatewayIdVal,
		NatGatewayId:         natGatewayIdVal,
		NicId:                nicIdVal,
		State:                stateVal,
		VmId:                 vmIdVal,
		VpcPeeringId:         vpcPeeringIdVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewRoutesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RoutesValue {
	object, diags := NewRoutesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRoutesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RoutesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRoutesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRoutesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRoutesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRoutesValueMust(RoutesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RoutesType) ValueType(ctx context.Context) attr.Value {
	return RoutesValue{}
}

var _ basetypes.ObjectValuable = RoutesValue{}

type RoutesValue struct {
	CreationMethod       basetypes.StringValue `tfsdk:"creation_method"`
	DestinationIpRange   basetypes.StringValue `tfsdk:"destination_ip_range"`
	DestinationServiceId basetypes.StringValue `tfsdk:"destination_service_id"`
	GatewayId            basetypes.StringValue `tfsdk:"gateway_id"`
	NatGatewayId         basetypes.StringValue `tfsdk:"nat_gateway_id"`
	NicId                basetypes.StringValue `tfsdk:"nic_id"`
	State                basetypes.StringValue `tfsdk:"state"`
	VmId                 basetypes.StringValue `tfsdk:"vm_id"`
	VpcPeeringId         basetypes.StringValue `tfsdk:"vpc_peering_id"`
	state                attr.ValueState
}

func (v RoutesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["creation_method"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["destination_ip_range"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["destination_service_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["gateway_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["nat_gateway_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["nic_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vm_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vpc_peering_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.CreationMethod.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["creation_method"] = val

		val, err = v.DestinationIpRange.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["destination_ip_range"] = val

		val, err = v.DestinationServiceId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["destination_service_id"] = val

		val, err = v.GatewayId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gateway_id"] = val

		val, err = v.NatGatewayId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["nat_gateway_id"] = val

		val, err = v.NicId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["nic_id"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.VmId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vm_id"] = val

		val, err = v.VpcPeeringId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vpc_peering_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RoutesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RoutesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RoutesValue) String() string {
	return "RoutesValue"
}

func (v RoutesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"creation_method":        basetypes.StringType{},
		"destination_ip_range":   basetypes.StringType{},
		"destination_service_id": basetypes.StringType{},
		"gateway_id":             basetypes.StringType{},
		"nat_gateway_id":         basetypes.StringType{},
		"nic_id":                 basetypes.StringType{},
		"state":                  basetypes.StringType{},
		"vm_id":                  basetypes.StringType{},
		"vpc_peering_id":         basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"creation_method":        v.CreationMethod,
			"destination_ip_range":   v.DestinationIpRange,
			"destination_service_id": v.DestinationServiceId,
			"gateway_id":             v.GatewayId,
			"nat_gateway_id":         v.NatGatewayId,
			"nic_id":                 v.NicId,
			"state":                  v.State,
			"vm_id":                  v.VmId,
			"vpc_peering_id":         v.VpcPeeringId,
		})

	return objVal, diags
}

func (v RoutesValue) Equal(o attr.Value) bool {
	other, ok := o.(RoutesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreationMethod.Equal(other.CreationMethod) {
		return false
	}

	if !v.DestinationIpRange.Equal(other.DestinationIpRange) {
		return false
	}

	if !v.DestinationServiceId.Equal(other.DestinationServiceId) {
		return false
	}

	if !v.GatewayId.Equal(other.GatewayId) {
		return false
	}

	if !v.NatGatewayId.Equal(other.NatGatewayId) {
		return false
	}

	if !v.NicId.Equal(other.NicId) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.VmId.Equal(other.VmId) {
		return false
	}

	if !v.VpcPeeringId.Equal(other.VpcPeeringId) {
		return false
	}

	return true
}

func (v RoutesValue) Type(ctx context.Context) attr.Type {
	return RoutesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RoutesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"creation_method":        basetypes.StringType{},
		"destination_ip_range":   basetypes.StringType{},
		"destination_service_id": basetypes.StringType{},
		"gateway_id":             basetypes.StringType{},
		"nat_gateway_id":         basetypes.StringType{},
		"nic_id":                 basetypes.StringType{},
		"state":                  basetypes.StringType{},
		"vm_id":                  basetypes.StringType{},
		"vpc_peering_id":         basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TagsType{}

type TagsType struct {
	basetypes.ObjectType
}

func (t TagsType) Equal(o attr.Type) bool {
	other, ok := o.(TagsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TagsType) String() string {
	return "TagsType"
}

func (t TagsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TagsValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewTagsValueNull() TagsValue {
	return TagsValue{
		state: attr.ValueStateNull,
	}
}

func NewTagsValueUnknown() TagsValue {
	return TagsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTagsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TagsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TagsValue Attribute Value",
				"While creating a TagsValue value, a missing attribute value was detected. "+
					"A TagsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TagsValue Attribute Type",
				"While creating a TagsValue value, an invalid attribute value was detected. "+
					"A TagsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TagsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TagsValue Attribute Value",
				"While creating a TagsValue value, an extra attribute value was detected. "+
					"A TagsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TagsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	return TagsValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewTagsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TagsValue {
	object, diags := NewTagsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTagsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TagsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTagsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTagsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTagsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTagsValueMust(TagsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TagsType) ValueType(ctx context.Context) attr.Value {
	return TagsValue{}
}

var _ basetypes.ObjectValuable = TagsValue{}

type TagsValue struct {
	Key   basetypes.StringValue `tfsdk:"key"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v TagsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TagsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TagsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TagsValue) String() string {
	return "TagsValue"
}

func (v TagsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"key":   v.Key,
			"value": v.Value,
		})

	return objVal, diags
}

func (v TagsValue) Equal(o attr.Value) bool {
	other, ok := o.(TagsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v TagsValue) Type(ctx context.Context) attr.Type {
	return TagsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TagsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}
