// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package routetable

import (
	"context"

	"gitlab.numspot.cloud/cloud/terraform-provider-numspot/internal/services/tags"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func RouteTableDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the route tables.",
				MarkdownDescription: "The IDs of the route tables.",
			},
			"items": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the route table.",
							MarkdownDescription: "The ID of the route table.",
						},
						"link_route_tables": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the association between the route table and the Subnet.",
										MarkdownDescription: "The ID of the association between the route table and the Subnet.",
									},
									"main": schema.BoolAttribute{
										Computed:            true,
										Description:         "If true, the route table is the main one.",
										MarkdownDescription: "If true, the route table is the main one.",
									},
									"route_table_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the route table.",
										MarkdownDescription: "The ID of the route table.",
									},
									"subnet_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the Subnet.",
										MarkdownDescription: "The ID of the Subnet.",
									},
									"vpc_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the Vpc.",
										MarkdownDescription: "The ID of the Vpc.",
									},
								},
								CustomType: LinkRouteTablesType{
									ObjectType: types.ObjectType{
										AttrTypes: LinkRouteTablesValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "One or more associations between the route table and Subnets.",
							MarkdownDescription: "One or more associations between the route table and Subnets.",
						},
						"route_propagating_virtual_gateways": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"virtual_gateway_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the virtual gateway.",
										MarkdownDescription: "The ID of the virtual gateway.",
									},
								},
								CustomType: RoutePropagatingVirtualGatewaysType{
									ObjectType: types.ObjectType{
										AttrTypes: RoutePropagatingVirtualGatewaysValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "Information about virtual gateways propagating routes.",
							MarkdownDescription: "Information about virtual gateways propagating routes.",
						},
						"routes": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"creation_method": schema.StringAttribute{
										Computed:            true,
										Description:         "The method used to create the route.",
										MarkdownDescription: "The method used to create the route.",
									},
									"destination_ip_range": schema.StringAttribute{
										Computed:            true,
										Description:         "The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).",
										MarkdownDescription: "The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).",
									},
									"destination_service_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the NumSpot service.",
										MarkdownDescription: "The ID of the NumSpot service.",
									},
									"gateway_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the Internet gateway or virtual gateway attached to the Vpc.",
										MarkdownDescription: "The ID of the Internet gateway or virtual gateway attached to the Vpc.",
									},
									"nat_gateway_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of a NAT gateway attached to the Vpc.",
										MarkdownDescription: "The ID of a NAT gateway attached to the Vpc.",
									},
									"nic_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the NIC.",
										MarkdownDescription: "The ID of the NIC.",
									},
									"state": schema.StringAttribute{
										Computed:            true,
										Description:         "The state of a route in the route table (always `active`). ",
										MarkdownDescription: "The state of a route in the route table (always `active`). ",
									},
									"vm_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of a VM specified in a route in the table.",
										MarkdownDescription: "The ID of a VM specified in a route in the table.",
									},
									"vpc_peering_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the Vpc peering.",
										MarkdownDescription: "The ID of the Vpc peering.",
									},
								},
								CustomType: RoutesType{
									ObjectType: types.ObjectType{
										AttrTypes: RoutesValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "One or more routes in the route table.",
							MarkdownDescription: "One or more routes in the route table.",
						},
						"tags": tags.TagsSchema(ctx),
						"vpc_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Vpc for the route table.",
							MarkdownDescription: "The ID of the Vpc for the route table.",
						},
					},
				},
				Computed:            true,
				Description:         "Information about one or more route tables.",
				MarkdownDescription: "Information about one or more route tables.",
			},
			"link_route_table_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the route tables involved in the associations.",
				MarkdownDescription: "The IDs of the route tables involved in the associations.",
			},
			"link_route_table_link_route_table_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the associations between the route tables and the Subnets.",
				MarkdownDescription: "The IDs of the associations between the route tables and the Subnets.",
			},
			"link_route_table_main": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If true, the route tables are the main ones for their Vpcs.",
				MarkdownDescription: "If true, the route tables are the main ones for their Vpcs.",
			},
			"link_subnet_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Subnets involved in the associations.",
				MarkdownDescription: "The IDs of the Subnets involved in the associations.",
			},
			"route_creation_methods": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The methods used to create a route.",
				MarkdownDescription: "The methods used to create a route.",
			},
			"route_destination_ip_ranges": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IP ranges specified in routes in the tables.",
				MarkdownDescription: "The IP ranges specified in routes in the tables.",
			},
			"route_destination_service_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The service IDs specified in routes in the tables.",
				MarkdownDescription: "The service IDs specified in routes in the tables.",
			},
			"route_gateway_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the gateways specified in routes in the tables.",
				MarkdownDescription: "The IDs of the gateways specified in routes in the tables.",
			},
			"route_nat_gateway_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the NAT gateways specified in routes in the tables.",
				MarkdownDescription: "The IDs of the NAT gateways specified in routes in the tables.",
			},
			"route_states": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The states of routes in the route tables (always `active`).",
				MarkdownDescription: "The states of routes in the route tables (always `active`).",
			},
			"route_vm_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the VMs specified in routes in the tables.",
				MarkdownDescription: "The IDs of the VMs specified in routes in the tables.",
			},
			"route_vpc_peering_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Vpc peerings specified in routes in the tables.",
				MarkdownDescription: "The IDs of the Vpc peerings specified in routes in the tables.",
			},
			"tag_keys": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The keys of the tags associated with the route tables.",
				MarkdownDescription: "The keys of the tags associated with the route tables.",
			},
			"tag_values": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The values of the tags associated with the route tables.",
				MarkdownDescription: "The values of the tags associated with the route tables.",
			},
			"tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The key/value combination of the tags associated with the route tables, in the following format: \"Filters\":{\"Tags\":[\"TAGKEY=TAGVALUE\"]}.",
				MarkdownDescription: "The key/value combination of the tags associated with the route tables, in the following format: \"Filters\":{\"Tags\":[\"TAGKEY=TAGVALUE\"]}.",
			},
			"vpc_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Vpcs for the route tables.",
				MarkdownDescription: "The IDs of the Vpcs for the route tables.",
			},
		},
		DeprecationMessage: "Managing IAAS services with Terraform is deprecated",
	}
}

type RouteTableModelDatasource struct {
	Id                              types.String `tfsdk:"id"`
	LinkRouteTables                 types.List   `tfsdk:"link_route_tables"`
	RoutePropagatingVirtualGateways types.List   `tfsdk:"route_propagating_virtual_gateways"`
	Routes                          types.List   `tfsdk:"routes"`
	Tags                            types.List   `tfsdk:"tags"`
	VpcId                           types.String `tfsdk:"vpc_id"`
}
