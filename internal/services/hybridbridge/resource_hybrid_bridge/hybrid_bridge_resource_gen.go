// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_hybrid_bridge

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func HybridBridgeResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The bridge identifier",
				MarkdownDescription: "The bridge identifier",
			},
			"managed_service_id": schema.StringAttribute{
				Required: true,
			},
			"route": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"destination_ip_range": schema.StringAttribute{
						Computed: true,
					},
					"gateway_id": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: RouteType{
					ObjectType: types.ObjectType{
						AttrTypes: RouteValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "The route object representation.",
				MarkdownDescription: "The route object representation.",
			},
			"vpc_id": schema.StringAttribute{
				Required: true,
			},
		},
	}
}

type HybridBridgeModel struct {
	Id               types.String `tfsdk:"id"`
	ManagedServiceId types.String `tfsdk:"managed_service_id"`
	Route            RouteValue   `tfsdk:"route"`
	VpcId            types.String `tfsdk:"vpc_id"`
}

var _ basetypes.ObjectTypable = RouteType{}

type RouteType struct {
	basetypes.ObjectType
}

func (t RouteType) Equal(o attr.Type) bool {
	other, ok := o.(RouteType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RouteType) String() string {
	return "RouteType"
}

func (t RouteType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	destinationIpRangeAttribute, ok := attributes["destination_ip_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`destination_ip_range is missing from object`)

		return nil, diags
	}

	destinationIpRangeVal, ok := destinationIpRangeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`destination_ip_range expected to be basetypes.StringValue, was: %T`, destinationIpRangeAttribute))
	}

	gatewayIdAttribute, ok := attributes["gateway_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gateway_id is missing from object`)

		return nil, diags
	}

	gatewayIdVal, ok := gatewayIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gateway_id expected to be basetypes.StringValue, was: %T`, gatewayIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RouteValue{
		DestinationIpRange: destinationIpRangeVal,
		GatewayId:          gatewayIdVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewRouteValueNull() RouteValue {
	return RouteValue{
		state: attr.ValueStateNull,
	}
}

func NewRouteValueUnknown() RouteValue {
	return RouteValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRouteValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RouteValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RouteValue Attribute Value",
				"While creating a RouteValue value, a missing attribute value was detected. "+
					"A RouteValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RouteValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RouteValue Attribute Type",
				"While creating a RouteValue value, an invalid attribute value was detected. "+
					"A RouteValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RouteValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RouteValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RouteValue Attribute Value",
				"While creating a RouteValue value, an extra attribute value was detected. "+
					"A RouteValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RouteValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRouteValueUnknown(), diags
	}

	destinationIpRangeAttribute, ok := attributes["destination_ip_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`destination_ip_range is missing from object`)

		return NewRouteValueUnknown(), diags
	}

	destinationIpRangeVal, ok := destinationIpRangeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`destination_ip_range expected to be basetypes.StringValue, was: %T`, destinationIpRangeAttribute))
	}

	gatewayIdAttribute, ok := attributes["gateway_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gateway_id is missing from object`)

		return NewRouteValueUnknown(), diags
	}

	gatewayIdVal, ok := gatewayIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gateway_id expected to be basetypes.StringValue, was: %T`, gatewayIdAttribute))
	}

	if diags.HasError() {
		return NewRouteValueUnknown(), diags
	}

	return RouteValue{
		DestinationIpRange: destinationIpRangeVal,
		GatewayId:          gatewayIdVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewRouteValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RouteValue {
	object, diags := NewRouteValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRouteValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RouteType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRouteValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRouteValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRouteValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRouteValueMust(RouteValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RouteType) ValueType(ctx context.Context) attr.Value {
	return RouteValue{}
}

var _ basetypes.ObjectValuable = RouteValue{}

type RouteValue struct {
	DestinationIpRange basetypes.StringValue `tfsdk:"destination_ip_range"`
	GatewayId          basetypes.StringValue `tfsdk:"gateway_id"`
	state              attr.ValueState
}

func (v RouteValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["destination_ip_range"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["gateway_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.DestinationIpRange.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["destination_ip_range"] = val

		val, err = v.GatewayId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gateway_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RouteValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RouteValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RouteValue) String() string {
	return "RouteValue"
}

func (v RouteValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"destination_ip_range": basetypes.StringType{},
		"gateway_id":           basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"destination_ip_range": v.DestinationIpRange,
			"gateway_id":           v.GatewayId,
		})

	return objVal, diags
}

func (v RouteValue) Equal(o attr.Value) bool {
	other, ok := o.(RouteValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DestinationIpRange.Equal(other.DestinationIpRange) {
		return false
	}

	if !v.GatewayId.Equal(other.GatewayId) {
		return false
	}

	return true
}

func (v RouteValue) Type(ctx context.Context) attr.Type {
	return RouteType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RouteValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"destination_ip_range": basetypes.StringType{},
		"gateway_id":           basetypes.StringType{},
	}
}
