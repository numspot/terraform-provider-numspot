// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package vpc

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"gitlab.numspot.cloud/cloud/terraform-provider-numspot/internal/services/tags"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func VpcDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"dhcp_options_set_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the DHCP options sets.",
				MarkdownDescription: "The IDs of the DHCP options sets.",
			},
			"ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Vpcs.",
				MarkdownDescription: "The IDs of the Vpcs.",
			},
			"ip_ranges": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IP ranges for the Vpcs, in CIDR notation (for example, `10.0.0.0/16`).",
				MarkdownDescription: "The IP ranges for the Vpcs, in CIDR notation (for example, `10.0.0.0/16`).",
			},
			"is_default": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If true, the Vpc used is the default one.",
				MarkdownDescription: "If true, the Vpc used is the default one.",
			},
			"items": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"dhcp_options_set_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the DHCP options set (or `default` if you want to associate the default one).",
							MarkdownDescription: "The ID of the DHCP options set (or `default` if you want to associate the default one).",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Vpc.",
							MarkdownDescription: "The ID of the Vpc.",
						},
						"ip_range": schema.StringAttribute{
							Computed:            true,
							Description:         "The IP range for the Vpc, in CIDR notation (for example, `10.0.0.0/16`).",
							MarkdownDescription: "The IP range for the Vpc, in CIDR notation (for example, `10.0.0.0/16`).",
						},
						"state": schema.StringAttribute{
							Computed:            true,
							Description:         "The state of the Vpc (`pending` \\| `available` \\| `deleting`).",
							MarkdownDescription: "The state of the Vpc (`pending` \\| `available` \\| `deleting`).",
						},
						"tags": tags.TagsSchema(ctx),
						"tenancy": schema.StringAttribute{
							Computed:            true,
							Description:         "The VM tenancy in a Vpc.",
							MarkdownDescription: "The VM tenancy in a Vpc.",
						},
					},
				},
				Computed:            true,
				Description:         "Information about the described Vpcs.",
				MarkdownDescription: "Information about the described Vpcs.",
			},
			"states": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The states of the Vpcs (`pending` \\| `available` \\| `deleting`).",
				MarkdownDescription: "The states of the Vpcs (`pending` \\| `available` \\| `deleting`).",
			},
			"tag_keys": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The keys of the tags associated with the Vpcs.",
				MarkdownDescription: "The keys of the tags associated with the Vpcs.",
			},
			"tag_values": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The values of the tags associated with the Vpcs.",
				MarkdownDescription: "The values of the tags associated with the Vpcs.",
			},
			"tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The key/value combination of the tags associated with the Vpcs, in the following format: \"Filters\":{\"Tags\":[\"TAGKEY=TAGVALUE\"]}.",
				MarkdownDescription: "The key/value combination of the tags associated with the Vpcs, in the following format: \"Filters\":{\"Tags\":[\"TAGKEY=TAGVALUE\"]}.",
			},
		},
		DeprecationMessage: "Managing IAAS services with Terraform is deprecated",
	}
}
