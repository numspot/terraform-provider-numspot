// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_security_group

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func SecurityGroupResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"description": schema.StringAttribute{
				Required:            true,
				Description:         "A description for the security group.<br />\nThis description can contain between 1 and 255 characters. Allowed characters are `a-z`, `A-Z`, `0-9`, accented letters, spaces, and `_.-:/()#,@[]+=&;{}!$*`.",
				MarkdownDescription: "A description for the security group.<br />\nThis description can contain between 1 and 255 characters. Allowed characters are `a-z`, `A-Z`, `0-9`, accented letters, spaces, and `_.-:/()#,@[]+=&;{}!$*`.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the security group.",
				MarkdownDescription: "The ID of the security group.",
			},
			"inbound_rules": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"from_port_range": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.",
							MarkdownDescription: "The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.",
						},
						"inbound_security_groups_members": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"security_group_id": schema.StringAttribute{
										Optional:            true,
										Computed:            true,
										Description:         "The ID of a source or destination security group that you want to link to the security group of the rule.",
										MarkdownDescription: "The ID of a source or destination security group that you want to link to the security group of the rule.",
									},
									"security_group_name": schema.StringAttribute{
										Optional:            true,
										Computed:            true,
										Description:         "(Public Cloud only) The name of a source or destination security group that you want to link to the security group of the rule.",
										MarkdownDescription: "(Public Cloud only) The name of a source or destination security group that you want to link to the security group of the rule.",
									},
								},
								CustomType: InboundSecurityGroupsMembersType{
									ObjectType: types.ObjectType{
										AttrTypes: InboundSecurityGroupsMembersValue{}.AttributeTypes(ctx),
									},
								},
							},
							Optional:            true,
							Computed:            true,
							Description:         "Information about one or more source or destination security groups.",
							MarkdownDescription: "Information about one or more source or destination security groups.",
						},
						"ip_protocol": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Vpc, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).",
							MarkdownDescription: "The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Vpc, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).",
						},
						"ip_ranges": schema.ListAttribute{
							ElementType:         types.StringType,
							Optional:            true,
							Computed:            true,
							Description:         "One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).",
							MarkdownDescription: "One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).",
						},
						"service_ids": schema.ListAttribute{
							ElementType:         types.StringType,
							Optional:            true,
							Computed:            true,
							Description:         "One or more service IDs to allow traffic from a Vpc to access the corresponding NumSpot services.",
							MarkdownDescription: "One or more service IDs to allow traffic from a Vpc to access the corresponding NumSpot services.",
						},
						"to_port_range": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "The end of the port range for the TCP and UDP protocols, or an ICMP code number.",
							MarkdownDescription: "The end of the port range for the TCP and UDP protocols, or an ICMP code number.",
						},
					},
					CustomType: InboundRulesType{
						ObjectType: types.ObjectType{
							AttrTypes: InboundRulesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "The inbound rules associated with the security group.",
				MarkdownDescription: "The inbound rules associated with the security group.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the security group.<br />\nThis name must not start with `sg-`.<br />\nThis name must be unique and contain between 1 and 255 characters. Allowed characters are `a-z`, `A-Z`, `0-9`, spaces, and `_.-:/()#,@[]+=&;{}!$*`.",
				MarkdownDescription: "The name of the security group.<br />\nThis name must not start with `sg-`.<br />\nThis name must be unique and contain between 1 and 255 characters. Allowed characters are `a-z`, `A-Z`, `0-9`, spaces, and `_.-:/()#,@[]+=&;{}!$*`.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"outbound_rules": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"from_port_range": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.",
							MarkdownDescription: "The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.",
						},
						"ip_protocol": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Vpc, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).",
							MarkdownDescription: "The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Vpc, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).",
						},
						"ip_ranges": schema.ListAttribute{
							ElementType:         types.StringType,
							Optional:            true,
							Computed:            true,
							Description:         "One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).",
							MarkdownDescription: "One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).",
						},
						"outbound_security_groups_members": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"security_group_id": schema.StringAttribute{
										Optional:            true,
										Computed:            true,
										Description:         "The ID of a source or destination security group that you want to link to the security group of the rule.",
										MarkdownDescription: "The ID of a source or destination security group that you want to link to the security group of the rule.",
									},
									"security_group_name": schema.StringAttribute{
										Optional:            true,
										Computed:            true,
										Description:         "(Public Cloud only) The name of a source or destination security group that you want to link to the security group of the rule.",
										MarkdownDescription: "(Public Cloud only) The name of a source or destination security group that you want to link to the security group of the rule.",
									},
								},
								CustomType: OutboundSecurityGroupsMembersType{
									ObjectType: types.ObjectType{
										AttrTypes: OutboundSecurityGroupsMembersValue{}.AttributeTypes(ctx),
									},
								},
							},
							Optional:            true,
							Computed:            true,
							Description:         "Information about one or more source or destination security groups.",
							MarkdownDescription: "Information about one or more source or destination security groups.",
						},
						"service_ids": schema.ListAttribute{
							ElementType:         types.StringType,
							Optional:            true,
							Computed:            true,
							Description:         "One or more service IDs to allow traffic from a Vpc to access the corresponding NumSpot services.",
							MarkdownDescription: "One or more service IDs to allow traffic from a Vpc to access the corresponding NumSpot services.",
						},
						"to_port_range": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "The end of the port range for the TCP and UDP protocols, or an ICMP code number.",
							MarkdownDescription: "The end of the port range for the TCP and UDP protocols, or an ICMP code number.",
						},
					},
					CustomType: OutboundRulesType{
						ObjectType: types.ObjectType{
							AttrTypes: OutboundRulesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "The outbound rules associated with the security group.",
				MarkdownDescription: "The outbound rules associated with the security group.",
			},
			"tags": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required:            true,
							Description:         "The key of the tag, with a minimum of 1 character.",
							MarkdownDescription: "The key of the tag, with a minimum of 1 character.",
						},
						"value": schema.StringAttribute{
							Required:            true,
							Description:         "The value of the tag, between 0 and 255 characters.",
							MarkdownDescription: "The value of the tag, between 0 and 255 characters.",
						},
					},
					CustomType: TagsType{
						ObjectType: types.ObjectType{
							AttrTypes: TagsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "One or more tags associated with the security group.",
				MarkdownDescription: "One or more tags associated with the security group.",
			},
			"vpc_id": schema.StringAttribute{
				Required:            true,
				Description:         "The ID of the Vpc for the security group.",
				MarkdownDescription: "The ID of the Vpc for the security group.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
			},
		},
	}
}

type SecurityGroupModel struct {
	Description   types.String `tfsdk:"description"`
	Id            types.String `tfsdk:"id"`
	InboundRules  types.Set    `tfsdk:"inbound_rules"`
	Name          types.String `tfsdk:"name"`
	OutboundRules types.Set    `tfsdk:"outbound_rules"`
	Tags          types.List   `tfsdk:"tags"`
	VpcId         types.String `tfsdk:"vpc_id"`
}

var _ basetypes.ObjectTypable = InboundRulesType{}

type InboundRulesType struct {
	basetypes.ObjectType
}

func (t InboundRulesType) Equal(o attr.Type) bool {
	other, ok := o.(InboundRulesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t InboundRulesType) String() string {
	return "InboundRulesType"
}

func (t InboundRulesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	fromPortRangeAttribute, ok := attributes["from_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`from_port_range is missing from object`)

		return nil, diags
	}

	fromPortRangeVal, ok := fromPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`from_port_range expected to be basetypes.Int64Value, was: %T`, fromPortRangeAttribute))
	}

	inboundSecurityGroupsMembersAttribute, ok := attributes["inbound_security_groups_members"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`inbound_security_groups_members is missing from object`)

		return nil, diags
	}

	inboundSecurityGroupsMembersVal, ok := inboundSecurityGroupsMembersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`inbound_security_groups_members expected to be basetypes.ListValue, was: %T`, inboundSecurityGroupsMembersAttribute))
	}

	ipProtocolAttribute, ok := attributes["ip_protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_protocol is missing from object`)

		return nil, diags
	}

	ipProtocolVal, ok := ipProtocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_protocol expected to be basetypes.StringValue, was: %T`, ipProtocolAttribute))
	}

	ipRangesAttribute, ok := attributes["ip_ranges"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_ranges is missing from object`)

		return nil, diags
	}

	ipRangesVal, ok := ipRangesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_ranges expected to be basetypes.ListValue, was: %T`, ipRangesAttribute))
	}

	serviceIdsAttribute, ok := attributes["service_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_ids is missing from object`)

		return nil, diags
	}

	serviceIdsVal, ok := serviceIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_ids expected to be basetypes.ListValue, was: %T`, serviceIdsAttribute))
	}

	toPortRangeAttribute, ok := attributes["to_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`to_port_range is missing from object`)

		return nil, diags
	}

	toPortRangeVal, ok := toPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`to_port_range expected to be basetypes.Int64Value, was: %T`, toPortRangeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return InboundRulesValue{
		FromPortRange:                fromPortRangeVal,
		InboundSecurityGroupsMembers: inboundSecurityGroupsMembersVal,
		IpProtocol:                   ipProtocolVal,
		IpRanges:                     ipRangesVal,
		ServiceIds:                   serviceIdsVal,
		ToPortRange:                  toPortRangeVal,
		state:                        attr.ValueStateKnown,
	}, diags
}

func NewInboundRulesValueNull() InboundRulesValue {
	return InboundRulesValue{
		state: attr.ValueStateNull,
	}
}

func NewInboundRulesValueUnknown() InboundRulesValue {
	return InboundRulesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewInboundRulesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (InboundRulesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing InboundRulesValue Attribute Value",
				"While creating a InboundRulesValue value, a missing attribute value was detected. "+
					"A InboundRulesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InboundRulesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid InboundRulesValue Attribute Type",
				"While creating a InboundRulesValue value, an invalid attribute value was detected. "+
					"A InboundRulesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InboundRulesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("InboundRulesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra InboundRulesValue Attribute Value",
				"While creating a InboundRulesValue value, an extra attribute value was detected. "+
					"A InboundRulesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra InboundRulesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewInboundRulesValueUnknown(), diags
	}

	fromPortRangeAttribute, ok := attributes["from_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`from_port_range is missing from object`)

		return NewInboundRulesValueUnknown(), diags
	}

	fromPortRangeVal, ok := fromPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`from_port_range expected to be basetypes.Int64Value, was: %T`, fromPortRangeAttribute))
	}

	inboundSecurityGroupsMembersAttribute, ok := attributes["inbound_security_groups_members"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`inbound_security_groups_members is missing from object`)

		return NewInboundRulesValueUnknown(), diags
	}

	inboundSecurityGroupsMembersVal, ok := inboundSecurityGroupsMembersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`inbound_security_groups_members expected to be basetypes.ListValue, was: %T`, inboundSecurityGroupsMembersAttribute))
	}

	ipProtocolAttribute, ok := attributes["ip_protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_protocol is missing from object`)

		return NewInboundRulesValueUnknown(), diags
	}

	ipProtocolVal, ok := ipProtocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_protocol expected to be basetypes.StringValue, was: %T`, ipProtocolAttribute))
	}

	ipRangesAttribute, ok := attributes["ip_ranges"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_ranges is missing from object`)

		return NewInboundRulesValueUnknown(), diags
	}

	ipRangesVal, ok := ipRangesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_ranges expected to be basetypes.ListValue, was: %T`, ipRangesAttribute))
	}

	serviceIdsAttribute, ok := attributes["service_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_ids is missing from object`)

		return NewInboundRulesValueUnknown(), diags
	}

	serviceIdsVal, ok := serviceIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_ids expected to be basetypes.ListValue, was: %T`, serviceIdsAttribute))
	}

	toPortRangeAttribute, ok := attributes["to_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`to_port_range is missing from object`)

		return NewInboundRulesValueUnknown(), diags
	}

	toPortRangeVal, ok := toPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`to_port_range expected to be basetypes.Int64Value, was: %T`, toPortRangeAttribute))
	}

	if diags.HasError() {
		return NewInboundRulesValueUnknown(), diags
	}

	return InboundRulesValue{
		FromPortRange:                fromPortRangeVal,
		InboundSecurityGroupsMembers: inboundSecurityGroupsMembersVal,
		IpProtocol:                   ipProtocolVal,
		IpRanges:                     ipRangesVal,
		ServiceIds:                   serviceIdsVal,
		ToPortRange:                  toPortRangeVal,
		state:                        attr.ValueStateKnown,
	}, diags
}

func NewInboundRulesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) InboundRulesValue {
	object, diags := NewInboundRulesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewInboundRulesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t InboundRulesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewInboundRulesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewInboundRulesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewInboundRulesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewInboundRulesValueMust(InboundRulesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t InboundRulesType) ValueType(ctx context.Context) attr.Value {
	return InboundRulesValue{}
}

var _ basetypes.ObjectValuable = InboundRulesValue{}

type InboundRulesValue struct {
	FromPortRange                basetypes.Int64Value  `tfsdk:"from_port_range"`
	InboundSecurityGroupsMembers basetypes.ListValue   `tfsdk:"inbound_security_groups_members"`
	IpProtocol                   basetypes.StringValue `tfsdk:"ip_protocol"`
	IpRanges                     basetypes.ListValue   `tfsdk:"ip_ranges"`
	ServiceIds                   basetypes.ListValue   `tfsdk:"service_ids"`
	ToPortRange                  basetypes.Int64Value  `tfsdk:"to_port_range"`
	state                        attr.ValueState
}

func (v InboundRulesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["from_port_range"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["inbound_security_groups_members"] = basetypes.ListType{
		ElemType: InboundSecurityGroupsMembersValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["ip_protocol"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ip_ranges"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["service_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["to_port_range"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.FromPortRange.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["from_port_range"] = val

		val, err = v.InboundSecurityGroupsMembers.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["inbound_security_groups_members"] = val

		val, err = v.IpProtocol.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_protocol"] = val

		val, err = v.IpRanges.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_ranges"] = val

		val, err = v.ServiceIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["service_ids"] = val

		val, err = v.ToPortRange.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["to_port_range"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v InboundRulesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v InboundRulesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v InboundRulesValue) String() string {
	return "InboundRulesValue"
}

func (v InboundRulesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	inboundSecurityGroupsMembers := types.ListValueMust(
		InboundSecurityGroupsMembersType{
			basetypes.ObjectType{
				AttrTypes: InboundSecurityGroupsMembersValue{}.AttributeTypes(ctx),
			},
		},
		v.InboundSecurityGroupsMembers.Elements(),
	)

	if v.InboundSecurityGroupsMembers.IsNull() {
		inboundSecurityGroupsMembers = types.ListNull(
			InboundSecurityGroupsMembersType{
				basetypes.ObjectType{
					AttrTypes: InboundSecurityGroupsMembersValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.InboundSecurityGroupsMembers.IsUnknown() {
		inboundSecurityGroupsMembers = types.ListUnknown(
			InboundSecurityGroupsMembersType{
				basetypes.ObjectType{
					AttrTypes: InboundSecurityGroupsMembersValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var ipRangesVal basetypes.ListValue
	switch {
	case v.IpRanges.IsUnknown():
		ipRangesVal = types.ListUnknown(types.StringType)
	case v.IpRanges.IsNull():
		ipRangesVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		ipRangesVal, d = types.ListValue(types.StringType, v.IpRanges.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"from_port_range": basetypes.Int64Type{},
			"inbound_security_groups_members": basetypes.ListType{
				ElemType: InboundSecurityGroupsMembersValue{}.Type(ctx),
			},
			"ip_protocol": basetypes.StringType{},
			"ip_ranges": basetypes.ListType{
				ElemType: types.StringType,
			},
			"service_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"to_port_range": basetypes.Int64Type{},
		}), diags
	}

	var serviceIdsVal basetypes.ListValue
	switch {
	case v.ServiceIds.IsUnknown():
		serviceIdsVal = types.ListUnknown(types.StringType)
	case v.ServiceIds.IsNull():
		serviceIdsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		serviceIdsVal, d = types.ListValue(types.StringType, v.ServiceIds.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"from_port_range": basetypes.Int64Type{},
			"inbound_security_groups_members": basetypes.ListType{
				ElemType: InboundSecurityGroupsMembersValue{}.Type(ctx),
			},
			"ip_protocol": basetypes.StringType{},
			"ip_ranges": basetypes.ListType{
				ElemType: types.StringType,
			},
			"service_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"to_port_range": basetypes.Int64Type{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"from_port_range": basetypes.Int64Type{},
		"inbound_security_groups_members": basetypes.ListType{
			ElemType: InboundSecurityGroupsMembersValue{}.Type(ctx),
		},
		"ip_protocol": basetypes.StringType{},
		"ip_ranges": basetypes.ListType{
			ElemType: types.StringType,
		},
		"service_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"to_port_range": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"from_port_range":                 v.FromPortRange,
			"inbound_security_groups_members": inboundSecurityGroupsMembers,
			"ip_protocol":                     v.IpProtocol,
			"ip_ranges":                       ipRangesVal,
			"service_ids":                     serviceIdsVal,
			"to_port_range":                   v.ToPortRange,
		})

	return objVal, diags
}

func (v InboundRulesValue) Equal(o attr.Value) bool {
	other, ok := o.(InboundRulesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.FromPortRange.Equal(other.FromPortRange) {
		return false
	}

	if !v.InboundSecurityGroupsMembers.Equal(other.InboundSecurityGroupsMembers) {
		return false
	}

	if !v.IpProtocol.Equal(other.IpProtocol) {
		return false
	}

	if !v.IpRanges.Equal(other.IpRanges) {
		return false
	}

	if !v.ServiceIds.Equal(other.ServiceIds) {
		return false
	}

	if !v.ToPortRange.Equal(other.ToPortRange) {
		return false
	}

	return true
}

func (v InboundRulesValue) Type(ctx context.Context) attr.Type {
	return InboundRulesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v InboundRulesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"from_port_range": basetypes.Int64Type{},
		"inbound_security_groups_members": basetypes.ListType{
			ElemType: InboundSecurityGroupsMembersValue{}.Type(ctx),
		},
		"ip_protocol": basetypes.StringType{},
		"ip_ranges": basetypes.ListType{
			ElemType: types.StringType,
		},
		"service_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"to_port_range": basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = InboundSecurityGroupsMembersType{}

type InboundSecurityGroupsMembersType struct {
	basetypes.ObjectType
}

func (t InboundSecurityGroupsMembersType) Equal(o attr.Type) bool {
	other, ok := o.(InboundSecurityGroupsMembersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t InboundSecurityGroupsMembersType) String() string {
	return "InboundSecurityGroupsMembersType"
}

func (t InboundSecurityGroupsMembersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	securityGroupIdAttribute, ok := attributes["security_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_id is missing from object`)

		return nil, diags
	}

	securityGroupIdVal, ok := securityGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_id expected to be basetypes.StringValue, was: %T`, securityGroupIdAttribute))
	}

	securityGroupNameAttribute, ok := attributes["security_group_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_name is missing from object`)

		return nil, diags
	}

	securityGroupNameVal, ok := securityGroupNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_name expected to be basetypes.StringValue, was: %T`, securityGroupNameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return InboundSecurityGroupsMembersValue{
		SecurityGroupId:   securityGroupIdVal,
		SecurityGroupName: securityGroupNameVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewInboundSecurityGroupsMembersValueNull() InboundSecurityGroupsMembersValue {
	return InboundSecurityGroupsMembersValue{
		state: attr.ValueStateNull,
	}
}

func NewInboundSecurityGroupsMembersValueUnknown() InboundSecurityGroupsMembersValue {
	return InboundSecurityGroupsMembersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewInboundSecurityGroupsMembersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (InboundSecurityGroupsMembersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing InboundSecurityGroupsMembersValue Attribute Value",
				"While creating a InboundSecurityGroupsMembersValue value, a missing attribute value was detected. "+
					"A InboundSecurityGroupsMembersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InboundSecurityGroupsMembersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid InboundSecurityGroupsMembersValue Attribute Type",
				"While creating a InboundSecurityGroupsMembersValue value, an invalid attribute value was detected. "+
					"A InboundSecurityGroupsMembersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InboundSecurityGroupsMembersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("InboundSecurityGroupsMembersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra InboundSecurityGroupsMembersValue Attribute Value",
				"While creating a InboundSecurityGroupsMembersValue value, an extra attribute value was detected. "+
					"A InboundSecurityGroupsMembersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra InboundSecurityGroupsMembersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewInboundSecurityGroupsMembersValueUnknown(), diags
	}

	securityGroupIdAttribute, ok := attributes["security_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_id is missing from object`)

		return NewInboundSecurityGroupsMembersValueUnknown(), diags
	}

	securityGroupIdVal, ok := securityGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_id expected to be basetypes.StringValue, was: %T`, securityGroupIdAttribute))
	}

	securityGroupNameAttribute, ok := attributes["security_group_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_name is missing from object`)

		return NewInboundSecurityGroupsMembersValueUnknown(), diags
	}

	securityGroupNameVal, ok := securityGroupNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_name expected to be basetypes.StringValue, was: %T`, securityGroupNameAttribute))
	}

	if diags.HasError() {
		return NewInboundSecurityGroupsMembersValueUnknown(), diags
	}

	return InboundSecurityGroupsMembersValue{
		SecurityGroupId:   securityGroupIdVal,
		SecurityGroupName: securityGroupNameVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewInboundSecurityGroupsMembersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) InboundSecurityGroupsMembersValue {
	object, diags := NewInboundSecurityGroupsMembersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewInboundSecurityGroupsMembersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t InboundSecurityGroupsMembersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewInboundSecurityGroupsMembersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewInboundSecurityGroupsMembersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewInboundSecurityGroupsMembersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewInboundSecurityGroupsMembersValueMust(InboundSecurityGroupsMembersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t InboundSecurityGroupsMembersType) ValueType(ctx context.Context) attr.Value {
	return InboundSecurityGroupsMembersValue{}
}

var _ basetypes.ObjectValuable = InboundSecurityGroupsMembersValue{}

type InboundSecurityGroupsMembersValue struct {
	SecurityGroupId   basetypes.StringValue `tfsdk:"security_group_id"`
	SecurityGroupName basetypes.StringValue `tfsdk:"security_group_name"`
	state             attr.ValueState
}

func (v InboundSecurityGroupsMembersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["security_group_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["security_group_name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.SecurityGroupId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["security_group_id"] = val

		val, err = v.SecurityGroupName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["security_group_name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v InboundSecurityGroupsMembersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v InboundSecurityGroupsMembersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v InboundSecurityGroupsMembersValue) String() string {
	return "InboundSecurityGroupsMembersValue"
}

func (v InboundSecurityGroupsMembersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"security_group_id":   basetypes.StringType{},
		"security_group_name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"security_group_id":   v.SecurityGroupId,
			"security_group_name": v.SecurityGroupName,
		})

	return objVal, diags
}

func (v InboundSecurityGroupsMembersValue) Equal(o attr.Value) bool {
	other, ok := o.(InboundSecurityGroupsMembersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.SecurityGroupId.Equal(other.SecurityGroupId) {
		return false
	}

	if !v.SecurityGroupName.Equal(other.SecurityGroupName) {
		return false
	}

	return true
}

func (v InboundSecurityGroupsMembersValue) Type(ctx context.Context) attr.Type {
	return InboundSecurityGroupsMembersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v InboundSecurityGroupsMembersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"security_group_id":   basetypes.StringType{},
		"security_group_name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = OutboundRulesType{}

type OutboundRulesType struct {
	basetypes.ObjectType
}

func (t OutboundRulesType) Equal(o attr.Type) bool {
	other, ok := o.(OutboundRulesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OutboundRulesType) String() string {
	return "OutboundRulesType"
}

func (t OutboundRulesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	fromPortRangeAttribute, ok := attributes["from_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`from_port_range is missing from object`)

		return nil, diags
	}

	fromPortRangeVal, ok := fromPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`from_port_range expected to be basetypes.Int64Value, was: %T`, fromPortRangeAttribute))
	}

	ipProtocolAttribute, ok := attributes["ip_protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_protocol is missing from object`)

		return nil, diags
	}

	ipProtocolVal, ok := ipProtocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_protocol expected to be basetypes.StringValue, was: %T`, ipProtocolAttribute))
	}

	ipRangesAttribute, ok := attributes["ip_ranges"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_ranges is missing from object`)

		return nil, diags
	}

	ipRangesVal, ok := ipRangesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_ranges expected to be basetypes.ListValue, was: %T`, ipRangesAttribute))
	}

	outboundSecurityGroupsMembersAttribute, ok := attributes["outbound_security_groups_members"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`outbound_security_groups_members is missing from object`)

		return nil, diags
	}

	outboundSecurityGroupsMembersVal, ok := outboundSecurityGroupsMembersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`outbound_security_groups_members expected to be basetypes.ListValue, was: %T`, outboundSecurityGroupsMembersAttribute))
	}

	serviceIdsAttribute, ok := attributes["service_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_ids is missing from object`)

		return nil, diags
	}

	serviceIdsVal, ok := serviceIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_ids expected to be basetypes.ListValue, was: %T`, serviceIdsAttribute))
	}

	toPortRangeAttribute, ok := attributes["to_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`to_port_range is missing from object`)

		return nil, diags
	}

	toPortRangeVal, ok := toPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`to_port_range expected to be basetypes.Int64Value, was: %T`, toPortRangeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OutboundRulesValue{
		FromPortRange:                 fromPortRangeVal,
		IpProtocol:                    ipProtocolVal,
		IpRanges:                      ipRangesVal,
		OutboundSecurityGroupsMembers: outboundSecurityGroupsMembersVal,
		ServiceIds:                    serviceIdsVal,
		ToPortRange:                   toPortRangeVal,
		state:                         attr.ValueStateKnown,
	}, diags
}

func NewOutboundRulesValueNull() OutboundRulesValue {
	return OutboundRulesValue{
		state: attr.ValueStateNull,
	}
}

func NewOutboundRulesValueUnknown() OutboundRulesValue {
	return OutboundRulesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOutboundRulesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OutboundRulesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OutboundRulesValue Attribute Value",
				"While creating a OutboundRulesValue value, a missing attribute value was detected. "+
					"A OutboundRulesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OutboundRulesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OutboundRulesValue Attribute Type",
				"While creating a OutboundRulesValue value, an invalid attribute value was detected. "+
					"A OutboundRulesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OutboundRulesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OutboundRulesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OutboundRulesValue Attribute Value",
				"While creating a OutboundRulesValue value, an extra attribute value was detected. "+
					"A OutboundRulesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OutboundRulesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOutboundRulesValueUnknown(), diags
	}

	fromPortRangeAttribute, ok := attributes["from_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`from_port_range is missing from object`)

		return NewOutboundRulesValueUnknown(), diags
	}

	fromPortRangeVal, ok := fromPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`from_port_range expected to be basetypes.Int64Value, was: %T`, fromPortRangeAttribute))
	}

	ipProtocolAttribute, ok := attributes["ip_protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_protocol is missing from object`)

		return NewOutboundRulesValueUnknown(), diags
	}

	ipProtocolVal, ok := ipProtocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_protocol expected to be basetypes.StringValue, was: %T`, ipProtocolAttribute))
	}

	ipRangesAttribute, ok := attributes["ip_ranges"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_ranges is missing from object`)

		return NewOutboundRulesValueUnknown(), diags
	}

	ipRangesVal, ok := ipRangesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_ranges expected to be basetypes.ListValue, was: %T`, ipRangesAttribute))
	}

	outboundSecurityGroupsMembersAttribute, ok := attributes["outbound_security_groups_members"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`outbound_security_groups_members is missing from object`)

		return NewOutboundRulesValueUnknown(), diags
	}

	outboundSecurityGroupsMembersVal, ok := outboundSecurityGroupsMembersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`outbound_security_groups_members expected to be basetypes.ListValue, was: %T`, outboundSecurityGroupsMembersAttribute))
	}

	serviceIdsAttribute, ok := attributes["service_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_ids is missing from object`)

		return NewOutboundRulesValueUnknown(), diags
	}

	serviceIdsVal, ok := serviceIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_ids expected to be basetypes.ListValue, was: %T`, serviceIdsAttribute))
	}

	toPortRangeAttribute, ok := attributes["to_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`to_port_range is missing from object`)

		return NewOutboundRulesValueUnknown(), diags
	}

	toPortRangeVal, ok := toPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`to_port_range expected to be basetypes.Int64Value, was: %T`, toPortRangeAttribute))
	}

	if diags.HasError() {
		return NewOutboundRulesValueUnknown(), diags
	}

	return OutboundRulesValue{
		FromPortRange:                 fromPortRangeVal,
		IpProtocol:                    ipProtocolVal,
		IpRanges:                      ipRangesVal,
		OutboundSecurityGroupsMembers: outboundSecurityGroupsMembersVal,
		ServiceIds:                    serviceIdsVal,
		ToPortRange:                   toPortRangeVal,
		state:                         attr.ValueStateKnown,
	}, diags
}

func NewOutboundRulesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OutboundRulesValue {
	object, diags := NewOutboundRulesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOutboundRulesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OutboundRulesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOutboundRulesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOutboundRulesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOutboundRulesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOutboundRulesValueMust(OutboundRulesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OutboundRulesType) ValueType(ctx context.Context) attr.Value {
	return OutboundRulesValue{}
}

var _ basetypes.ObjectValuable = OutboundRulesValue{}

type OutboundRulesValue struct {
	FromPortRange                 basetypes.Int64Value  `tfsdk:"from_port_range"`
	IpProtocol                    basetypes.StringValue `tfsdk:"ip_protocol"`
	IpRanges                      basetypes.ListValue   `tfsdk:"ip_ranges"`
	OutboundSecurityGroupsMembers basetypes.ListValue   `tfsdk:"outbound_security_groups_members"`
	ServiceIds                    basetypes.ListValue   `tfsdk:"service_ids"`
	ToPortRange                   basetypes.Int64Value  `tfsdk:"to_port_range"`
	state                         attr.ValueState
}

func (v OutboundRulesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["from_port_range"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["ip_protocol"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ip_ranges"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["outbound_security_groups_members"] = basetypes.ListType{
		ElemType: OutboundSecurityGroupsMembersValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["service_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["to_port_range"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.FromPortRange.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["from_port_range"] = val

		val, err = v.IpProtocol.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_protocol"] = val

		val, err = v.IpRanges.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_ranges"] = val

		val, err = v.OutboundSecurityGroupsMembers.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["outbound_security_groups_members"] = val

		val, err = v.ServiceIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["service_ids"] = val

		val, err = v.ToPortRange.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["to_port_range"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OutboundRulesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OutboundRulesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OutboundRulesValue) String() string {
	return "OutboundRulesValue"
}

func (v OutboundRulesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	outboundSecurityGroupsMembers := types.ListValueMust(
		OutboundSecurityGroupsMembersType{
			basetypes.ObjectType{
				AttrTypes: OutboundSecurityGroupsMembersValue{}.AttributeTypes(ctx),
			},
		},
		v.OutboundSecurityGroupsMembers.Elements(),
	)

	if v.OutboundSecurityGroupsMembers.IsNull() {
		outboundSecurityGroupsMembers = types.ListNull(
			OutboundSecurityGroupsMembersType{
				basetypes.ObjectType{
					AttrTypes: OutboundSecurityGroupsMembersValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.OutboundSecurityGroupsMembers.IsUnknown() {
		outboundSecurityGroupsMembers = types.ListUnknown(
			OutboundSecurityGroupsMembersType{
				basetypes.ObjectType{
					AttrTypes: OutboundSecurityGroupsMembersValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var ipRangesVal basetypes.ListValue
	switch {
	case v.IpRanges.IsUnknown():
		ipRangesVal = types.ListUnknown(types.StringType)
	case v.IpRanges.IsNull():
		ipRangesVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		ipRangesVal, d = types.ListValue(types.StringType, v.IpRanges.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"from_port_range": basetypes.Int64Type{},
			"ip_protocol":     basetypes.StringType{},
			"ip_ranges": basetypes.ListType{
				ElemType: types.StringType,
			},
			"outbound_security_groups_members": basetypes.ListType{
				ElemType: OutboundSecurityGroupsMembersValue{}.Type(ctx),
			},
			"service_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"to_port_range": basetypes.Int64Type{},
		}), diags
	}

	var serviceIdsVal basetypes.ListValue
	switch {
	case v.ServiceIds.IsUnknown():
		serviceIdsVal = types.ListUnknown(types.StringType)
	case v.ServiceIds.IsNull():
		serviceIdsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		serviceIdsVal, d = types.ListValue(types.StringType, v.ServiceIds.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"from_port_range": basetypes.Int64Type{},
			"ip_protocol":     basetypes.StringType{},
			"ip_ranges": basetypes.ListType{
				ElemType: types.StringType,
			},
			"outbound_security_groups_members": basetypes.ListType{
				ElemType: OutboundSecurityGroupsMembersValue{}.Type(ctx),
			},
			"service_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"to_port_range": basetypes.Int64Type{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"from_port_range": basetypes.Int64Type{},
		"ip_protocol":     basetypes.StringType{},
		"ip_ranges": basetypes.ListType{
			ElemType: types.StringType,
		},
		"outbound_security_groups_members": basetypes.ListType{
			ElemType: OutboundSecurityGroupsMembersValue{}.Type(ctx),
		},
		"service_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"to_port_range": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"from_port_range":                  v.FromPortRange,
			"ip_protocol":                      v.IpProtocol,
			"ip_ranges":                        ipRangesVal,
			"outbound_security_groups_members": outboundSecurityGroupsMembers,
			"service_ids":                      serviceIdsVal,
			"to_port_range":                    v.ToPortRange,
		})

	return objVal, diags
}

func (v OutboundRulesValue) Equal(o attr.Value) bool {
	other, ok := o.(OutboundRulesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.FromPortRange.Equal(other.FromPortRange) {
		return false
	}

	if !v.IpProtocol.Equal(other.IpProtocol) {
		return false
	}

	if !v.IpRanges.Equal(other.IpRanges) {
		return false
	}

	if !v.OutboundSecurityGroupsMembers.Equal(other.OutboundSecurityGroupsMembers) {
		return false
	}

	if !v.ServiceIds.Equal(other.ServiceIds) {
		return false
	}

	if !v.ToPortRange.Equal(other.ToPortRange) {
		return false
	}

	return true
}

func (v OutboundRulesValue) Type(ctx context.Context) attr.Type {
	return OutboundRulesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OutboundRulesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"from_port_range": basetypes.Int64Type{},
		"ip_protocol":     basetypes.StringType{},
		"ip_ranges": basetypes.ListType{
			ElemType: types.StringType,
		},
		"outbound_security_groups_members": basetypes.ListType{
			ElemType: OutboundSecurityGroupsMembersValue{}.Type(ctx),
		},
		"service_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"to_port_range": basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = OutboundSecurityGroupsMembersType{}

type OutboundSecurityGroupsMembersType struct {
	basetypes.ObjectType
}

func (t OutboundSecurityGroupsMembersType) Equal(o attr.Type) bool {
	other, ok := o.(OutboundSecurityGroupsMembersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OutboundSecurityGroupsMembersType) String() string {
	return "OutboundSecurityGroupsMembersType"
}

func (t OutboundSecurityGroupsMembersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	securityGroupIdAttribute, ok := attributes["security_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_id is missing from object`)

		return nil, diags
	}

	securityGroupIdVal, ok := securityGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_id expected to be basetypes.StringValue, was: %T`, securityGroupIdAttribute))
	}

	securityGroupNameAttribute, ok := attributes["security_group_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_name is missing from object`)

		return nil, diags
	}

	securityGroupNameVal, ok := securityGroupNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_name expected to be basetypes.StringValue, was: %T`, securityGroupNameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OutboundSecurityGroupsMembersValue{
		SecurityGroupId:   securityGroupIdVal,
		SecurityGroupName: securityGroupNameVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewOutboundSecurityGroupsMembersValueNull() OutboundSecurityGroupsMembersValue {
	return OutboundSecurityGroupsMembersValue{
		state: attr.ValueStateNull,
	}
}

func NewOutboundSecurityGroupsMembersValueUnknown() OutboundSecurityGroupsMembersValue {
	return OutboundSecurityGroupsMembersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOutboundSecurityGroupsMembersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OutboundSecurityGroupsMembersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OutboundSecurityGroupsMembersValue Attribute Value",
				"While creating a OutboundSecurityGroupsMembersValue value, a missing attribute value was detected. "+
					"A OutboundSecurityGroupsMembersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OutboundSecurityGroupsMembersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OutboundSecurityGroupsMembersValue Attribute Type",
				"While creating a OutboundSecurityGroupsMembersValue value, an invalid attribute value was detected. "+
					"A OutboundSecurityGroupsMembersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OutboundSecurityGroupsMembersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OutboundSecurityGroupsMembersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OutboundSecurityGroupsMembersValue Attribute Value",
				"While creating a OutboundSecurityGroupsMembersValue value, an extra attribute value was detected. "+
					"A OutboundSecurityGroupsMembersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OutboundSecurityGroupsMembersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOutboundSecurityGroupsMembersValueUnknown(), diags
	}

	securityGroupIdAttribute, ok := attributes["security_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_id is missing from object`)

		return NewOutboundSecurityGroupsMembersValueUnknown(), diags
	}

	securityGroupIdVal, ok := securityGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_id expected to be basetypes.StringValue, was: %T`, securityGroupIdAttribute))
	}

	securityGroupNameAttribute, ok := attributes["security_group_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_name is missing from object`)

		return NewOutboundSecurityGroupsMembersValueUnknown(), diags
	}

	securityGroupNameVal, ok := securityGroupNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_name expected to be basetypes.StringValue, was: %T`, securityGroupNameAttribute))
	}

	if diags.HasError() {
		return NewOutboundSecurityGroupsMembersValueUnknown(), diags
	}

	return OutboundSecurityGroupsMembersValue{
		SecurityGroupId:   securityGroupIdVal,
		SecurityGroupName: securityGroupNameVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewOutboundSecurityGroupsMembersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OutboundSecurityGroupsMembersValue {
	object, diags := NewOutboundSecurityGroupsMembersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOutboundSecurityGroupsMembersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OutboundSecurityGroupsMembersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOutboundSecurityGroupsMembersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOutboundSecurityGroupsMembersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOutboundSecurityGroupsMembersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOutboundSecurityGroupsMembersValueMust(OutboundSecurityGroupsMembersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OutboundSecurityGroupsMembersType) ValueType(ctx context.Context) attr.Value {
	return OutboundSecurityGroupsMembersValue{}
}

var _ basetypes.ObjectValuable = OutboundSecurityGroupsMembersValue{}

type OutboundSecurityGroupsMembersValue struct {
	SecurityGroupId   basetypes.StringValue `tfsdk:"security_group_id"`
	SecurityGroupName basetypes.StringValue `tfsdk:"security_group_name"`
	state             attr.ValueState
}

func (v OutboundSecurityGroupsMembersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["security_group_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["security_group_name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.SecurityGroupId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["security_group_id"] = val

		val, err = v.SecurityGroupName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["security_group_name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OutboundSecurityGroupsMembersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OutboundSecurityGroupsMembersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OutboundSecurityGroupsMembersValue) String() string {
	return "OutboundSecurityGroupsMembersValue"
}

func (v OutboundSecurityGroupsMembersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"security_group_id":   basetypes.StringType{},
		"security_group_name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"security_group_id":   v.SecurityGroupId,
			"security_group_name": v.SecurityGroupName,
		})

	return objVal, diags
}

func (v OutboundSecurityGroupsMembersValue) Equal(o attr.Value) bool {
	other, ok := o.(OutboundSecurityGroupsMembersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.SecurityGroupId.Equal(other.SecurityGroupId) {
		return false
	}

	if !v.SecurityGroupName.Equal(other.SecurityGroupName) {
		return false
	}

	return true
}

func (v OutboundSecurityGroupsMembersValue) Type(ctx context.Context) attr.Type {
	return OutboundSecurityGroupsMembersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OutboundSecurityGroupsMembersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"security_group_id":   basetypes.StringType{},
		"security_group_name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TagsType{}

type TagsType struct {
	basetypes.ObjectType
}

func (t TagsType) Equal(o attr.Type) bool {
	other, ok := o.(TagsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TagsType) String() string {
	return "TagsType"
}

func (t TagsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TagsValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewTagsValueNull() TagsValue {
	return TagsValue{
		state: attr.ValueStateNull,
	}
}

func NewTagsValueUnknown() TagsValue {
	return TagsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTagsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TagsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TagsValue Attribute Value",
				"While creating a TagsValue value, a missing attribute value was detected. "+
					"A TagsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TagsValue Attribute Type",
				"While creating a TagsValue value, an invalid attribute value was detected. "+
					"A TagsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TagsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TagsValue Attribute Value",
				"While creating a TagsValue value, an extra attribute value was detected. "+
					"A TagsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TagsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	return TagsValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewTagsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TagsValue {
	object, diags := NewTagsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTagsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TagsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTagsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTagsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTagsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTagsValueMust(TagsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TagsType) ValueType(ctx context.Context) attr.Value {
	return TagsValue{}
}

var _ basetypes.ObjectValuable = TagsValue{}

type TagsValue struct {
	Key   basetypes.StringValue `tfsdk:"key"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v TagsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TagsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TagsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TagsValue) String() string {
	return "TagsValue"
}

func (v TagsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"key":   v.Key,
			"value": v.Value,
		})

	return objVal, diags
}

func (v TagsValue) Equal(o attr.Value) bool {
	other, ok := o.(TagsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v TagsValue) Type(ctx context.Context) attr.Type {
	return TagsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TagsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}
