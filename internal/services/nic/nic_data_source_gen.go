// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package nic

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"gitlab.numspot.cloud/cloud/terraform-provider-numspot/internal/services/tags"
)

func NicDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"items": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"availability_zone_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The Subregion in which the NIC is located.",
							MarkdownDescription: "The Subregion in which the NIC is located.",
						},
						"description": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "A description for the NIC.",
							MarkdownDescription: "A description for the NIC.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the NIC.",
							MarkdownDescription: "The ID of the NIC.",
						},
						"is_source_dest_checked": schema.BoolAttribute{
							Computed:            true,
							Description:         "(Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.",
							MarkdownDescription: "(Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.",
						},
						"link_nic": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"delete_on_vm_deletion": schema.BoolAttribute{
									Computed:            true,
									Description:         "If true, the NIC is deleted when the VM is terminated.",
									MarkdownDescription: "If true, the NIC is deleted when the VM is terminated.",
								},
								"device_number": schema.Int64Attribute{
									Computed:            true,
									Description:         "The device index for the NIC attachment (between `1` and `7`, both included).",
									MarkdownDescription: "The device index for the NIC attachment (between `1` and `7`, both included).",
								},
								"id": schema.StringAttribute{
									Computed:            true,
									Description:         "The ID of the NIC to attach.",
									MarkdownDescription: "The ID of the NIC to attach.",
								},
								"state": schema.StringAttribute{
									Computed:            true,
									Description:         "The state of the attachment (`attaching` \\| `attached` \\| `detaching` \\| `detached`).",
									MarkdownDescription: "The state of the attachment (`attaching` \\| `attached` \\| `detaching` \\| `detached`).",
								},
								"vm_id": schema.StringAttribute{
									Computed:            true,
									Description:         "The ID of the VM.",
									MarkdownDescription: "The ID of the VM.",
								},
							},
							CustomType: LinkNicType{
								ObjectType: types.ObjectType{
									AttrTypes: LinkNicValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Information about the NIC attachment.",
							MarkdownDescription: "Information about the NIC attachment.",
						},
						"link_public_ip": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed:            true,
									Description:         "(Required in a Net) The ID representing the association of the public IP with the VM or the NIC.",
									MarkdownDescription: "(Required in a Net) The ID representing the association of the public IP with the VM or the NIC.",
								},
								"public_dns_name": schema.StringAttribute{
									Computed:            true,
									Description:         "The name of the public DNS.",
									MarkdownDescription: "The name of the public DNS.",
								},
								"public_ip": schema.StringAttribute{
									Computed:            true,
									Description:         "The public IP associated with the NIC.",
									MarkdownDescription: "The public IP associated with the NIC.",
								},
								"public_ip_id": schema.StringAttribute{
									Computed:            true,
									Description:         "The allocation ID of the public IP.",
									MarkdownDescription: "The allocation ID of the public IP.",
								},
							},
							CustomType: LinkPublicIpType{
								ObjectType: types.ObjectType{
									AttrTypes: LinkPublicIpValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Information about the public IP association.",
							MarkdownDescription: "Information about the public IP association.",
						},
						"mac_address": schema.StringAttribute{
							Computed:            true,
							Description:         "The Media Access Control (MAC) address of the NIC.",
							MarkdownDescription: "The Media Access Control (MAC) address of the NIC.",
						},
						"private_dns_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the private DNS.",
							MarkdownDescription: "The name of the private DNS.",
						},
						"private_ips": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"is_primary": schema.BoolAttribute{
										Optional:            true,
										Computed:            true,
										Description:         "If true, the IP is the primary private IP of the NIC.",
										MarkdownDescription: "If true, the IP is the primary private IP of the NIC.",
									},
									"link_public_ip": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed:            true,
												Description:         "(Required in a Net) The ID representing the association of the public IP with the VM or the NIC.",
												MarkdownDescription: "(Required in a Net) The ID representing the association of the public IP with the VM or the NIC.",
											},
											"public_dns_name": schema.StringAttribute{
												Computed:            true,
												Description:         "The name of the public DNS.",
												MarkdownDescription: "The name of the public DNS.",
											},
											"public_ip": schema.StringAttribute{
												Computed:            true,
												Description:         "The public IP associated with the NIC.",
												MarkdownDescription: "The public IP associated with the NIC.",
											},
											"public_ip_id": schema.StringAttribute{
												Computed:            true,
												Description:         "The allocation ID of the public IP.",
												MarkdownDescription: "The allocation ID of the public IP.",
											},
										},
										CustomType: LinkPublicIpType{
											ObjectType: types.ObjectType{
												AttrTypes: LinkPublicIpValue{}.AttributeTypes(ctx),
											},
										},
										Computed:            true,
										Description:         "Information about the public IP association.",
										MarkdownDescription: "Information about the public IP association.",
									},
									"private_dns_name": schema.StringAttribute{
										Computed:            true,
										Description:         "The name of the private DNS.",
										MarkdownDescription: "The name of the private DNS.",
									},
									"private_ip": schema.StringAttribute{
										Optional:            true,
										Computed:            true,
										Description:         "The private IP of the NIC.",
										MarkdownDescription: "The private IP of the NIC.",
									},
								},
								CustomType: PrivateIpsType{
									ObjectType: types.ObjectType{
										AttrTypes: PrivateIpsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Optional:            true,
							Computed:            true,
							Description:         "The primary private IP for the NIC.<br />\nThis IP must be within the IP range of the Subnet that you specify with the `SubnetId` attribute.<br />\nIf you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.",
							MarkdownDescription: "The primary private IP for the NIC.<br />\nThis IP must be within the IP range of the Subnet that you specify with the `SubnetId` attribute.<br />\nIf you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.",
						},
						"security_groups": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"security_group_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the security group.",
										MarkdownDescription: "The ID of the security group.",
									},
									"security_group_name": schema.StringAttribute{
										Computed:            true,
										Description:         "The name of the security group.",
										MarkdownDescription: "The name of the security group.",
									},
								},
								CustomType: SecurityGroupsType{
									ObjectType: types.ObjectType{
										AttrTypes: SecurityGroupsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "One or more IDs of security groups for the NIC.",
							MarkdownDescription: "One or more IDs of security groups for the NIC.",
						},
						"state": schema.StringAttribute{
							Computed:            true,
							Description:         "The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).",
							MarkdownDescription: "The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).",
						},
						"subnet_id": schema.StringAttribute{
							Required:            true,
							Description:         "The ID of the Subnet in which you want to create the NIC.",
							MarkdownDescription: "The ID of the Subnet in which you want to create the NIC.",
						},
						"tags": tags.TagsSchema(ctx),
						"vpc_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Net for the NIC.",
							MarkdownDescription: "The ID of the Net for the NIC.",
						},
					},
				},
			},
			"availability_zone_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The Subregion in which the NIC is located.",
				MarkdownDescription: "The Subregion in which the NIC is located.",
			},
			"descriptions": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The description of the NIC.",
				MarkdownDescription: "The description of the NIC.",
			},
			"ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "ID for ReadNics",
				MarkdownDescription: "ID for ReadNics",
			},
			"is_source_dest_checked": schema.BoolAttribute{
				Optional:            true,
				Description:         "(Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.",
				MarkdownDescription: "(Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.",
			},
			"link_nic_delete_on_vm_deletion": schema.BoolAttribute{
				Optional:            true,
				Description:         "If true, the NIC is deleted when the VM is terminated.",
				MarkdownDescription: "If true, the NIC is deleted when the VM is terminated.",
			},
			"link_nic_device_numbers": schema.ListAttribute{
				ElementType:         types.Int64Type,
				Optional:            true,
				Description:         "The device index for the NIC attachment (between `1` and `7`, both included).",
				MarkdownDescription: "The device index for the NIC attachment (between `1` and `7`, both included).",
			},
			"link_nic_link_nic_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The ID of the NIC to attach.",
				MarkdownDescription: "The ID of the NIC to attach.",
			},
			"link_nic_states": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The state of the attachment (`attaching` \\| `attached` \\| `detaching` \\| `detached`).",
				MarkdownDescription: "The state of the attachment (`attaching` \\| `attached` \\| `detaching` \\| `detached`).",
			},
			"link_nic_vm_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The ID of the VM.",
				MarkdownDescription: "The ID of the VM.",
			},

			"link_public_ip_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "(Required in a Net) The ID representing the association of the public IP with the VM or the NIC.",
				MarkdownDescription: "(Required in a Net) The ID representing the association of the public IP with the VM or the NIC.",
			},
			"link_public_ip_public_ips": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The public IP associated with the NIC.",
				MarkdownDescription: "The public IP associated with the NIC.",
			},
			"link_public_ip_public_ip_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The allocation ID of the public IP.",
				MarkdownDescription: "The allocation ID of the public IP.",
			},
			"mac_addresses": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The Media Access Control (MAC) address of the NIC.",
				MarkdownDescription: "The Media Access Control (MAC) address of the NIC.",
			},
			"private_dns_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The name of the private DNS.",
				MarkdownDescription: "The name of the private DNS.",
			},
			"private_ips_is_primary": schema.BoolAttribute{
				Optional:            true,
				Description:         "If true, the IP is the primary private IP of the NIC.",
				MarkdownDescription: "If true, the IP is the primary private IP of the NIC.",
			},
			"private_ips_link_public_ip_public_ips": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The public IPs associated with the private IPs.",
				MarkdownDescription: "The public IPs associated with the private IPs.",
			},
			"private_ips_private_ips": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The private IP of the NIC.",
				MarkdownDescription: "The private IP of the NIC.",
			},
			"security_group_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The ID of the security group.",
				MarkdownDescription: "The ID of the security group.",
			},
			"security_group_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The name of the security group.",
				MarkdownDescription: "The name of the security group.",
			},
			"states": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).",
				MarkdownDescription: "The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).",
			},
			"subnet_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The ID of the Subnet.",
				MarkdownDescription: "The ID of the Subnet.",
			},
			"tag_keys": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The key of the tag, with a minimum of 1 character.",
				MarkdownDescription: "The key of the tag, with a minimum of 1 character.",
			},
			"tag_values": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The value of the tag, between 0 and 255 characters.",
				MarkdownDescription: "The value of the tag, between 0 and 255 characters.",
			},
			"tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         `The key/value combination of the tags associated with the DHCP options sets, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.`,
				MarkdownDescription: `The key/value combination of the tags associated with the DHCP options sets, in the following format: "Filters":{"Tags":["TAGKEY=TAGVALUE"]}.`,
			},
			"vpc_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The ID of the Net for the NIC.",
				MarkdownDescription: "The ID of the Net for the NIC.",
			},
		},
		DeprecationMessage: "Managing IAAS services with Terraform is deprecated",
	}
}
