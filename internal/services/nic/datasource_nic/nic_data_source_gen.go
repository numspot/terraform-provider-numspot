// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_nic

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func NicDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"availability_zone_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The Subregions where the NICs are located.",
				MarkdownDescription: "The Subregions where the NICs are located.",
			},
			"descriptions": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The descriptions of the NICs.",
				MarkdownDescription: "The descriptions of the NICs.",
			},
			"ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the NICs.",
				MarkdownDescription: "The IDs of the NICs.",
			},
			"is_source_dest_check": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether the source/destination checking is enabled (true) or disabled (false).",
				MarkdownDescription: "Whether the source/destination checking is enabled (true) or disabled (false).",
			},
			"items": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"availability_zone_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The Subregion in which the NIC is located.",
							MarkdownDescription: "The Subregion in which the NIC is located.",
						},
						"description": schema.StringAttribute{
							Computed:            true,
							Description:         "The description of the NIC.",
							MarkdownDescription: "The description of the NIC.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the NIC.",
							MarkdownDescription: "The ID of the NIC.",
						},
						"is_source_dest_checked": schema.BoolAttribute{
							Computed:            true,
							Description:         "(Vpc only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Vpc.",
							MarkdownDescription: "(Vpc only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Vpc.",
						},
						"link_nic": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"delete_on_vm_deletion": schema.BoolAttribute{
									Computed:            true,
									Description:         "If true, the NIC is deleted when the VM is terminated.",
									MarkdownDescription: "If true, the NIC is deleted when the VM is terminated.",
								},
								"device_number": schema.Int64Attribute{
									Computed:            true,
									Description:         "The device index for the NIC attachment (between `1` and `7`, both included).",
									MarkdownDescription: "The device index for the NIC attachment (between `1` and `7`, both included).",
								},
								"id": schema.StringAttribute{
									Computed:            true,
									Description:         "The ID of the NIC to attach.",
									MarkdownDescription: "The ID of the NIC to attach.",
								},
								"state": schema.StringAttribute{
									Computed:            true,
									Description:         "The state of the attachment (`attaching` \\| `attached` \\| `detaching` \\| `detached`).",
									MarkdownDescription: "The state of the attachment (`attaching` \\| `attached` \\| `detaching` \\| `detached`).",
								},
								"vm_id": schema.StringAttribute{
									Computed:            true,
									Description:         "The ID of the VM.",
									MarkdownDescription: "The ID of the VM.",
								},
							},
							CustomType: LinkNicType{
								ObjectType: types.ObjectType{
									AttrTypes: LinkNicValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Information about the NIC attachment.",
							MarkdownDescription: "Information about the NIC attachment.",
						},
						"link_public_ip": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed:            true,
									Description:         "(Required in a Vpc) The ID representing the association of the public IP with the VM or the NIC.",
									MarkdownDescription: "(Required in a Vpc) The ID representing the association of the public IP with the VM or the NIC.",
								},
								"public_dns_name": schema.StringAttribute{
									Computed:            true,
									Description:         "The name of the public DNS.",
									MarkdownDescription: "The name of the public DNS.",
								},
								"public_ip": schema.StringAttribute{
									Computed:            true,
									Description:         "The public IP associated with the NIC.",
									MarkdownDescription: "The public IP associated with the NIC.",
								},
								"public_ip_id": schema.StringAttribute{
									Computed:            true,
									Description:         "The allocation ID of the public IP.",
									MarkdownDescription: "The allocation ID of the public IP.",
								},
							},
							CustomType: LinkPublicIpType{
								ObjectType: types.ObjectType{
									AttrTypes: LinkPublicIpValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Information about the public IP association.",
							MarkdownDescription: "Information about the public IP association.",
						},
						"mac_address": schema.StringAttribute{
							Computed:            true,
							Description:         "The Media Access Control (MAC) address of the NIC.",
							MarkdownDescription: "The Media Access Control (MAC) address of the NIC.",
						},
						"private_dns_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the private DNS.",
							MarkdownDescription: "The name of the private DNS.",
						},
						"private_ips": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"is_primary": schema.BoolAttribute{
										Computed:            true,
										Description:         "If true, the IP is the primary private IP of the NIC.",
										MarkdownDescription: "If true, the IP is the primary private IP of the NIC.",
									},
									"link_public_ip_private_ip": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed:            true,
												Description:         "(Required in a Vpc) The ID representing the association of the public IP with the VM or the NIC.",
												MarkdownDescription: "(Required in a Vpc) The ID representing the association of the public IP with the VM or the NIC.",
											},
											"public_dns_name": schema.StringAttribute{
												Computed:            true,
												Description:         "The name of the public DNS.",
												MarkdownDescription: "The name of the public DNS.",
											},
											"public_ip": schema.StringAttribute{
												Computed:            true,
												Description:         "The public IP associated with the NIC.",
												MarkdownDescription: "The public IP associated with the NIC.",
											},
											"public_ip_id": schema.StringAttribute{
												Computed:            true,
												Description:         "The allocation ID of the public IP.",
												MarkdownDescription: "The allocation ID of the public IP.",
											},
										},
										CustomType: LinkPublicIpPrivateIpType{
											ObjectType: types.ObjectType{
												AttrTypes: LinkPublicIpPrivateIpValue{}.AttributeTypes(ctx),
											},
										},
										Computed:            true,
										Description:         "Information about the public IP association.",
										MarkdownDescription: "Information about the public IP association.",
									},
									"private_dns_name": schema.StringAttribute{
										Computed:            true,
										Description:         "The name of the private DNS.",
										MarkdownDescription: "The name of the private DNS.",
									},
									"private_ip": schema.StringAttribute{
										Computed:            true,
										Description:         "The private IP of the NIC.",
										MarkdownDescription: "The private IP of the NIC.",
									},
								},
								CustomType: PrivateIpsType{
									ObjectType: types.ObjectType{
										AttrTypes: PrivateIpsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "The private IPs of the NIC.",
							MarkdownDescription: "The private IPs of the NIC.",
						},
						"security_groups": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"security_group_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the security group.",
										MarkdownDescription: "The ID of the security group.",
									},
									"security_group_name": schema.StringAttribute{
										Computed:            true,
										Description:         "The name of the security group.",
										MarkdownDescription: "The name of the security group.",
									},
								},
								CustomType: SecurityGroupsType{
									ObjectType: types.ObjectType{
										AttrTypes: SecurityGroupsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "One or more IDs of security groups for the NIC.",
							MarkdownDescription: "One or more IDs of security groups for the NIC.",
						},
						"state": schema.StringAttribute{
							Computed:            true,
							Description:         "The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).",
							MarkdownDescription: "The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).",
						},
						"subnet_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Subnet.",
							MarkdownDescription: "The ID of the Subnet.",
						},
						"tags": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"key": schema.StringAttribute{
										Computed:            true,
										Description:         "The key of the tag, with a minimum of 1 character.",
										MarkdownDescription: "The key of the tag, with a minimum of 1 character.",
									},
									"value": schema.StringAttribute{
										Computed:            true,
										Description:         "The value of the tag, between 0 and 255 characters.",
										MarkdownDescription: "The value of the tag, between 0 and 255 characters.",
									},
								},
								CustomType: TagsType{
									ObjectType: types.ObjectType{
										AttrTypes: TagsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "One or more tags associated with the NIC.",
							MarkdownDescription: "One or more tags associated with the NIC.",
						},
						"vpc_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Vpc for the NIC.",
							MarkdownDescription: "The ID of the Vpc for the NIC.",
						},
					},
					CustomType: ItemsType{
						ObjectType: types.ObjectType{
							AttrTypes: ItemsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "Information about one or more NICs.",
				MarkdownDescription: "Information about one or more NICs.",
			},
			"link_nic_delete_on_vm_deletion": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether the NICs are deleted when the VMs they are attached to are terminated.",
				MarkdownDescription: "Whether the NICs are deleted when the VMs they are attached to are terminated.",
			},
			"link_nic_device_numbers": schema.ListAttribute{
				ElementType:         types.Int64Type,
				Optional:            true,
				Computed:            true,
				Description:         "The device numbers the NICs are attached to.",
				MarkdownDescription: "The device numbers the NICs are attached to.",
			},
			"link_nic_link_nic_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The attachment IDs of the NICs.",
				MarkdownDescription: "The attachment IDs of the NICs.",
			},
			"link_nic_states": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The states of the attachments.",
				MarkdownDescription: "The states of the attachments.",
			},
			"link_nic_vm_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the VMs the NICs are attached to.",
				MarkdownDescription: "The IDs of the VMs the NICs are attached to.",
			},
			"link_public_ip_link_public_ip_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The association IDs returned when the public IPs were associated with the NICs.",
				MarkdownDescription: "The association IDs returned when the public IPs were associated with the NICs.",
			},
			"link_public_ip_public_ip_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The allocation IDs returned when the public IPs were allocated to their accounts.",
				MarkdownDescription: "The allocation IDs returned when the public IPs were allocated to their accounts.",
			},
			"link_public_ip_public_ips": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The public IPs associated with the NICs.",
				MarkdownDescription: "The public IPs associated with the NICs.",
			},
			"mac_addresses": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The Media Access Control (MAC) addresses of the NICs.",
				MarkdownDescription: "The Media Access Control (MAC) addresses of the NICs.",
			},
			"private_dns_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The private DNS names associated with the primary private IPs.",
				MarkdownDescription: "The private DNS names associated with the primary private IPs.",
			},
			"private_ips_link_public_ip_public_ips": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The public IPs associated with the private IPs.",
				MarkdownDescription: "The public IPs associated with the private IPs.",
			},
			"private_ips_primary_ip": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether the private IP is the primary IP associated with the NIC.",
				MarkdownDescription: "Whether the private IP is the primary IP associated with the NIC.",
			},
			"private_ips_private_ips": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The private IPs of the NICs.",
				MarkdownDescription: "The private IPs of the NICs.",
			},
			"security_group_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the security groups associated with the NICs.",
				MarkdownDescription: "The IDs of the security groups associated with the NICs.",
			},
			"security_group_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The names of the security groups associated with the NICs.",
				MarkdownDescription: "The names of the security groups associated with the NICs.",
			},
			"states": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The states of the NICs.",
				MarkdownDescription: "The states of the NICs.",
			},
			"subnet_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Subnets for the NICs.",
				MarkdownDescription: "The IDs of the Subnets for the NICs.",
			},
			"tag_keys": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The keys of the tags associated with the NICs.",
				MarkdownDescription: "The keys of the tags associated with the NICs.",
			},
			"tag_values": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The values of the tags associated with the NICs.",
				MarkdownDescription: "The values of the tags associated with the NICs.",
			},
			"tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The key/value combination of the tags associated with the NICs, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.",
				MarkdownDescription: "The key/value combination of the tags associated with the NICs, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.",
			},
			"vpc_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Vpcs where the NICs are located.",
				MarkdownDescription: "The IDs of the Vpcs where the NICs are located.",
			},
		},
	}
}

type NicModel struct {
	AvailabilityZoneNames           types.List `tfsdk:"availability_zone_names"`
	Descriptions                    types.List `tfsdk:"descriptions"`
	Ids                             types.List `tfsdk:"ids"`
	IsSourceDestCheck               types.Bool `tfsdk:"is_source_dest_check"`
	Items                           types.List `tfsdk:"items"`
	LinkNicDeleteOnVmDeletion       types.Bool `tfsdk:"link_nic_delete_on_vm_deletion"`
	LinkNicDeviceNumbers            types.List `tfsdk:"link_nic_device_numbers"`
	LinkNicLinkNicIds               types.List `tfsdk:"link_nic_link_nic_ids"`
	LinkNicStates                   types.List `tfsdk:"link_nic_states"`
	LinkNicVmIds                    types.List `tfsdk:"link_nic_vm_ids"`
	LinkPublicIpLinkPublicIpIds     types.List `tfsdk:"link_public_ip_link_public_ip_ids"`
	LinkPublicIpPublicIpIds         types.List `tfsdk:"link_public_ip_public_ip_ids"`
	LinkPublicIpPublicIps           types.List `tfsdk:"link_public_ip_public_ips"`
	MacAddresses                    types.List `tfsdk:"mac_addresses"`
	PrivateDnsNames                 types.List `tfsdk:"private_dns_names"`
	PrivateIpsLinkPublicIpPublicIps types.List `tfsdk:"private_ips_link_public_ip_public_ips"`
	PrivateIpsPrimaryIp             types.Bool `tfsdk:"private_ips_primary_ip"`
	PrivateIpsPrivateIps            types.List `tfsdk:"private_ips_private_ips"`
	SecurityGroupIds                types.List `tfsdk:"security_group_ids"`
	SecurityGroupNames              types.List `tfsdk:"security_group_names"`
	States                          types.List `tfsdk:"states"`
	SubnetIds                       types.List `tfsdk:"subnet_ids"`
	TagKeys                         types.List `tfsdk:"tag_keys"`
	TagValues                       types.List `tfsdk:"tag_values"`
	Tags                            types.List `tfsdk:"tags"`
	VpcIds                          types.List `tfsdk:"vpc_ids"`
}

var _ basetypes.ObjectTypable = ItemsType{}

type ItemsType struct {
	basetypes.ObjectType
}

func (t ItemsType) Equal(o attr.Type) bool {
	other, ok := o.(ItemsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ItemsType) String() string {
	return "ItemsType"
}

func (t ItemsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	availabilityZoneNameAttribute, ok := attributes["availability_zone_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`availability_zone_name is missing from object`)

		return nil, diags
	}

	availabilityZoneNameVal, ok := availabilityZoneNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`availability_zone_name expected to be basetypes.StringValue, was: %T`, availabilityZoneNameAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	isSourceDestCheckedAttribute, ok := attributes["is_source_dest_checked"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_source_dest_checked is missing from object`)

		return nil, diags
	}

	isSourceDestCheckedVal, ok := isSourceDestCheckedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_source_dest_checked expected to be basetypes.BoolValue, was: %T`, isSourceDestCheckedAttribute))
	}

	linkNicAttribute, ok := attributes["link_nic"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_nic is missing from object`)

		return nil, diags
	}

	linkNicVal, ok := linkNicAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_nic expected to be basetypes.ObjectValue, was: %T`, linkNicAttribute))
	}

	linkPublicIpAttribute, ok := attributes["link_public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_public_ip is missing from object`)

		return nil, diags
	}

	linkPublicIpVal, ok := linkPublicIpAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_public_ip expected to be basetypes.ObjectValue, was: %T`, linkPublicIpAttribute))
	}

	macAddressAttribute, ok := attributes["mac_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac_address is missing from object`)

		return nil, diags
	}

	macAddressVal, ok := macAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac_address expected to be basetypes.StringValue, was: %T`, macAddressAttribute))
	}

	privateDnsNameAttribute, ok := attributes["private_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_dns_name is missing from object`)

		return nil, diags
	}

	privateDnsNameVal, ok := privateDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_dns_name expected to be basetypes.StringValue, was: %T`, privateDnsNameAttribute))
	}

	privateIpsAttribute, ok := attributes["private_ips"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_ips is missing from object`)

		return nil, diags
	}

	privateIpsVal, ok := privateIpsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_ips expected to be basetypes.ListValue, was: %T`, privateIpsAttribute))
	}

	securityGroupsAttribute, ok := attributes["security_groups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_groups is missing from object`)

		return nil, diags
	}

	securityGroupsVal, ok := securityGroupsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_groups expected to be basetypes.ListValue, was: %T`, securityGroupsAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	subnetIdAttribute, ok := attributes["subnet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subnet_id is missing from object`)

		return nil, diags
	}

	subnetIdVal, ok := subnetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subnet_id expected to be basetypes.StringValue, was: %T`, subnetIdAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return nil, diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	vpcIdAttribute, ok := attributes["vpc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vpc_id is missing from object`)

		return nil, diags
	}

	vpcIdVal, ok := vpcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vpc_id expected to be basetypes.StringValue, was: %T`, vpcIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ItemsValue{
		AvailabilityZoneName: availabilityZoneNameVal,
		Description:          descriptionVal,
		Id:                   idVal,
		IsSourceDestChecked:  isSourceDestCheckedVal,
		LinkNic:              linkNicVal,
		LinkPublicIp:         linkPublicIpVal,
		MacAddress:           macAddressVal,
		PrivateDnsName:       privateDnsNameVal,
		PrivateIps:           privateIpsVal,
		SecurityGroups:       securityGroupsVal,
		State:                stateVal,
		SubnetId:             subnetIdVal,
		Tags:                 tagsVal,
		VpcId:                vpcIdVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewItemsValueNull() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateNull,
	}
}

func NewItemsValueUnknown() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewItemsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ItemsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ItemsValue Attribute Value",
				"While creating a ItemsValue value, a missing attribute value was detected. "+
					"A ItemsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ItemsValue Attribute Type",
				"While creating a ItemsValue value, an invalid attribute value was detected. "+
					"A ItemsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ItemsValue Attribute Value",
				"While creating a ItemsValue value, an extra attribute value was detected. "+
					"A ItemsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ItemsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	availabilityZoneNameAttribute, ok := attributes["availability_zone_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`availability_zone_name is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	availabilityZoneNameVal, ok := availabilityZoneNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`availability_zone_name expected to be basetypes.StringValue, was: %T`, availabilityZoneNameAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	isSourceDestCheckedAttribute, ok := attributes["is_source_dest_checked"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_source_dest_checked is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	isSourceDestCheckedVal, ok := isSourceDestCheckedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_source_dest_checked expected to be basetypes.BoolValue, was: %T`, isSourceDestCheckedAttribute))
	}

	linkNicAttribute, ok := attributes["link_nic"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_nic is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	linkNicVal, ok := linkNicAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_nic expected to be basetypes.ObjectValue, was: %T`, linkNicAttribute))
	}

	linkPublicIpAttribute, ok := attributes["link_public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_public_ip is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	linkPublicIpVal, ok := linkPublicIpAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_public_ip expected to be basetypes.ObjectValue, was: %T`, linkPublicIpAttribute))
	}

	macAddressAttribute, ok := attributes["mac_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac_address is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	macAddressVal, ok := macAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac_address expected to be basetypes.StringValue, was: %T`, macAddressAttribute))
	}

	privateDnsNameAttribute, ok := attributes["private_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_dns_name is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	privateDnsNameVal, ok := privateDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_dns_name expected to be basetypes.StringValue, was: %T`, privateDnsNameAttribute))
	}

	privateIpsAttribute, ok := attributes["private_ips"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_ips is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	privateIpsVal, ok := privateIpsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_ips expected to be basetypes.ListValue, was: %T`, privateIpsAttribute))
	}

	securityGroupsAttribute, ok := attributes["security_groups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_groups is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	securityGroupsVal, ok := securityGroupsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_groups expected to be basetypes.ListValue, was: %T`, securityGroupsAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	subnetIdAttribute, ok := attributes["subnet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subnet_id is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	subnetIdVal, ok := subnetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subnet_id expected to be basetypes.StringValue, was: %T`, subnetIdAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	vpcIdAttribute, ok := attributes["vpc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vpc_id is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	vpcIdVal, ok := vpcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vpc_id expected to be basetypes.StringValue, was: %T`, vpcIdAttribute))
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	return ItemsValue{
		AvailabilityZoneName: availabilityZoneNameVal,
		Description:          descriptionVal,
		Id:                   idVal,
		IsSourceDestChecked:  isSourceDestCheckedVal,
		LinkNic:              linkNicVal,
		LinkPublicIp:         linkPublicIpVal,
		MacAddress:           macAddressVal,
		PrivateDnsName:       privateDnsNameVal,
		PrivateIps:           privateIpsVal,
		SecurityGroups:       securityGroupsVal,
		State:                stateVal,
		SubnetId:             subnetIdVal,
		Tags:                 tagsVal,
		VpcId:                vpcIdVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewItemsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ItemsValue {
	object, diags := NewItemsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewItemsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ItemsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewItemsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewItemsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewItemsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewItemsValueMust(ItemsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ItemsType) ValueType(ctx context.Context) attr.Value {
	return ItemsValue{}
}

var _ basetypes.ObjectValuable = ItemsValue{}

type ItemsValue struct {
	AvailabilityZoneName basetypes.StringValue `tfsdk:"availability_zone_name"`
	Description          basetypes.StringValue `tfsdk:"description"`
	Id                   basetypes.StringValue `tfsdk:"id"`
	IsSourceDestChecked  basetypes.BoolValue   `tfsdk:"is_source_dest_checked"`
	LinkNic              basetypes.ObjectValue `tfsdk:"link_nic"`
	LinkPublicIp         basetypes.ObjectValue `tfsdk:"link_public_ip"`
	MacAddress           basetypes.StringValue `tfsdk:"mac_address"`
	PrivateDnsName       basetypes.StringValue `tfsdk:"private_dns_name"`
	PrivateIps           basetypes.ListValue   `tfsdk:"private_ips"`
	SecurityGroups       basetypes.ListValue   `tfsdk:"security_groups"`
	State                basetypes.StringValue `tfsdk:"state"`
	SubnetId             basetypes.StringValue `tfsdk:"subnet_id"`
	Tags                 basetypes.ListValue   `tfsdk:"tags"`
	VpcId                basetypes.StringValue `tfsdk:"vpc_id"`
	state                attr.ValueState
}

func (v ItemsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 14)

	var val tftypes.Value
	var err error

	attrTypes["availability_zone_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["is_source_dest_checked"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["link_nic"] = basetypes.ObjectType{
		AttrTypes: LinkNicValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["link_public_ip"] = basetypes.ObjectType{
		AttrTypes: LinkPublicIpValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["mac_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["private_dns_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["private_ips"] = basetypes.ListType{
		ElemType: PrivateIpsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["security_groups"] = basetypes.ListType{
		ElemType: SecurityGroupsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["subnet_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tags"] = basetypes.ListType{
		ElemType: TagsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["vpc_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 14)

		val, err = v.AvailabilityZoneName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["availability_zone_name"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.IsSourceDestChecked.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_source_dest_checked"] = val

		val, err = v.LinkNic.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["link_nic"] = val

		val, err = v.LinkPublicIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["link_public_ip"] = val

		val, err = v.MacAddress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mac_address"] = val

		val, err = v.PrivateDnsName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_dns_name"] = val

		val, err = v.PrivateIps.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_ips"] = val

		val, err = v.SecurityGroups.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["security_groups"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.SubnetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subnet_id"] = val

		val, err = v.Tags.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tags"] = val

		val, err = v.VpcId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vpc_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ItemsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ItemsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ItemsValue) String() string {
	return "ItemsValue"
}

func (v ItemsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var linkNic basetypes.ObjectValue

	if v.LinkNic.IsNull() {
		linkNic = types.ObjectNull(
			LinkNicValue{}.AttributeTypes(ctx),
		)
	}

	if v.LinkNic.IsUnknown() {
		linkNic = types.ObjectUnknown(
			LinkNicValue{}.AttributeTypes(ctx),
		)
	}

	if !v.LinkNic.IsNull() && !v.LinkNic.IsUnknown() {
		linkNic = types.ObjectValueMust(
			LinkNicValue{}.AttributeTypes(ctx),
			v.LinkNic.Attributes(),
		)
	}

	var linkPublicIp basetypes.ObjectValue

	if v.LinkPublicIp.IsNull() {
		linkPublicIp = types.ObjectNull(
			LinkPublicIpValue{}.AttributeTypes(ctx),
		)
	}

	if v.LinkPublicIp.IsUnknown() {
		linkPublicIp = types.ObjectUnknown(
			LinkPublicIpValue{}.AttributeTypes(ctx),
		)
	}

	if !v.LinkPublicIp.IsNull() && !v.LinkPublicIp.IsUnknown() {
		linkPublicIp = types.ObjectValueMust(
			LinkPublicIpValue{}.AttributeTypes(ctx),
			v.LinkPublicIp.Attributes(),
		)
	}

	privateIps := types.ListValueMust(
		PrivateIpsType{
			basetypes.ObjectType{
				AttrTypes: PrivateIpsValue{}.AttributeTypes(ctx),
			},
		},
		v.PrivateIps.Elements(),
	)

	if v.PrivateIps.IsNull() {
		privateIps = types.ListNull(
			PrivateIpsType{
				basetypes.ObjectType{
					AttrTypes: PrivateIpsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.PrivateIps.IsUnknown() {
		privateIps = types.ListUnknown(
			PrivateIpsType{
				basetypes.ObjectType{
					AttrTypes: PrivateIpsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	securityGroups := types.ListValueMust(
		SecurityGroupsType{
			basetypes.ObjectType{
				AttrTypes: SecurityGroupsValue{}.AttributeTypes(ctx),
			},
		},
		v.SecurityGroups.Elements(),
	)

	if v.SecurityGroups.IsNull() {
		securityGroups = types.ListNull(
			SecurityGroupsType{
				basetypes.ObjectType{
					AttrTypes: SecurityGroupsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.SecurityGroups.IsUnknown() {
		securityGroups = types.ListUnknown(
			SecurityGroupsType{
				basetypes.ObjectType{
					AttrTypes: SecurityGroupsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	tags := types.ListValueMust(
		TagsType{
			basetypes.ObjectType{
				AttrTypes: TagsValue{}.AttributeTypes(ctx),
			},
		},
		v.Tags.Elements(),
	)

	if v.Tags.IsNull() {
		tags = types.ListNull(
			TagsType{
				basetypes.ObjectType{
					AttrTypes: TagsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Tags.IsUnknown() {
		tags = types.ListUnknown(
			TagsType{
				basetypes.ObjectType{
					AttrTypes: TagsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"availability_zone_name": basetypes.StringType{},
		"description":            basetypes.StringType{},
		"id":                     basetypes.StringType{},
		"is_source_dest_checked": basetypes.BoolType{},
		"link_nic": basetypes.ObjectType{
			AttrTypes: LinkNicValue{}.AttributeTypes(ctx),
		},
		"link_public_ip": basetypes.ObjectType{
			AttrTypes: LinkPublicIpValue{}.AttributeTypes(ctx),
		},
		"mac_address":      basetypes.StringType{},
		"private_dns_name": basetypes.StringType{},
		"private_ips": basetypes.ListType{
			ElemType: PrivateIpsValue{}.Type(ctx),
		},
		"security_groups": basetypes.ListType{
			ElemType: SecurityGroupsValue{}.Type(ctx),
		},
		"state":     basetypes.StringType{},
		"subnet_id": basetypes.StringType{},
		"tags": basetypes.ListType{
			ElemType: TagsValue{}.Type(ctx),
		},
		"vpc_id": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"availability_zone_name": v.AvailabilityZoneName,
			"description":            v.Description,
			"id":                     v.Id,
			"is_source_dest_checked": v.IsSourceDestChecked,
			"link_nic":               linkNic,
			"link_public_ip":         linkPublicIp,
			"mac_address":            v.MacAddress,
			"private_dns_name":       v.PrivateDnsName,
			"private_ips":            privateIps,
			"security_groups":        securityGroups,
			"state":                  v.State,
			"subnet_id":              v.SubnetId,
			"tags":                   tags,
			"vpc_id":                 v.VpcId,
		})

	return objVal, diags
}

func (v ItemsValue) Equal(o attr.Value) bool {
	other, ok := o.(ItemsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AvailabilityZoneName.Equal(other.AvailabilityZoneName) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.IsSourceDestChecked.Equal(other.IsSourceDestChecked) {
		return false
	}

	if !v.LinkNic.Equal(other.LinkNic) {
		return false
	}

	if !v.LinkPublicIp.Equal(other.LinkPublicIp) {
		return false
	}

	if !v.MacAddress.Equal(other.MacAddress) {
		return false
	}

	if !v.PrivateDnsName.Equal(other.PrivateDnsName) {
		return false
	}

	if !v.PrivateIps.Equal(other.PrivateIps) {
		return false
	}

	if !v.SecurityGroups.Equal(other.SecurityGroups) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.SubnetId.Equal(other.SubnetId) {
		return false
	}

	if !v.Tags.Equal(other.Tags) {
		return false
	}

	if !v.VpcId.Equal(other.VpcId) {
		return false
	}

	return true
}

func (v ItemsValue) Type(ctx context.Context) attr.Type {
	return ItemsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ItemsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"availability_zone_name": basetypes.StringType{},
		"description":            basetypes.StringType{},
		"id":                     basetypes.StringType{},
		"is_source_dest_checked": basetypes.BoolType{},
		"link_nic": basetypes.ObjectType{
			AttrTypes: LinkNicValue{}.AttributeTypes(ctx),
		},
		"link_public_ip": basetypes.ObjectType{
			AttrTypes: LinkPublicIpValue{}.AttributeTypes(ctx),
		},
		"mac_address":      basetypes.StringType{},
		"private_dns_name": basetypes.StringType{},
		"private_ips": basetypes.ListType{
			ElemType: PrivateIpsValue{}.Type(ctx),
		},
		"security_groups": basetypes.ListType{
			ElemType: SecurityGroupsValue{}.Type(ctx),
		},
		"state":     basetypes.StringType{},
		"subnet_id": basetypes.StringType{},
		"tags": basetypes.ListType{
			ElemType: TagsValue{}.Type(ctx),
		},
		"vpc_id": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = LinkNicType{}

type LinkNicType struct {
	basetypes.ObjectType
}

func (t LinkNicType) Equal(o attr.Type) bool {
	other, ok := o.(LinkNicType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LinkNicType) String() string {
	return "LinkNicType"
}

func (t LinkNicType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	deleteOnVmDeletionAttribute, ok := attributes["delete_on_vm_deletion"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delete_on_vm_deletion is missing from object`)

		return nil, diags
	}

	deleteOnVmDeletionVal, ok := deleteOnVmDeletionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delete_on_vm_deletion expected to be basetypes.BoolValue, was: %T`, deleteOnVmDeletionAttribute))
	}

	deviceNumberAttribute, ok := attributes["device_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_number is missing from object`)

		return nil, diags
	}

	deviceNumberVal, ok := deviceNumberAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_number expected to be basetypes.Int64Value, was: %T`, deviceNumberAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	vmIdAttribute, ok := attributes["vm_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vm_id is missing from object`)

		return nil, diags
	}

	vmIdVal, ok := vmIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vm_id expected to be basetypes.StringValue, was: %T`, vmIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LinkNicValue{
		DeleteOnVmDeletion: deleteOnVmDeletionVal,
		DeviceNumber:       deviceNumberVal,
		Id:                 idVal,
		State:              stateVal,
		VmId:               vmIdVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewLinkNicValueNull() LinkNicValue {
	return LinkNicValue{
		state: attr.ValueStateNull,
	}
}

func NewLinkNicValueUnknown() LinkNicValue {
	return LinkNicValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLinkNicValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LinkNicValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LinkNicValue Attribute Value",
				"While creating a LinkNicValue value, a missing attribute value was detected. "+
					"A LinkNicValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinkNicValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LinkNicValue Attribute Type",
				"While creating a LinkNicValue value, an invalid attribute value was detected. "+
					"A LinkNicValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinkNicValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LinkNicValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LinkNicValue Attribute Value",
				"While creating a LinkNicValue value, an extra attribute value was detected. "+
					"A LinkNicValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LinkNicValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLinkNicValueUnknown(), diags
	}

	deleteOnVmDeletionAttribute, ok := attributes["delete_on_vm_deletion"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delete_on_vm_deletion is missing from object`)

		return NewLinkNicValueUnknown(), diags
	}

	deleteOnVmDeletionVal, ok := deleteOnVmDeletionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delete_on_vm_deletion expected to be basetypes.BoolValue, was: %T`, deleteOnVmDeletionAttribute))
	}

	deviceNumberAttribute, ok := attributes["device_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_number is missing from object`)

		return NewLinkNicValueUnknown(), diags
	}

	deviceNumberVal, ok := deviceNumberAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_number expected to be basetypes.Int64Value, was: %T`, deviceNumberAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewLinkNicValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewLinkNicValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	vmIdAttribute, ok := attributes["vm_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vm_id is missing from object`)

		return NewLinkNicValueUnknown(), diags
	}

	vmIdVal, ok := vmIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vm_id expected to be basetypes.StringValue, was: %T`, vmIdAttribute))
	}

	if diags.HasError() {
		return NewLinkNicValueUnknown(), diags
	}

	return LinkNicValue{
		DeleteOnVmDeletion: deleteOnVmDeletionVal,
		DeviceNumber:       deviceNumberVal,
		Id:                 idVal,
		State:              stateVal,
		VmId:               vmIdVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewLinkNicValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LinkNicValue {
	object, diags := NewLinkNicValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLinkNicValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LinkNicType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLinkNicValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLinkNicValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLinkNicValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLinkNicValueMust(LinkNicValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LinkNicType) ValueType(ctx context.Context) attr.Value {
	return LinkNicValue{}
}

var _ basetypes.ObjectValuable = LinkNicValue{}

type LinkNicValue struct {
	DeleteOnVmDeletion basetypes.BoolValue   `tfsdk:"delete_on_vm_deletion"`
	DeviceNumber       basetypes.Int64Value  `tfsdk:"device_number"`
	Id                 basetypes.StringValue `tfsdk:"id"`
	State              basetypes.StringValue `tfsdk:"state"`
	VmId               basetypes.StringValue `tfsdk:"vm_id"`
	state              attr.ValueState
}

func (v LinkNicValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["delete_on_vm_deletion"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["device_number"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vm_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.DeleteOnVmDeletion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["delete_on_vm_deletion"] = val

		val, err = v.DeviceNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["device_number"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.VmId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vm_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LinkNicValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LinkNicValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LinkNicValue) String() string {
	return "LinkNicValue"
}

func (v LinkNicValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"delete_on_vm_deletion": basetypes.BoolType{},
		"device_number":         basetypes.Int64Type{},
		"id":                    basetypes.StringType{},
		"state":                 basetypes.StringType{},
		"vm_id":                 basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"delete_on_vm_deletion": v.DeleteOnVmDeletion,
			"device_number":         v.DeviceNumber,
			"id":                    v.Id,
			"state":                 v.State,
			"vm_id":                 v.VmId,
		})

	return objVal, diags
}

func (v LinkNicValue) Equal(o attr.Value) bool {
	other, ok := o.(LinkNicValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DeleteOnVmDeletion.Equal(other.DeleteOnVmDeletion) {
		return false
	}

	if !v.DeviceNumber.Equal(other.DeviceNumber) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.VmId.Equal(other.VmId) {
		return false
	}

	return true
}

func (v LinkNicValue) Type(ctx context.Context) attr.Type {
	return LinkNicType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LinkNicValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"delete_on_vm_deletion": basetypes.BoolType{},
		"device_number":         basetypes.Int64Type{},
		"id":                    basetypes.StringType{},
		"state":                 basetypes.StringType{},
		"vm_id":                 basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = LinkPublicIpType{}

type LinkPublicIpType struct {
	basetypes.ObjectType
}

func (t LinkPublicIpType) Equal(o attr.Type) bool {
	other, ok := o.(LinkPublicIpType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LinkPublicIpType) String() string {
	return "LinkPublicIpType"
}

func (t LinkPublicIpType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	publicDnsNameAttribute, ok := attributes["public_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_dns_name is missing from object`)

		return nil, diags
	}

	publicDnsNameVal, ok := publicDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_dns_name expected to be basetypes.StringValue, was: %T`, publicDnsNameAttribute))
	}

	publicIpAttribute, ok := attributes["public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_ip is missing from object`)

		return nil, diags
	}

	publicIpVal, ok := publicIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_ip expected to be basetypes.StringValue, was: %T`, publicIpAttribute))
	}

	publicIpIdAttribute, ok := attributes["public_ip_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_ip_id is missing from object`)

		return nil, diags
	}

	publicIpIdVal, ok := publicIpIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_ip_id expected to be basetypes.StringValue, was: %T`, publicIpIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LinkPublicIpValue{
		Id:            idVal,
		PublicDnsName: publicDnsNameVal,
		PublicIp:      publicIpVal,
		PublicIpId:    publicIpIdVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewLinkPublicIpValueNull() LinkPublicIpValue {
	return LinkPublicIpValue{
		state: attr.ValueStateNull,
	}
}

func NewLinkPublicIpValueUnknown() LinkPublicIpValue {
	return LinkPublicIpValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLinkPublicIpValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LinkPublicIpValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LinkPublicIpValue Attribute Value",
				"While creating a LinkPublicIpValue value, a missing attribute value was detected. "+
					"A LinkPublicIpValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinkPublicIpValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LinkPublicIpValue Attribute Type",
				"While creating a LinkPublicIpValue value, an invalid attribute value was detected. "+
					"A LinkPublicIpValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinkPublicIpValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LinkPublicIpValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LinkPublicIpValue Attribute Value",
				"While creating a LinkPublicIpValue value, an extra attribute value was detected. "+
					"A LinkPublicIpValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LinkPublicIpValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLinkPublicIpValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewLinkPublicIpValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	publicDnsNameAttribute, ok := attributes["public_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_dns_name is missing from object`)

		return NewLinkPublicIpValueUnknown(), diags
	}

	publicDnsNameVal, ok := publicDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_dns_name expected to be basetypes.StringValue, was: %T`, publicDnsNameAttribute))
	}

	publicIpAttribute, ok := attributes["public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_ip is missing from object`)

		return NewLinkPublicIpValueUnknown(), diags
	}

	publicIpVal, ok := publicIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_ip expected to be basetypes.StringValue, was: %T`, publicIpAttribute))
	}

	publicIpIdAttribute, ok := attributes["public_ip_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_ip_id is missing from object`)

		return NewLinkPublicIpValueUnknown(), diags
	}

	publicIpIdVal, ok := publicIpIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_ip_id expected to be basetypes.StringValue, was: %T`, publicIpIdAttribute))
	}

	if diags.HasError() {
		return NewLinkPublicIpValueUnknown(), diags
	}

	return LinkPublicIpValue{
		Id:            idVal,
		PublicDnsName: publicDnsNameVal,
		PublicIp:      publicIpVal,
		PublicIpId:    publicIpIdVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewLinkPublicIpValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LinkPublicIpValue {
	object, diags := NewLinkPublicIpValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLinkPublicIpValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LinkPublicIpType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLinkPublicIpValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLinkPublicIpValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLinkPublicIpValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLinkPublicIpValueMust(LinkPublicIpValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LinkPublicIpType) ValueType(ctx context.Context) attr.Value {
	return LinkPublicIpValue{}
}

var _ basetypes.ObjectValuable = LinkPublicIpValue{}

type LinkPublicIpValue struct {
	Id            basetypes.StringValue `tfsdk:"id"`
	PublicDnsName basetypes.StringValue `tfsdk:"public_dns_name"`
	PublicIp      basetypes.StringValue `tfsdk:"public_ip"`
	PublicIpId    basetypes.StringValue `tfsdk:"public_ip_id"`
	state         attr.ValueState
}

func (v LinkPublicIpValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["public_dns_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["public_ip"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["public_ip_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.PublicDnsName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["public_dns_name"] = val

		val, err = v.PublicIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["public_ip"] = val

		val, err = v.PublicIpId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["public_ip_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LinkPublicIpValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LinkPublicIpValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LinkPublicIpValue) String() string {
	return "LinkPublicIpValue"
}

func (v LinkPublicIpValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"id":              basetypes.StringType{},
		"public_dns_name": basetypes.StringType{},
		"public_ip":       basetypes.StringType{},
		"public_ip_id":    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":              v.Id,
			"public_dns_name": v.PublicDnsName,
			"public_ip":       v.PublicIp,
			"public_ip_id":    v.PublicIpId,
		})

	return objVal, diags
}

func (v LinkPublicIpValue) Equal(o attr.Value) bool {
	other, ok := o.(LinkPublicIpValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.PublicDnsName.Equal(other.PublicDnsName) {
		return false
	}

	if !v.PublicIp.Equal(other.PublicIp) {
		return false
	}

	if !v.PublicIpId.Equal(other.PublicIpId) {
		return false
	}

	return true
}

func (v LinkPublicIpValue) Type(ctx context.Context) attr.Type {
	return LinkPublicIpType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LinkPublicIpValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":              basetypes.StringType{},
		"public_dns_name": basetypes.StringType{},
		"public_ip":       basetypes.StringType{},
		"public_ip_id":    basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = PrivateIpsType{}

type PrivateIpsType struct {
	basetypes.ObjectType
}

func (t PrivateIpsType) Equal(o attr.Type) bool {
	other, ok := o.(PrivateIpsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PrivateIpsType) String() string {
	return "PrivateIpsType"
}

func (t PrivateIpsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	isPrimaryAttribute, ok := attributes["is_primary"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_primary is missing from object`)

		return nil, diags
	}

	isPrimaryVal, ok := isPrimaryAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_primary expected to be basetypes.BoolValue, was: %T`, isPrimaryAttribute))
	}

	linkPublicIpPrivateIpAttribute, ok := attributes["link_public_ip_private_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_public_ip_private_ip is missing from object`)

		return nil, diags
	}

	linkPublicIpPrivateIpVal, ok := linkPublicIpPrivateIpAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_public_ip_private_ip expected to be basetypes.ObjectValue, was: %T`, linkPublicIpPrivateIpAttribute))
	}

	privateDnsNameAttribute, ok := attributes["private_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_dns_name is missing from object`)

		return nil, diags
	}

	privateDnsNameVal, ok := privateDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_dns_name expected to be basetypes.StringValue, was: %T`, privateDnsNameAttribute))
	}

	privateIpAttribute, ok := attributes["private_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_ip is missing from object`)

		return nil, diags
	}

	privateIpVal, ok := privateIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_ip expected to be basetypes.StringValue, was: %T`, privateIpAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PrivateIpsValue{
		IsPrimary:             isPrimaryVal,
		LinkPublicIpPrivateIp: linkPublicIpPrivateIpVal,
		PrivateDnsName:        privateDnsNameVal,
		PrivateIp:             privateIpVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewPrivateIpsValueNull() PrivateIpsValue {
	return PrivateIpsValue{
		state: attr.ValueStateNull,
	}
}

func NewPrivateIpsValueUnknown() PrivateIpsValue {
	return PrivateIpsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPrivateIpsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PrivateIpsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PrivateIpsValue Attribute Value",
				"While creating a PrivateIpsValue value, a missing attribute value was detected. "+
					"A PrivateIpsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PrivateIpsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PrivateIpsValue Attribute Type",
				"While creating a PrivateIpsValue value, an invalid attribute value was detected. "+
					"A PrivateIpsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PrivateIpsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PrivateIpsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PrivateIpsValue Attribute Value",
				"While creating a PrivateIpsValue value, an extra attribute value was detected. "+
					"A PrivateIpsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PrivateIpsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPrivateIpsValueUnknown(), diags
	}

	isPrimaryAttribute, ok := attributes["is_primary"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_primary is missing from object`)

		return NewPrivateIpsValueUnknown(), diags
	}

	isPrimaryVal, ok := isPrimaryAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_primary expected to be basetypes.BoolValue, was: %T`, isPrimaryAttribute))
	}

	linkPublicIpPrivateIpAttribute, ok := attributes["link_public_ip_private_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`link_public_ip_private_ip is missing from object`)

		return NewPrivateIpsValueUnknown(), diags
	}

	linkPublicIpPrivateIpVal, ok := linkPublicIpPrivateIpAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`link_public_ip_private_ip expected to be basetypes.ObjectValue, was: %T`, linkPublicIpPrivateIpAttribute))
	}

	privateDnsNameAttribute, ok := attributes["private_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_dns_name is missing from object`)

		return NewPrivateIpsValueUnknown(), diags
	}

	privateDnsNameVal, ok := privateDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_dns_name expected to be basetypes.StringValue, was: %T`, privateDnsNameAttribute))
	}

	privateIpAttribute, ok := attributes["private_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_ip is missing from object`)

		return NewPrivateIpsValueUnknown(), diags
	}

	privateIpVal, ok := privateIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_ip expected to be basetypes.StringValue, was: %T`, privateIpAttribute))
	}

	if diags.HasError() {
		return NewPrivateIpsValueUnknown(), diags
	}

	return PrivateIpsValue{
		IsPrimary:             isPrimaryVal,
		LinkPublicIpPrivateIp: linkPublicIpPrivateIpVal,
		PrivateDnsName:        privateDnsNameVal,
		PrivateIp:             privateIpVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewPrivateIpsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PrivateIpsValue {
	object, diags := NewPrivateIpsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPrivateIpsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PrivateIpsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPrivateIpsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPrivateIpsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPrivateIpsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPrivateIpsValueMust(PrivateIpsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PrivateIpsType) ValueType(ctx context.Context) attr.Value {
	return PrivateIpsValue{}
}

var _ basetypes.ObjectValuable = PrivateIpsValue{}

type PrivateIpsValue struct {
	IsPrimary             basetypes.BoolValue   `tfsdk:"is_primary"`
	LinkPublicIpPrivateIp basetypes.ObjectValue `tfsdk:"link_public_ip_private_ip"`
	PrivateDnsName        basetypes.StringValue `tfsdk:"private_dns_name"`
	PrivateIp             basetypes.StringValue `tfsdk:"private_ip"`
	state                 attr.ValueState
}

func (v PrivateIpsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["is_primary"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["link_public_ip_private_ip"] = basetypes.ObjectType{
		AttrTypes: LinkPublicIpPrivateIpValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["private_dns_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["private_ip"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.IsPrimary.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_primary"] = val

		val, err = v.LinkPublicIpPrivateIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["link_public_ip_private_ip"] = val

		val, err = v.PrivateDnsName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_dns_name"] = val

		val, err = v.PrivateIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_ip"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PrivateIpsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PrivateIpsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PrivateIpsValue) String() string {
	return "PrivateIpsValue"
}

func (v PrivateIpsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var linkPublicIpPrivateIp basetypes.ObjectValue

	if v.LinkPublicIpPrivateIp.IsNull() {
		linkPublicIpPrivateIp = types.ObjectNull(
			LinkPublicIpPrivateIpValue{}.AttributeTypes(ctx),
		)
	}

	if v.LinkPublicIpPrivateIp.IsUnknown() {
		linkPublicIpPrivateIp = types.ObjectUnknown(
			LinkPublicIpPrivateIpValue{}.AttributeTypes(ctx),
		)
	}

	if !v.LinkPublicIpPrivateIp.IsNull() && !v.LinkPublicIpPrivateIp.IsUnknown() {
		linkPublicIpPrivateIp = types.ObjectValueMust(
			LinkPublicIpPrivateIpValue{}.AttributeTypes(ctx),
			v.LinkPublicIpPrivateIp.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"is_primary": basetypes.BoolType{},
		"link_public_ip_private_ip": basetypes.ObjectType{
			AttrTypes: LinkPublicIpPrivateIpValue{}.AttributeTypes(ctx),
		},
		"private_dns_name": basetypes.StringType{},
		"private_ip":       basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"is_primary":                v.IsPrimary,
			"link_public_ip_private_ip": linkPublicIpPrivateIp,
			"private_dns_name":          v.PrivateDnsName,
			"private_ip":                v.PrivateIp,
		})

	return objVal, diags
}

func (v PrivateIpsValue) Equal(o attr.Value) bool {
	other, ok := o.(PrivateIpsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IsPrimary.Equal(other.IsPrimary) {
		return false
	}

	if !v.LinkPublicIpPrivateIp.Equal(other.LinkPublicIpPrivateIp) {
		return false
	}

	if !v.PrivateDnsName.Equal(other.PrivateDnsName) {
		return false
	}

	if !v.PrivateIp.Equal(other.PrivateIp) {
		return false
	}

	return true
}

func (v PrivateIpsValue) Type(ctx context.Context) attr.Type {
	return PrivateIpsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PrivateIpsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"is_primary": basetypes.BoolType{},
		"link_public_ip_private_ip": basetypes.ObjectType{
			AttrTypes: LinkPublicIpPrivateIpValue{}.AttributeTypes(ctx),
		},
		"private_dns_name": basetypes.StringType{},
		"private_ip":       basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = LinkPublicIpPrivateIpType{}

type LinkPublicIpPrivateIpType struct {
	basetypes.ObjectType
}

func (t LinkPublicIpPrivateIpType) Equal(o attr.Type) bool {
	other, ok := o.(LinkPublicIpPrivateIpType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LinkPublicIpPrivateIpType) String() string {
	return "LinkPublicIpPrivateIpType"
}

func (t LinkPublicIpPrivateIpType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	publicDnsNameAttribute, ok := attributes["public_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_dns_name is missing from object`)

		return nil, diags
	}

	publicDnsNameVal, ok := publicDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_dns_name expected to be basetypes.StringValue, was: %T`, publicDnsNameAttribute))
	}

	publicIpAttribute, ok := attributes["public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_ip is missing from object`)

		return nil, diags
	}

	publicIpVal, ok := publicIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_ip expected to be basetypes.StringValue, was: %T`, publicIpAttribute))
	}

	publicIpIdAttribute, ok := attributes["public_ip_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_ip_id is missing from object`)

		return nil, diags
	}

	publicIpIdVal, ok := publicIpIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_ip_id expected to be basetypes.StringValue, was: %T`, publicIpIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LinkPublicIpPrivateIpValue{
		Id:            idVal,
		PublicDnsName: publicDnsNameVal,
		PublicIp:      publicIpVal,
		PublicIpId:    publicIpIdVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewLinkPublicIpPrivateIpValueNull() LinkPublicIpPrivateIpValue {
	return LinkPublicIpPrivateIpValue{
		state: attr.ValueStateNull,
	}
}

func NewLinkPublicIpPrivateIpValueUnknown() LinkPublicIpPrivateIpValue {
	return LinkPublicIpPrivateIpValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLinkPublicIpPrivateIpValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LinkPublicIpPrivateIpValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LinkPublicIpPrivateIpValue Attribute Value",
				"While creating a LinkPublicIpPrivateIpValue value, a missing attribute value was detected. "+
					"A LinkPublicIpPrivateIpValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinkPublicIpPrivateIpValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LinkPublicIpPrivateIpValue Attribute Type",
				"While creating a LinkPublicIpPrivateIpValue value, an invalid attribute value was detected. "+
					"A LinkPublicIpPrivateIpValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinkPublicIpPrivateIpValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LinkPublicIpPrivateIpValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LinkPublicIpPrivateIpValue Attribute Value",
				"While creating a LinkPublicIpPrivateIpValue value, an extra attribute value was detected. "+
					"A LinkPublicIpPrivateIpValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LinkPublicIpPrivateIpValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLinkPublicIpPrivateIpValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewLinkPublicIpPrivateIpValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	publicDnsNameAttribute, ok := attributes["public_dns_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_dns_name is missing from object`)

		return NewLinkPublicIpPrivateIpValueUnknown(), diags
	}

	publicDnsNameVal, ok := publicDnsNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_dns_name expected to be basetypes.StringValue, was: %T`, publicDnsNameAttribute))
	}

	publicIpAttribute, ok := attributes["public_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_ip is missing from object`)

		return NewLinkPublicIpPrivateIpValueUnknown(), diags
	}

	publicIpVal, ok := publicIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_ip expected to be basetypes.StringValue, was: %T`, publicIpAttribute))
	}

	publicIpIdAttribute, ok := attributes["public_ip_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`public_ip_id is missing from object`)

		return NewLinkPublicIpPrivateIpValueUnknown(), diags
	}

	publicIpIdVal, ok := publicIpIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`public_ip_id expected to be basetypes.StringValue, was: %T`, publicIpIdAttribute))
	}

	if diags.HasError() {
		return NewLinkPublicIpPrivateIpValueUnknown(), diags
	}

	return LinkPublicIpPrivateIpValue{
		Id:            idVal,
		PublicDnsName: publicDnsNameVal,
		PublicIp:      publicIpVal,
		PublicIpId:    publicIpIdVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewLinkPublicIpPrivateIpValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LinkPublicIpPrivateIpValue {
	object, diags := NewLinkPublicIpPrivateIpValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLinkPublicIpPrivateIpValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LinkPublicIpPrivateIpType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLinkPublicIpPrivateIpValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLinkPublicIpPrivateIpValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLinkPublicIpPrivateIpValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLinkPublicIpPrivateIpValueMust(LinkPublicIpPrivateIpValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LinkPublicIpPrivateIpType) ValueType(ctx context.Context) attr.Value {
	return LinkPublicIpPrivateIpValue{}
}

var _ basetypes.ObjectValuable = LinkPublicIpPrivateIpValue{}

type LinkPublicIpPrivateIpValue struct {
	Id            basetypes.StringValue `tfsdk:"id"`
	PublicDnsName basetypes.StringValue `tfsdk:"public_dns_name"`
	PublicIp      basetypes.StringValue `tfsdk:"public_ip"`
	PublicIpId    basetypes.StringValue `tfsdk:"public_ip_id"`
	state         attr.ValueState
}

func (v LinkPublicIpPrivateIpValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["public_dns_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["public_ip"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["public_ip_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.PublicDnsName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["public_dns_name"] = val

		val, err = v.PublicIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["public_ip"] = val

		val, err = v.PublicIpId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["public_ip_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LinkPublicIpPrivateIpValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LinkPublicIpPrivateIpValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LinkPublicIpPrivateIpValue) String() string {
	return "LinkPublicIpPrivateIpValue"
}

func (v LinkPublicIpPrivateIpValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"id":              basetypes.StringType{},
		"public_dns_name": basetypes.StringType{},
		"public_ip":       basetypes.StringType{},
		"public_ip_id":    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":              v.Id,
			"public_dns_name": v.PublicDnsName,
			"public_ip":       v.PublicIp,
			"public_ip_id":    v.PublicIpId,
		})

	return objVal, diags
}

func (v LinkPublicIpPrivateIpValue) Equal(o attr.Value) bool {
	other, ok := o.(LinkPublicIpPrivateIpValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.PublicDnsName.Equal(other.PublicDnsName) {
		return false
	}

	if !v.PublicIp.Equal(other.PublicIp) {
		return false
	}

	if !v.PublicIpId.Equal(other.PublicIpId) {
		return false
	}

	return true
}

func (v LinkPublicIpPrivateIpValue) Type(ctx context.Context) attr.Type {
	return LinkPublicIpPrivateIpType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LinkPublicIpPrivateIpValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":              basetypes.StringType{},
		"public_dns_name": basetypes.StringType{},
		"public_ip":       basetypes.StringType{},
		"public_ip_id":    basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SecurityGroupsType{}

type SecurityGroupsType struct {
	basetypes.ObjectType
}

func (t SecurityGroupsType) Equal(o attr.Type) bool {
	other, ok := o.(SecurityGroupsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SecurityGroupsType) String() string {
	return "SecurityGroupsType"
}

func (t SecurityGroupsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	securityGroupIdAttribute, ok := attributes["security_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_id is missing from object`)

		return nil, diags
	}

	securityGroupIdVal, ok := securityGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_id expected to be basetypes.StringValue, was: %T`, securityGroupIdAttribute))
	}

	securityGroupNameAttribute, ok := attributes["security_group_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_name is missing from object`)

		return nil, diags
	}

	securityGroupNameVal, ok := securityGroupNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_name expected to be basetypes.StringValue, was: %T`, securityGroupNameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SecurityGroupsValue{
		SecurityGroupId:   securityGroupIdVal,
		SecurityGroupName: securityGroupNameVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewSecurityGroupsValueNull() SecurityGroupsValue {
	return SecurityGroupsValue{
		state: attr.ValueStateNull,
	}
}

func NewSecurityGroupsValueUnknown() SecurityGroupsValue {
	return SecurityGroupsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSecurityGroupsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SecurityGroupsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SecurityGroupsValue Attribute Value",
				"While creating a SecurityGroupsValue value, a missing attribute value was detected. "+
					"A SecurityGroupsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SecurityGroupsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SecurityGroupsValue Attribute Type",
				"While creating a SecurityGroupsValue value, an invalid attribute value was detected. "+
					"A SecurityGroupsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SecurityGroupsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SecurityGroupsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SecurityGroupsValue Attribute Value",
				"While creating a SecurityGroupsValue value, an extra attribute value was detected. "+
					"A SecurityGroupsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SecurityGroupsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSecurityGroupsValueUnknown(), diags
	}

	securityGroupIdAttribute, ok := attributes["security_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_id is missing from object`)

		return NewSecurityGroupsValueUnknown(), diags
	}

	securityGroupIdVal, ok := securityGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_id expected to be basetypes.StringValue, was: %T`, securityGroupIdAttribute))
	}

	securityGroupNameAttribute, ok := attributes["security_group_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_name is missing from object`)

		return NewSecurityGroupsValueUnknown(), diags
	}

	securityGroupNameVal, ok := securityGroupNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_name expected to be basetypes.StringValue, was: %T`, securityGroupNameAttribute))
	}

	if diags.HasError() {
		return NewSecurityGroupsValueUnknown(), diags
	}

	return SecurityGroupsValue{
		SecurityGroupId:   securityGroupIdVal,
		SecurityGroupName: securityGroupNameVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewSecurityGroupsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SecurityGroupsValue {
	object, diags := NewSecurityGroupsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSecurityGroupsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SecurityGroupsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSecurityGroupsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSecurityGroupsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSecurityGroupsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSecurityGroupsValueMust(SecurityGroupsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SecurityGroupsType) ValueType(ctx context.Context) attr.Value {
	return SecurityGroupsValue{}
}

var _ basetypes.ObjectValuable = SecurityGroupsValue{}

type SecurityGroupsValue struct {
	SecurityGroupId   basetypes.StringValue `tfsdk:"security_group_id"`
	SecurityGroupName basetypes.StringValue `tfsdk:"security_group_name"`
	state             attr.ValueState
}

func (v SecurityGroupsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["security_group_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["security_group_name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.SecurityGroupId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["security_group_id"] = val

		val, err = v.SecurityGroupName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["security_group_name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SecurityGroupsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SecurityGroupsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SecurityGroupsValue) String() string {
	return "SecurityGroupsValue"
}

func (v SecurityGroupsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"security_group_id":   basetypes.StringType{},
		"security_group_name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"security_group_id":   v.SecurityGroupId,
			"security_group_name": v.SecurityGroupName,
		})

	return objVal, diags
}

func (v SecurityGroupsValue) Equal(o attr.Value) bool {
	other, ok := o.(SecurityGroupsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.SecurityGroupId.Equal(other.SecurityGroupId) {
		return false
	}

	if !v.SecurityGroupName.Equal(other.SecurityGroupName) {
		return false
	}

	return true
}

func (v SecurityGroupsValue) Type(ctx context.Context) attr.Type {
	return SecurityGroupsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SecurityGroupsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"security_group_id":   basetypes.StringType{},
		"security_group_name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TagsType{}

type TagsType struct {
	basetypes.ObjectType
}

func (t TagsType) Equal(o attr.Type) bool {
	other, ok := o.(TagsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TagsType) String() string {
	return "TagsType"
}

func (t TagsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TagsValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewTagsValueNull() TagsValue {
	return TagsValue{
		state: attr.ValueStateNull,
	}
}

func NewTagsValueUnknown() TagsValue {
	return TagsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTagsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TagsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TagsValue Attribute Value",
				"While creating a TagsValue value, a missing attribute value was detected. "+
					"A TagsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TagsValue Attribute Type",
				"While creating a TagsValue value, an invalid attribute value was detected. "+
					"A TagsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TagsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TagsValue Attribute Value",
				"While creating a TagsValue value, an extra attribute value was detected. "+
					"A TagsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TagsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	return TagsValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewTagsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TagsValue {
	object, diags := NewTagsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTagsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TagsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTagsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTagsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTagsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTagsValueMust(TagsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TagsType) ValueType(ctx context.Context) attr.Value {
	return TagsValue{}
}

var _ basetypes.ObjectValuable = TagsValue{}

type TagsValue struct {
	Key   basetypes.StringValue `tfsdk:"key"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v TagsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TagsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TagsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TagsValue) String() string {
	return "TagsValue"
}

func (v TagsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"key":   v.Key,
			"value": v.Value,
		})

	return objVal, diags
}

func (v TagsValue) Equal(o attr.Value) bool {
	other, ok := o.(TagsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v TagsValue) Type(ctx context.Context) attr.Type {
	return TagsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TagsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}
