// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_cluster

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ClusterDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"items": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"availability_zone_name": schema.StringAttribute{
							Computed:            true,
							Description:         "the Subregion where the the cluster components should be located.(default: cloudgouv-eu-west-1b)",
							MarkdownDescription: "the Subregion where the the cluster components should be located.(default: cloudgouv-eu-west-1b)",
						},
						"cidr": schema.StringAttribute{
							Computed:            true,
							Description:         "CIDR of cluster",
							MarkdownDescription: "CIDR of cluster",
						},
						"description": schema.StringAttribute{
							Computed:            true,
							Description:         "Description of cluster",
							MarkdownDescription: "Description of cluster",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "Id of cluster.",
							MarkdownDescription: "Id of cluster.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of clusters.",
							MarkdownDescription: "Name of clusters.",
						},
						"nodepools": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"availability_zone_name": schema.StringAttribute{
										Computed:            true,
										Description:         "The Subregion where the workers of the NodePool should be located.",
										MarkdownDescription: "The Subregion where the workers of the NodePool should be located.",
									},
									"gpu": schema.StringAttribute{
										Computed:            true,
										Description:         "Gpu of noodpools",
										MarkdownDescription: "Gpu of noodpools",
									},
									"name": schema.StringAttribute{
										Computed:            true,
										Description:         "Name of noodpools.",
										MarkdownDescription: "Name of noodpools.",
									},
									"node_count": schema.Int64Attribute{
										Computed:            true,
										Description:         "NodeCount of noodpools",
										MarkdownDescription: "NodeCount of noodpools",
									},
									"node_profile": schema.StringAttribute{
										Computed:            true,
										Description:         "NodeCount of noodpools",
										MarkdownDescription: "NodeCount of noodpools",
									},
									"tina": schema.StringAttribute{
										Computed:            true,
										Description:         "Tina of noodpools",
										MarkdownDescription: "Tina of noodpools",
									},
								},
								CustomType: NodepoolsType{
									ObjectType: types.ObjectType{
										AttrTypes: NodepoolsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "One or more tags associated with the DHCP options set.",
							MarkdownDescription: "One or more tags associated with the DHCP options set.",
						},
						"state": schema.StringAttribute{
							Computed:            true,
							Description:         "State of cluster",
							MarkdownDescription: "State of cluster",
						},
						"urls": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"api": schema.StringAttribute{
									Computed: true,
								},
								"console": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: UrlsType{
								ObjectType: types.ObjectType{
									AttrTypes: UrlsValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Information about the health check configuration.",
							MarkdownDescription: "Information about the health check configuration.",
						},
						"version": schema.StringAttribute{
							Computed:            true,
							Description:         "Version of cluster",
							MarkdownDescription: "Version of cluster",
						},
					},
					CustomType: ItemsType{
						ObjectType: types.ObjectType{
							AttrTypes: ItemsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "Information about one or more DHCP options sets.",
				MarkdownDescription: "Information about one or more DHCP options sets.",
			},
			"next_page_token": schema.StringAttribute{
				Computed:            true,
				Description:         "This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.",
				MarkdownDescription: "This token is used to retrieve the next page. If this field is omitted, there are no subsequent pages.",
			},
			"page": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"next_token": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "A page token received from a previous call. Provide this to retrieve the subsequent page.",
						MarkdownDescription: "A page token received from a previous call. Provide this to retrieve the subsequent page.",
					},
					"size": schema.Int64Attribute{
						Optional:            true,
						Computed:            true,
						Description:         "The maximum number of items to return. The service may return fewer than this value.",
						MarkdownDescription: "The maximum number of items to return. The service may return fewer than this value.",
						Validators: []validator.Int64{
							int64validator.Between(0, 50),
						},
					},
				},
				CustomType: PageType{
					ObjectType: types.ObjectType{
						AttrTypes: PageValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Paginated request",
				MarkdownDescription: "Paginated request",
			},
			"total_size": schema.Int64Attribute{
				Computed:            true,
				Description:         "Total number of element of items.",
				MarkdownDescription: "Total number of element of items.",
			},
		},
	}
}

type ClusterModel struct {
	Items         types.List   `tfsdk:"items"`
	NextPageToken types.String `tfsdk:"next_page_token"`
	Page          PageValue    `tfsdk:"page"`
	TotalSize     types.Int64  `tfsdk:"total_size"`
}

var _ basetypes.ObjectTypable = ItemsType{}

type ItemsType struct {
	basetypes.ObjectType
}

func (t ItemsType) Equal(o attr.Type) bool {
	other, ok := o.(ItemsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ItemsType) String() string {
	return "ItemsType"
}

func (t ItemsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	availabilityZoneNameAttribute, ok := attributes["availability_zone_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`availability_zone_name is missing from object`)

		return nil, diags
	}

	availabilityZoneNameVal, ok := availabilityZoneNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`availability_zone_name expected to be basetypes.StringValue, was: %T`, availabilityZoneNameAttribute))
	}

	cidrAttribute, ok := attributes["cidr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cidr is missing from object`)

		return nil, diags
	}

	cidrVal, ok := cidrAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cidr expected to be basetypes.StringValue, was: %T`, cidrAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	nodepoolsAttribute, ok := attributes["nodepools"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nodepools is missing from object`)

		return nil, diags
	}

	nodepoolsVal, ok := nodepoolsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nodepools expected to be basetypes.ListValue, was: %T`, nodepoolsAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	urlsAttribute, ok := attributes["urls"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`urls is missing from object`)

		return nil, diags
	}

	urlsVal, ok := urlsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`urls expected to be basetypes.ObjectValue, was: %T`, urlsAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ItemsValue{
		AvailabilityZoneName: availabilityZoneNameVal,
		Cidr:                 cidrVal,
		Description:          descriptionVal,
		Id:                   idVal,
		Name:                 nameVal,
		Nodepools:            nodepoolsVal,
		State:                stateVal,
		Urls:                 urlsVal,
		Version:              versionVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewItemsValueNull() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateNull,
	}
}

func NewItemsValueUnknown() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewItemsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ItemsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ItemsValue Attribute Value",
				"While creating a ItemsValue value, a missing attribute value was detected. "+
					"A ItemsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ItemsValue Attribute Type",
				"While creating a ItemsValue value, an invalid attribute value was detected. "+
					"A ItemsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ItemsValue Attribute Value",
				"While creating a ItemsValue value, an extra attribute value was detected. "+
					"A ItemsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ItemsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	availabilityZoneNameAttribute, ok := attributes["availability_zone_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`availability_zone_name is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	availabilityZoneNameVal, ok := availabilityZoneNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`availability_zone_name expected to be basetypes.StringValue, was: %T`, availabilityZoneNameAttribute))
	}

	cidrAttribute, ok := attributes["cidr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cidr is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	cidrVal, ok := cidrAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cidr expected to be basetypes.StringValue, was: %T`, cidrAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	nodepoolsAttribute, ok := attributes["nodepools"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nodepools is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	nodepoolsVal, ok := nodepoolsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nodepools expected to be basetypes.ListValue, was: %T`, nodepoolsAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	urlsAttribute, ok := attributes["urls"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`urls is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	urlsVal, ok := urlsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`urls expected to be basetypes.ObjectValue, was: %T`, urlsAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	return ItemsValue{
		AvailabilityZoneName: availabilityZoneNameVal,
		Cidr:                 cidrVal,
		Description:          descriptionVal,
		Id:                   idVal,
		Name:                 nameVal,
		Nodepools:            nodepoolsVal,
		State:                stateVal,
		Urls:                 urlsVal,
		Version:              versionVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewItemsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ItemsValue {
	object, diags := NewItemsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewItemsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ItemsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewItemsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewItemsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewItemsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewItemsValueMust(ItemsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ItemsType) ValueType(ctx context.Context) attr.Value {
	return ItemsValue{}
}

var _ basetypes.ObjectValuable = ItemsValue{}

type ItemsValue struct {
	AvailabilityZoneName basetypes.StringValue `tfsdk:"availability_zone_name"`
	Cidr                 basetypes.StringValue `tfsdk:"cidr"`
	Description          basetypes.StringValue `tfsdk:"description"`
	Id                   basetypes.StringValue `tfsdk:"id"`
	Name                 basetypes.StringValue `tfsdk:"name"`
	Nodepools            basetypes.ListValue   `tfsdk:"nodepools"`
	State                basetypes.StringValue `tfsdk:"state"`
	Urls                 basetypes.ObjectValue `tfsdk:"urls"`
	Version              basetypes.StringValue `tfsdk:"version"`
	state                attr.ValueState
}

func (v ItemsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["availability_zone_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["cidr"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["nodepools"] = basetypes.ListType{
		ElemType: NodepoolsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["urls"] = basetypes.ObjectType{
		AttrTypes: UrlsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.AvailabilityZoneName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["availability_zone_name"] = val

		val, err = v.Cidr.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cidr"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Nodepools.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["nodepools"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.Urls.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["urls"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ItemsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ItemsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ItemsValue) String() string {
	return "ItemsValue"
}

func (v ItemsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	nodepools := types.ListValueMust(
		NodepoolsType{
			basetypes.ObjectType{
				AttrTypes: NodepoolsValue{}.AttributeTypes(ctx),
			},
		},
		v.Nodepools.Elements(),
	)

	if v.Nodepools.IsNull() {
		nodepools = types.ListNull(
			NodepoolsType{
				basetypes.ObjectType{
					AttrTypes: NodepoolsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Nodepools.IsUnknown() {
		nodepools = types.ListUnknown(
			NodepoolsType{
				basetypes.ObjectType{
					AttrTypes: NodepoolsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var urls basetypes.ObjectValue

	if v.Urls.IsNull() {
		urls = types.ObjectNull(
			UrlsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Urls.IsUnknown() {
		urls = types.ObjectUnknown(
			UrlsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Urls.IsNull() && !v.Urls.IsUnknown() {
		urls = types.ObjectValueMust(
			UrlsValue{}.AttributeTypes(ctx),
			v.Urls.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"availability_zone_name": basetypes.StringType{},
		"cidr":                   basetypes.StringType{},
		"description":            basetypes.StringType{},
		"id":                     basetypes.StringType{},
		"name":                   basetypes.StringType{},
		"nodepools": basetypes.ListType{
			ElemType: NodepoolsValue{}.Type(ctx),
		},
		"state": basetypes.StringType{},
		"urls": basetypes.ObjectType{
			AttrTypes: UrlsValue{}.AttributeTypes(ctx),
		},
		"version": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"availability_zone_name": v.AvailabilityZoneName,
			"cidr":                   v.Cidr,
			"description":            v.Description,
			"id":                     v.Id,
			"name":                   v.Name,
			"nodepools":              nodepools,
			"state":                  v.State,
			"urls":                   urls,
			"version":                v.Version,
		})

	return objVal, diags
}

func (v ItemsValue) Equal(o attr.Value) bool {
	other, ok := o.(ItemsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AvailabilityZoneName.Equal(other.AvailabilityZoneName) {
		return false
	}

	if !v.Cidr.Equal(other.Cidr) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Nodepools.Equal(other.Nodepools) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.Urls.Equal(other.Urls) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v ItemsValue) Type(ctx context.Context) attr.Type {
	return ItemsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ItemsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"availability_zone_name": basetypes.StringType{},
		"cidr":                   basetypes.StringType{},
		"description":            basetypes.StringType{},
		"id":                     basetypes.StringType{},
		"name":                   basetypes.StringType{},
		"nodepools": basetypes.ListType{
			ElemType: NodepoolsValue{}.Type(ctx),
		},
		"state": basetypes.StringType{},
		"urls": basetypes.ObjectType{
			AttrTypes: UrlsValue{}.AttributeTypes(ctx),
		},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = NodepoolsType{}

type NodepoolsType struct {
	basetypes.ObjectType
}

func (t NodepoolsType) Equal(o attr.Type) bool {
	other, ok := o.(NodepoolsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t NodepoolsType) String() string {
	return "NodepoolsType"
}

func (t NodepoolsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	availabilityZoneNameAttribute, ok := attributes["availability_zone_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`availability_zone_name is missing from object`)

		return nil, diags
	}

	availabilityZoneNameVal, ok := availabilityZoneNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`availability_zone_name expected to be basetypes.StringValue, was: %T`, availabilityZoneNameAttribute))
	}

	gpuAttribute, ok := attributes["gpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpu is missing from object`)

		return nil, diags
	}

	gpuVal, ok := gpuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpu expected to be basetypes.StringValue, was: %T`, gpuAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	nodeCountAttribute, ok := attributes["node_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node_count is missing from object`)

		return nil, diags
	}

	nodeCountVal, ok := nodeCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node_count expected to be basetypes.Int64Value, was: %T`, nodeCountAttribute))
	}

	nodeProfileAttribute, ok := attributes["node_profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node_profile is missing from object`)

		return nil, diags
	}

	nodeProfileVal, ok := nodeProfileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node_profile expected to be basetypes.StringValue, was: %T`, nodeProfileAttribute))
	}

	tinaAttribute, ok := attributes["tina"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tina is missing from object`)

		return nil, diags
	}

	tinaVal, ok := tinaAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tina expected to be basetypes.StringValue, was: %T`, tinaAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return NodepoolsValue{
		AvailabilityZoneName: availabilityZoneNameVal,
		Gpu:                  gpuVal,
		Name:                 nameVal,
		NodeCount:            nodeCountVal,
		NodeProfile:          nodeProfileVal,
		Tina:                 tinaVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewNodepoolsValueNull() NodepoolsValue {
	return NodepoolsValue{
		state: attr.ValueStateNull,
	}
}

func NewNodepoolsValueUnknown() NodepoolsValue {
	return NodepoolsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewNodepoolsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (NodepoolsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing NodepoolsValue Attribute Value",
				"While creating a NodepoolsValue value, a missing attribute value was detected. "+
					"A NodepoolsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NodepoolsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid NodepoolsValue Attribute Type",
				"While creating a NodepoolsValue value, an invalid attribute value was detected. "+
					"A NodepoolsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NodepoolsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("NodepoolsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra NodepoolsValue Attribute Value",
				"While creating a NodepoolsValue value, an extra attribute value was detected. "+
					"A NodepoolsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra NodepoolsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewNodepoolsValueUnknown(), diags
	}

	availabilityZoneNameAttribute, ok := attributes["availability_zone_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`availability_zone_name is missing from object`)

		return NewNodepoolsValueUnknown(), diags
	}

	availabilityZoneNameVal, ok := availabilityZoneNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`availability_zone_name expected to be basetypes.StringValue, was: %T`, availabilityZoneNameAttribute))
	}

	gpuAttribute, ok := attributes["gpu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpu is missing from object`)

		return NewNodepoolsValueUnknown(), diags
	}

	gpuVal, ok := gpuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpu expected to be basetypes.StringValue, was: %T`, gpuAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewNodepoolsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	nodeCountAttribute, ok := attributes["node_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node_count is missing from object`)

		return NewNodepoolsValueUnknown(), diags
	}

	nodeCountVal, ok := nodeCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node_count expected to be basetypes.Int64Value, was: %T`, nodeCountAttribute))
	}

	nodeProfileAttribute, ok := attributes["node_profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`node_profile is missing from object`)

		return NewNodepoolsValueUnknown(), diags
	}

	nodeProfileVal, ok := nodeProfileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`node_profile expected to be basetypes.StringValue, was: %T`, nodeProfileAttribute))
	}

	tinaAttribute, ok := attributes["tina"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tina is missing from object`)

		return NewNodepoolsValueUnknown(), diags
	}

	tinaVal, ok := tinaAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tina expected to be basetypes.StringValue, was: %T`, tinaAttribute))
	}

	if diags.HasError() {
		return NewNodepoolsValueUnknown(), diags
	}

	return NodepoolsValue{
		AvailabilityZoneName: availabilityZoneNameVal,
		Gpu:                  gpuVal,
		Name:                 nameVal,
		NodeCount:            nodeCountVal,
		NodeProfile:          nodeProfileVal,
		Tina:                 tinaVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewNodepoolsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) NodepoolsValue {
	object, diags := NewNodepoolsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewNodepoolsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t NodepoolsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewNodepoolsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewNodepoolsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewNodepoolsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewNodepoolsValueMust(NodepoolsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t NodepoolsType) ValueType(ctx context.Context) attr.Value {
	return NodepoolsValue{}
}

var _ basetypes.ObjectValuable = NodepoolsValue{}

type NodepoolsValue struct {
	AvailabilityZoneName basetypes.StringValue `tfsdk:"availability_zone_name"`
	Gpu                  basetypes.StringValue `tfsdk:"gpu"`
	Name                 basetypes.StringValue `tfsdk:"name"`
	NodeCount            basetypes.Int64Value  `tfsdk:"node_count"`
	NodeProfile          basetypes.StringValue `tfsdk:"node_profile"`
	Tina                 basetypes.StringValue `tfsdk:"tina"`
	state                attr.ValueState
}

func (v NodepoolsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["availability_zone_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["gpu"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["node_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["node_profile"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tina"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.AvailabilityZoneName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["availability_zone_name"] = val

		val, err = v.Gpu.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gpu"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.NodeCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["node_count"] = val

		val, err = v.NodeProfile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["node_profile"] = val

		val, err = v.Tina.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tina"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v NodepoolsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v NodepoolsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v NodepoolsValue) String() string {
	return "NodepoolsValue"
}

func (v NodepoolsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"availability_zone_name": basetypes.StringType{},
		"gpu":                    basetypes.StringType{},
		"name":                   basetypes.StringType{},
		"node_count":             basetypes.Int64Type{},
		"node_profile":           basetypes.StringType{},
		"tina":                   basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"availability_zone_name": v.AvailabilityZoneName,
			"gpu":                    v.Gpu,
			"name":                   v.Name,
			"node_count":             v.NodeCount,
			"node_profile":           v.NodeProfile,
			"tina":                   v.Tina,
		})

	return objVal, diags
}

func (v NodepoolsValue) Equal(o attr.Value) bool {
	other, ok := o.(NodepoolsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AvailabilityZoneName.Equal(other.AvailabilityZoneName) {
		return false
	}

	if !v.Gpu.Equal(other.Gpu) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.NodeCount.Equal(other.NodeCount) {
		return false
	}

	if !v.NodeProfile.Equal(other.NodeProfile) {
		return false
	}

	if !v.Tina.Equal(other.Tina) {
		return false
	}

	return true
}

func (v NodepoolsValue) Type(ctx context.Context) attr.Type {
	return NodepoolsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v NodepoolsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"availability_zone_name": basetypes.StringType{},
		"gpu":                    basetypes.StringType{},
		"name":                   basetypes.StringType{},
		"node_count":             basetypes.Int64Type{},
		"node_profile":           basetypes.StringType{},
		"tina":                   basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = UrlsType{}

type UrlsType struct {
	basetypes.ObjectType
}

func (t UrlsType) Equal(o attr.Type) bool {
	other, ok := o.(UrlsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t UrlsType) String() string {
	return "UrlsType"
}

func (t UrlsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	apiAttribute, ok := attributes["api"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api is missing from object`)

		return nil, diags
	}

	apiVal, ok := apiAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api expected to be basetypes.StringValue, was: %T`, apiAttribute))
	}

	consoleAttribute, ok := attributes["console"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`console is missing from object`)

		return nil, diags
	}

	consoleVal, ok := consoleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`console expected to be basetypes.StringValue, was: %T`, consoleAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return UrlsValue{
		Api:     apiVal,
		Console: consoleVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewUrlsValueNull() UrlsValue {
	return UrlsValue{
		state: attr.ValueStateNull,
	}
}

func NewUrlsValueUnknown() UrlsValue {
	return UrlsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewUrlsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (UrlsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing UrlsValue Attribute Value",
				"While creating a UrlsValue value, a missing attribute value was detected. "+
					"A UrlsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UrlsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid UrlsValue Attribute Type",
				"While creating a UrlsValue value, an invalid attribute value was detected. "+
					"A UrlsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UrlsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("UrlsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra UrlsValue Attribute Value",
				"While creating a UrlsValue value, an extra attribute value was detected. "+
					"A UrlsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra UrlsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUrlsValueUnknown(), diags
	}

	apiAttribute, ok := attributes["api"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api is missing from object`)

		return NewUrlsValueUnknown(), diags
	}

	apiVal, ok := apiAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api expected to be basetypes.StringValue, was: %T`, apiAttribute))
	}

	consoleAttribute, ok := attributes["console"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`console is missing from object`)

		return NewUrlsValueUnknown(), diags
	}

	consoleVal, ok := consoleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`console expected to be basetypes.StringValue, was: %T`, consoleAttribute))
	}

	if diags.HasError() {
		return NewUrlsValueUnknown(), diags
	}

	return UrlsValue{
		Api:     apiVal,
		Console: consoleVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewUrlsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) UrlsValue {
	object, diags := NewUrlsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUrlsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t UrlsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUrlsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUrlsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUrlsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUrlsValueMust(UrlsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t UrlsType) ValueType(ctx context.Context) attr.Value {
	return UrlsValue{}
}

var _ basetypes.ObjectValuable = UrlsValue{}

type UrlsValue struct {
	Api     basetypes.StringValue `tfsdk:"api"`
	Console basetypes.StringValue `tfsdk:"console"`
	state   attr.ValueState
}

func (v UrlsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["api"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["console"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Api.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["api"] = val

		val, err = v.Console.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["console"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v UrlsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v UrlsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v UrlsValue) String() string {
	return "UrlsValue"
}

func (v UrlsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"api":     basetypes.StringType{},
		"console": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"api":     v.Api,
			"console": v.Console,
		})

	return objVal, diags
}

func (v UrlsValue) Equal(o attr.Value) bool {
	other, ok := o.(UrlsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Api.Equal(other.Api) {
		return false
	}

	if !v.Console.Equal(other.Console) {
		return false
	}

	return true
}

func (v UrlsValue) Type(ctx context.Context) attr.Type {
	return UrlsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v UrlsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"api":     basetypes.StringType{},
		"console": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = PageType{}

type PageType struct {
	basetypes.ObjectType
}

func (t PageType) Equal(o attr.Type) bool {
	other, ok := o.(PageType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PageType) String() string {
	return "PageType"
}

func (t PageType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nextTokenAttribute, ok := attributes["next_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`next_token is missing from object`)

		return nil, diags
	}

	nextTokenVal, ok := nextTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`next_token expected to be basetypes.StringValue, was: %T`, nextTokenAttribute))
	}

	sizeAttribute, ok := attributes["size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`size is missing from object`)

		return nil, diags
	}

	sizeVal, ok := sizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`size expected to be basetypes.Int64Value, was: %T`, sizeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PageValue{
		NextToken: nextTokenVal,
		Size:      sizeVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewPageValueNull() PageValue {
	return PageValue{
		state: attr.ValueStateNull,
	}
}

func NewPageValueUnknown() PageValue {
	return PageValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPageValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PageValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PageValue Attribute Value",
				"While creating a PageValue value, a missing attribute value was detected. "+
					"A PageValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PageValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PageValue Attribute Type",
				"While creating a PageValue value, an invalid attribute value was detected. "+
					"A PageValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PageValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PageValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PageValue Attribute Value",
				"While creating a PageValue value, an extra attribute value was detected. "+
					"A PageValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PageValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPageValueUnknown(), diags
	}

	nextTokenAttribute, ok := attributes["next_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`next_token is missing from object`)

		return NewPageValueUnknown(), diags
	}

	nextTokenVal, ok := nextTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`next_token expected to be basetypes.StringValue, was: %T`, nextTokenAttribute))
	}

	sizeAttribute, ok := attributes["size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`size is missing from object`)

		return NewPageValueUnknown(), diags
	}

	sizeVal, ok := sizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`size expected to be basetypes.Int64Value, was: %T`, sizeAttribute))
	}

	if diags.HasError() {
		return NewPageValueUnknown(), diags
	}

	return PageValue{
		NextToken: nextTokenVal,
		Size:      sizeVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewPageValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PageValue {
	object, diags := NewPageValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPageValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PageType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPageValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPageValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPageValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPageValueMust(PageValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PageType) ValueType(ctx context.Context) attr.Value {
	return PageValue{}
}

var _ basetypes.ObjectValuable = PageValue{}

type PageValue struct {
	NextToken basetypes.StringValue `tfsdk:"next_token"`
	Size      basetypes.Int64Value  `tfsdk:"size"`
	state     attr.ValueState
}

func (v PageValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["next_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["size"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.NextToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["next_token"] = val

		val, err = v.Size.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["size"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PageValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PageValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PageValue) String() string {
	return "PageValue"
}

func (v PageValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"next_token": basetypes.StringType{},
		"size":       basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"next_token": v.NextToken,
			"size":       v.Size,
		})

	return objVal, diags
}

func (v PageValue) Equal(o attr.Value) bool {
	other, ok := o.(PageValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.NextToken.Equal(other.NextToken) {
		return false
	}

	if !v.Size.Equal(other.Size) {
		return false
	}

	return true
}

func (v PageValue) Type(ctx context.Context) attr.Type {
	return PageType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PageValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"next_token": basetypes.StringType{},
		"size":       basetypes.Int64Type{},
	}
}
