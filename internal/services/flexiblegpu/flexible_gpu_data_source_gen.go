// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package flexiblegpu

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func FlexibleGpuDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"availability_zone_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The Subregions where the fGPUs are located.",
				MarkdownDescription: "The Subregions where the fGPUs are located.",
			},
			"delete_on_vm_deletion": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicates whether the fGPU is deleted when terminating the VM.",
				MarkdownDescription: "Indicates whether the fGPU is deleted when terminating the VM.",
			},
			"generations": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The processor generations that the fGPUs are compatible with.",
				MarkdownDescription: "The processor generations that the fGPUs are compatible with.",
			},
			"ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "One or more IDs of fGPUs.",
				MarkdownDescription: "One or more IDs of fGPUs.",
			},
			"items": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"availability_zone_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The Subregion where the fGPU is located.",
							MarkdownDescription: "The Subregion where the fGPU is located.",
						},
						"delete_on_vm_deletion": schema.BoolAttribute{
							Computed:            true,
							Description:         "If true, the fGPU is deleted when the VM is terminated.",
							MarkdownDescription: "If true, the fGPU is deleted when the VM is terminated.",
						},
						"generation": schema.StringAttribute{
							Computed:            true,
							Description:         "The compatible processor generation.",
							MarkdownDescription: "The compatible processor generation.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the fGPU.",
							MarkdownDescription: "The ID of the fGPU.",
						},
						"model_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The model of fGPU.",
							MarkdownDescription: "The model of fGPU.",
						},
						"state": schema.StringAttribute{
							Computed:            true,
							Description:         "The state of the fGPU (`allocated` \\| `attaching` \\| `attached` \\| `detaching`).",
							MarkdownDescription: "The state of the fGPU (`allocated` \\| `attaching` \\| `attached` \\| `detaching`).",
						},
						"vm_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the VM the fGPU is attached to, if any.",
							MarkdownDescription: "The ID of the VM the fGPU is attached to, if any.",
						},
						// MANUALLY EDITED : SpaceId Removed
					},
				}, // MANUALLY EDITED : Removed CustomType block
				Computed:            true,
				Description:         "Information about one or more fGPUs.",
				MarkdownDescription: "Information about one or more fGPUs.",
			},
			"model_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "One or more models of fGPUs.",
				MarkdownDescription: "One or more models of fGPUs.",
			},
			"states": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The states of the fGPUs (`allocated` \\| `attaching` \\| `attached` \\| `detaching`).",
				MarkdownDescription: "The states of the fGPUs (`allocated` \\| `attaching` \\| `attached` \\| `detaching`).",
			},
			"vm_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "One or more IDs of VMs.",
				MarkdownDescription: "One or more IDs of VMs.",
			},
		},
		DeprecationMessage: "Managing IAAS services with Terraform is deprecated", // MANUALLY EDITED : Add Deprecation message
	}
}

type FlexibleGpuModelItemDataSource struct {
	AvailabilityZoneName types.String `tfsdk:"availability_zone_name"`
	DeleteOnVmDeletion   types.Bool   `tfsdk:"delete_on_vm_deletion"`
	Generation           types.String `tfsdk:"generation"`
	Id                   types.String `tfsdk:"id"`
	ModelName            types.String `tfsdk:"model_name"`
	State                types.String `tfsdk:"state"`
	VmId                 types.String `tfsdk:"vm_id"`
}

// MANUALLY EDITED : Model declaration removed

// MANUALLY EDITED : Functions associated with ItemsType / ItemsValue and Tags removed
