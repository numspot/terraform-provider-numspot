// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_security_group

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"gitlab.numspot.cloud/cloud/terraform-provider-numspot/internal/provider/tags"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func SecurityGroupResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"description": schema.StringAttribute{
				Required:            true,
				Description:         "A description for the security group, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).",
				MarkdownDescription: "A description for the security group, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the security group.",
				MarkdownDescription: "The ID of the security group.",
			},
			"inbound_rules": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"from_port_range": schema.Int64Attribute{
							Computed:            true,
							Optional:            true,
							Description:         "The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.",
							MarkdownDescription: "The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.",
						},
						"ip_protocol": schema.StringAttribute{
							Computed:            true,
							Optional:            true,
							Description:         "The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).",
							MarkdownDescription: "The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).",
						},
						"ip_ranges": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Optional:            true,
							Description:         "One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).",
							MarkdownDescription: "One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).",
						},
						"security_groups_members": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"security_group_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of a source or destination security group that you want to link to the security group of the rule.",
										MarkdownDescription: "The ID of a source or destination security group that you want to link to the security group of the rule.",
									},
								},
								CustomType: SecurityGroupsMembersType{
									ObjectType: types.ObjectType{
										AttrTypes: SecurityGroupsMembersValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "Information about one or more source or destination security groups.",
							MarkdownDescription: "Information about one or more source or destination security groups.",
						},
						"service_ids": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Optional:            true,
							Description:         "One or more service IDs to allow traffic from a Net to access the corresponding OUTSCALE services. For more information, see [ReadNetAccessPointServices](#readnetaccesspointservices).",
							MarkdownDescription: "One or more service IDs to allow traffic from a Net to access the corresponding OUTSCALE services. For more information, see [ReadNetAccessPointServices](#readnetaccesspointservices).",
						},
						"to_port_range": schema.Int64Attribute{
							Computed:            true,
							Optional:            true,
							Description:         "The end of the port range for the TCP and UDP protocols, or an ICMP code number.",
							MarkdownDescription: "The end of the port range for the TCP and UDP protocols, or an ICMP code number.",
						},
					},
					CustomType: InboundRulesType{
						ObjectType: types.ObjectType{
							AttrTypes: InboundRulesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional: true,
				Computed: true,

				Description:         "The inbound rules associated with the security group.",
				MarkdownDescription: "The inbound rules associated with the security group.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the security group.<br />\nThis name must not start with `sg-`.</br>\nThis name must be unique and contain between 1 and 255 ASCII characters. Accented letters are not allowed.",
				MarkdownDescription: "The name of the security group.<br />\nThis name must not start with `sg-`.</br>\nThis name must be unique and contain between 1 and 255 ASCII characters. Accented letters are not allowed.",
			},
			"net_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The ID of the Net for the security group.",
				MarkdownDescription: "The ID of the Net for the security group.",
			},
			"outbound_rules": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"from_port_range": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.",
							MarkdownDescription: "The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.",
						},
						"ip_protocol": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).",
							MarkdownDescription: "The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).",
						},
						"ip_ranges": schema.ListAttribute{
							ElementType:         types.StringType,
							Optional:            true,
							Computed:            true,
							Description:         "One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).",
							MarkdownDescription: "One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).",
						},
						"security_groups_members": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"security_group_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of a source or destination security group that you want to link to the security group of the rule.",
										MarkdownDescription: "The ID of a source or destination security group that you want to link to the security group of the rule.",
									},
								},
								CustomType: SecurityGroupsMembersType{
									ObjectType: types.ObjectType{
										AttrTypes: SecurityGroupsMembersValue{}.AttributeTypes(ctx),
									},
								},
							},
							Optional:            true,
							Computed:            true,
							Description:         "Information about one or more source or destination security groups.",
							MarkdownDescription: "Information about one or more source or destination security groups.",
						},
						"service_ids": schema.ListAttribute{
							ElementType: types.StringType,
							Optional:    true,
							Computed:    true,

							Description:         "One or more service IDs to allow traffic from a Net to access the corresponding OUTSCALE services. For more information, see [ReadNetAccessPointServices](#readnetaccesspointservices).",
							MarkdownDescription: "One or more service IDs to allow traffic from a Net to access the corresponding OUTSCALE services. For more information, see [ReadNetAccessPointServices](#readnetaccesspointservices).",
						},
						"to_port_range": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "The end of the port range for the TCP and UDP protocols, or an ICMP code number.",
							MarkdownDescription: "The end of the port range for the TCP and UDP protocols, or an ICMP code number.",
						},
					},
					CustomType: OutboundRulesType{
						ObjectType: types.ObjectType{
							AttrTypes: OutboundRulesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "The outbound rules associated with the security group.",
				MarkdownDescription: "The outbound rules associated with the security group.",
			},
			"tags": tags.TagsSchema(ctx),
		},
	}
}

type SecurityGroupModel struct {
	Description   types.String `tfsdk:"description"`
	Id            types.String `tfsdk:"id"`
	InboundRules  types.Set    `tfsdk:"inbound_rules"`
	Name          types.String `tfsdk:"name"`
	NetId         types.String `tfsdk:"net_id"`
	OutboundRules types.Set    `tfsdk:"outbound_rules"`
	Tags          types.List   `tfsdk:"tags"`
}

var _ basetypes.ObjectTypable = InboundRulesType{}

type InboundRulesType struct {
	basetypes.ObjectType
}

func (t InboundRulesType) Equal(o attr.Type) bool {
	other, ok := o.(InboundRulesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t InboundRulesType) String() string {
	return "InboundRulesType"
}

func (t InboundRulesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	fromPortRangeAttribute, ok := attributes["from_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`from_port_range is missing from object`)

		return nil, diags
	}

	fromPortRangeVal, ok := fromPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`from_port_range expected to be basetypes.Int64Value, was: %T`, fromPortRangeAttribute))
	}

	ipProtocolAttribute, ok := attributes["ip_protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_protocol is missing from object`)

		return nil, diags
	}

	ipProtocolVal, ok := ipProtocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_protocol expected to be basetypes.StringValue, was: %T`, ipProtocolAttribute))
	}

	ipRangesAttribute, ok := attributes["ip_ranges"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_ranges is missing from object`)

		return nil, diags
	}

	ipRangesVal, ok := ipRangesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_ranges expected to be basetypes.ListValue, was: %T`, ipRangesAttribute))
	}

	securityGroupsMembersAttribute, ok := attributes["security_groups_members"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_groups_members is missing from object`)

		return nil, diags
	}

	securityGroupsMembersVal, ok := securityGroupsMembersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_groups_members expected to be basetypes.ListValue, was: %T`, securityGroupsMembersAttribute))
	}

	serviceIdsAttribute, ok := attributes["service_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_ids is missing from object`)

		return nil, diags
	}

	serviceIdsVal, ok := serviceIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_ids expected to be basetypes.ListValue, was: %T`, serviceIdsAttribute))
	}

	toPortRangeAttribute, ok := attributes["to_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`to_port_range is missing from object`)

		return nil, diags
	}

	toPortRangeVal, ok := toPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`to_port_range expected to be basetypes.Int64Value, was: %T`, toPortRangeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return InboundRulesValue{
		FromPortRange:         fromPortRangeVal,
		IpProtocol:            ipProtocolVal,
		IpRanges:              ipRangesVal,
		SecurityGroupsMembers: securityGroupsMembersVal,
		ServiceIds:            serviceIdsVal,
		ToPortRange:           toPortRangeVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewInboundRulesValueNull() InboundRulesValue {
	return InboundRulesValue{
		state: attr.ValueStateNull,
	}
}

func NewInboundRulesValueUnknown() InboundRulesValue {
	return InboundRulesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewInboundRulesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (InboundRulesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing InboundRulesValue Attribute Value",
				"While creating a InboundRulesValue value, a missing attribute value was detected. "+
					"A InboundRulesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InboundRulesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid InboundRulesValue Attribute Type",
				"While creating a InboundRulesValue value, an invalid attribute value was detected. "+
					"A InboundRulesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InboundRulesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("InboundRulesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra InboundRulesValue Attribute Value",
				"While creating a InboundRulesValue value, an extra attribute value was detected. "+
					"A InboundRulesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra InboundRulesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewInboundRulesValueUnknown(), diags
	}

	fromPortRangeAttribute, ok := attributes["from_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`from_port_range is missing from object`)

		return NewInboundRulesValueUnknown(), diags
	}

	fromPortRangeVal, ok := fromPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`from_port_range expected to be basetypes.Int64Value, was: %T`, fromPortRangeAttribute))
	}

	ipProtocolAttribute, ok := attributes["ip_protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_protocol is missing from object`)

		return NewInboundRulesValueUnknown(), diags
	}

	ipProtocolVal, ok := ipProtocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_protocol expected to be basetypes.StringValue, was: %T`, ipProtocolAttribute))
	}

	ipRangesAttribute, ok := attributes["ip_ranges"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_ranges is missing from object`)

		return NewInboundRulesValueUnknown(), diags
	}

	ipRangesVal, ok := ipRangesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_ranges expected to be basetypes.ListValue, was: %T`, ipRangesAttribute))
	}

	securityGroupsMembersAttribute, ok := attributes["security_groups_members"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_groups_members is missing from object`)

		return NewInboundRulesValueUnknown(), diags
	}

	securityGroupsMembersVal, ok := securityGroupsMembersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_groups_members expected to be basetypes.ListValue, was: %T`, securityGroupsMembersAttribute))
	}

	serviceIdsAttribute, ok := attributes["service_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_ids is missing from object`)

		return NewInboundRulesValueUnknown(), diags
	}

	serviceIdsVal, ok := serviceIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_ids expected to be basetypes.ListValue, was: %T`, serviceIdsAttribute))
	}

	toPortRangeAttribute, ok := attributes["to_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`to_port_range is missing from object`)

		return NewInboundRulesValueUnknown(), diags
	}

	toPortRangeVal, ok := toPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`to_port_range expected to be basetypes.Int64Value, was: %T`, toPortRangeAttribute))
	}

	if diags.HasError() {
		return NewInboundRulesValueUnknown(), diags
	}

	return InboundRulesValue{
		FromPortRange:         fromPortRangeVal,
		IpProtocol:            ipProtocolVal,
		IpRanges:              ipRangesVal,
		SecurityGroupsMembers: securityGroupsMembersVal,
		ServiceIds:            serviceIdsVal,
		ToPortRange:           toPortRangeVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewInboundRulesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) InboundRulesValue {
	object, diags := NewInboundRulesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewInboundRulesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t InboundRulesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewInboundRulesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewInboundRulesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewInboundRulesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewInboundRulesValueMust(InboundRulesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t InboundRulesType) ValueType(ctx context.Context) attr.Value {
	return InboundRulesValue{}
}

var _ basetypes.ObjectValuable = InboundRulesValue{}

type InboundRulesValue struct {
	FromPortRange         basetypes.Int64Value  `tfsdk:"from_port_range"`
	IpProtocol            basetypes.StringValue `tfsdk:"ip_protocol"`
	IpRanges              basetypes.ListValue   `tfsdk:"ip_ranges"`
	SecurityGroupsMembers basetypes.ListValue   `tfsdk:"security_groups_members"`
	ServiceIds            basetypes.ListValue   `tfsdk:"service_ids"`
	ToPortRange           basetypes.Int64Value  `tfsdk:"to_port_range"`
	state                 attr.ValueState
}

func (v InboundRulesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["from_port_range"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["ip_protocol"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ip_ranges"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["security_groups_members"] = basetypes.ListType{
		ElemType: SecurityGroupsMembersValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["service_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["to_port_range"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.FromPortRange.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["from_port_range"] = val

		val, err = v.IpProtocol.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_protocol"] = val

		val, err = v.IpRanges.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_ranges"] = val

		val, err = v.SecurityGroupsMembers.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["security_groups_members"] = val

		val, err = v.ServiceIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["service_ids"] = val

		val, err = v.ToPortRange.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["to_port_range"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v InboundRulesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v InboundRulesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v InboundRulesValue) String() string {
	return "InboundRulesValue"
}

func (v InboundRulesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	securityGroupsMembers := types.ListValueMust(
		SecurityGroupsMembersType{
			basetypes.ObjectType{
				AttrTypes: SecurityGroupsMembersValue{}.AttributeTypes(ctx),
			},
		},
		v.SecurityGroupsMembers.Elements(),
	)

	if v.SecurityGroupsMembers.IsNull() {
		securityGroupsMembers = types.ListNull(
			SecurityGroupsMembersType{
				basetypes.ObjectType{
					AttrTypes: SecurityGroupsMembersValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.SecurityGroupsMembers.IsUnknown() {
		securityGroupsMembers = types.ListUnknown(
			SecurityGroupsMembersType{
				basetypes.ObjectType{
					AttrTypes: SecurityGroupsMembersValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	ipRangesVal, d := types.ListValue(types.StringType, v.IpRanges.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"from_port_range": basetypes.Int64Type{},
			"ip_protocol":     basetypes.StringType{},
			"ip_ranges": basetypes.ListType{
				ElemType: types.StringType,
			},
			"security_groups_members": basetypes.ListType{
				ElemType: SecurityGroupsMembersValue{}.Type(ctx),
			},
			"service_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"to_port_range": basetypes.Int64Type{},
		}), diags
	}

	serviceIdsVal, d := types.ListValue(types.StringType, v.ServiceIds.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"from_port_range": basetypes.Int64Type{},
			"ip_protocol":     basetypes.StringType{},
			"ip_ranges": basetypes.ListType{
				ElemType: types.StringType,
			},
			"security_groups_members": basetypes.ListType{
				ElemType: SecurityGroupsMembersValue{}.Type(ctx),
			},
			"service_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"to_port_range": basetypes.Int64Type{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"from_port_range": basetypes.Int64Type{},
			"ip_protocol":     basetypes.StringType{},
			"ip_ranges": basetypes.ListType{
				ElemType: types.StringType,
			},
			"security_groups_members": basetypes.ListType{
				ElemType: SecurityGroupsMembersValue{}.Type(ctx),
			},
			"service_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"to_port_range": basetypes.Int64Type{},
		},
		map[string]attr.Value{
			"from_port_range":         v.FromPortRange,
			"ip_protocol":             v.IpProtocol,
			"ip_ranges":               ipRangesVal,
			"security_groups_members": securityGroupsMembers,
			"service_ids":             serviceIdsVal,
			"to_port_range":           v.ToPortRange,
		})

	return objVal, diags
}

func (v InboundRulesValue) Equal(o attr.Value) bool {
	other, ok := o.(InboundRulesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.FromPortRange.Equal(other.FromPortRange) {
		return false
	}

	if !v.IpProtocol.Equal(other.IpProtocol) {
		return false
	}

	if !v.IpRanges.Equal(other.IpRanges) {
		return false
	}

	if !v.SecurityGroupsMembers.Equal(other.SecurityGroupsMembers) {
		return false
	}

	if !v.ServiceIds.Equal(other.ServiceIds) {
		return false
	}

	if !v.ToPortRange.Equal(other.ToPortRange) {
		return false
	}

	return true
}

func (v InboundRulesValue) Type(ctx context.Context) attr.Type {
	return InboundRulesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v InboundRulesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"from_port_range": basetypes.Int64Type{},
		"ip_protocol":     basetypes.StringType{},
		"ip_ranges": basetypes.ListType{
			ElemType: types.StringType,
		},
		"security_groups_members": basetypes.ListType{
			ElemType: SecurityGroupsMembersValue{}.Type(ctx),
		},
		"service_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"to_port_range": basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = SecurityGroupsMembersType{}

type SecurityGroupsMembersType struct {
	basetypes.ObjectType
}

func (t SecurityGroupsMembersType) Equal(o attr.Type) bool {
	other, ok := o.(SecurityGroupsMembersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SecurityGroupsMembersType) String() string {
	return "SecurityGroupsMembersType"
}

func (t SecurityGroupsMembersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	securityGroupIdAttribute, ok := attributes["security_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_id is missing from object`)

		return nil, diags
	}

	securityGroupIdVal, ok := securityGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_id expected to be basetypes.StringValue, was: %T`, securityGroupIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SecurityGroupsMembersValue{
		SecurityGroupId: securityGroupIdVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewSecurityGroupsMembersValueNull() SecurityGroupsMembersValue {
	return SecurityGroupsMembersValue{
		state: attr.ValueStateNull,
	}
}

func NewSecurityGroupsMembersValueUnknown() SecurityGroupsMembersValue {
	return SecurityGroupsMembersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSecurityGroupsMembersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SecurityGroupsMembersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SecurityGroupsMembersValue Attribute Value",
				"While creating a SecurityGroupsMembersValue value, a missing attribute value was detected. "+
					"A SecurityGroupsMembersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SecurityGroupsMembersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SecurityGroupsMembersValue Attribute Type",
				"While creating a SecurityGroupsMembersValue value, an invalid attribute value was detected. "+
					"A SecurityGroupsMembersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SecurityGroupsMembersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SecurityGroupsMembersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SecurityGroupsMembersValue Attribute Value",
				"While creating a SecurityGroupsMembersValue value, an extra attribute value was detected. "+
					"A SecurityGroupsMembersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SecurityGroupsMembersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSecurityGroupsMembersValueUnknown(), diags
	}

	securityGroupIdAttribute, ok := attributes["security_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_group_id is missing from object`)

		return NewSecurityGroupsMembersValueUnknown(), diags
	}

	securityGroupIdVal, ok := securityGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_group_id expected to be basetypes.StringValue, was: %T`, securityGroupIdAttribute))
	}

	if diags.HasError() {
		return NewSecurityGroupsMembersValueUnknown(), diags
	}

	return SecurityGroupsMembersValue{
		SecurityGroupId: securityGroupIdVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewSecurityGroupsMembersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SecurityGroupsMembersValue {
	object, diags := NewSecurityGroupsMembersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSecurityGroupsMembersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SecurityGroupsMembersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSecurityGroupsMembersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSecurityGroupsMembersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSecurityGroupsMembersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSecurityGroupsMembersValueMust(SecurityGroupsMembersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SecurityGroupsMembersType) ValueType(ctx context.Context) attr.Value {
	return SecurityGroupsMembersValue{}
}

var _ basetypes.ObjectValuable = SecurityGroupsMembersValue{}

type SecurityGroupsMembersValue struct {
	SecurityGroupId basetypes.StringValue `tfsdk:"security_group_id"`
	state           attr.ValueState
}

func (v SecurityGroupsMembersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["security_group_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.SecurityGroupId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["security_group_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SecurityGroupsMembersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SecurityGroupsMembersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SecurityGroupsMembersValue) String() string {
	return "SecurityGroupsMembersValue"
}

func (v SecurityGroupsMembersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"security_group_id": basetypes.StringType{},
		},
		map[string]attr.Value{
			"security_group_id": v.SecurityGroupId,
		})

	return objVal, diags
}

func (v SecurityGroupsMembersValue) Equal(o attr.Value) bool {
	other, ok := o.(SecurityGroupsMembersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.SecurityGroupId.Equal(other.SecurityGroupId) {
		return false
	}

	return true
}

func (v SecurityGroupsMembersValue) Type(ctx context.Context) attr.Type {
	return SecurityGroupsMembersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SecurityGroupsMembersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"security_group_id": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = OutboundRulesType{}

type OutboundRulesType struct {
	basetypes.ObjectType
}

func (t OutboundRulesType) Equal(o attr.Type) bool {
	other, ok := o.(OutboundRulesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OutboundRulesType) String() string {
	return "OutboundRulesType"
}

func (t OutboundRulesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	fromPortRangeAttribute, ok := attributes["from_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`from_port_range is missing from object`)

		return nil, diags
	}

	fromPortRangeVal, ok := fromPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`from_port_range expected to be basetypes.Int64Value, was: %T`, fromPortRangeAttribute))
	}

	ipProtocolAttribute, ok := attributes["ip_protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_protocol is missing from object`)

		return nil, diags
	}

	ipProtocolVal, ok := ipProtocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_protocol expected to be basetypes.StringValue, was: %T`, ipProtocolAttribute))
	}

	ipRangesAttribute, ok := attributes["ip_ranges"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_ranges is missing from object`)

		return nil, diags
	}

	ipRangesVal, ok := ipRangesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_ranges expected to be basetypes.ListValue, was: %T`, ipRangesAttribute))
	}

	securityGroupsMembersAttribute, ok := attributes["security_groups_members"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_groups_members is missing from object`)

		return nil, diags
	}

	securityGroupsMembersVal, ok := securityGroupsMembersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_groups_members expected to be basetypes.ListValue, was: %T`, securityGroupsMembersAttribute))
	}

	serviceIdsAttribute, ok := attributes["service_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_ids is missing from object`)

		return nil, diags
	}

	serviceIdsVal, ok := serviceIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_ids expected to be basetypes.ListValue, was: %T`, serviceIdsAttribute))
	}

	toPortRangeAttribute, ok := attributes["to_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`to_port_range is missing from object`)

		return nil, diags
	}

	toPortRangeVal, ok := toPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`to_port_range expected to be basetypes.Int64Value, was: %T`, toPortRangeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OutboundRulesValue{
		FromPortRange:         fromPortRangeVal,
		IpProtocol:            ipProtocolVal,
		IpRanges:              ipRangesVal,
		SecurityGroupsMembers: securityGroupsMembersVal,
		ServiceIds:            serviceIdsVal,
		ToPortRange:           toPortRangeVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewOutboundRulesValueNull() OutboundRulesValue {
	return OutboundRulesValue{
		state: attr.ValueStateNull,
	}
}

func NewOutboundRulesValueUnknown() OutboundRulesValue {
	return OutboundRulesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOutboundRulesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OutboundRulesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OutboundRulesValue Attribute Value",
				"While creating a OutboundRulesValue value, a missing attribute value was detected. "+
					"A OutboundRulesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OutboundRulesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OutboundRulesValue Attribute Type",
				"While creating a OutboundRulesValue value, an invalid attribute value was detected. "+
					"A OutboundRulesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OutboundRulesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OutboundRulesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OutboundRulesValue Attribute Value",
				"While creating a OutboundRulesValue value, an extra attribute value was detected. "+
					"A OutboundRulesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OutboundRulesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOutboundRulesValueUnknown(), diags
	}

	fromPortRangeAttribute, ok := attributes["from_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`from_port_range is missing from object`)

		return NewOutboundRulesValueUnknown(), diags
	}

	fromPortRangeVal, ok := fromPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`from_port_range expected to be basetypes.Int64Value, was: %T`, fromPortRangeAttribute))
	}

	ipProtocolAttribute, ok := attributes["ip_protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_protocol is missing from object`)

		return NewOutboundRulesValueUnknown(), diags
	}

	ipProtocolVal, ok := ipProtocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_protocol expected to be basetypes.StringValue, was: %T`, ipProtocolAttribute))
	}

	ipRangesAttribute, ok := attributes["ip_ranges"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_ranges is missing from object`)

		return NewOutboundRulesValueUnknown(), diags
	}

	ipRangesVal, ok := ipRangesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_ranges expected to be basetypes.ListValue, was: %T`, ipRangesAttribute))
	}

	securityGroupsMembersAttribute, ok := attributes["security_groups_members"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security_groups_members is missing from object`)

		return NewOutboundRulesValueUnknown(), diags
	}

	securityGroupsMembersVal, ok := securityGroupsMembersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security_groups_members expected to be basetypes.ListValue, was: %T`, securityGroupsMembersAttribute))
	}

	serviceIdsAttribute, ok := attributes["service_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_ids is missing from object`)

		return NewOutboundRulesValueUnknown(), diags
	}

	serviceIdsVal, ok := serviceIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_ids expected to be basetypes.ListValue, was: %T`, serviceIdsAttribute))
	}

	toPortRangeAttribute, ok := attributes["to_port_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`to_port_range is missing from object`)

		return NewOutboundRulesValueUnknown(), diags
	}

	toPortRangeVal, ok := toPortRangeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`to_port_range expected to be basetypes.Int64Value, was: %T`, toPortRangeAttribute))
	}

	if diags.HasError() {
		return NewOutboundRulesValueUnknown(), diags
	}

	return OutboundRulesValue{
		FromPortRange:         fromPortRangeVal,
		IpProtocol:            ipProtocolVal,
		IpRanges:              ipRangesVal,
		SecurityGroupsMembers: securityGroupsMembersVal,
		ServiceIds:            serviceIdsVal,
		ToPortRange:           toPortRangeVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewOutboundRulesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OutboundRulesValue {
	object, diags := NewOutboundRulesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOutboundRulesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OutboundRulesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOutboundRulesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOutboundRulesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOutboundRulesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOutboundRulesValueMust(OutboundRulesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OutboundRulesType) ValueType(ctx context.Context) attr.Value {
	return OutboundRulesValue{}
}

var _ basetypes.ObjectValuable = OutboundRulesValue{}

type OutboundRulesValue struct {
	FromPortRange         basetypes.Int64Value  `tfsdk:"from_port_range"`
	IpProtocol            basetypes.StringValue `tfsdk:"ip_protocol"`
	IpRanges              basetypes.ListValue   `tfsdk:"ip_ranges"`
	SecurityGroupsMembers basetypes.ListValue   `tfsdk:"security_groups_members"`
	ServiceIds            basetypes.ListValue   `tfsdk:"service_ids"`
	ToPortRange           basetypes.Int64Value  `tfsdk:"to_port_range"`
	state                 attr.ValueState
}

func (v OutboundRulesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["from_port_range"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["ip_protocol"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ip_ranges"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["security_groups_members"] = basetypes.ListType{
		ElemType: SecurityGroupsMembersValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["service_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["to_port_range"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.FromPortRange.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["from_port_range"] = val

		val, err = v.IpProtocol.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_protocol"] = val

		val, err = v.IpRanges.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_ranges"] = val

		val, err = v.SecurityGroupsMembers.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["security_groups_members"] = val

		val, err = v.ServiceIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["service_ids"] = val

		val, err = v.ToPortRange.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["to_port_range"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OutboundRulesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OutboundRulesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OutboundRulesValue) String() string {
	return "OutboundRulesValue"
}

func (v OutboundRulesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	securityGroupsMembers := types.ListValueMust(
		SecurityGroupsMembersType{
			basetypes.ObjectType{
				AttrTypes: SecurityGroupsMembersValue{}.AttributeTypes(ctx),
			},
		},
		v.SecurityGroupsMembers.Elements(),
	)

	if v.SecurityGroupsMembers.IsNull() {
		securityGroupsMembers = types.ListNull(
			SecurityGroupsMembersType{
				basetypes.ObjectType{
					AttrTypes: SecurityGroupsMembersValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.SecurityGroupsMembers.IsUnknown() {
		securityGroupsMembers = types.ListUnknown(
			SecurityGroupsMembersType{
				basetypes.ObjectType{
					AttrTypes: SecurityGroupsMembersValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	ipRangesVal, d := types.ListValue(types.StringType, v.IpRanges.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"from_port_range": basetypes.Int64Type{},
			"ip_protocol":     basetypes.StringType{},
			"ip_ranges": basetypes.ListType{
				ElemType: types.StringType,
			},
			"security_groups_members": basetypes.ListType{
				ElemType: SecurityGroupsMembersValue{}.Type(ctx),
			},
			"service_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"to_port_range": basetypes.Int64Type{},
		}), diags
	}

	serviceIdsVal, d := types.ListValue(types.StringType, v.ServiceIds.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"from_port_range": basetypes.Int64Type{},
			"ip_protocol":     basetypes.StringType{},
			"ip_ranges": basetypes.ListType{
				ElemType: types.StringType,
			},
			"security_groups_members": basetypes.ListType{
				ElemType: SecurityGroupsMembersValue{}.Type(ctx),
			},
			"service_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"to_port_range": basetypes.Int64Type{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"from_port_range": basetypes.Int64Type{},
			"ip_protocol":     basetypes.StringType{},
			"ip_ranges": basetypes.ListType{
				ElemType: types.StringType,
			},
			"security_groups_members": basetypes.ListType{
				ElemType: SecurityGroupsMembersValue{}.Type(ctx),
			},
			"service_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"to_port_range": basetypes.Int64Type{},
		},
		map[string]attr.Value{
			"from_port_range":         v.FromPortRange,
			"ip_protocol":             v.IpProtocol,
			"ip_ranges":               ipRangesVal,
			"security_groups_members": securityGroupsMembers,
			"service_ids":             serviceIdsVal,
			"to_port_range":           v.ToPortRange,
		})

	return objVal, diags
}

func (v OutboundRulesValue) Equal(o attr.Value) bool {
	other, ok := o.(OutboundRulesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.FromPortRange.Equal(other.FromPortRange) {
		return false
	}

	if !v.IpProtocol.Equal(other.IpProtocol) {
		return false
	}

	if !v.IpRanges.Equal(other.IpRanges) {
		return false
	}

	if !v.SecurityGroupsMembers.Equal(other.SecurityGroupsMembers) {
		return false
	}

	if !v.ServiceIds.Equal(other.ServiceIds) {
		return false
	}

	if !v.ToPortRange.Equal(other.ToPortRange) {
		return false
	}

	return true
}

func (v OutboundRulesValue) Type(ctx context.Context) attr.Type {
	return OutboundRulesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OutboundRulesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"from_port_range": basetypes.Int64Type{},
		"ip_protocol":     basetypes.StringType{},
		"ip_ranges": basetypes.ListType{
			ElemType: types.StringType,
		},
		"security_groups_members": basetypes.ListType{
			ElemType: SecurityGroupsMembersValue{}.Type(ctx),
		},
		"service_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"to_port_range": basetypes.Int64Type{},
	}
}
