// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_vpc_peering

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func VpcPeeringDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"accepter_vpc_account_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The account IDs of the owners of the peer Nets.",
				MarkdownDescription: "The account IDs of the owners of the peer Nets.",
			},
			"accepter_vpc_ip_ranges": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IP ranges of the peer Nets, in CIDR notation (for example, `10.0.0.0/24`).",
				MarkdownDescription: "The IP ranges of the peer Nets, in CIDR notation (for example, `10.0.0.0/24`).",
			},
			"accepter_vpc_vpc_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the peer Nets.",
				MarkdownDescription: "The IDs of the peer Nets.",
			},
			"expiration_dates": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The dates and times at which the Net peerings expire, in ISO 8601 date-time format (for example, `2020-06-14T00:00:00.000Z`).",
				MarkdownDescription: "The dates and times at which the Net peerings expire, in ISO 8601 date-time format (for example, `2020-06-14T00:00:00.000Z`).",
			},
			"ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the Net peerings.",
				MarkdownDescription: "The IDs of the Net peerings.",
			},
			"items": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"accepter_vpc": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"ip_range": schema.StringAttribute{
									Computed:            true,
									Description:         "The IP range for the accepter Net, in CIDR notation (for example, `10.0.0.0/16`).",
									MarkdownDescription: "The IP range for the accepter Net, in CIDR notation (for example, `10.0.0.0/16`).",
								},
								"vpc_id": schema.StringAttribute{
									Computed:            true,
									Description:         "The ID of the accepter Net.",
									MarkdownDescription: "The ID of the accepter Net.",
								},
							},
							CustomType: AccepterVpcType{
								ObjectType: types.ObjectType{
									AttrTypes: AccepterVpcValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Information about the accepter Net.",
							MarkdownDescription: "Information about the accepter Net.",
						},
						"expiration_date": schema.StringAttribute{
							Computed:            true,
							Description:         "The date and time at which the Net peerings expire.",
							MarkdownDescription: "The date and time at which the Net peerings expire.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Net peering.",
							MarkdownDescription: "The ID of the Net peering.",
						},
						"source_vpc": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"ip_range": schema.StringAttribute{
									Computed:            true,
									Description:         "The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).",
									MarkdownDescription: "The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).",
								},
								"vpc_id": schema.StringAttribute{
									Computed:            true,
									Description:         "The ID of the source Net.",
									MarkdownDescription: "The ID of the source Net.",
								},
							},
							CustomType: SourceVpcType{
								ObjectType: types.ObjectType{
									AttrTypes: SourceVpcValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Information about the source Net.",
							MarkdownDescription: "Information about the source Net.",
						},
						"state": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"message": schema.StringAttribute{
									Computed:            true,
									Description:         "Additional information about the state of the Net peering.",
									MarkdownDescription: "Additional information about the state of the Net peering.",
								},
								"name": schema.StringAttribute{
									Computed:            true,
									Description:         "The state of the Net peering (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).",
									MarkdownDescription: "The state of the Net peering (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).",
								},
							},
							CustomType: StateType{
								ObjectType: types.ObjectType{
									AttrTypes: StateValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Information about the state of the Net peering.",
							MarkdownDescription: "Information about the state of the Net peering.",
						},
						"tags": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"key": schema.StringAttribute{
										Computed:            true,
										Description:         "The key of the tag, with a minimum of 1 character.",
										MarkdownDescription: "The key of the tag, with a minimum of 1 character.",
									},
									"value": schema.StringAttribute{
										Computed:            true,
										Description:         "The value of the tag, between 0 and 255 characters.",
										MarkdownDescription: "The value of the tag, between 0 and 255 characters.",
									},
								},
								CustomType: TagsType{
									ObjectType: types.ObjectType{
										AttrTypes: TagsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "One or more tags associated with the Net peering.",
							MarkdownDescription: "One or more tags associated with the Net peering.",
						},
					},
					CustomType: ItemsType{
						ObjectType: types.ObjectType{
							AttrTypes: ItemsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "Information about one or more Net peerings.",
				MarkdownDescription: "Information about one or more Net peerings.",
			},
			"source_vpc_account_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The account IDs of the owners of the peer Nets.",
				MarkdownDescription: "The account IDs of the owners of the peer Nets.",
			},
			"source_vpc_ip_ranges": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IP ranges of the peer Nets.",
				MarkdownDescription: "The IP ranges of the peer Nets.",
			},
			"source_vpc_vpc_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The IDs of the peer Nets.",
				MarkdownDescription: "The IDs of the peer Nets.",
			},
			"state_messages": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "Additional information about the states of the Net peerings.",
				MarkdownDescription: "Additional information about the states of the Net peerings.",
			},
			"state_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The states of the Net peerings (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).",
				MarkdownDescription: "The states of the Net peerings (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).",
			},
			"tag_keys": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The keys of the tags associated with the Net peerings.",
				MarkdownDescription: "The keys of the tags associated with the Net peerings.",
			},
			"tag_values": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The values of the tags associated with the Net peerings.",
				MarkdownDescription: "The values of the tags associated with the Net peerings.",
			},
			"tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The key/value combination of the tags associated with the Net peerings, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.",
				MarkdownDescription: "The key/value combination of the tags associated with the Net peerings, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.",
			},
		},
	}
}

type VpcPeeringModel struct {
	AccepterVpc    AccepterVpcValue `tfsdk:"accepter_vpc"`
	ExpirationDate types.String     `tfsdk:"expiration_date"`
	Id             types.String     `tfsdk:"id"`
	SourceVpc      SourceVpcValue   `tfsdk:"source_vpc"`
	State          StateValue       `tfsdk:"state"`
	Tags           types.List       `tfsdk:"tags"`
}

var _ basetypes.ObjectTypable = ItemsType{}

type ItemsType struct {
	basetypes.ObjectType
}

func (t ItemsType) Equal(o attr.Type) bool {
	other, ok := o.(ItemsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ItemsType) String() string {
	return "ItemsType"
}

func (t ItemsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	accepterVpcAttribute, ok := attributes["accepter_vpc"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`accepter_vpc is missing from object`)

		return nil, diags
	}

	accepterVpcVal, ok := accepterVpcAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`accepter_vpc expected to be basetypes.ObjectValue, was: %T`, accepterVpcAttribute))
	}

	expirationDateAttribute, ok := attributes["expiration_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`expiration_date is missing from object`)

		return nil, diags
	}

	expirationDateVal, ok := expirationDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`expiration_date expected to be basetypes.StringValue, was: %T`, expirationDateAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	sourceVpcAttribute, ok := attributes["source_vpc"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`source_vpc is missing from object`)

		return nil, diags
	}

	sourceVpcVal, ok := sourceVpcAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`source_vpc expected to be basetypes.ObjectValue, was: %T`, sourceVpcAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.ObjectValue, was: %T`, stateAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return nil, diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ItemsValue{
		AccepterVpc:    accepterVpcVal,
		ExpirationDate: expirationDateVal,
		Id:             idVal,
		SourceVpc:      sourceVpcVal,
		State:          stateVal,
		Tags:           tagsVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewItemsValueNull() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateNull,
	}
}

func NewItemsValueUnknown() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewItemsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ItemsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ItemsValue Attribute Value",
				"While creating a ItemsValue value, a missing attribute value was detected. "+
					"A ItemsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ItemsValue Attribute Type",
				"While creating a ItemsValue value, an invalid attribute value was detected. "+
					"A ItemsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ItemsValue Attribute Value",
				"While creating a ItemsValue value, an extra attribute value was detected. "+
					"A ItemsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ItemsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	accepterVpcAttribute, ok := attributes["accepter_vpc"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`accepter_vpc is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	accepterVpcVal, ok := accepterVpcAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`accepter_vpc expected to be basetypes.ObjectValue, was: %T`, accepterVpcAttribute))
	}

	expirationDateAttribute, ok := attributes["expiration_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`expiration_date is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	expirationDateVal, ok := expirationDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`expiration_date expected to be basetypes.StringValue, was: %T`, expirationDateAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	sourceVpcAttribute, ok := attributes["source_vpc"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`source_vpc is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	sourceVpcVal, ok := sourceVpcAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`source_vpc expected to be basetypes.ObjectValue, was: %T`, sourceVpcAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.ObjectValue, was: %T`, stateAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	return ItemsValue{
		AccepterVpc:    accepterVpcVal,
		ExpirationDate: expirationDateVal,
		Id:             idVal,
		SourceVpc:      sourceVpcVal,
		State:          stateVal,
		Tags:           tagsVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewItemsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ItemsValue {
	object, diags := NewItemsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewItemsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ItemsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewItemsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewItemsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewItemsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewItemsValueMust(ItemsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ItemsType) ValueType(ctx context.Context) attr.Value {
	return ItemsValue{}
}

var _ basetypes.ObjectValuable = ItemsValue{}

type ItemsValue struct {
	AccepterVpc    basetypes.ObjectValue `tfsdk:"accepter_vpc"`
	ExpirationDate basetypes.StringValue `tfsdk:"expiration_date"`
	Id             basetypes.StringValue `tfsdk:"id"`
	SourceVpc      basetypes.ObjectValue `tfsdk:"source_vpc"`
	State          basetypes.ObjectValue `tfsdk:"state"`
	Tags           basetypes.ListValue   `tfsdk:"tags"`
	state          attr.ValueState
}

func (v ItemsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["accepter_vpc"] = basetypes.ObjectType{
		AttrTypes: AccepterVpcValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["expiration_date"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["source_vpc"] = basetypes.ObjectType{
		AttrTypes: SourceVpcValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["state"] = basetypes.ObjectType{
		AttrTypes: StateValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["tags"] = basetypes.ListType{
		ElemType: TagsValue{}.Type(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.AccepterVpc.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["accepter_vpc"] = val

		val, err = v.ExpirationDate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["expiration_date"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.SourceVpc.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["source_vpc"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.Tags.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tags"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ItemsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ItemsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ItemsValue) String() string {
	return "ItemsValue"
}

func (v ItemsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var accepterVpc basetypes.ObjectValue

	if v.AccepterVpc.IsNull() {
		accepterVpc = types.ObjectNull(
			AccepterVpcValue{}.AttributeTypes(ctx),
		)
	}

	if v.AccepterVpc.IsUnknown() {
		accepterVpc = types.ObjectUnknown(
			AccepterVpcValue{}.AttributeTypes(ctx),
		)
	}

	if !v.AccepterVpc.IsNull() && !v.AccepterVpc.IsUnknown() {
		accepterVpc = types.ObjectValueMust(
			AccepterVpcValue{}.AttributeTypes(ctx),
			v.AccepterVpc.Attributes(),
		)
	}

	var sourceVpc basetypes.ObjectValue

	if v.SourceVpc.IsNull() {
		sourceVpc = types.ObjectNull(
			SourceVpcValue{}.AttributeTypes(ctx),
		)
	}

	if v.SourceVpc.IsUnknown() {
		sourceVpc = types.ObjectUnknown(
			SourceVpcValue{}.AttributeTypes(ctx),
		)
	}

	if !v.SourceVpc.IsNull() && !v.SourceVpc.IsUnknown() {
		sourceVpc = types.ObjectValueMust(
			SourceVpcValue{}.AttributeTypes(ctx),
			v.SourceVpc.Attributes(),
		)
	}

	var state basetypes.ObjectValue

	if v.State.IsNull() {
		state = types.ObjectNull(
			StateValue{}.AttributeTypes(ctx),
		)
	}

	if v.State.IsUnknown() {
		state = types.ObjectUnknown(
			StateValue{}.AttributeTypes(ctx),
		)
	}

	if !v.State.IsNull() && !v.State.IsUnknown() {
		state = types.ObjectValueMust(
			StateValue{}.AttributeTypes(ctx),
			v.State.Attributes(),
		)
	}

	tags := types.ListValueMust(
		TagsType{
			basetypes.ObjectType{
				AttrTypes: TagsValue{}.AttributeTypes(ctx),
			},
		},
		v.Tags.Elements(),
	)

	if v.Tags.IsNull() {
		tags = types.ListNull(
			TagsType{
				basetypes.ObjectType{
					AttrTypes: TagsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Tags.IsUnknown() {
		tags = types.ListUnknown(
			TagsType{
				basetypes.ObjectType{
					AttrTypes: TagsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"accepter_vpc": basetypes.ObjectType{
			AttrTypes: AccepterVpcValue{}.AttributeTypes(ctx),
		},
		"expiration_date": basetypes.StringType{},
		"id":              basetypes.StringType{},
		"source_vpc": basetypes.ObjectType{
			AttrTypes: SourceVpcValue{}.AttributeTypes(ctx),
		},
		"state": basetypes.ObjectType{
			AttrTypes: StateValue{}.AttributeTypes(ctx),
		},
		"tags": basetypes.ListType{
			ElemType: TagsValue{}.Type(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"accepter_vpc":    accepterVpc,
			"expiration_date": v.ExpirationDate,
			"id":              v.Id,
			"source_vpc":      sourceVpc,
			"state":           state,
			"tags":            tags,
		})

	return objVal, diags
}

func (v ItemsValue) Equal(o attr.Value) bool {
	other, ok := o.(ItemsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AccepterVpc.Equal(other.AccepterVpc) {
		return false
	}

	if !v.ExpirationDate.Equal(other.ExpirationDate) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.SourceVpc.Equal(other.SourceVpc) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.Tags.Equal(other.Tags) {
		return false
	}

	return true
}

func (v ItemsValue) Type(ctx context.Context) attr.Type {
	return ItemsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ItemsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"accepter_vpc": basetypes.ObjectType{
			AttrTypes: AccepterVpcValue{}.AttributeTypes(ctx),
		},
		"expiration_date": basetypes.StringType{},
		"id":              basetypes.StringType{},
		"source_vpc": basetypes.ObjectType{
			AttrTypes: SourceVpcValue{}.AttributeTypes(ctx),
		},
		"state": basetypes.ObjectType{
			AttrTypes: StateValue{}.AttributeTypes(ctx),
		},
		"tags": basetypes.ListType{
			ElemType: TagsValue{}.Type(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = AccepterVpcType{}

type AccepterVpcType struct {
	basetypes.ObjectType
}

func (t AccepterVpcType) Equal(o attr.Type) bool {
	other, ok := o.(AccepterVpcType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AccepterVpcType) String() string {
	return "AccepterVpcType"
}

func (t AccepterVpcType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	ipRangeAttribute, ok := attributes["ip_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_range is missing from object`)

		return nil, diags
	}

	ipRangeVal, ok := ipRangeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_range expected to be basetypes.StringValue, was: %T`, ipRangeAttribute))
	}

	vpcIdAttribute, ok := attributes["vpc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vpc_id is missing from object`)

		return nil, diags
	}

	vpcIdVal, ok := vpcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vpc_id expected to be basetypes.StringValue, was: %T`, vpcIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AccepterVpcValue{
		IpRange: ipRangeVal,
		VpcId:   vpcIdVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewAccepterVpcValueNull() AccepterVpcValue {
	return AccepterVpcValue{
		state: attr.ValueStateNull,
	}
}

func NewAccepterVpcValueUnknown() AccepterVpcValue {
	return AccepterVpcValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAccepterVpcValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AccepterVpcValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AccepterVpcValue Attribute Value",
				"While creating a AccepterVpcValue value, a missing attribute value was detected. "+
					"A AccepterVpcValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AccepterVpcValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AccepterVpcValue Attribute Type",
				"While creating a AccepterVpcValue value, an invalid attribute value was detected. "+
					"A AccepterVpcValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AccepterVpcValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AccepterVpcValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AccepterVpcValue Attribute Value",
				"While creating a AccepterVpcValue value, an extra attribute value was detected. "+
					"A AccepterVpcValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AccepterVpcValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAccepterVpcValueUnknown(), diags
	}

	ipRangeAttribute, ok := attributes["ip_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_range is missing from object`)

		return NewAccepterVpcValueUnknown(), diags
	}

	ipRangeVal, ok := ipRangeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_range expected to be basetypes.StringValue, was: %T`, ipRangeAttribute))
	}

	vpcIdAttribute, ok := attributes["vpc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vpc_id is missing from object`)

		return NewAccepterVpcValueUnknown(), diags
	}

	vpcIdVal, ok := vpcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vpc_id expected to be basetypes.StringValue, was: %T`, vpcIdAttribute))
	}

	if diags.HasError() {
		return NewAccepterVpcValueUnknown(), diags
	}

	return AccepterVpcValue{
		IpRange: ipRangeVal,
		VpcId:   vpcIdVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewAccepterVpcValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AccepterVpcValue {
	object, diags := NewAccepterVpcValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAccepterVpcValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AccepterVpcType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAccepterVpcValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAccepterVpcValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAccepterVpcValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAccepterVpcValueMust(AccepterVpcValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AccepterVpcType) ValueType(ctx context.Context) attr.Value {
	return AccepterVpcValue{}
}

var _ basetypes.ObjectValuable = AccepterVpcValue{}

type AccepterVpcValue struct {
	IpRange basetypes.StringValue `tfsdk:"ip_range"`
	VpcId   basetypes.StringValue `tfsdk:"vpc_id"`
	state   attr.ValueState
}

func (v AccepterVpcValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["ip_range"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vpc_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.IpRange.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_range"] = val

		val, err = v.VpcId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vpc_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AccepterVpcValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AccepterVpcValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AccepterVpcValue) String() string {
	return "AccepterVpcValue"
}

func (v AccepterVpcValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"ip_range": basetypes.StringType{},
		"vpc_id":   basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"ip_range": v.IpRange,
			"vpc_id":   v.VpcId,
		})

	return objVal, diags
}

func (v AccepterVpcValue) Equal(o attr.Value) bool {
	other, ok := o.(AccepterVpcValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IpRange.Equal(other.IpRange) {
		return false
	}

	if !v.VpcId.Equal(other.VpcId) {
		return false
	}

	return true
}

func (v AccepterVpcValue) Type(ctx context.Context) attr.Type {
	return AccepterVpcType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AccepterVpcValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"ip_range": basetypes.StringType{},
		"vpc_id":   basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SourceVpcType{}

type SourceVpcType struct {
	basetypes.ObjectType
}

func (t SourceVpcType) Equal(o attr.Type) bool {
	other, ok := o.(SourceVpcType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SourceVpcType) String() string {
	return "SourceVpcType"
}

func (t SourceVpcType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	ipRangeAttribute, ok := attributes["ip_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_range is missing from object`)

		return nil, diags
	}

	ipRangeVal, ok := ipRangeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_range expected to be basetypes.StringValue, was: %T`, ipRangeAttribute))
	}

	vpcIdAttribute, ok := attributes["vpc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vpc_id is missing from object`)

		return nil, diags
	}

	vpcIdVal, ok := vpcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vpc_id expected to be basetypes.StringValue, was: %T`, vpcIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SourceVpcValue{
		IpRange: ipRangeVal,
		VpcId:   vpcIdVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewSourceVpcValueNull() SourceVpcValue {
	return SourceVpcValue{
		state: attr.ValueStateNull,
	}
}

func NewSourceVpcValueUnknown() SourceVpcValue {
	return SourceVpcValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSourceVpcValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SourceVpcValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SourceVpcValue Attribute Value",
				"While creating a SourceVpcValue value, a missing attribute value was detected. "+
					"A SourceVpcValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SourceVpcValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SourceVpcValue Attribute Type",
				"While creating a SourceVpcValue value, an invalid attribute value was detected. "+
					"A SourceVpcValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SourceVpcValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SourceVpcValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SourceVpcValue Attribute Value",
				"While creating a SourceVpcValue value, an extra attribute value was detected. "+
					"A SourceVpcValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SourceVpcValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSourceVpcValueUnknown(), diags
	}

	ipRangeAttribute, ok := attributes["ip_range"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_range is missing from object`)

		return NewSourceVpcValueUnknown(), diags
	}

	ipRangeVal, ok := ipRangeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_range expected to be basetypes.StringValue, was: %T`, ipRangeAttribute))
	}

	vpcIdAttribute, ok := attributes["vpc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vpc_id is missing from object`)

		return NewSourceVpcValueUnknown(), diags
	}

	vpcIdVal, ok := vpcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vpc_id expected to be basetypes.StringValue, was: %T`, vpcIdAttribute))
	}

	if diags.HasError() {
		return NewSourceVpcValueUnknown(), diags
	}

	return SourceVpcValue{
		IpRange: ipRangeVal,
		VpcId:   vpcIdVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewSourceVpcValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SourceVpcValue {
	object, diags := NewSourceVpcValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSourceVpcValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SourceVpcType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSourceVpcValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSourceVpcValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSourceVpcValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSourceVpcValueMust(SourceVpcValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SourceVpcType) ValueType(ctx context.Context) attr.Value {
	return SourceVpcValue{}
}

var _ basetypes.ObjectValuable = SourceVpcValue{}

type SourceVpcValue struct {
	IpRange basetypes.StringValue `tfsdk:"ip_range"`
	VpcId   basetypes.StringValue `tfsdk:"vpc_id"`
	state   attr.ValueState
}

func (v SourceVpcValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["ip_range"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vpc_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.IpRange.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_range"] = val

		val, err = v.VpcId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vpc_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SourceVpcValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SourceVpcValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SourceVpcValue) String() string {
	return "SourceVpcValue"
}

func (v SourceVpcValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"ip_range": basetypes.StringType{},
		"vpc_id":   basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"ip_range": v.IpRange,
			"vpc_id":   v.VpcId,
		})

	return objVal, diags
}

func (v SourceVpcValue) Equal(o attr.Value) bool {
	other, ok := o.(SourceVpcValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IpRange.Equal(other.IpRange) {
		return false
	}

	if !v.VpcId.Equal(other.VpcId) {
		return false
	}

	return true
}

func (v SourceVpcValue) Type(ctx context.Context) attr.Type {
	return SourceVpcType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SourceVpcValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"ip_range": basetypes.StringType{},
		"vpc_id":   basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = StateType{}

type StateType struct {
	basetypes.ObjectType
}

func (t StateType) Equal(o attr.Type) bool {
	other, ok := o.(StateType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StateType) String() string {
	return "StateType"
}

func (t StateType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	messageAttribute, ok := attributes["message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`message is missing from object`)

		return nil, diags
	}

	messageVal, ok := messageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`message expected to be basetypes.StringValue, was: %T`, messageAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return StateValue{
		Message: messageVal,
		Name:    nameVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewStateValueNull() StateValue {
	return StateValue{
		state: attr.ValueStateNull,
	}
}

func NewStateValueUnknown() StateValue {
	return StateValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStateValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StateValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StateValue Attribute Value",
				"While creating a StateValue value, a missing attribute value was detected. "+
					"A StateValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StateValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StateValue Attribute Type",
				"While creating a StateValue value, an invalid attribute value was detected. "+
					"A StateValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StateValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StateValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StateValue Attribute Value",
				"While creating a StateValue value, an extra attribute value was detected. "+
					"A StateValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StateValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStateValueUnknown(), diags
	}

	messageAttribute, ok := attributes["message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`message is missing from object`)

		return NewStateValueUnknown(), diags
	}

	messageVal, ok := messageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`message expected to be basetypes.StringValue, was: %T`, messageAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewStateValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewStateValueUnknown(), diags
	}

	return StateValue{
		Message: messageVal,
		Name:    nameVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewStateValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StateValue {
	object, diags := NewStateValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStateValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StateType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStateValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStateValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStateValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStateValueMust(StateValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StateType) ValueType(ctx context.Context) attr.Value {
	return StateValue{}
}

var _ basetypes.ObjectValuable = StateValue{}

type StateValue struct {
	Message basetypes.StringValue `tfsdk:"message"`
	Name    basetypes.StringValue `tfsdk:"name"`
	state   attr.ValueState
}

func (v StateValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Message.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["message"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StateValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StateValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StateValue) String() string {
	return "StateValue"
}

func (v StateValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"message": basetypes.StringType{},
		"name":    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"message": v.Message,
			"name":    v.Name,
		})

	return objVal, diags
}

func (v StateValue) Equal(o attr.Value) bool {
	other, ok := o.(StateValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Message.Equal(other.Message) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v StateValue) Type(ctx context.Context) attr.Type {
	return StateType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StateValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"message": basetypes.StringType{},
		"name":    basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TagsType{}

type TagsType struct {
	basetypes.ObjectType
}

func (t TagsType) Equal(o attr.Type) bool {
	other, ok := o.(TagsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TagsType) String() string {
	return "TagsType"
}

func (t TagsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TagsValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewTagsValueNull() TagsValue {
	return TagsValue{
		state: attr.ValueStateNull,
	}
}

func NewTagsValueUnknown() TagsValue {
	return TagsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTagsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TagsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TagsValue Attribute Value",
				"While creating a TagsValue value, a missing attribute value was detected. "+
					"A TagsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TagsValue Attribute Type",
				"While creating a TagsValue value, an invalid attribute value was detected. "+
					"A TagsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TagsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TagsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TagsValue Attribute Value",
				"While creating a TagsValue value, an extra attribute value was detected. "+
					"A TagsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TagsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewTagsValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewTagsValueUnknown(), diags
	}

	return TagsValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewTagsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TagsValue {
	object, diags := NewTagsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTagsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TagsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTagsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTagsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTagsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTagsValueMust(TagsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TagsType) ValueType(ctx context.Context) attr.Value {
	return TagsValue{}
}

var _ basetypes.ObjectValuable = TagsValue{}

type TagsValue struct {
	Key   basetypes.StringValue `tfsdk:"key"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v TagsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TagsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TagsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TagsValue) String() string {
	return "TagsValue"
}

func (v TagsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"key":   v.Key,
			"value": v.Value,
		})

	return objVal, diags
}

func (v TagsValue) Equal(o attr.Value) bool {
	other, ok := o.(TagsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v TagsValue) Type(ctx context.Context) attr.Type {
	return TagsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TagsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}
