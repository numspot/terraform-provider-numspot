stages:
  - test
  - release

test:
  image: golang:1.20.10
  stage: test
  before_script:
    - go mod download
  variables:
    TF_ACC: "1"
    NUMSPOT_API_HOST: "https://numspot-services.integration.numspot.dev"
    NUMSPOT_IAM_HOST: "https://numspot-iaas.integration.numspot.dev"
    NUMSPOT_CLIENT_ID: "XX"
    NUMSPOT_CLIENT_SECRET: "XX"
  script:
    - go test ./...

lint:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  stage: test
  script:
    # Use default .golangci.yml file from the image if one is not present in the project root.
    - '[ -e .golangci.yml ] || cp /golangci/.golangci.yml .'
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
    - golangci-lint run --out-format code-climate:gl-code-quality-report.json,line-number --timeout 10m
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
